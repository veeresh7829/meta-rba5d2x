From c91cc592ac9bbb9f9a4d5f7f5516bba4ac67abac Mon Sep 17 00:00:00 2001
From: Ganesh K <ganesh.k@phytec.in>
Date: Mon, 24 Jun 2019 17:38:41 +0530
Subject: [PATCH 7/7] starting with a files

---
 src/a110x/CMakeLists.txt               |   9 -
 src/a110x/a110x.c                      |  82 -------
 src/a110x/a110x.cxx                    |  75 ------
 src/a110x/a110x.h                      |  97 --------
 src/a110x/a110x.hpp                    | 103 --------
 src/a110x/a110x.i                      |  18 --
 src/a110x/a110x.json                   |  72 ------
 src/a110x/a110x_fti.c                  |  74 ------
 src/abp/CMakeLists.txt                 |   8 -
 src/abp/abp.c                          | 144 -----------
 src/abp/abp.cxx                        |  70 ------
 src/abp/abp.h                          | 141 -----------
 src/abp/abp.hpp                        | 127 ----------
 src/abp/abp.i                          |  14 --
 src/abp/abp.json                       |  69 ------
 src/ad8232/CMakeLists.txt              |   9 -
 src/ad8232/ad8232.c                    |  83 -------
 src/ad8232/ad8232.cxx                  |  52 ----
 src/ad8232/ad8232.h                    |  82 -------
 src/ad8232/ad8232.hpp                  | 111 ---------
 src/ad8232/ad8232.json                 |  45 ----
 src/ad8232/ad8232_fti.c                |  92 -------
 src/adafruitms1438/CMakeLists.txt      |   5 -
 src/adafruitms1438/adafruitms1438.cxx  | 310 ------------------------
 src/adafruitms1438/adafruitms1438.hpp  | 255 --------------------
 src/adafruitms1438/adafruitms1438.json |  48 ----
 src/adafruitss/CMakeLists.txt          |   5 -
 src/adafruitss/adafruitss.cxx          | 155 ------------
 src/adafruitss/adafruitss.hpp          | 117 ---------
 src/adafruitss/adafruitss.json         |  47 ----
 src/adc121c021/CMakeLists.txt          |   5 -
 src/adc121c021/adc121c021.cxx          | 269 ---------------------
 src/adc121c021/adc121c021.hpp          | 314 ------------------------
 src/adc121c021/adc121c021.i            |  20 --
 src/adc121c021/adc121c021.json         |  47 ----
 src/adis16448/CMakeLists.txt           |   5 -
 src/adis16448/adis16448.cxx            | 247 -------------------
 src/adis16448/adis16448.hpp            | 173 --------------
 src/adis16448/adis16448.json           |  45 ----
 src/ads1x15/CMakeLists.txt             |   9 -
 src/ads1x15/ads1015.cxx                | 169 -------------
 src/ads1x15/ads1015.hpp                | 186 ---------------
 src/ads1x15/ads1115.cxx                | 103 --------
 src/ads1x15/ads1115.hpp                | 146 ------------
 src/ads1x15/ads1x15.cxx                | 188 ---------------
 src/ads1x15/ads1x15.hpp                | 424 ---------------------------------
 src/ads1x15/ads1x15.i                  |  35 ---
 src/ads1x15/ads1x15.json               |  87 -------
 src/adxl335/CMakeLists.txt             |   5 -
 src/adxl335/adxl335.cxx                | 121 ----------
 src/adxl335/adxl335.hpp                | 148 ------------
 src/adxl335/adxl335.i                  |  61 -----
 src/adxl335/adxl335.json               |  46 ----
 src/adxl345/CMakeLists.txt             |   5 -
 src/adxl345/adxl345.cxx                | 167 -------------
 src/adxl345/adxl345.hpp                | 111 ---------
 src/adxl345/adxl345.i                  |  73 ------
 src/adxl345/adxl345.json               |  46 ----
 src/adxrs610/CMakeLists.txt            |   5 -
 src/adxrs610/adxrs610.cxx              |  99 --------
 src/adxrs610/adxrs610.hpp              | 175 --------------
 src/adxrs610/adxrs610.json             |  46 ----
 src/am2315/CMakeLists.txt              |   5 -
 src/am2315/am2315.cpp                  | 318 -------------------------
 src/am2315/am2315.hpp                  | 201 ----------------
 src/am2315/am2315.json                 |  47 ----
 src/apa102/CMakeLists.txt              |   8 -
 src/apa102/apa102.c                    | 140 -----------
 src/apa102/apa102.cxx                  | 197 ---------------
 src/apa102/apa102.h                    | 133 -----------
 src/apa102/apa102.hpp                  | 175 --------------
 src/apa102/apa102.i                    |  52 ----
 src/apa102/apa102.json                 |  45 ----
 src/apa102/apa102_fti.c                |  67 ------
 src/apds9002/CMakeLists.txt            |   5 -
 src/apds9002/apds9002.cxx              |  51 ----
 src/apds9002/apds9002.hpp              |  79 ------
 src/apds9002/apds9002.json             |  61 -----
 src/apds9930/CMakeLists.txt            |   7 -
 src/apds9930/apds9930.cxx              |  84 -------
 src/apds9930/apds9930.hpp              |  93 --------
 src/apds9930/apds9930.json             |  45 ----
 src/at42qt1070/CMakeLists.txt          |   5 -
 src/at42qt1070/at42qt1070.cxx          | 260 --------------------
 src/at42qt1070/at42qt1070.hpp          | 314 ------------------------
 src/at42qt1070/at42qt1070.json         |  57 -----
 86 files changed, 8548 deletions(-)
 delete mode 100644 src/a110x/CMakeLists.txt
 delete mode 100644 src/a110x/a110x.c
 delete mode 100644 src/a110x/a110x.cxx
 delete mode 100644 src/a110x/a110x.h
 delete mode 100644 src/a110x/a110x.hpp
 delete mode 100644 src/a110x/a110x.i
 delete mode 100644 src/a110x/a110x.json
 delete mode 100644 src/a110x/a110x_fti.c
 delete mode 100644 src/abp/CMakeLists.txt
 delete mode 100644 src/abp/abp.c
 delete mode 100644 src/abp/abp.cxx
 delete mode 100644 src/abp/abp.h
 delete mode 100644 src/abp/abp.hpp
 delete mode 100644 src/abp/abp.i
 delete mode 100644 src/abp/abp.json
 delete mode 100644 src/ad8232/CMakeLists.txt
 delete mode 100644 src/ad8232/ad8232.c
 delete mode 100644 src/ad8232/ad8232.cxx
 delete mode 100644 src/ad8232/ad8232.h
 delete mode 100644 src/ad8232/ad8232.hpp
 delete mode 100644 src/ad8232/ad8232.json
 delete mode 100644 src/ad8232/ad8232_fti.c
 delete mode 100644 src/adafruitms1438/CMakeLists.txt
 delete mode 100644 src/adafruitms1438/adafruitms1438.cxx
 delete mode 100644 src/adafruitms1438/adafruitms1438.hpp
 delete mode 100644 src/adafruitms1438/adafruitms1438.json
 delete mode 100644 src/adafruitss/CMakeLists.txt
 delete mode 100644 src/adafruitss/adafruitss.cxx
 delete mode 100644 src/adafruitss/adafruitss.hpp
 delete mode 100644 src/adafruitss/adafruitss.json
 delete mode 100644 src/adc121c021/CMakeLists.txt
 delete mode 100644 src/adc121c021/adc121c021.cxx
 delete mode 100644 src/adc121c021/adc121c021.hpp
 delete mode 100644 src/adc121c021/adc121c021.i
 delete mode 100644 src/adc121c021/adc121c021.json
 delete mode 100644 src/adis16448/CMakeLists.txt
 delete mode 100644 src/adis16448/adis16448.cxx
 delete mode 100644 src/adis16448/adis16448.hpp
 delete mode 100644 src/adis16448/adis16448.json
 delete mode 100644 src/ads1x15/CMakeLists.txt
 delete mode 100644 src/ads1x15/ads1015.cxx
 delete mode 100644 src/ads1x15/ads1015.hpp
 delete mode 100644 src/ads1x15/ads1115.cxx
 delete mode 100644 src/ads1x15/ads1115.hpp
 delete mode 100644 src/ads1x15/ads1x15.cxx
 delete mode 100644 src/ads1x15/ads1x15.hpp
 delete mode 100644 src/ads1x15/ads1x15.i
 delete mode 100644 src/ads1x15/ads1x15.json
 delete mode 100644 src/adxl335/CMakeLists.txt
 delete mode 100644 src/adxl335/adxl335.cxx
 delete mode 100644 src/adxl335/adxl335.hpp
 delete mode 100644 src/adxl335/adxl335.i
 delete mode 100644 src/adxl335/adxl335.json
 delete mode 100644 src/adxl345/CMakeLists.txt
 delete mode 100644 src/adxl345/adxl345.cxx
 delete mode 100644 src/adxl345/adxl345.hpp
 delete mode 100644 src/adxl345/adxl345.i
 delete mode 100644 src/adxl345/adxl345.json
 delete mode 100644 src/adxrs610/CMakeLists.txt
 delete mode 100644 src/adxrs610/adxrs610.cxx
 delete mode 100644 src/adxrs610/adxrs610.hpp
 delete mode 100644 src/adxrs610/adxrs610.json
 delete mode 100644 src/am2315/CMakeLists.txt
 delete mode 100644 src/am2315/am2315.cpp
 delete mode 100644 src/am2315/am2315.hpp
 delete mode 100644 src/am2315/am2315.json
 delete mode 100644 src/apa102/CMakeLists.txt
 delete mode 100644 src/apa102/apa102.c
 delete mode 100644 src/apa102/apa102.cxx
 delete mode 100644 src/apa102/apa102.h
 delete mode 100644 src/apa102/apa102.hpp
 delete mode 100644 src/apa102/apa102.i
 delete mode 100644 src/apa102/apa102.json
 delete mode 100644 src/apa102/apa102_fti.c
 delete mode 100644 src/apds9002/CMakeLists.txt
 delete mode 100644 src/apds9002/apds9002.cxx
 delete mode 100644 src/apds9002/apds9002.hpp
 delete mode 100644 src/apds9002/apds9002.json
 delete mode 100644 src/apds9930/CMakeLists.txt
 delete mode 100644 src/apds9930/apds9930.cxx
 delete mode 100644 src/apds9930/apds9930.hpp
 delete mode 100644 src/apds9930/apds9930.json
 delete mode 100644 src/at42qt1070/CMakeLists.txt
 delete mode 100644 src/at42qt1070/at42qt1070.cxx
 delete mode 100644 src/at42qt1070/at42qt1070.hpp
 delete mode 100644 src/at42qt1070/at42qt1070.json

diff --git a/src/a110x/CMakeLists.txt b/src/a110x/CMakeLists.txt
deleted file mode 100644
index 6d06dc6..0000000
--- a/src/a110x/CMakeLists.txt
+++ /dev/null
@@ -1,9 +0,0 @@
-upm_mixed_module_init (NAME a110x
-    DESCRIPTION "Hall Effect Sensor"
-    C_HDR a110x.h
-    C_SRC a110x.c
-    CPP_HDR a110x.hpp
-    CPP_SRC a110x.cxx
-    FTI_SRC a110x_fti.c
-    CPP_WRAPS_C
-    REQUIRES mraa)
diff --git a/src/a110x/a110x.c b/src/a110x/a110x.c
deleted file mode 100644
index 2134d86..0000000
--- a/src/a110x/a110x.c
+++ /dev/null
@@ -1,82 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- *         Abhishek Malik <abhishek.malik@intel.com>
- * Copyright (c) 2016 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#include "a110x.h"
-
-a110x_context a110x_init(int pin) {
-    // make sure MRAA is initialized
-    int mraa_rv;
-    if ((mraa_rv = mraa_init()) != MRAA_SUCCESS)
-    {
-        printf("%s: mraa_init() failed (%d).\n", __FUNCTION__, mraa_rv);
-        return NULL;
-    }
-
-    a110x_context dev =
-      (a110x_context) malloc(sizeof(struct _a110x_context));
-
-    if (!dev)
-      {
-        return NULL;
-      }
-
-    dev->gpio_pin = pin;
-    dev->gpio = mraa_gpio_init(dev->gpio_pin);
-    if (mraa_gpio_dir(dev->gpio, MRAA_GPIO_IN) != MRAA_SUCCESS){
-        free(dev);
-        return NULL;
-    }
-    dev->isr_installed = false;
-    return dev;
-}
-
-void a110x_close(a110x_context dev){
-    free(dev);
-}
-
-upm_result_t a110x_magnet_detected(a110x_context dev, bool* res){
-    int val = mraa_gpio_read(dev->gpio);
-    if (val == 0)
-        *res = false;
-    else
-        *res = true;
-    return UPM_SUCCESS;
-}
-
-upm_result_t a110x_install_isr(a110x_context dev,
-                               mraa_gpio_edge_t edge_level,
-                               void (*isr)(void *), void *arg){
-    if (dev->isr_installed)
-        a110x_uninstall_isr(dev);
-
-    mraa_gpio_isr(dev->gpio, edge_level, isr, arg);
-    dev->isr_installed = true;
-    return UPM_SUCCESS;
-}
-
-upm_result_t a110x_uninstall_isr(a110x_context dev){
-    mraa_gpio_isr_exit(dev->gpio);
-    dev->isr_installed = false;
-    return UPM_SUCCESS;
-}
diff --git a/src/a110x/a110x.cxx b/src/a110x/a110x.cxx
deleted file mode 100644
index b0b063f..0000000
--- a/src/a110x/a110x.cxx
+++ /dev/null
@@ -1,75 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2014 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <iostream>
-#include <string>
-#include <stdexcept>
-
-#include "a110x.hpp"
-
-using namespace upm;
-using namespace std;
-
-A110X::A110X(int pin)
-{
-  if ( !(m_gpio = mraa_gpio_init(pin)) )
-    {
-      throw std::invalid_argument(std::string(__FUNCTION__) +
-                                  ": mraa_gpio_init() failed, invalid pin?");
-      return;
-    }
-
-  mraa_gpio_dir(m_gpio, MRAA_GPIO_IN);
-  m_isrInstalled = false;
-}
-
-A110X::~A110X()
-{
-  if (m_isrInstalled)
-    uninstallISR();
-
-  mraa_gpio_close(m_gpio);
-}
-
-bool A110X::magnetDetected()
-{
-  return (!mraa_gpio_read(m_gpio) ? true : false);
-}
-
-void A110X::installISR(void (*isr)(void *), void *arg)
-{
-  if (m_isrInstalled)
-    uninstallISR();
-
-  // install our interrupt handler
-  mraa_gpio_isr(m_gpio, MRAA_GPIO_EDGE_BOTH, 
-                isr, arg);
-  m_isrInstalled = true;
-}
-
-void A110X::uninstallISR()
-{
-  mraa_gpio_isr_exit(m_gpio);
-  m_isrInstalled = false;
-}
diff --git a/src/a110x/a110x.h b/src/a110x/a110x.h
deleted file mode 100644
index c5e35e7..0000000
--- a/src/a110x/a110x.h
+++ /dev/null
@@ -1,97 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- *         Abhishek Malik <abhishek.malik@intel.com>
- * Copyright (c) 2016 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#ifndef A110X_A110X_H_
-#define A110X_A110X_H_
-
-#include <stdlib.h>
-#include <unistd.h>
-#include <string.h>
-
-#include "upm.h"
-#include "mraa/gpio.h"
-
-/**
- * @file a110x.h
- * @library a110x
- * @brief C API for the A110X Hall Effect sensors
- *
- * @include a110x.c
- */
-
-/**
- * device context
- */
-typedef struct _a110x_context {
-    mraa_gpio_context      gpio;
-    int                    gpio_pin;
-    bool                   isr_installed;
-} *a110x_context;
-
-/**
- * A110X Initialization function
- *
- * @param pin GPIO pin to use
- * @return device context pointer
- */
-a110x_context a110x_init(int pin);
-
-/**
- * A110X Initialization function
- *
- * @param dev a110x_context pointer
- */
-void a110x_close(a110x_context dev);
-
-/**
- * Determines whether a magnetic field of south polarity has been detected
- *
- * @param dev a110x_context pointer
- * @param bool* to note the response
- * @return upm_result_t UPM success/error code
- */
-upm_result_t a110x_magnet_detected(a110x_context dev, bool* res);
-
-/**
- * Installs an interrupt service routine (ISR) to be called when
- * the appropriate magnetic field is detected
- *
- * @param dev a110x_context pointer
- * @param mraa_gpio_edge_t edge trigger level
- * @param isr ISR callback function
- * @return upm_result_t UPM success/error code
- */
-upm_result_t a110x_install_isr(a110x_context dev,
-                               mraa_gpio_edge_t edge_level,
-                               void (*isr)(void *), void *arg);
-
-/**
- * Uninstalls the previously installed ISR
- *
- * @param dev a110x_context pointer
- * @return upm_result_t UPM success/error code
- */
-upm_result_t a110x_uninstall_isr(a110x_context dev);
-
-#endif /* A110X_A110X_H_ */
diff --git a/src/a110x/a110x.hpp b/src/a110x/a110x.hpp
deleted file mode 100644
index 71a0d78..0000000
--- a/src/a110x/a110x.hpp
+++ /dev/null
@@ -1,103 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2014 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#pragma once
-
-#include <string>
-#include <mraa/gpio.h>
-
-namespace upm {
-  /**
-   * @brief A110X Hall Effect Sensors
-   * @defgroup a110x libupm-a110x
-   * @ingroup seeed gpio electric robok
-   */
-
-  /**
-   * @library a110x
-   * @sensor a110x
-   * @comname Hall Effect Sensor
-   * @altname Grove Hall Sensor
-   * @altid A1101, A1102, A1103, A1004, A1106
-   * @type electric
-   * @man seeed
-   * @web http://www.allegromicro.com/en/Products/Magnetic-Digital-Position-Sensor-ICs/Hall-Effect-Unipolar-Switches/A1101-2-3-4-6.aspx
-   * @con gpio
-   * @kit robok
-   *
-   * @brief API for the A110X Hall Effect sensors
-   *
-   * UPM module for the A110X (A1101, A1102, A1103, A1104, and A1106)
-   * Hall Effect sensors.  It outputs a digital signal indicating
-   * whether it is detecting a magnetic field with south polarity
-   * perpendicular to the sensor element.
-   *
-   * @image html a110x.jpg
-   * An example showing a simple test for the presence of a field
-   * @snippet a110x.cxx Interesting
-   * An example demonstrating the use of an interrupt handler to count pulses
-   * @snippet a110x-intr.cxx Interesting
-   */
-  class A110X {
-  public:
-    /**
-     * A110x digital sensor constructor
-     *
-     * @param pin Digital pin to use
-     */
-    A110X(int pin);
-    /**
-     * A110X destructor
-     */
-    ~A110X();
-    /**
-     * Determines whether a magnetic field of south polarity has been detected
-     *
-     * @return True if magnetic field detected
-     */
-    bool magnetDetected();
-
-    /**
-     * Installs an interrupt service routine (ISR) to be called when
-     * the appropriate magnetic field is detected
-     *
-     * @param isr Pointer to a function to be called on interrupt
-     * @param arg Pointer to an object to be supplied as an
-     * argument to the ISR.
-     */
-    void installISR(void (*isr)(void *), void *arg);
-
-    /**
-     * Uninstalls the previously installed ISR
-     *
-     */
-    void uninstallISR();
-
-  private:
-
-    bool m_isrInstalled;
-    mraa_gpio_context m_gpio;
-  };
-}
-
-
diff --git a/src/a110x/a110x.i b/src/a110x/a110x.i
deleted file mode 100644
index cc29262..0000000
--- a/src/a110x/a110x.i
+++ /dev/null
@@ -1,18 +0,0 @@
-%include "../common_top.i"
-
-/* BEGIN Java syntax  ------------------------------------------------------- */
-#ifdef SWIGJAVA
-/* Macro for loading javaupm_a110x */
-JAVA_JNI_LOADLIBRARY(javaupm_a110x)
-
-/* Macro adding an installisr call w/JAVA runnable to A110X */
-JAVA_ADD_INSTALLISR(upm::A110X)
-#endif
-/* END Java syntax */
-
-/* BEGIN Common SWIG syntax ------------------------------------------------- */
-%{
-#include "a110x.hpp"
-%}
-%include "a110x.hpp"
-/* END Common SWIG syntax */
diff --git a/src/a110x/a110x.json b/src/a110x/a110x.json
deleted file mode 100644
index 48d8649..0000000
--- a/src/a110x/a110x.json
+++ /dev/null
@@ -1,72 +0,0 @@
-{
-    "Library": "a110x",
-    "Description": "A110X Hall Effect Library",
-    "Sensor Class":
-    {
-        "A110X":
-        {
-            "Name": "API for the A110X Hall Effect Sensors",
-            "Description": "UPM module for the A110X (A1101, A1102, A1103, A1104, and A1106) Hall Effect sensors. It outputs a digital signal indicating whether it is detecting a magnetic field with south polarity perpendicular to the sensor element.",
-            "Aliases": ["a1101", "a1102", "a1103", "a1104", "a1106"],
-            "Categories": ["halleffect"],
-            "Connections": ["gpio"],
-            "Project Type": ["prototyping", "industrial"],
-            "Manufacturers": ["seeed"],
-            "Kits": ["robok"],
-            "Image": "a110x.jpg",
-            "Examples":
-            {
-                "Java": ["A110X_Example.java", "A110X_intr_Example.java"],
-                "Python": ["a110x.py"],
-                "Node.js": ["a110x.js"],
-                "C++": ["a110x-intr.cxx", "a110x.cxx"],
-                "C": ["a110x.c"]
-            },
-            "Specifications":
-            {
-                "Vcc": {"unit": "V", "low" : 3.8, "high": 24},
-                "Ioutoff" : {"unit": "uA", "low" : 0.0, "high": 10},
-                "Supply Current": {"unit": "mA", "low": 3.8, "high": 7.5},
-                "a1101" : {
-                    "Operate Point": {"unit": "G", "low": 50, "high": 160},
-                    "Release Point": {"unit": "G", "low": 10, "high": 130},
-                    "Hysteresis": {"unit": "G", "low": 20, "high": 80}
-                },
-                "a1102" : {
-                     "Operate Point": {"unit": "G", "low": 130, "high": 230},
-                     "Release Point": {"unit": "G", "low": 75, "high": 175},
-                     "Hysteresis": {"unit": "G", "low": 30, "high": 80}
-                },
-                "a1103" : {
-                    "Operate Point": {"unit": "G", "low": 220, "high": 340},
-                    "Release Point": {"unit": "G", "low": 165, "high": 285},
-                    "Hysteresis": {"unit": "G", "low": 30, "high": 80}
-                },
-                "a1104" : {
-                    "Operate Point": {"unit": "G", "low": 70, "high": 350},
-                    "Release Point": {"unit": "G", "low": 50, "high": 330},
-                    "Hysteresis": {"unit": "G", "low": 20}
-                },
-                "a1106" : {
-                    "Operate Point": {"unit": "G", "low": 280, "high": 400},
-                    "Release Point": {"unit": "G", "low": 180, "high": 300},
-                    "Hysteresis": {"unit": "G", "low": 70, "high": 140}
-                }
-            },
-            "Platforms":
-            {
-                "Intel Joule Module":
-                {
-                    "Notes": ["Requires pull-up resistors with carrier board"],
-                    "Images": [""]
-                }
-            },
-            "Urls" :
-            {
-                "Product Pages": ["https://www.seeedstudio.com/grove-hall-sensor-p-965.html"],
-                "Datasheets": ["http://www.allegromicro.com/en/Products/Part_Numbers/1101/1101.pdf"],
-                "Schematics": ["https://learn.adafruit.com/assets/26693"]
-            }
-        }
-    }
-}
diff --git a/src/a110x/a110x_fti.c b/src/a110x/a110x_fti.c
deleted file mode 100644
index 625363f..0000000
--- a/src/a110x/a110x_fti.c
+++ /dev/null
@@ -1,74 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- *         Abhishek Malik <abhishek.malik@intel.com>
- * Copyright (c) 2016 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#include "a110x.h"
-#include "upm_fti.h"
-
-/**
- * This file implements the Function Table Interface (FTI) for this sensor
- */
-
-const char upm_a110x_name[] = "A110X";
-const char upm_a110x_description[] = "A110X Hall Effect Sensor";
-const upm_protocol_t upm_a110x_protocol[] = {UPM_GPIO};
-const upm_sensor_t upm_a110x_category[] = {UPM_ELECTRICITY};
-
-// forward declarations
-const upm_sensor_descriptor_t upm_a110x_get_descriptor();
-const void* upm_a110x_get_ft(upm_sensor_t sensor_type);
-void* upm_a110x_init_name();
-void upm_a110x_close(void* dev);
-
-static const upm_sensor_ft ft =
-{
-    .upm_sensor_init_name = &upm_a110x_init_name,
-    .upm_sensor_close = &upm_a110x_close,
-    .upm_sensor_get_descriptor = &upm_a110x_get_descriptor
-};
-
-const void* upm_a110x_get_ft(upm_sensor_t sensor_type){
-    if (sensor_type == UPM_SENSOR){
-        return &ft;
-    }
-    return NULL;
-}
-
-const upm_sensor_descriptor_t upm_a110x_get_descriptor(){
-    upm_sensor_descriptor_t usd;
-    usd.name = upm_a110x_name;
-    usd.description = upm_a110x_description;
-    usd.protocol_size = 1;
-    usd.protocol = upm_a110x_protocol;
-    usd.category_size = 1;
-    usd.category = upm_a110x_category;
-    return usd;
-}
-
-void* upm_a110x_init_name(){
-    return NULL;
-}
-
-void upm_a110x_close(void* dev){
-    a110x_close((a110x_context)dev);
-}
diff --git a/src/abp/CMakeLists.txt b/src/abp/CMakeLists.txt
deleted file mode 100644
index 486c16d..0000000
--- a/src/abp/CMakeLists.txt
+++ /dev/null
@@ -1,8 +0,0 @@
-upm_mixed_module_init (NAME abp
-    DESCRIPTION "Honeywell ABP Pressure Sensor"
-    C_HDR abp.h
-    C_SRC abp.c
-    CPP_HDR abp.hpp
-    CPP_SRC abp.cxx
-    CPP_WRAPS_C
-    REQUIRES mraa)
diff --git a/src/abp/abp.c b/src/abp/abp.c
deleted file mode 100644
index f9239a0..0000000
--- a/src/abp/abp.c
+++ /dev/null
@@ -1,144 +0,0 @@
-/*
- * Author: Abhishek Malik <abhishek.malik@intel.com>
- * Copyright (c) 2017 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#include "abp.h"
- 
-abp_context abp_init(int bus, uint8_t dev_address){
-    // make sure MRAA is initialized
-    int mraa_rv;
-    if ((mraa_rv = mraa_init()) != MRAA_SUCCESS)
-    {
-        printf("%s: mraa_init() failed (%d).\n", __FUNCTION__, mraa_rv);
-        return NULL;
-    }
-
-    abp_context dev =
-      (abp_context) malloc(sizeof(struct _abp_context));
-
-    if (!dev)
-    {
-        return NULL;
-    }
-
-    // initialize the I2C bus
-    dev->i2c_bus_number = bus;
-    dev->address = dev_address;
-
-    dev->i2c = mraa_i2c_init(dev->i2c_bus_number);
-    if (dev->i2c == NULL){
-        free(dev);
-        return NULL;
-    }
-
-    if (mraa_i2c_address(dev->i2c, dev->address) != MRAA_SUCCESS)
-    {
-        mraa_i2c_stop(dev->i2c);
-        free(dev);
-        return NULL;
-    }
-
-    // setting up defaults
-    dev->abp_pressure_max = 5;
-    dev->abp_pressure_min = 0;
-
-    return dev;
-}
-
-void abp_close(abp_context dev){
-    free(dev);
-}
-
-void abp_set_max_pressure(abp_context dev, int max) {
-    dev->abp_pressure_max = max;
-}
-
-void abp_set_min_pressure(abp_context dev, int min) {
-    dev->abp_pressure_min = min;
-}
-
-upm_result_t abp_update(abp_context dev) {
-    int ret;
-
-    // the first 4 bytes are of interest to us
-    ret = mraa_i2c_read(dev->i2c, dev->readings, 4);
-    if (ret == -1)
-        return UPM_ERROR_OPERATION_FAILED;
-
-    // the two MSBs are status bits
-    //   S1    S0    Status
-    //    0     0    Normal operation, valid data
-    //    0     1    Device in command mode
-    //    1     0    Stale Data
-    //    1     1    Diagnostic condition
-    uint8_t status = (dev->readings[0] >> 6) & 0x03;
-    if(status == 1) {
-        dev->status = COMMAND_MODE;
-        return UPM_ERROR_UNSPECIFIED;
-    } else if(status == 2) {
-        dev->status = STALE_DATA;
-        return UPM_ERROR_UNSPECIFIED;
-    } else if(status == 3) {
-        dev->status = DIAGNOSTIC;        
-        return UPM_ERROR_UNSPECIFIED;
-    } else
-        dev->status = NORMAL_OPERATION;
-
-    return UPM_SUCCESS;
-}
-
-float abp_get_pressure(abp_context dev) {
-    float pressure_comp;
-
-    if(dev->status != NORMAL_OPERATION) {
-        printf("Error: Data might not be correct\n");
-    }
-    int output = (dev->readings[0]&ABP_PRESSURE_HIGH_BYTE_MASK)*256 + dev->readings[1];
-
-    // Formula as per the data sheet
-    // output(% of 2^14 counts) = (((output(90% counts) - output(10% counts))/Pmax - Pmin)*(Papplied - Pmin)) + output(10% count)
-    // based on the formula we can calculate the pressure
-    // Papplied = ((output(counts) - output(10% count))*(Pmax - Pmin))/(output(90% counts) - output(10% counts)) + Pmin
-    pressure_comp = ((((float)output - OUTPUT_10_PERCENT_COUNT)*
-                       (dev->abp_pressure_max - dev->abp_pressure_min))/
-                       (OUTPUT_90_PERCENT_COUNT - OUTPUT_10_PERCENT_COUNT)) + 
-                       dev->abp_pressure_min;
-
-    return pressure_comp;
-}
-
-float abp_get_temperature(abp_context dev) {
-    float temp_comp;
-
-    if(dev->status != NORMAL_OPERATION) {
-        printf("Error: Data might not be correct\n");
-    }
-
-    int output = (((dev->readings[2] << 8)|(dev->readings[3])) >> 
-                        ABP_TEMPERATURE_LOW_BYTE_SHIFT)&ABP_TEMPERATURE_MASK;
-
-    // Formula as per datasheet:
-    // Temperature(C) = ((Output(decimal)/2047)*200) - 50
-    temp_comp = (((float)output/2047)*200) - 50;
-
-    return temp_comp;
-}
diff --git a/src/abp/abp.cxx b/src/abp/abp.cxx
deleted file mode 100644
index b8d7b13..0000000
--- a/src/abp/abp.cxx
+++ /dev/null
@@ -1,70 +0,0 @@
-/*
- * Author: Abhishek Malik <abhishek.malik@intel.com>
- * Copyright (c) 2017 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <iostream>
-#include <string>
-#include <stdexcept>
-
-#include "abp.hpp"
-
-using namespace upm;
-
-ABP::ABP(int bus, int devAddress) :
-    m_abp(abp_init(bus, devAddress))
-{
-    if(!m_abp)
-        throw std::runtime_error(std::string(__FUNCTION__) +
-                                ": abp_init failed");
-}
-
-ABP::~ABP()
-{
-    abp_close(m_abp);
-}
-
-void ABP::update()
-{
-    if(abp_update(m_abp) != UPM_SUCCESS)
-        std::cout << " ABP sensor unable to update data" << std::endl;
-}
-
-float ABP::getPressure()
-{
-    return abp_get_pressure(m_abp);
-}
-
-float ABP::getTemperature()
-{
-    return abp_get_temperature(m_abp);
-}
-
-void ABP::setMaxPressure(int max)
-{
-    abp_set_max_pressure(m_abp, max);
-}
-
-void ABP::setMinPressure(int min)
-{
-    abp_set_min_pressure(m_abp, min);
-}
diff --git a/src/abp/abp.h b/src/abp/abp.h
deleted file mode 100644
index 54b646d..0000000
--- a/src/abp/abp.h
+++ /dev/null
@@ -1,141 +0,0 @@
-/*
- * Author: Abhishek Malik <abhishek.malik@intel.com>
- * Copyright (c) 2017 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#pragma once
-
-#include <stdlib.h>
-#include <unistd.h>
-#include <stdio.h>
-#include <string.h>
-
-#include "upm.h"
-#include "mraa/i2c.h"
-
-#ifdef __cplusplus
-extern "C" {
-#endif
-
-#define ABP_DEFAULT_ADDRESS             0x28
-#define OUTPUT_10_PERCENT_COUNT         1638
-#define OUTPUT_90_PERCENT_COUNT         14746
-#define ABP_PRESSURE_MAX                5
-#define ABP_PRESSURE_MIN                0
-#define ABP_PRESSURE_HIGH_BYTE_MASK     0x3f
-#define ABP_TEMPERATURE_LOW_BYTE_SHIFT  5
-#define ABP_TEMPERATURE_MASK            0x7ff
-
-typedef enum {
-    NORMAL_OPERATION = 0,
-    COMMAND_MODE,
-    STALE_DATA,
-    DIAGNOSTIC } ABP_STATUS;
-
-/**
- * @file abp.h
- * @library abp
- * @brief C API for the ABP Honeywell Pressure Sensor
- *
- * @include abp.c
- */
- 
-typedef struct _abp_context {
-    mraa_i2c_context       i2c;
-    int                    i2c_bus_number;
-    uint8_t                address;
-    int                    abp_pressure_max;
-    int                    abp_pressure_min;
-    uint8_t                readings[4];
-    ABP_STATUS             status;
-} *abp_context;
-
-/**
- * ABP Initialization function
- *
- * @param bus I2C bus to use
- * @return device context pointer
- */
-abp_context abp_init(int bus, uint8_t dev_address);
-
-/**
- * ABP Close function
- *
- * @param dev abp_context pointer
- */
-void abp_close(abp_context dev);
-
-/**
- * Function to get the compensated pressure.
- * The datasheet provides a way to calculate the pressure.
- * In order to know the units take a look at the datasheet.
- *
- * @param dev abp_context pointer
- * @return float compensated pressure value
- */
-float abp_get_pressure(abp_context dev);
-
-/**
- * Function to retrieve the compensated temperature values.
- * All ABP seem to calculate temperature in degree Celsius.
- * (The above fact needs to be verified)
- * NOTE: This functionality is not available in all the ABP sensors.
- *
- * @param dev abp_context pointer
- * @return float compensated temperature value
- */
-float abp_get_temperature(abp_context dev);
-
-/**
- * Function to set the max pressure that the sensor
- * can read, can be retrieved from the datasheet, if this function is
- * not explicitly called to the set the max value, then a default max
- * value of 5 will be set.
- *
- * @param dev abp_context pointer
- * @param max int maximum pressure value possible
- */
-void abp_set_max_pressure(abp_context dev, int max);
-
-/**
- * Function to set the min pressure that the sensor
- * can read, can be retrieved from the datasheet, if this function is
- * not explicitly called to the set the min value, then a default min
- * value of 5 will be set.
- *
- * @param dev abp_context pointer
- * @param min int minimum pressure value possible
- */
-void abp_set_min_pressure(abp_context dev, int min);
-
-/**
- * This function has to be called before calling either of the get
- * temperature or get pressure functions. This function updates the
- * device context with the latest values. Not calling this function
- * will lead to stale values.
- *
- * @param dev abp_context pointer
- */
-upm_result_t abp_update(abp_context dev);
-
-#ifdef __cplusplus
-}
-#endif
diff --git a/src/abp/abp.hpp b/src/abp/abp.hpp
deleted file mode 100644
index f1c407e..0000000
--- a/src/abp/abp.hpp
+++ /dev/null
@@ -1,127 +0,0 @@
-/*
- * Author: Abhishek Malik <abhishek.malik@intel.com>
- * Copyright (c) 2017 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
- 
-#pragma once
-
-#include "abp.h"
-
-namespace upm {
-/**
- * @brief Honeywell ABP Pressure Sensors
- * @defgroup abp libupm-abp
- * @ingroup honeywell i2c
- */
-
-/**
- * @library abp
- * @sensor abp
- * @comname Honeywell ABP Pressure and Temperature Sensor
- * @type other
- * @man Honeywell
- * @web https://sensing.honeywell.com/honeywell-sensing-basic-board-mount-pressure-sensors-abp-series-datasheet-323005128-c-en.pdf
- * @con i2c
- * @kit other
- *
- * @brief API for the ABP Honeywell Pressure Sensor
- *
- * This is the UPM Module for the ABP Honeywell Pressure and Temp
- * sensor. This sensor uses an onboard ASIC to output values
- * of pressure that are updated at approximately 2 KHz. It is capable
- * of detecting pressure in the 0-5 psi range and it has an i2c
- * based interface. Temperature calculation using this driver is possible
- * but not all ABP sensors support that functionality.
- *
- * NOTE: This driver supports only the I2C based ABP sensors, it does
- * not currently support SPI and Analog based sensors.
- *
- * @image html abp.jpg
- * @snippet abp.cxx Interesting
- */
-
-    class ABP {
-
-    public:
-        /**
-         * ABP constructor
-         *
-         * @param bus i2c bus to be used
-         * @param devAddress i2c address of the sensor
-         */
-        ABP(int bus, int devAddress);
-        /**
-         * ABP destructor
-         */
-        ~ABP();
-        /**
-         * Function to get the compensated pressure.
-         * The datasheet provides a way to calculate the pressure.
-         * In order to know the units take a look at the datasheet.
-         *
-         * @return float compensated temperature value
-         */
-        float getPressure();
-
-        /**
-         * Function to retrieve the compensated temperature values.
-         * All ABP seem to calculate temperature in degree Celsius.
-         * (The above fact needs to be verified)
-         * NOTE: This functionality is not available in all the ABP sensors.
-         *
-         * @return float compensated temperature value
-         */
-        float getTemperature();
-
-         /**
-          * This functio has to be called before calling either of the get
-          * temperature or get pressure functions. This function updates the
-          * device context with the latest values. Not calling this function
-          * will lead to stale values.
-          */
-        void update();
-
-        /**
-         * Function to set the max pressure that the sensor
-         * can read, can be retrieved from the datasheet, if this function is
-         * not explicitly called to the set the min value, then a default max
-         * value of 5 will be set.
-         *
-         * @param max int maximum pressure value possible
-         */
-        void setMaxPressure(int max);
-
-        /**
-         * Function to set the min pressure that the sensor
-         * can read, can be retrieved from the datasheet, if this function is
-         * not explicitly called to the set the min value, then a default min
-         * value of 0 will be set.
-         *
-         * @param min int minimum pressure value possible
-         */
-        void setMinPressure(int min);
-    private:
-        abp_context m_abp;
-        ABP(const ABP& src) { /* do not create copied constructor */}
-        ABP& operator=(const ABP&) {return *this;}
-    };
-}
\ No newline at end of file
diff --git a/src/abp/abp.i b/src/abp/abp.i
deleted file mode 100644
index cc094b2..0000000
--- a/src/abp/abp.i
+++ /dev/null
@@ -1,14 +0,0 @@
-%include "../common_top.i"
-
-/* BEGIN Java syntax  ------------------------------------------------------- */
-#ifdef SWIGJAVA
-JAVA_JNI_LOADLIBRARY(javaupm_abp)
-#endif
-/* END Java syntax */
-
-/* BEGIN Common SWIG syntax ------------------------------------------------- */
-%{
-#include "abp.hpp"
-%}
-%include "abp.hpp"
-/* END Common SWIG syntax */
diff --git a/src/abp/abp.json b/src/abp/abp.json
deleted file mode 100644
index d2185ba..0000000
--- a/src/abp/abp.json
+++ /dev/null
@@ -1,69 +0,0 @@
-{
-    "Library": "abp",
-    "Description": "Honeywell Basic Amplified Board mount Pressure(ABP) Sensor Library",
-    "Sensor Class":
-    {
-        "ABP":
-        {
-            "Name": "Honeywell ABP Pressure and Temperature Sensors",
-            "Description": "This is the UPM Module for the ABP Honeywell Pressure and Temp sensor. This sensor uses an onboard ASIC to output values of pressure that are updated at approximately 2 KHz. It is capable of detecting pressure in the 0-5 psi range and it has an i2c based interface. Temperature calculation using this driver is possible but not all ABP sensors support that functionality.",
-            "Aliases": ["abp"],
-            "Categories": ["pressure", "temperature"],
-            "Connections": ["i2c"],
-            "Project Type": ["medical", "industrial", "commercial"],
-            "Manufacturers": ["honeywell"],
-            "Examples":
-            {
-                "Python": ["abp.py"],
-                "Node.js": ["abp.js"],
-                "C++": ["abp.cxx"],
-                "C": ["abp.c"]
-            },
-            "Specifications":
-            {
-                "Vsupply": {"unit": "Vdc", "min" : -0.3, "max": 6.0},
-                "Supply Current Digital" : {
-                    "3.3 Vdc" : {"unit": "mA", "min" : "0.0", "max": "3.9"},
-                    "5.0 Vdc" : {"unit": "mA", "min" : "0.0", "max": "4.6"},
-                    "Sleep Mode" : {"unit": "uA", "min" : "0.0", "max": "10"}
-                },
-                "Operating Temperature": {"unit": "°C", "min" : -40, "max": 85},
-                "Start up Time Digital": {"unit": "ms", "time" : 3},
-                "Response Time Digital": {"unit": "ms", "time" : 0.46},
-                "Compensated Temperature Range" : {"unit": "°C", "min" : 0, "max" : 50},
-                "Pressure Range" : {
-                    "Differential" : [
-                        {"unit" : "mbar", "min" : 60, "max" : 4000},
-                        {"unit" : "kPa", "min" : 6, "max" : 400},
-                        {"unit" : "psi", "min" : 1, "max" : 60}
-                    ],
-                    "Gage" : [
-                        {"unit" : "mbar", "min" : 0, "max" : 10000},
-                        {"unit" : "kPa", "min" : 0, "max" : 1000},
-                        {"unit" : "psi", "min" : 0, "max" : 150}
-                    ]
-                }
-            },
-            "Platforms":
-            {
-                "Intel Joule Module":
-                {
-                    "Notes": ["Might need pull up resistors"]
-                },
-                "Intel Edison":
-                {
-                    "Notes": ["Might need pull up resistors"]
-                },
-                "Arduino 101":
-                {
-                    "Notes": ["Might need pull up resistors"]
-                }
-            },
-            "Urls" :
-            {
-                "Product Pages": ["https://sensing.honeywell.com/sensors/amplified-board-mount-pressure-sensors/basic-abp-series"],
-                "Datasheets": ["https://sensing.honeywell.com/honeywell-sensing-basic-board-mount-pressure-abp-series-datasheet-2305128-e-en.pdf"]
-            }
-        }
-    }
-}
\ No newline at end of file
diff --git a/src/ad8232/CMakeLists.txt b/src/ad8232/CMakeLists.txt
deleted file mode 100644
index b571bf6..0000000
--- a/src/ad8232/CMakeLists.txt
+++ /dev/null
@@ -1,9 +0,0 @@
-upm_mixed_module_init (NAME ad8232
-    DESCRIPTION "Single Lead Heart Rate Monitor"
-    C_HDR ad8232.h
-    C_SRC ad8232.c
-    CPP_HDR ad8232.hpp
-    CPP_SRC ad8232.cxx
-    FTI_SRC ad8232_fti.c
-    CPP_WRAPS_C
-    REQUIRES mraa)
diff --git a/src/ad8232/ad8232.c b/src/ad8232/ad8232.c
deleted file mode 100644
index 8453721..0000000
--- a/src/ad8232/ad8232.c
+++ /dev/null
@@ -1,83 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- *         Abhishek Malik <abhishek.malik@intel.com>
- * Copyright (c) 2016 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include "ad8232.h"
-
-ad8232_context ad8232_init(int lo_plus, int lo_minus, int output,
-                           float a_ref) {
-    ad8232_context dev =
-      (ad8232_context) malloc(sizeof(struct _ad8232_context));
-
-    if(dev == NULL){
-        printf("Unable to assign memory to the Heart Rate Monitor structure");
-        return NULL;
-    }
-
-    dev->aio = mraa_aio_init(output);
-    dev->gpio_lo_plus = mraa_gpio_init(lo_plus);
-    dev->gpio_lo_minus = mraa_gpio_init(lo_minus);
-
-    if (dev->aio == NULL || dev->gpio_lo_minus == NULL ||
-        dev->gpio_lo_plus == NULL){
-        printf("The pins did not initialize correctly");
-        return NULL;
-    }
-
-    if (mraa_gpio_dir(dev->gpio_lo_minus, MRAA_GPIO_IN) != MRAA_SUCCESS ||
-        mraa_gpio_dir(dev->gpio_lo_plus, MRAA_GPIO_IN) != MRAA_SUCCESS){
-        printf("Couldn't set the direction for the GPIO pins");
-        return NULL;
-    }
-
-    dev->a_res = (1 << mraa_aio_get_bit(dev->aio));
-    return dev;
-}
-
-void ad8232_close(ad8232_context dev){
-    if (dev->gpio_lo_minus != NULL)
-        mraa_gpio_close(dev->gpio_lo_minus);
-    if (dev->gpio_lo_plus != NULL)
-        mraa_gpio_close(dev->gpio_lo_plus);
-    if (dev->aio != NULL)
-        mraa_aio_close(dev->aio);
-
-    free(dev);
-}
-
-upm_result_t ad8232_get_value(ad8232_context dev, int* value) {
-    int reading = 0;
-
-    if (mraa_gpio_read(dev->gpio_lo_minus) ||
-        mraa_gpio_read(dev->gpio_lo_plus)) {
-        reading = 0;
-    }
-    else {
-        reading = mraa_aio_read(dev->aio);
-    }
-
-    *value = reading;
-
-    return UPM_SUCCESS;
-}
diff --git a/src/ad8232/ad8232.cxx b/src/ad8232/ad8232.cxx
deleted file mode 100644
index de8d650..0000000
--- a/src/ad8232/ad8232.cxx
+++ /dev/null
@@ -1,52 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <iostream>
-
-#include "ad8232.hpp"
-
-using namespace upm;
-using namespace std;
-
-AD8232::AD8232(int loPlus, int loMinus, int output, float aref) :
-  m_gpioLOPlus(loPlus), m_gpioLOMinus(loMinus), m_aioOUT(output)
-{
-  m_gpioLOPlus.dir(mraa::DIR_IN);
-  m_gpioLOMinus.dir(mraa::DIR_IN);
-  
-  m_aref = aref;
-  m_ares = (1 << m_aioOUT.getBit());
-}
-
-AD8232::~AD8232()
-{
-}
-
-int AD8232::value()
-{
-  if (m_gpioLOPlus.read() || m_gpioLOMinus.read())
-    return 0;
-  else
-    return m_aioOUT.read();
-}
diff --git a/src/ad8232/ad8232.h b/src/ad8232/ad8232.h
deleted file mode 100644
index fad0236..0000000
--- a/src/ad8232/ad8232.h
+++ /dev/null
@@ -1,82 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- *         Abhishek Malik <abhishek.malik@intel.com>
- * Copyright (c) 2016 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#ifndef AD8232_H_
-#define AD8232_H_
-
-#include <stdlib.h>
-#include <unistd.h>
-#include <string.h>
-
-#include "upm.h"
-#include "mraa/aio.h"
-#include "mraa/gpio.h"
-
-#define AD8232_DEFAULT_AREF  3.3
-
-/**
- * @file ad8232.h
- * @library ad8232
- * @brief C API for the AD8232 Heart Rate Monitor
- *
- * @include ad8232.c
- */
-
-/**
- * device context
- */
-typedef struct _ad8232_context {
-    mraa_aio_context        aio;
-    mraa_gpio_context       gpio_lo_plus;
-    mraa_gpio_context       gpio_lo_minus;
-    int                     a_res;
-} *ad8232_context;
-
-/**
- * Sensor init function
- *
- * @param lo_plus Digital pin to use for LO+
- * @param lo_minus Digital pin to use for LO-
- * @param output Analog pin to read the data
- * @param a_ref Analog voltage reference
- */
-ad8232_context ad8232_init(int lo_plus, int lo_minus, int output, float a_ref);
-
-/**
- * Sensor destructor
- */
-void ad8232_close(ad8232_context dev);
-
-    /**
-     * Returns the current ADC value for the device output pin.  If an
-     * LO (leads off) event is detected, 0 is returned.
-     *
-     * @param dev sensor context pointer
-     * @param value ADC value
-     * @return result status code
-     */
-upm_result_t ad8232_get_value(ad8232_context dev, int* value);
-
-#endif /* AD8232_H_ */
\ No newline at end of file
diff --git a/src/ad8232/ad8232.hpp b/src/ad8232/ad8232.hpp
deleted file mode 100644
index 59eb768..0000000
--- a/src/ad8232/ad8232.hpp
+++ /dev/null
@@ -1,111 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#pragma once
-
-#include <stdint.h>
-#include <sys/time.h>
-
-#include <mraa/gpio.hpp>
-
-#include <mraa/aio.hpp>
-
-#define AD8232_DEFAULT_AREF  3.3
-
-namespace upm {
-
-  /**
-   * @brief AD8232 Heart Rate Monitor
-   * @defgroup ad8232 libupm-ad8232
-   * @ingroup sparkfun gpio analog medical
-   */
-
-  /**
-   * @library ad8232
-   * @sensor ad8232
-   * @comname Single Lead Heart Rate Monitor
-   * @type medical
-   * @man sparkfun
-   * @web https://www.sparkfun.com/products/12650
-   * @con gpio analog
-   *
-   * @brief UPM module for the AD8232 Heart Rate Monitor
-   *
-   * Note: this sensor must be driven at 3.3V only.
-   *
-   * This module simply spits out the ADC values reported by the sensor, with
-   * the intent to send that data, via serial or network port, somewhere to
-   * another piece of software running on a computer that plots the data for
-   * you, like an EKG.
-   * 
-   * Processing (https://www.processing.org/) is software
-   * that should work, using information from the SparkFun* website.
-   *
-   * This example just dumps the raw data:
-   *
-   * @image html ad8232.jpg
-   * <br><em>AD8232 Heart Rate Monitor image provided by SparkFun under
-   * <a href=https://creativecommons.org/licenses/by/2.0/>
-   * CC BY 2.0</a>.</em>
-   *
-   * @snippet ad8232.cxx Interesting
-   */
-
-  class AD8232 {
-  public:
-
-    /**
-     * AD8232 constructor
-     *
-     * @param loPlus Digital pin to use for LO+
-     * @param loMinus Digital pin to use for LO-
-     * @param output Analog pin to read the data
-     * @param aref Analog voltage reference
-     */
-    AD8232(int loPlus, int loMinus, int output, float aref=AD8232_DEFAULT_AREF);
-
-    /**
-     * AD8232 destructor
-     */
-    ~AD8232();
-
-    /**
-     * Returns the current ADC value for the device output pin.  If an
-     * LO (leads off) event is detected, 0 is returned.
-     *
-     * @return ADC value
-     */
-    int value();
-
-  private:
-    mraa::Gpio m_gpioLOPlus;
-    mraa::Gpio m_gpioLOMinus;
-    mraa::Aio m_aioOUT;
-
-    float m_aref;
-    int m_ares;
-
-  };
-}
-
-
diff --git a/src/ad8232/ad8232.json b/src/ad8232/ad8232.json
deleted file mode 100644
index 4ccc2b4..0000000
--- a/src/ad8232/ad8232.json
+++ /dev/null
@@ -1,45 +0,0 @@
-{
-    "Library": "ad8232",
-    "Description": "Single Lead Heart Rate Monitor",
-    "Sensor Class":
-    {
-        "AD8232":
-        {
-            "Name": "AD8232 Heart Rate Monitor Library",
-            "Description": "This module simply spits out the ADC values reported by the sensor, with the intent to send that data, via serial or network port, somewhere to another piece of software running on a computer that plots the data for you, like an EKG.",
-            "Aliases": ["ad8232"],
-            "Categories": ["heartrate"],
-            "Connections": ["gpio", "aio"],
-            "Project Type": ["medical"],
-            "Manufacturers": ["sparkfun"],
-            "Kits": [],
-            "Image": "ad8232.jpg",
-            "Examples":
-            {
-                "Java": ["Ad8232_Example.java"],
-                "Python": ["ad8232.py"],
-                "Node.js": ["ad8232.js"],
-                "C++": ["ad8232.cxx"]
-            },
-            "Specifications":
-            {
-                "Vdd": {"unit": "V", "low" : 2.0, "high": 3.5},
-                "ESD Rating": {"unit": "kV", "low": 8}
-            },
-            "Platforms":
-            {
-                "Intel Joule Module":
-                {
-                    "Notes": ["Sensor must be driven at 3.3v only."],
-                    "Images": [""]
-                }
-            },
-            "Urls" :
-            {
-                "Product Pages": ["https://www.sparkfun.com/products/12650"],
-                "Datasheets": ["https://cdn.sparkfun.com/datasheets/Sensors/Biometric/AD8232.pdf"],
-                "Schematics": ["https://cdn.sparkfun.com/datasheets/Sensors/Biometric/AD8232_Heart_Rate_Monitor_v10.pdf"]
-            }
-        }
-    }
-}
diff --git a/src/ad8232/ad8232_fti.c b/src/ad8232/ad8232_fti.c
deleted file mode 100644
index beb6c74..0000000
--- a/src/ad8232/ad8232_fti.c
+++ /dev/null
@@ -1,92 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- *         Abhishek Malik <abhishek.malik@intel.com>
- * Copyright (c) 2016 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include "ad8232.h"
-#include "upm_fti.h"
-
-/** 
- * This file implements the Function Table Interface (FTI) for this sensor
- */
-
-const char upm_ad8232_name[] = "AD8232";
-const char upm_ad8232_description[] = "AD8232 Heart Rate Monitor";
-const upm_protocol_t upm_ad8232_protocol[] = {UPM_ANALOG, UPM_GPIO};
-const upm_sensor_t upm_ad8232_category[] = {UPM_HEART_RATE};
-
-// forward declarations
-upm_sensor_descriptor_t upm_ad8232_get_descriptor (void* dev);
-const void* upm_ad8232_get_ft(upm_sensor_t sensor_type);
-void* upm_ad8232_init_name();
-void upm_ad8232_close(void* dev);
-upm_result_t upm_ad8232_get_value(void* dev, int* value,
-                                  upm_heart_rate_u rate_unit);
-
-upm_sensor_descriptor_t upm_ad8232_get_descriptor (void* dev){
-    upm_sensor_descriptor_t usd;
-    usd.name = upm_ad8232_name;
-    usd.description = upm_ad8232_description;
-    usd.protocol_size = 2;
-    usd.protocol = upm_ad8232_protocol;
-    usd.category_size = 1;
-    usd.category = upm_ad8232_category;
-    return usd;
-}
-
-static const upm_sensor_ft ft =
-{
-    .upm_sensor_init_name = &upm_ad8232_init_name,
-    .upm_sensor_close = &upm_ad8232_close,
-    //.upm_sensor_get_descriptor = &upm_ad8232_get_descriptor
-};
-
-static const upm_heart_rate_ft hft =
-{
-    .upm_heart_rate_get_value = &upm_ad8232_get_value
-};
-
-const void* upm_ad8232_get_ft(upm_sensor_t sensor_type){
-    if(sensor_type == UPM_HEART_RATE){
-        return &hft;
-    }
-    else if(sensor_type == UPM_SENSOR){
-        return &ft;
-    }
-
-    return NULL;
-}
-
-void* upm_ad8232_init_name(){
-    return NULL;
-}
-
-void upm_ad8232_close(void* dev){
-    ad8232_close(dev);
-}
-
-upm_result_t upm_ad8232_get_value(void* dev, int* value,
-                                  upm_heart_rate_u rate_unit){
-    // rate_unit does not apply to this device, so...
-    return ad8232_get_value(dev, value);
-}
\ No newline at end of file
diff --git a/src/adafruitms1438/CMakeLists.txt b/src/adafruitms1438/CMakeLists.txt
deleted file mode 100644
index 9393fde..0000000
--- a/src/adafruitms1438/CMakeLists.txt
+++ /dev/null
@@ -1,5 +0,0 @@
-set (libname "adafruitms1438")
-set (libdescription "Module for the Adafruit Motor Shield 1438")
-set (module_src ${libname}.cxx)
-set (module_hpp ${libname}.hpp)
-upm_module_init(pca9685)
diff --git a/src/adafruitms1438/adafruitms1438.cxx b/src/adafruitms1438/adafruitms1438.cxx
deleted file mode 100644
index 5435219..0000000
--- a/src/adafruitms1438/adafruitms1438.cxx
+++ /dev/null
@@ -1,310 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <unistd.h>
-#include <math.h>
-#include <iostream>
-#include <string>
-
-#include "adafruitms1438.hpp"
-
-using namespace upm;
-using namespace std;
-
-
-AdafruitMS1438::AdafruitMS1438(int bus, uint8_t address) :
-  m_pca9685(new PCA9685(bus, address))
-{
-  setupPinMaps();
-
-  // set a default period of 50Hz
-  setPWMPeriod(50);
-
-  // disable all PWM's (4 of them).  They are shared with each other
-  // (stepper/DC), so just disable the DC motors here
-  disableMotor(MOTOR_M1);
-  disableMotor(MOTOR_M2);
-  disableMotor(MOTOR_M3);
-  disableMotor(MOTOR_M4);
-
-  // Set all 'on time' registers to 0
-  m_pca9685->ledOnTime(PCA9685_ALL_LED, 0);
-
-  // set the default stepper config at 200 steps per rev
-  stepConfig(STEPMOTOR_M12, 200);
-  stepConfig(STEPMOTOR_M34, 200);
-}
-
-AdafruitMS1438::~AdafruitMS1438()
-{
-  delete m_pca9685;
-}
-
-void AdafruitMS1438::initClock(STEPMOTORS_T motor)
-{
-  gettimeofday(&m_stepConfig[motor].startTime, NULL);
-}
-
-uint32_t AdafruitMS1438::getMillis(STEPMOTORS_T motor)
-{
-  struct timeval elapsed, now;
-  uint32_t elapse;
-
-  // get current time
-  gettimeofday(&now, NULL);
-
-  struct timeval startTime = m_stepConfig[motor].startTime;
-
-  // compute the delta since m_startTime
-  if( (elapsed.tv_usec = now.tv_usec - startTime.tv_usec) < 0 )
-    {
-      elapsed.tv_usec += 1000000;
-      elapsed.tv_sec = now.tv_sec - startTime.tv_sec - 1;
-    }
-  else
-    {
-      elapsed.tv_sec = now.tv_sec - startTime.tv_sec;
-    }
-
-  elapse = (uint32_t)((elapsed.tv_sec * 1000) + (elapsed.tv_usec / 1000));
-
-  // never return 0
-  if (elapse == 0)
-    elapse = 1;
-
-  return elapse;
-}
-
-// setup the pin mappings of the pca9685 outputs to the proper motor controls
-void AdafruitMS1438::setupPinMaps()
-{
-  // first the dc motors
-  m_dcMotors[0] = (DC_PINMAP_T){ 8, 10, 9 };
-  m_dcMotors[1] = (DC_PINMAP_T){ 13, 11, 12 };
-  m_dcMotors[2] = (DC_PINMAP_T){ 2, 4, 3 };
-  m_dcMotors[3] = (DC_PINMAP_T){ 7, 5, 6 };
-
-  // now the 2 steppers
-  m_stepMotors[0] = (STEPPER_PINMAP_T){ 8, 10, 9,
-                                        13, 11, 12 };
-  m_stepMotors[1] = (STEPPER_PINMAP_T){ 2, 4, 3,
-                                        7, 5, 6 };
-}
-
-void AdafruitMS1438::setPWMPeriod(float hz)
-{
-  // must be in sleep mode to set the prescale register
-  m_pca9685->setModeSleep(true);
-  m_pca9685->setPrescaleFromHz(hz);
-  m_pca9685->setModeSleep(false);
-}
-
-void AdafruitMS1438::enableMotor(DCMOTORS_T motor)
-{
-  m_pca9685->ledFullOff(m_dcMotors[motor].pwm, false);
-}
-
-void AdafruitMS1438::disableMotor(DCMOTORS_T motor)
-{
-  m_pca9685->ledFullOff(m_dcMotors[motor].pwm, true);
-}
-
-void AdafruitMS1438::enableStepper(STEPMOTORS_T motor)
-{
-  m_pca9685->ledFullOff(m_stepMotors[motor].pwmA, false);
-  m_pca9685->ledFullOff(m_stepMotors[motor].pwmB, false);
-}
-
-void AdafruitMS1438::disableStepper(STEPMOTORS_T motor)
-{
-  m_pca9685->ledFullOff(m_stepMotors[motor].pwmA, true);
-  m_pca9685->ledFullOff(m_stepMotors[motor].pwmB, true);
-}
-
-void AdafruitMS1438::setMotorSpeed(DCMOTORS_T motor, int speed)
-{
-  if (speed < 0)
-    speed = 0;
-  
-  if (speed > 100)
-    speed = 100;
-
-  float percent = float(speed) / 100.0;
-  
-  // make sure that the FullOn bit is turned off, or the speed setting
-  // (PWM duty cycle) won't have any effect.
-  m_pca9685->ledFullOn(m_dcMotors[motor].pwm, false);
-
-  // set the PWM duty cycle
-  m_pca9685->ledOffTime(m_dcMotors[motor].pwm, int(4095.0 * percent));
-}
-
-void AdafruitMS1438::setStepperSpeed(STEPMOTORS_T motor, int speed)
-{
-  m_stepConfig[motor].stepDelay = 60 * 1000 / 
-    m_stepConfig[motor].stepsPerRev / speed;
-}
-
-void AdafruitMS1438::setMotorDirection(DCMOTORS_T motor, DIRECTION_T dir)
-{
-  if (dir & 0x01)
-    {
-      m_pca9685->ledFullOn(m_dcMotors[motor].in1, true);
-      m_pca9685->ledFullOff(m_dcMotors[motor].in1, false);
-    }
-  else
-    {
-      m_pca9685->ledFullOff(m_dcMotors[motor].in1, true);
-      m_pca9685->ledFullOn(m_dcMotors[motor].in1, false);
-    }
-
-  if (dir & 0x02)
-    {
-      m_pca9685->ledFullOn(m_dcMotors[motor].in2, true);
-      m_pca9685->ledFullOff(m_dcMotors[motor].in2, false);
-    }
-  else
-    {
-      m_pca9685->ledFullOff(m_dcMotors[motor].in2, true);
-      m_pca9685->ledFullOn(m_dcMotors[motor].in2, false);
-    }
-}
-
-void AdafruitMS1438::setStepperDirection(STEPMOTORS_T motor, DIRECTION_T dir)
-{
-  switch (dir)
-    {
-    case DIR_CW:
-      m_stepConfig[motor].stepDirection = 1;
-      break;
-    case DIR_CCW:
-      m_stepConfig[motor].stepDirection = -1;
-      break;
-    default:                // default to 1 if DIR_NONE specified
-      m_stepConfig[motor].stepDirection = 1;
-      break;
-    }
-}
-
-void AdafruitMS1438::stepConfig(STEPMOTORS_T motor, unsigned int stepsPerRev)
-{
-  m_stepConfig[motor].stepsPerRev = stepsPerRev;
-  m_stepConfig[motor].currentStep = 0;
-  m_stepConfig[motor].stepDelay = 0;
-  m_stepConfig[motor].stepDirection = 1; // forward
-
-  // now, setup the control pins - we want both FULL ON and FULL OFF.
-  // Since FULL OFF has precedence, we can then control the steps by
-  // just turning on/off the FULL OFF bit for the relevant outputs
-
-  m_pca9685->ledFullOff(m_stepMotors[motor].pwmA, true);
-  m_pca9685->ledFullOn(m_stepMotors[motor].pwmA, true);
-
-  m_pca9685->ledFullOff(m_stepMotors[motor].pwmB, true);
-  m_pca9685->ledFullOn(m_stepMotors[motor].pwmB, true);
-
-  m_pca9685->ledFullOff(m_stepMotors[motor].in1A, true);
-  m_pca9685->ledFullOn(m_stepMotors[motor].in1A, true);
-
-  m_pca9685->ledFullOff(m_stepMotors[motor].in2A, true);
-  m_pca9685->ledFullOn(m_stepMotors[motor].in2A, true);
-
-  m_pca9685->ledFullOff(m_stepMotors[motor].in1B, true);
-  m_pca9685->ledFullOn(m_stepMotors[motor].in1B, true);
-
-  m_pca9685->ledFullOff(m_stepMotors[motor].in2B, true);
-  m_pca9685->ledFullOn(m_stepMotors[motor].in2B, true);
-}
-
-void AdafruitMS1438::stepperStep(STEPMOTORS_T motor)
-{
-  int step = m_stepConfig[motor].currentStep % 4;
-
-  //   Step I0 I1 I2 I3
-  //     1  1  0  1  0
-  //     2  0  1  1  0
-  //     3  0  1  0  1
-  //     4  1  0  0  1
-
-  // we invert the logic since we are essentially toggling an OFF bit,
-  // not an ON bit.
-  switch (step)
-    {
-    case 0:    // 1010
-      m_pca9685->ledFullOff(m_stepMotors[motor].in1A, false);
-      m_pca9685->ledFullOff(m_stepMotors[motor].in2A, true);
-      m_pca9685->ledFullOff(m_stepMotors[motor].in1B, false);
-      m_pca9685->ledFullOff(m_stepMotors[motor].in2B, true);
-      break;
-    case 1:    // 0110
-      m_pca9685->ledFullOff(m_stepMotors[motor].in1A, true);
-      m_pca9685->ledFullOff(m_stepMotors[motor].in2A, false);
-      m_pca9685->ledFullOff(m_stepMotors[motor].in1B, false);
-      m_pca9685->ledFullOff(m_stepMotors[motor].in2B, true);
-      break;
-    case 2:    //0101
-      m_pca9685->ledFullOff(m_stepMotors[motor].in1A, true);
-      m_pca9685->ledFullOff(m_stepMotors[motor].in2A, false);
-      m_pca9685->ledFullOff(m_stepMotors[motor].in1B, true);
-      m_pca9685->ledFullOff(m_stepMotors[motor].in2B, false);
-      break;
-    case 3:    //1001
-      m_pca9685->ledFullOff(m_stepMotors[motor].in1A, false);
-      m_pca9685->ledFullOff(m_stepMotors[motor].in2A, true);
-      m_pca9685->ledFullOff(m_stepMotors[motor].in1B, true);
-      m_pca9685->ledFullOff(m_stepMotors[motor].in2B, false);
-      break;
-    }
-}
-
-void AdafruitMS1438::stepperSteps(STEPMOTORS_T motor, unsigned int steps)
-{
-  while (steps > 0)
-    {
-      if (getMillis(motor) >= m_stepConfig[motor].stepDelay)
-        {
-          // reset the clock
-          initClock(motor);
-
-          m_stepConfig[motor].currentStep += m_stepConfig[motor].stepDirection;
-
-          if (m_stepConfig[motor].stepDirection == 1)
-            {
-              if (m_stepConfig[motor].currentStep >= 
-                  m_stepConfig[motor].stepsPerRev)
-                m_stepConfig[motor].currentStep = 0;
-            }
-          else
-            {
-              if (m_stepConfig[motor].currentStep <= 0)
-                m_stepConfig[motor].currentStep = 
-                  m_stepConfig[motor].stepsPerRev;
-            }
-
-          steps--;
-          stepperStep(motor);
-        }
-    }
-}
-
diff --git a/src/adafruitms1438/adafruitms1438.hpp b/src/adafruitms1438/adafruitms1438.hpp
deleted file mode 100644
index 30a1eee..0000000
--- a/src/adafruitms1438/adafruitms1438.hpp
+++ /dev/null
@@ -1,255 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#pragma once
-
-#include <stdint.h>
-#include <sys/time.h>
-
-#include <string>
-#include <mraa/i2c.h>
-#include <mraa/gpio.h>
-
-#include "pca9685.hpp"
-
-#define ADAFRUITMS1438_I2C_BUS 0
-#define ADAFRUITMS1438_DEFAULT_I2C_ADDR 0x60
-
-namespace upm {
-  
-  /**
-   * @brief Adafruit Motor Shield
-   * @defgroup adafruitms1438 libupm-adafruitms1438
-   * @ingroup adafruit i2c motor
-   */
-
-  /**
-   * @library adafruitms1438
-   * @sensor adafruitms1438
-   * @comname Module for the Adafruit Motor Shield 1438
-   * @type motor
-   * @man adafruit
-   * @web http://www.adafruit.com/products/1438
-   * @con i2c
-   *
-   * @brief API for the AdafruitMS1438 Motor Shield
-   *
-   * This class implements support for the stepper and DC motors that
-   * can be connected to this Motor Shield.
-   * Note: the two servo connections are not controlled by the PCA9685
-   * controller (or this class). They are connected directly to digital
-   * PWM pins 9 and 10 on the Arduino* breakout board.
-   *
-   * @image html adafruitms1438.jpg
-   * An example using a DC motor connected to M3
-   * @snippet adafruitms1438.cxx Interesting
-   * An example using a stepper motor connected to M1 & M2
-   * @snippet adafruitms1438-stepper.cxx Interesting
-   */
-  class AdafruitMS1438 {
-  public:
-
-    /**
-     * Enum to specify the direction of a motor
-     */
-    typedef enum {
-      DIR_NONE = 0x00,
-      DIR_CW   = 0x01,
-      DIR_CCW  = 0x02
-    } DIRECTION_T;
-
-    /**
-     * Enum to specify a DC motor
-     */
-    typedef enum {
-      MOTOR_M1 = 0,
-      MOTOR_M2 = 1,
-      MOTOR_M3 = 2,
-      MOTOR_M4 = 3
-    } DCMOTORS_T;
-
-    /**
-     * Enum to specify a stepper motor
-     */
-    typedef enum {
-      STEPMOTOR_M12 = 0,
-      STEPMOTOR_M34 = 1
-    } STEPMOTORS_T;
-
-    /**
-     * AdafruitMS1438 constructor
-     *
-     * @param bus I2C bus to use
-     * @param address Address for this sensor
-     */
-    AdafruitMS1438(int bus, uint8_t address = ADAFRUITMS1438_DEFAULT_I2C_ADDR);
-
-    /**
-     * AdafruitMS1438 destructor
-     */
-    ~AdafruitMS1438();
-
-    /**
-     * Returns the number of milliseconds elapsed since initClock(...)
-     * was last called.
-     *
-     * @return Elapsed milliseconds
-     */
-    uint32_t getMillis(STEPMOTORS_T motor);
-
-    /**
-     * Resets the clock
-     *
-     */
-    void initClock(STEPMOTORS_T motor);
-
-    /**
-     * Sets the PWM period.  Note: this applies to all PWM channels.
-     *
-     * @param hz Sets the PWM period 
-     */
-    void setPWMPeriod(float hz);
-
-    /**
-     * Enables PWM output for a motor
-     *
-     * @param motor DC motor to enable
-     */
-    void enableMotor(DCMOTORS_T motor);
-
-    /**
-     * Disables PWM output for a motor
-     *
-     * @param motor DC motor to disable
-     */
-    void disableMotor(DCMOTORS_T motor);
-
-    /**
-     * Enables output for a stepper motor
-     *
-     * @param motor Stepper motor to enable
-     */
-    void enableStepper(STEPMOTORS_T motor);
-
-    /**
-     * Disable output for a stepper motor
-     *
-     * @param motor Stepper motor to disable
-     */
-    void disableStepper(STEPMOTORS_T motor);
-
-    /**
-     * set the speed of a DC motor.  Values can range from 0 (off) to
-     * 100 (full speed).
-     *
-     * @param motor the DC motor to configure
-     * @param speed speed to set the motor to
-     */
-    void setMotorSpeed(DCMOTORS_T motor, int speed);
-
-    /**
-     * Sets the speed of a stepper in revolutions per minute (RPM)
-     *
-     * @param motor DC motor to configure
-     * @param speed Speed to set the motor to
-     */
-    void setStepperSpeed(STEPMOTORS_T motor, int speed);
-
-    /**
-     * Sets the direction of a DC motor, clockwise or counterclockwise
-     *
-     * @param motor DC motor to configure
-     * @param dir Direction to set the motor in
-     */
-    void setMotorDirection(DCMOTORS_T motor, DIRECTION_T dir);
- 
-    /**
-     * Sets the direction of a stepper motor, clockwise or counterclockwise
-     *
-     * @param motor Stepper motor to configure
-     * @param dir Direction to set the motor in
-     */
-    void setStepperDirection(STEPMOTORS_T motor, DIRECTION_T dir);
- 
-    /**
-     * Sets a stepper motor configuration
-     *
-     * @param motor Stepper motor to configure
-     * @param stepsPerRev Number of steps to complete a full revolution
-     */
-    void stepConfig(STEPMOTORS_T motor, unsigned int stepsPerRev);
-
-    /**
-     * Steps a stepper motor a specified number of steps
-     *
-     * @param motor Stepper motor to step
-     * @param steps Number of steps to move the stepper motor
-     */
-    void stepperSteps(STEPMOTORS_T motor, unsigned int steps);
-
-  private:
-    /* Disable implicit copy and assignment operators */
-    AdafruitMS1438(const AdafruitMS1438&) = delete;
-    AdafruitMS1438 &operator=(const AdafruitMS1438&) = delete;
-
-    // SWIG will generate a warning for these 'nested structs'; however,
-    // it can be ignored as these structs are never exposed.
-
-    // struct to hold mappings of DC motors
-    typedef struct {
-      int pwm;
-      int in1;
-      int in2;
-    } DC_PINMAP_T;
-
-    // struct to hold mappings of stepper motors
-    typedef struct {
-      int pwmA;
-      int in1A;
-      int in2A;
-      int pwmB;
-      int in1B;
-      int in2B;
-    } STEPPER_PINMAP_T;
-
-    // struct to hold information about each stepper
-    typedef struct {
-      int stepsPerRev;          // steps per revolution
-      int currentStep;          // current step number
-      uint32_t stepDelay;       // delay between steps
-      int stepDirection;        // direction to step
-      struct timeval startTime; // starting time
-    } STEPPER_CONFIG_T;
-
-    void setupPinMaps();
-    void stepperStep(STEPMOTORS_T motor);
-
-    DC_PINMAP_T m_dcMotors[4];
-    STEPPER_PINMAP_T m_stepMotors[2];
-    STEPPER_CONFIG_T m_stepConfig[2];
-
-    PCA9685 *m_pca9685;
-  };
-}
-
-
diff --git a/src/adafruitms1438/adafruitms1438.json b/src/adafruitms1438/adafruitms1438.json
deleted file mode 100644
index ce2837b..0000000
--- a/src/adafruitms1438/adafruitms1438.json
+++ /dev/null
@@ -1,48 +0,0 @@
-{
-    "Library": "adafruitms1438",
-    "Description": "Module for the Adafruit Motor Shield 1438",
-    "Sensor Class":
-    {
-        "AdafruitMS1438":
-        {
-            "Name": "API for the AdafruitMS1438 Motor Shield",
-            "Description": "This class implements support for the stepper and DC motors that can be connected to this Motor Shield.",
-            "Aliases": ["adafruitms1438"],
-            "Categories": ["motor"],
-            "Connections": ["i2c"],
-            "Project Type": ["motor"],
-            "Manufacturers": ["adafruit"],
-            "Kits": [],
-            "Image": "adafruitms1438.jpg",
-            "Examples":
-            {
-                "Java": [],
-                "Python": ["adafruitms1438-stepper.py", "adafruitms1438.py"],
-                "Node.js": ["adafruitms1438-stepper.js", "adafruitms1438.js"],
-                "C++": ["adafruitms1438-stepper.cxx", "adafruitms1438.cxx"],
-                "C": []
-            },
-            "Specifications":
-            {
-                "Vmotor": {"unit": "V", "low": 4.5, "high": 13.5},
-                "Amotor": {"unit": "A", "high": 1.2},
-                "Apeak": {"unit": "A", "high": 3},
-                "Vlogic": {"unit": "V", "low": 3.3, "high": 5}
-            },
-            "Platforms":
-            {
-                "Intel Joule Module":
-                {
-                    "Notes": ["The two servo connections are not controlled by the PCA9685 controller (or this class). They are connected directly to digital PWM pins 9 and 10 on the Arduino* breakout board."],
-                    "Images": [""]
-                }
-            },
-            "Urls" :
-            {
-                "Product Pages": ["https://www.adafruit.com/products/1438"],
-                "Datasheets": ["https://cdn-shop.adafruit.com/datasheets/TB6612FNG_datasheet_en_20121101.pdf"],
-                "Schematics": ["https://learn.adafruit.com/adafruit-motor-shield-v2-for-arduino"]
-            }
-        }
-    }
-}
diff --git a/src/adafruitss/CMakeLists.txt b/src/adafruitss/CMakeLists.txt
deleted file mode 100644
index 0dd8907..0000000
--- a/src/adafruitss/CMakeLists.txt
+++ /dev/null
@@ -1,5 +0,0 @@
-set (libname "adafruitss")
-set (libdescription "Adafruit Servo Shield")
-set (module_src ${libname}.cxx)
-set (module_hpp ${libname}.hpp)
-upm_module_init(mraa)
diff --git a/src/adafruitss/adafruitss.cxx b/src/adafruitss/adafruitss.cxx
deleted file mode 100644
index 302fa74..0000000
--- a/src/adafruitss/adafruitss.cxx
+++ /dev/null
@@ -1,155 +0,0 @@
-/*
- * Author: Stan Gifford <stan@gifford.id.au>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <string>
-#include <stdexcept>
-
-#include "adafruitss.hpp"
-#include <unistd.h>
-#include <math.h>
-
-using namespace upm;
-
-adafruitss::adafruitss(int bus,int i2c_address)
-{
-    if ( !(m_i2c = mraa_i2c_init(bus)) ) 
-      {
-        throw std::invalid_argument(std::string(__FUNCTION__) +
-                                    ": mraa_i2c_init() failed");
-        return;
-      }
-
-    pca9685_addr =  i2c_address;
-    if (mraa_i2c_address(m_i2c, pca9685_addr) != MRAA_SUCCESS)
-      {
-        throw std::invalid_argument(std::string(__FUNCTION__) +
-                                    ": mraa_i2c_address() failed");
-        return;
-      }
-
-    m_rx_tx_buf[0]=PCA9685_MODE1;
-    m_rx_tx_buf[1]=0;
-    if (mraa_i2c_write(m_i2c,m_rx_tx_buf,2) != MRAA_SUCCESS)
-      {
-        throw std::invalid_argument(std::string(__FUNCTION__) +
-                                    ": mraa_i2c_write() failed");
-        return;
-      }
-
-    adafruitss::setPWMFreq(60);
-
-    adafruitss::update();
-}
-
-void adafruitss::setPWMFreq(float freq) {
-    float afreq= freq * 0.899683334F;  // Correct for overshoot in the frequency setting (see issue #11). (Tested at 60hz with Logic 4 for 50hz and 60hz)
-    float prescaleval = 25000000;
-    prescaleval /= 4096;
-    prescaleval /= afreq;
-    prescaleval -= 1;
-    float pwm_frequency = freq; // Use actual requested frequency gives the correct pulse width
-
-    _duration_1ms = ((4096*pwm_frequency)/1000);  // This is 1ms duration
-
-    uint8_t prescale = roundf(prescaleval);
-
-
-
-    mraa_i2c_read_byte_data(m_i2c,PCA9685_MODE1);
-
-
-    m_rx_tx_buf[0]=PCA9685_MODE1;
-    m_rx_tx_buf[1]=0x10; // sleep
-    mraa_i2c_write(m_i2c,m_rx_tx_buf,2);
-
-
-
-    m_rx_tx_buf[0]=PCA9685_PRESCALE;
-    m_rx_tx_buf[1]=prescale;
-    mraa_i2c_write(m_i2c,m_rx_tx_buf,2);
-
-
-
-
-    m_rx_tx_buf[0]=PCA9685_MODE1;
-    m_rx_tx_buf[1]=0x00;
-    mraa_i2c_write(m_i2c,m_rx_tx_buf,2);
-
-    // mraa_i2c_write_byte_data(m_i2c,0x00,PCA9685_MODE1);
-
-    usleep(5000);
-
-
-    m_rx_tx_buf[0]=PCA9685_MODE1;
-    m_rx_tx_buf[1]=0xa1;
-    mraa_i2c_write(m_i2c,m_rx_tx_buf,2);
-}
-
-int adafruitss::update(void)
-{
-    return MRAA_SUCCESS;
-}
-
-void adafruitss::servo(uint8_t port, uint8_t servo_type, float degrees) {
-    // Set Servo values
-    // Degrees is from 0 to 180
-    // servo_type: 0 = standard 1ms to 2ms
-    //             1 = extended 0.6ms to 2.4ms
-    //             2 = extended 0.8ms to 2.2ms
-
-    float duration;
-
-    if(degrees>180) degrees=180;        // Ensure within bounds
-    if (degrees<0) degrees=0;
-    switch (servo_type) {
-      default:
-      case 0:              // Standard Servo 1ms to 2ms
-         duration = _duration_1ms + ((_duration_1ms*degrees)/180);
-         break;
-
-      case 1:              // Extended Servo 0.6ms to 2.4ms, i.e. 1.8ms from 0 to 180
-         //duration = (_duration_1ms*0.6) + ((_duration_1ms*1.8*degrees)/180); simplified to..
-         duration = (_duration_1ms*0.6) + ((_duration_1ms*degrees)/100);
-         break;
-
-      case 2:              // Extended Servo 0.8ms to 2.2ms, i.e. 1.4ms from 0 to 180
-         //duration = (_duration_1ms*0.8) + ((_duration_1ms*1.4*degrees)/180); simplified to..
-         duration = (_duration_1ms*0.8) + ((_duration_1ms*degrees)/128);
-         break;
-      case 3:              // Extended Servo 0.9ms to 2.1ms,  - GWS Mini STD BB servo
-         //duration = (_duration_1ms*0.9) + ((_duration_1ms*1.4*degrees)/180); simplified to..
-         duration = (_duration_1ms*0.9) + ((_duration_1ms*degrees)/120);
-         break;
-   }
-
-    uint16_t d= roundf(duration);
-    m_rx_tx_buf[0]=LED0_REG+4*port;
-    m_rx_tx_buf[1]=0;
-    m_rx_tx_buf[2]=0;
-    m_rx_tx_buf[3]=d;
-    m_rx_tx_buf[4]=d>>8;
-
-    mraa_i2c_write(m_i2c,m_rx_tx_buf,5);
- }
-
diff --git a/src/adafruitss/adafruitss.hpp b/src/adafruitss/adafruitss.hpp
deleted file mode 100644
index bc1e531..0000000
--- a/src/adafruitss/adafruitss.hpp
+++ /dev/null
@@ -1,117 +0,0 @@
-/*
- * Author: Stan Gifford <stan@gifford.id.au>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#pragma once
-
-#include <mraa/i2c.h>
-
-#define MAX_BUFFER_LENGTH 6
-
-#define SERVO_MIN       0
-#define SERVO_MAX       180
-#define SERVO_FREQ      60
-#define PCA9685_SUBADR1 0x2
-#define PCA9685_SUBADR2 0x3
-#define PCA9685_SUBADR3 0x4
-
-#define PCA9685_MODE1    0x0
-#define PCA9685_PRESCALE 0xFE
-
-#define LED0_ON_L  0x6
-#define LED0_ON_H  0x7
-#define LED0_OFF_L 0x8
-#define LED0_OFF_H 0x9
-
-#define ALLLED_ON_L  0xFA
-#define ALLLED_ON_H  0xFB
-#define ALLLED_OFF_L 0xFC
-#define ALLLED_OFF_H 0xFD
-
-#define PCA9685_MODE1_REG       0x00
-#define PCA9685_PRESCALE_REG    0xFE
-#define LED0_REG                0x06
-
-namespace upm {
-
- /**
-  * @brief Adafruit PCA9685-based Servo Shield
-  * @defgroup adafruitss libupm-adafruitss
-  * @ingroup adafruit i2c servos
-  */
-
- /**
-  * @library adafruitss
-  * @sensor adafruitss
-  * @comname Adafruit Servo Shield
-  * @type servos
-  * @man adafruit
-  * @web http://www.adafruit.com/product/1411
-  * @con i2c
-  *
-  * @brief API for the Adafruit Servo Shield 
-  *
-  * UPM library for the PCA9685-based Adafruit 16-channel servo shield. If 3
-  * or more GWS servos are attached, results could be unpredictable. Adafruit
-  * Industries recommend installing a capacitor on the board, which should
-  * alleviate the issue. Sizing depends on servos and their number.
-  *
-  * @image html adafruitss.jpg
-  * @snippet adafruitss.cxx Interesting
-  */
-
-  class adafruitss {
-  public:
-    /**
-     * Creates an adafruitss object
-     *
-     * @param bus Number of the used I2C bus
-     * @param i2c_address Address of the servo shield on the I2C bus
-     */
-    adafruitss(int bus, int i2c_address);
-    int update(void);
-    /**
-     * Sets the frequency of the servos
-     *
-     * @param freq Frequency at which the servos operate
-     */
-    void setPWMFreq(float freq);
-    /**
-     * Moves one of the servos to a specified angle
-     *
-     * @param port Port of the servo on the shield (servo number)
-     * @param servo_type Can be 0 = standard (1ms to 2ms), 1 = extended
-     * (0.6ms to 2.4ms), or 2 = extended (0.8ms to 2.2ms)
-     * @param degrees Angle to set the servo to
-     */
-    void servo(uint8_t port, uint8_t servo_type, float degrees);
-
-  private:
-
-    int pca9685_addr;
-    mraa_i2c_context m_i2c;
-    uint8_t m_rx_tx_buf[MAX_BUFFER_LENGTH];
-    float _duration_1ms;
-};
-
-}
diff --git a/src/adafruitss/adafruitss.json b/src/adafruitss/adafruitss.json
deleted file mode 100644
index af4c594..0000000
--- a/src/adafruitss/adafruitss.json
+++ /dev/null
@@ -1,47 +0,0 @@
-{
-    "Library": "adafruitss",
-    "Description": "Adafruit Servo Shield",
-    "Sensor Class":
-    {
-        "adafruitss":
-        {
-            "Name": "Adafruit PCA9685-based Servo Shield library",
-            "Description": "UPM library for the PCA9685-based Adafruit 16-channel servo shield.",
-            "Aliases": ["adafruitss"],
-            "Categories": ["servos"],
-            "Connections": ["i2c"],
-            "Project Type": ["servos"],
-            "Manufacturers": ["adafruit"],
-            "Kits": [],
-            "Image": "adafruitss.jpg",
-            "Examples":
-            {
-                "Java": [],
-                "Python": [],
-                "Node.js": [],
-                "C++": ["adafruitss.cxx"],
-                "C": []
-            },
-            "Specifications":
-            {
-                "Vmotor": {"unit": "v", "low": 0, "high": 6},
-                "Vlogic": {"unit": "V", "low": 3.3, "high": 5},
-                "PWM Frequency": {"unit": "KHz", "high": 1.6}
-            },
-            "Platforms":
-            {
-                "Intel Joule Module":
-                {
-                    "Notes": ["If 3 or more GWS servos are attached, results could be unpredictable. Adafruit Industries recommend installing a capacitor on the board, which should alleviate the issue. Sizing depends on servos and their number."],
-                    "Images": [""]
-                }
-            },
-            "Urls" :
-            {
-                "Product Pages": ["http://www.adafruit.com/product/1411"],
-                "Datasheets": ["https://cdn-shop.adafruit.com/datasheets/PCA9685.pdf"],
-                "Schematics": ["https://learn.adafruit.com/assets/36081"]
-            }
-        }
-    }
-}
diff --git a/src/adc121c021/CMakeLists.txt b/src/adc121c021/CMakeLists.txt
deleted file mode 100644
index 4ede6b3..0000000
--- a/src/adc121c021/CMakeLists.txt
+++ /dev/null
@@ -1,5 +0,0 @@
-set (libname "adc121c021")
-set (libdescription "I2C 12-bit Analog to Digital Converter with Alert Pin")
-set (module_src ${libname}.cxx)
-set (module_hpp ${libname}.hpp)
-upm_module_init(mraa)
diff --git a/src/adc121c021/adc121c021.cxx b/src/adc121c021/adc121c021.cxx
deleted file mode 100644
index cea682b..0000000
--- a/src/adc121c021/adc121c021.cxx
+++ /dev/null
@@ -1,269 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2014 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <iostream>
-#include <string>
-#include <stdexcept>
-
-#include "adc121c021.hpp"
-
-using namespace upm;
-using namespace std;
-
-
-ADC121C021::ADC121C021(int bus, uint8_t address, float vref)
-{
-  // setup our i2c link
-  m_i2c = mraa_i2c_init(bus);
-  if (!m_i2c)
-    {
-      throw std::invalid_argument(std::string(__FUNCTION__) +
-                                  ": mraa_i2c_init() failed");
-      return;
-    }
-
-  m_addr = address;
-
-  mraa_result_t ret = mraa_i2c_address(m_i2c, m_addr);
-
-  if (ret != MRAA_SUCCESS)
-    {
-      throw std::invalid_argument(std::string(__FUNCTION__) +
-                                  ": mraa_i2c_address() failed");
-      return;
-    }
-
-  m_vref = vref;
-}
-
-ADC121C021::~ADC121C021()
-{
-  mraa_i2c_stop(m_i2c);
-}
-
-mraa_result_t ADC121C021::writeByte(uint8_t reg, uint8_t byte)
-{
-  return mraa_i2c_write_byte_data(m_i2c, byte, reg);
-}
-
-mraa_result_t ADC121C021::writeWord(uint8_t reg, uint16_t word)
-{
-  // We need to swap the bytes
-  uint8_t b1 = (word & 0xff00) >> 8;
-  word <<= 8;
-  word |= b1;
-
-  return mraa_i2c_write_word_data(m_i2c, word, reg);
-}
-
-uint8_t ADC121C021::readByte(uint8_t reg)
-{
-  int val = mraa_i2c_read_byte_data(m_i2c, reg);
-  if (val != -1) {
-    return (uint8_t) val;
-  }
-  return 0;
-}
-
-uint16_t ADC121C021::readWord(uint8_t reg)
-{
-  int x = mraa_i2c_read_word_data(m_i2c, reg);
-  if (x == -1) {
-    return 0;
-  }
-  uint16_t val = (uint16_t) x;
-  uint8_t b1;
-
-  // The value returned is in the wrong byte order, so we need to swap them
-  b1 = (val & 0xff00) >> 8;
-  val <<= 8;
-  val |= b1;
-
-  return val;
-}
-
-uint16_t ADC121C021::value()
-{
-  // mask off alert flag and reserved bits
-  return (readWord(ADC121C021_REG_RESULT) & 0x0fff);
-}
-
-float ADC121C021::valueToVolts(uint16_t val)
-{
-  // The arduino example multiplies this by 2, which seems wrong.  If
-  // the reference voltage is 3.0, then you should never get a voltage
-  // value higher than that.
-  //
-  // val * m_vref * 2.0 / ADC121C021_RESOLUTION
-  return (val * m_vref / ADC121C021_RESOLUTION);
-}
-
-bool ADC121C021::getAlertStatus()
-{
-  // high order bit is the alert flag, mask off the rest
-  bool rv = (readWord(ADC121C021_REG_RESULT) & 0x8000) ? true : false;
-
-  if (rv)
-    {
-      // read the alert low and high values and set the appropriate
-      // member variables
-      uint8_t astatus = readByte(ADC121C021_REG_ALERT_STATUS);
-      if (astatus & 0x01)
-        m_alertLow = true;
-      else 
-        m_alertLow = false;
-
-      if (astatus & 0x02)
-        m_alertHigh = true;
-      else 
-        m_alertHigh = false;
-    }
-
-  return rv;
-}
-
-void ADC121C021::clearAlertStatus()
-{
-  // zero out both the low and high alert flags
-  writeByte(ADC121C021_REG_ALERT_STATUS, 0x03);
-
-  m_alertHigh = false;
-  m_alertLow = false;
-}
-
-void ADC121C021::enableAlertFlag(bool enable)
-{
-  // read the current config register
-  uint8_t val = readByte(ADC121C021_REG_CONFIG);
-
-  if (enable)
-    val |= 0x08;
-  else
-    val &= ~0x08;
-
-  // write the register back
-  writeByte(ADC121C021_REG_CONFIG, val);
-}
-
-void ADC121C021::enableAlertPin(bool enable)
-{
-  // read the current config register
-  uint8_t val = readByte(ADC121C021_REG_CONFIG);
-
-  if (enable)
-    val |= 0x04;
-  else
-    val &= ~0x04;
-
-  // write the register back
-  writeByte(ADC121C021_REG_CONFIG, val);
-}
-
-void ADC121C021::enableAlertHold(bool enable)
-{
-  // read the current config register
-  uint8_t val = readByte(ADC121C021_REG_CONFIG);
-
-  if (enable)
-    val |= 0x10;
-  else
-    val &= ~0x10;
-
-  // write the register back
-  writeByte(ADC121C021_REG_CONFIG, val);
-}
-
-void ADC121C021::enableAlertPinPolarityHigh(bool enable)
-{
-  // read the current config register
-  uint8_t val = readByte(ADC121C021_REG_CONFIG);
-
-  if (enable)
-    val |= 0x01;
-  else
-    val &= ~0x01;
-
-  // write the register back
-  writeByte(ADC121C021_REG_CONFIG, val);
-}
-
-void ADC121C021::setAutomaticConversion(ADC121C021_CYCLE_TIME_T cycleTime)
-{
-  // first we 
-
-  // read the current config register, masking off the cycle time bits
-  uint8_t val = readByte(ADC121C021_REG_CONFIG) & 0x1f;
-
-  val |= ((uint8_t)cycleTime << 5);
-
-  // write the register back
-  writeByte(ADC121C021_REG_CONFIG, val);
-}
-
-mraa_result_t ADC121C021::setAlertLowLimit(uint16_t limit)
-{
-  // mask off the invalid bits in case they were set
-  limit &= 0x0fff;
-
-  // write it
-  return writeWord(ADC121C021_REG_ALERT_LIM_UNDER, limit);
-}
-
-mraa_result_t ADC121C021::setAlertHighLimit(uint16_t limit)
-{
-  // mask off the invalid bits in case they were set
-  limit &= 0x0fff;
-
-  // write it
-  return writeWord(ADC121C021_REG_ALERT_LIM_OVER, limit);
-}
-
-mraa_result_t ADC121C021::setHysteresis(uint16_t limit)
-{
-  // mask off the invalid bits in case they were set
-  limit &= 0x0fff;
-
-  // write it
-  return writeWord(ADC121C021_REG_ALERT_HYS, limit);
-}
-
-uint16_t ADC121C021::getHighestConversion()
-{
-  return readWord(ADC121C021_REG_HIGHEST_CONV);
-}
-
-uint16_t ADC121C021::getLowestConversion()
-{
-  return readWord(ADC121C021_REG_LOWEST_CONV);
-}
-
-mraa_result_t ADC121C021::clearHighestConversion()
-{
-  return writeWord(ADC121C021_REG_HIGHEST_CONV, 0x0000);
-}
-
-mraa_result_t ADC121C021::clearLowestConversion()
-{
-  return writeWord(ADC121C021_REG_LOWEST_CONV, 0x0fff);
-}
diff --git a/src/adc121c021/adc121c021.hpp b/src/adc121c021/adc121c021.hpp
deleted file mode 100644
index 7a8ff6f..0000000
--- a/src/adc121c021/adc121c021.hpp
+++ /dev/null
@@ -1,314 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2014 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#pragma once
-
-#include <string>
-#include <mraa/i2c.h>
-
-#define ADC121C021_I2C_BUS 0
-#define ADC121C021_DEFAULT_I2C_ADDR 0x55
-
-#define ADC121C021_RESOLUTION  4096 // 12 bits
-
-/**
- * ADC121C021 registers
- */
-
-#define ADC121C021_REG_RESULT          0x00
-#define ADC121C021_REG_ALERT_STATUS    0x01
-#define ADC121C021_REG_CONFIG          0x02
-#define ADC121C021_REG_ALERT_LIM_UNDER 0x03
-#define ADC121C021_REG_ALERT_LIM_OVER  0x04
-#define ADC121C021_REG_ALERT_HYS       0x05
-#define ADC121C021_REG_LOWEST_CONV     0x06
-#define ADC121C021_REG_HIGHEST_CONV    0x07
-
-// For the Grove I2C ADC
-#define ADC121C021_DEFAULT_VREF        3.0
-
-namespace upm {
-  /**
-   * @brief ADC121C021 Analog-to-Digital Converter
-   * @defgroup adc121c021 libupm-adc121c021
-   * @ingroup seeed i2c electric
-   */
-
-
-  /**
-   * Valid cycle times for the automatic conversion mode
-   */
-
-  typedef enum { ADC121C021_CYCLE_NONE = 0,  // disabled
-                 ADC121C021_CYCLE_32   = 1,  // 27 ksps
-                 ADC121C021_CYCLE_64   = 2,  // 13.5
-                 ADC121C021_CYCLE_128  = 3,  // 6.7
-                 ADC121C021_CYCLE_256  = 4,  // 3.4
-                 ADC121C021_CYCLE_512  = 5,  // 1.7
-                 ADC121C021_CYCLE_1024 = 6,  // 0.9
-                 ADC121C021_CYCLE_2048 = 7   // 0.4
-  } ADC121C021_CYCLE_TIME_T;
-
-  /**
-   * @library adc121c021
-   * @sensor adc121c021
-   * @comname I2C 12-bit Analog to Digital Converter with Alert Pin
-   * @altname Grove I2C ADC
-   * @type electric
-   * @man seeed
-   * @web http://www.seeedstudio.com/depot/Grove-I2C-ADC-p-1580.html
-   * @con i2c
-   *
-   * @brief API for the ADC121C021 I2C Analog-to-Digital Converter
-   *
-   * UPM module for the ADC121C021 12-bit analog-to-digital converter (ADC).
-   * By constantly providing a reference voltage, this sensor helps
-   * increase the accuracy of a value collected from an analog sensor.
-   *
-   * @image html adc121c021.jpg
-   * @snippet adc121c021.cxx Interesting
-   */
-  class ADC121C021 {
-  public:
-    /**
-     * ADC121C021 ADC constructor
-     *
-     * @param bus I2C bus to use
-     * @param address Address for this sensor; default is 0x55
-     * @param vref Reference voltage for this sensor; default is 3.0v
-     */
-    ADC121C021(int bus, uint8_t address = ADC121C021_DEFAULT_I2C_ADDR,
-               float vref = ADC121C021_DEFAULT_VREF);
-
-    /**
-     * ADC121C021 destructor
-     */
-    ~ADC121C021();
-
-    /**
-     * Writes a byte value into the register
-     *
-     * @param reg Register location to write into
-     * @param byte Byte to write
-     * @return 0 (MRAA_SUCCESS) if successful; non-zero otherwise
-     */
-    mraa_result_t writeByte(uint8_t reg, uint8_t byte);
-
-    /**
-     * Writes a word value into the register
-     *
-     * @param reg Register location to write into
-     * @param word Word to write
-     * @return 0 (MRAA_SUCCESS) if successful; non-zero otherwise
-     */
-    mraa_result_t writeWord(uint8_t reg, uint16_t word);
-
-    /**
-     * Reads the byte value from the register
-     *
-     * @param reg Register location to read from
-     * @return Value in the specified register
-     */
-    uint8_t readByte(uint8_t reg);
-
-    /**
-     * Reads the word value from the register
-     *
-     * @param reg Register location to read from
-     * @return Value in the specified register
-     */
-    uint16_t readWord(uint8_t reg);
-
-    /**
-     * Reads the current value of conversion 
-     *
-     * @return Current value of conversion
-     */
-    uint16_t value();
-
-    /**
-     * Converts a supplied value to voltage based on the set vref
-     *
-     * @param val Value of conversion (from value())
-     * @return Value of conversion in volts
-     */
-    float valueToVolts(uint16_t val);
-
-    /**
-     * Reads the current status of the alert flag.  If the flag is set, the
-     * low or high alert indicators are set as appropriate, and
-     * you can access these values with alertLowTriggered() or
-     * alertHighTriggered().
-     *
-     * @return True if the alert flag is set
-     */
-    bool getAlertStatus();
-
-    /**
-     * Returns the current value of m_alertLow.  You must call
-     * getAlertStatus() to update this value. 
-     *
-     * @return Current status of the alert low flag 
-     */
-    bool alertLowTriggered() { return m_alertLow; };
-
-    /**
-     * Returns the current value of m_alertHigh.  You must call
-     * getAlertStatus() to update this value. 
-     *
-     * @return Current status of the alert high flag
-     */
-    bool alertHighTriggered() { return m_alertHigh; };
-
-    /**
-     * Clears the alert low and alert high flags. This also clears the
-     * last stored alert values.
-     */
-    void clearAlertStatus();
-
-    /**
-     * Enables or disables the alert flag functionality.  If enabled,
-     * when the measured value exceeds the low or high limits
-     * configured, the alert flag is set. Use getAlertStatus()
-     * to access these values.
-     *
-     * @param enable If true, enables the alert flag; otherwise, disables the
-     * alert flag
-     */
-    void enableAlertFlag(bool enable);
-
-    /**
-     * Enables or disables the alert pin functionality.
-     *
-     * @param enable If true, enables the alert pin; otherwise, disables the
-     * alert pin
-     */
-    void enableAlertPin(bool enable);
-
-    /**
-     * Enables or disables the alert hold functionality.  When the alert
-     * hold is enabled, the alert status remains until manually
-     * cleared via clearAlertStatus().  Otherwise, the alert self-clears
-     * when the value moves into the defined limits if alerts
-     * are enabled via enableAlertFlag().
-     *
-     * @param enable If true, enables the alert hold; otherwise, disables the
-     * alert hold
-     */
-    void enableAlertHold(bool enable);
-
-    /**
-     * If the alert pin is enabled, defines the active
-     * polarity of the pin in an alert condition. Enabling this sets
-     * the pin to active high in an alert condition; otherwise,
-     * active low is used.
-     *
-     * @param enable If true, the alert pin is active high; otherwise, active
-     * low
-     */
-    void enableAlertPinPolarityHigh(bool enable);
-
-    /**
-     * Enables or disables the automatic conversion mode. When enabled, the
-     * ADC samples and updates the conversion value independently.
-     * It is disabled by default, so conversion is only done by
-     * calling value(). 
-     *
-     * @param cycleTime Sets the cycle time for automatic conversion
-     */
-    void setAutomaticConversion(ADC121C021_CYCLE_TIME_T cycleTime);
-
-    /**
-     * Sets the alert low limit.  If alerts are enabled and the
-     * measured conversion value is lower than the low limit, an alert is
-     * triggered.
-     *
-     * @param limit Alert low limit
-     * @return 0 (MRAA_SUCCESS) if successful; non-zero otherwise
-     */
-    mraa_result_t setAlertLowLimit(uint16_t limit);
-
-    /**
-     * Sets the alert high limit.  If alerts are enabled and the
-     * measured conversion value is higher than the high limit, an alert is
-     * triggered.
-     *
-     * @param limit Alert high limit
-     * @return 0 (MRAA_SUCCESS) if successful; non-zero otherwise
-     */
-    mraa_result_t setAlertHighLimit(uint16_t limit);
-
-    /**
-     * Sets the hysteresis value.  If a high or low alert condition is
-     * triggered, the conversion result must move within the high or
-     * low limit by more than this value to clear the alert condition.
-     * If the alert hold is set, the alert doesn't self-clear
-     * regardless of this value.
-     *
-     * @param limit Hysteresis limit
-     * @return 0 (MRAA_SUCCESS) if successful; non-zero otherwise
-     */
-    mraa_result_t setHysteresis(uint16_t limit);
-
-    /**
-     * Returns the highest conversion value recorded so far. This value
-     * is only updated by the converter when the automatic conversion mode
-     * is enabled.
-     *
-     * @return Highest conversion value
-     */
-    uint16_t getHighestConversion();
-
-    /**
-     * Returns the lowest conversion value recorded so far. This value
-     * is only updated by the converter when the automatic conversion mode
-     * is enabled.
-     *
-     * @return Lowest conversion value
-     */
-    uint16_t getLowestConversion();
-
-    /**
-     * Clears the highest conversion value recorded so far.
-     *
-     * @return 0 (MRAA_SUCCESS) if successful; non-zero otherwise
-     */
-    mraa_result_t clearHighestConversion();
-
-    /**
-     * Clears the lowest conversion value recorded so far.
-     *
-     * @return 0 (MRAA_SUCCESS) if successful; non-zero otherwise
-     */
-    mraa_result_t clearLowestConversion();
-
-  private:
-    mraa_i2c_context m_i2c;
-    uint8_t m_addr;
-    float m_vref;
-    bool m_alertLow;
-    bool m_alertHigh;
-  };
-}
-
-
diff --git a/src/adc121c021/adc121c021.i b/src/adc121c021/adc121c021.i
deleted file mode 100644
index cdf83d8..0000000
--- a/src/adc121c021/adc121c021.i
+++ /dev/null
@@ -1,20 +0,0 @@
-%include "../common_top.i"
-
-/* BEGIN Java syntax  ------------------------------------------------------- */
-#ifdef SWIGJAVA
-JAVA_JNI_LOADLIBRARY(javaupm_adc121c021)
-#endif
-/* END Java syntax */
-
-/* BEGIN Javascript syntax  ------------------------------------------------- */
-#ifdef SWIGJAVASCRIPT
-%include "../carrays_uint16_t.i"
-#endif
-/* END Javascript syntax */
-
-/* BEGIN Common SWIG syntax ------------------------------------------------- */
-%{
-#include "adc121c021.hpp"
-%}
-%include "adc121c021.hpp"
-/* END Common SWIG syntax */
diff --git a/src/adc121c021/adc121c021.json b/src/adc121c021/adc121c021.json
deleted file mode 100644
index 84fb1a0..0000000
--- a/src/adc121c021/adc121c021.json
+++ /dev/null
@@ -1,47 +0,0 @@
-{
-    "Library": "adc121c021",
-    "Description": "I2C 12-bit Analog to Digital Converter with Alert Pin",
-    "Sensor Class":
-    {
-        "ADC121C021":
-        {
-            "Name": "API for the ADC121C021 I2C Analog-to-Digital Converter",
-            "Description": "UPM module for the ADC121C021 12-bit analog-to-digital converter (ADC). By constantly providing a reference voltage, this sensor helps increase the accuracy of a value collected from an analog sensor.",
-            "Aliases": ["adc121c021"],
-            "Categories": ["aio"],
-            "Connections": ["i2c"],
-            "Project Type": ["prototyping"],
-            "Manufacturers": ["seeed"],
-            "Kits": [],
-            "Image": "adc121c021.jpg",
-            "Examples":
-            {
-                "Java": ["ADC121C021_Example.java"],
-                "Python": ["adc121c021.py"],
-                "Node.js": ["adc121c021.js"],
-                "C++": ["adc121c021.cxx"],
-                "C": []
-            },
-            "Specifications":
-            {
-                "Working Voltage": {"unit": "v", "low" : 5.0, "high": 5.0},
-                "Resolution" : {"unit": "Bit", "low" : 12, "high": 12},
-                "Sample Rate": {"unit": "ksps", "low" : 188.9, "high": 188.9}
-            },
-            "Platforms":
-            {
-                "Intel Joule Module":
-                {
-                    "Notes": ["Requires pull-up resistors with carrier board"],
-                    "Images": [""]
-                }
-            },
-            "Urls" :
-            {
-                "Product Pages": ["https://www.seeedstudio.com/Grove-I2C-ADC-p-1580.html"],
-                "Datasheets": ["https://raw.githubusercontent.com/SeeedDocument/Grove-I2C_ADC/master/res/ADC121C021_Datasheet.pdf"],
-                "Schematics": []
-            }
-        }
-    }
-}
diff --git a/src/adis16448/CMakeLists.txt b/src/adis16448/CMakeLists.txt
deleted file mode 100644
index 45e72c9..0000000
--- a/src/adis16448/CMakeLists.txt
+++ /dev/null
@@ -1,5 +0,0 @@
-set (libname "adis16448")
-set (libdescription "Industrial Grade Ten Degrees of Freedom Inertial Sensor")
-set (module_src ${libname}.cxx)
-set (module_hpp ${libname}.hpp)
-upm_module_init(mraa)
diff --git a/src/adis16448/adis16448.cxx b/src/adis16448/adis16448.cxx
deleted file mode 100644
index 8d0f55e..0000000
--- a/src/adis16448/adis16448.cxx
+++ /dev/null
@@ -1,247 +0,0 @@
-//////////////////////////////////////////////////////////////////////////////////////
-// The MIT License (MIT)
-//
-// Submit Date: 03/09/2015
-// Author: Juan Jose Chong <juanjchong@gmail.com>
-// Copyright (c) 2015 Juan Jose Chong
-//
-//////////////////////////////////////////////////////////////////////////////////////
-// adis16448.cxx
-//////////////////////////////////////////////////////////////////////////////////////
-//
-// This library runs on an Intel Edison and uses mraa to acquire data
-// from an ADIS16448. This data is then scaled and printed onto the terminal.
-// 
-// This software has been tested to connect to an ADIS16448 through a level shifter
-// such as the TI TXB0104. The SPI lines (DIN, DOUT, SCLK, /CS) are all wired through
-// the level shifter and the ADIS16448 is also being powered by the Intel Edison.
-//
-// Permission is hereby granted, free of charge, to any person obtaining
-// a copy of this software and associated documentation files (the
-// "Software"), to deal in the Software without restriction, including
-// without limitation the rights to use, copy, modify, merge, publish,
-// distribute, sublicense, and/or sell copies of the Software, and to
-// permit persons to whom the Software is furnished to do so, subject to
-// the following conditions:
-//
-// The above copyright notice and this permission notice shall be
-// included in all copies or substantial portions of the Software.
-//
-// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-//
-//////////////////////////////////////////////////////////////////////////////////////
-#include <iostream>
-#include <string>
-#include <stdexcept>
-#include <unistd.h>
-#include <stdlib.h>
-#include <functional>
-#include <string.h>
-
-#include "adis16448.hpp"
-
-using namespace upm;
-
-////////////////////////////////////////////////////////////////////////////
-// Constructor with configurable CS, DR, and RST
-////////////////////////////////////////////////////////////////////////////
-// RST - Hardware reset pin
-////////////////////////////////////////////////////////////////////////////
-ADIS16448::ADIS16448(int bus, int rst)
-{
-// Configure I/O
-        //Initialize RST pin
-        if ( !(_rst = mraa_gpio_init(rst)) ) 
-          {
-            throw std::invalid_argument(std::string(__FUNCTION__) +
-                                        ": mraa_gpio_init() failed, invalid pin?");
-            return;
-          }
-	mraa_gpio_dir(_rst, MRAA_GPIO_IN); //Set direction as INPUT
-
-        // Configure SPI
-        if ( !(_spi = mraa_spi_init(bus)) ) 
-          {
-            throw std::invalid_argument(std::string(__FUNCTION__) +
-                                        ": mraa_spi_init() failed");
-            return;
-          }
-        configSPI();
-}
-
-////////////////////////////////////////////////////////////////////////////
-// Destructor - Stops SPI and Closes all GPIO used. Reports an error if
-// unable to close either properly.
-////////////////////////////////////////////////////////////////////////////
-ADIS16448::~ADIS16448()
-{
-// Close SPI bus
-	mraa_result_t error;
-	error = mraa_spi_stop(_spi);
-	if(error != MRAA_SUCCESS)
-	{
-		mraa_result_print(error);
-	}
-// Close GPIO
-	error = mraa_gpio_close(_rst);
-	if(error != MRAA_SUCCESS)
-	{
-		mraa_result_print(error);
-	}
-}
-
-////////////////////////////////////////////////////////////////////////////
-// Performs hardware reset by setting _RST pin low for 2 seconds.
-////////////////////////////////////////////////////////////////////////////
-void ADIS16448::resetDUT()
-{
-	mraa_gpio_write(_rst, 0);
-	usleep(100000); //Sleep for 100ms
-	mraa_gpio_write(_rst, 1);
-	usleep(1000000); //Sleep for 1s
-}
-
-////////////////////////////////////////////////////////////////////////////
-// Sets SPI bit order, clock divider, and data mode. This function is useful
-// when there are multiple SPI devices using different settings.
-////////////////////////////////////////////////////////////////////////////
-void ADIS16448::configSPI() {
-	mraa_spi_frequency(_spi, 1000000); //Set SPI frequency to 1MHz
-
-        if ( mraa_spi_mode(_spi, MRAA_SPI_MODE3) != MRAA_SUCCESS ) 
-          {
-            throw std::invalid_argument(std::string(__FUNCTION__) +
-                                        ": mraa_spi_mode() failed");
-            return;
-          }
-	//Set # of bits per word
-
-        if ( mraa_spi_bit_per_word(_spi, 16) != MRAA_SUCCESS ) 
-          {
-            throw std::invalid_argument(std::string(__FUNCTION__) +
-                                        ": mraa_spi_bit_per_word() failed");
-            return;
-          }
-}
-
-////////////////////////////////////////////////////////////////////////////////////////////
-// Reads two bytes (one word) in two sequential registers over SPI
-////////////////////////////////////////////////////////////////////////////////////////////
-// regAddr - register address from the lookup table in ADIS16448.h
-// return - (int) signed 16 bit 2's complement number
-////////////////////////////////////////////////////////////////////////////////////////////
-int16_t ADIS16448::regRead(uint8_t regAddr)
-{
-	configSPI(); //Set up SPI (useful when multiple SPI devices present on bus)
-// Write register address to be read
-	uint8_t buf[2]; //Allocate write buffer
-	memset(buf, 0, sizeof(uint8_t)*2); //Initialize buffer and write 0s
-	buf[1] = regAddr; //Write the user-requested register address to the buffer
-	mraa_spi_write_buf(_spi, buf, 2); //Write the buffer onto the SPI port
-
-	usleep(20); //Delay to not violate read rate (210us)
-
-// Read data from register requested
-	buf[1] = 0; //Clear contents of write buffer
-	uint8_t* x = mraa_spi_write_buf(_spi, buf, 2); //Write 0x0000 to SPI and read data requested above
-	int16_t _dataOut = (x[1] << 8) | (x[0] & 0xFF);; //Concatenate upper and lower bytes
-
-	usleep(20); //delay to not violate read rate (210us)
-	return(_dataOut);
-}
-////////////////////////////////////////////////////////////////////////////
-// Writes one byte of data to the specified register over SPI
-////////////////////////////////////////////////////////////////////////////
-// regAddr - register address from the lookup table
-// regData - data to be written to the register
-////////////////////////////////////////////////////////////////////////////
-void ADIS16448::regWrite(uint8_t regAddr,uint16_t regData)
-{
-	configSPI();
-// Separate the 16 bit command word into two bytes
-	uint16_t addr = (((regAddr & 0x7F) | 0x80) << 8); //Check that the address is 7 bits, flip the sign bit
-	uint16_t lowWord = (addr | (regData & 0xFF));
-	uint16_t highWord = ((addr | 0x100) | ((regData >> 8) & 0xFF));
-// Write the low byte to the SPI bus
-	uint8_t lbuf[2]; //Allocate write buffer
-	memset(lbuf, 0, sizeof(uint8_t)*2); //Fill low buffer with 0's
-	lbuf[0] = (lowWord >> 8);
-	lbuf[1] = (lowWord);
-	mraa_spi_write_buf(_spi, lbuf, 2); //Write the buffer to the SPI port
-
-	usleep(20);
-
-// Write the high byte to the SPI bus
-	uint8_t hbuf[2]; //Allocate write buffer
-	memset(hbuf, 0, sizeof(uint8_t)*2); //Fill high buffer with 0's
-	hbuf[0] = (highWord >> 8);
-	hbuf[1] = (highWord);
-	mraa_spi_write_buf(_spi, hbuf, 2); //Write the buffer to the SPI port
-
-	usleep(20);
-
-}
-/////////////////////////////////////////////////////////////////////////////////////////
-// Converts accelerometer data output from the sensorRead() function and returns
-// acceleration in g's
-/////////////////////////////////////////////////////////////////////////////////////////
-// sensorData - data output from sensorRead()
-// return - (float) signed/scaled accelerometer in G's
-/////////////////////////////////////////////////////////////////////////////////////////
-float ADIS16448::accelScale(int16_t sensorData)
-{
-	float finalData = sensorData * 0.000833; // multiply by accel sensitivity (250uG/LSB)
-	return finalData;
-}
-/////////////////////////////////////////////////////////////////////////////////////////////
-// Converts gyro data output from the sensorRead() function and returns gyro rate in deg/sec
-/////////////////////////////////////////////////////////////////////////////////////////////
-// sensorData - data output from sensorRead()
-// return - (float) signed/scaled gyro in degrees/sec
-/////////////////////////////////////////////////////////////////////////////////////////
-float ADIS16448::gyroScale(int16_t sensorData)
-{
-	float finalData = sensorData * 0.04; //multiply by gyro sensitivity (0.005 LSB/dps)
-	return finalData;
-}
-/////////////////////////////////////////////////////////////////////////////////////////////
-// Converts temperature data output from the sensorRead() function and returns temperature
-// in degrees Celsius
-/////////////////////////////////////////////////////////////////////////////////////////////
-// sensorData - data output from sensorRead()
-// return - (float) signed/scaled temperature in degrees Celsius
-/////////////////////////////////////////////////////////////////////////////////////////
-float ADIS16448::tempScale(int16_t sensorData)
-{
-	float finalData = (sensorData * 0.07386) + 31; //multiply by temperature scale and add 31 to equal 0x0000
-	return finalData;
-}
-/////////////////////////////////////////////////////////////////////////////////////////////
-// Converts barometer data output from sensorRead() function and returns pressure in bar
-/////////////////////////////////////////////////////////////////////////////////////////////
-// sensorData - data output from sensorRead()
-// return - (float) signed/scaled temperature in degrees Celsius
-/////////////////////////////////////////////////////////////////////////////////////////
-float ADIS16448::pressureScale(int16_t sensorData)
-{
-	float finalData = (sensorData * 0.02); //multiply by gyro sensitivity (0.005 LSB/dps)
-	return finalData;
-}
-/////////////////////////////////////////////////////////////////////////////////////////////
-// Converts magnetometer output from sensorRead() function and returns magnetic field
-// reading in Gauss
-/////////////////////////////////////////////////////////////////////////////////////////////
-// sensorData - data output from sensorRead()
-// return - (float) signed/scaled temperature in degrees Celsius
-/////////////////////////////////////////////////////////////////////////////////////////
-float ADIS16448::magnetometerScale(int16_t sensorData)
-{
-	float finalData = (sensorData * 0.0001429); //multiply by sensor resolution (142.9uGa LSB/dps)
-	return finalData;
-}
diff --git a/src/adis16448/adis16448.hpp b/src/adis16448/adis16448.hpp
deleted file mode 100644
index c662ab3..0000000
--- a/src/adis16448/adis16448.hpp
+++ /dev/null
@@ -1,173 +0,0 @@
-//////////////////////////////////////////////////////////////////////////////////////
-// The MIT License (MIT)
-//
-// Submit Date: 03/09/2015
-// Author: Juan Jose Chong <juanjchong@gmail.com>
-// Copyright (c) 2015 Juan Jose Chong
-//
-//////////////////////////////////////////////////////////////////////////////////////
-// adis16448.hpp
-//////////////////////////////////////////////////////////////////////////////////////
-//
-// This library runs on an Intel Edison and uses mraa to acquire data
-// from an ADIS16448. This data is then scaled and printed onto the terminal.
-//
-// This software has been tested to connect to an ADIS16448 through a level shifter
-// such as the TI TXB0104. The SPI lines (DIN, DOUT, SCLK, /CS) are all wired through
-// the level shifter and the ADIS16448 is also being powered by the Intel Edison.
-//
-// Permission is hereby granted, free of charge, to any person obtaining
-// a copy of this software and associated documentation files (the
-// "Software"), to deal in the Software without restriction, including
-// without limitation the rights to use, copy, modify, merge, publish,
-// distribute, sublicense, and/or sell copies of the Software, and to
-// permit persons to whom the Software is furnished to do so, subject to
-// the following conditions:
-//
-// The above copyright notice and this permission notice shall be
-// included in all copies or substantial portions of the Software.
-//
-// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-//
-//////////////////////////////////////////////////////////////////////////////////////
-#include <string>
-#include <mraa/spi.h>
-#include <mraa/gpio.h>
-
-// User Register Memory Map from Table 6 of the Datasheet
-#define FLASH_CNT 0x00 //Flash memory write count
-#define XGYRO_OUT 0x04 //X-axis gyroscope output
-#define YGYRO_OUT 0x06 //Y-axis gyroscope output
-#define ZGYRO_OUT 0x08 //Z-axis gyroscope output
-#define XACCL_OUT 0x0A //X-axis accelerometer output
-#define YACCL_OUT 0x0C //Y-axis accelerometer output
-#define ZACCL_OUT 0x0E //Z-axis accelerometer output
-#define XMAGN_OUT 0X10 //X-axis magnetometer output
-#define YMAGN_OUT 0x12 //Y-axis magnetometer output
-#define ZMAGN_OUT 0x14 //Z-axis magnetometer output
-#define BARO_OUT 0x16 //Barometer pressure measurement, high word
-#define TEMP_OUT 0x18 //Temperature output
-#define XGYRO_OFF 0x1A //X-axis gyroscope bias offset factor
-#define YGYRO_OFF 0x1C //Y-axis gyroscope bias offset factor
-#define ZGYRO_OFF 0x1E //Z-axis gyroscope bias offset factor
-#define XACCL_OFF 0x20 //X-axis acceleration bias offset factor
-#define YACCL_OFF 0x22 //Y-axis acceleration bias offset factor
-#define ZACCL_OFF 0x24 //Z-axis acceleration bias offset factor
-#define XMAGN_HIC 0x26 //X-axis magnetometer, hard iron factor
-#define YMAGN_HIC 0x28 //Y-axis magnetometer, hard iron factor
-#define ZMAGN_HIC 0x2A //Z-axis magnetometer, hard iron factor
-#define XMAGN_SIC 0x2C //X-axis magnetometer, soft iron factor
-#define YMAGN_SIC 0x2E //Y-axis magnetometer, soft iron factor
-#define ZMAGN_SIC 0x30 //Z-axis magnetometer, soft iron factor
-#define GPIO_CTRL 0x32 //GPIO control
-#define MSC_CTRL 0x34 //Misc. control
-#define SMPL_PRD 0x36 //Sample clock/Decimation filter control
-#define SENS_AVG 0x38 //Digital filter control
-#define SEQ_CNT 0x3A //xMAGN_OUT and BARO_OUT counter
-#define DIAG_STAT 0x3C //System status
-#define GLOB_CMD 0x3E //System command
-#define ALM_MAG1 0x40 //Alarm 1 amplitude threshold
-#define ALM_MAG2 0x42 //Alarm 2 amplitude threshold
-#define ALM_SMPL1 0x44 //Alarm 1 sample size
-#define ALM_SMPL2 0x46 //Alarm 2 sample size
-#define ALM_CTRL 0x48 //Alarm control
-#define LOT_ID1 0x52 //Lot identification number
-#define LOT_ID2 0x54 //Lot identification number
-#define PROD_ID 0x56 //Product identifier
-#define SERIAL_NUM 0x58 //Lot-specific serial number
-
-namespace upm {
- /**
-  * @brief ADIS16448 Accelerometer
-  * @defgroup adis16448 libupm-adis16448
-  * @ingroup generic spi accelerometer
-  */
-
- /**
-  * @library adis16448
-  * @sensor adis16448
-  * @comname Industrial Grade Ten Degrees of Freedom Inertial Sensor
-  * @type accelerometer
-  * @man generic
-  * @web http://www.analog.com/en/products/sensors/isensor-mems-inertial-measurement-units/adis16448.html
-  * @con spi
-  *
-  * @brief API for the Analog Devices ADIS16448 Accelerometer
-  *
-  * This is an industrial-grade accelerometer by Analog Devices.
-  *
-  * @snippet adis16448.cxx Interesting
-  */
-    class ADIS16448{
-
-        public:
-
-        /**
-         * Constructor with configurable HW Reset
-         */
-        ADIS16448(int bus, int rst);
-
-        /**
-         * Destructor
-         */
-        ~ADIS16448();
-
-        /**
-         * Performs hardware reset by sending the specified pin low for 2 seconds
-         */
-        void resetDUT();
-
-        /**
-         * Sets SPI frequency, mode, and bits/word
-         */
-        void configSPI();
-
-        /**
-         * Reads a specified register and returns data
-         */
-        int16_t regRead(uint8_t regAddr);
-
-        /**
-         * Writes to a specified register
-         */
-        void regWrite(uint8_t regAddr, uint16_t regData);
-
-        /**
-         * Scales accelerometer data
-         */
-        float accelScale(int16_t sensorData);
-
-        /**
-         * Scales gyro data
-         */
-        float gyroScale(int16_t sensorData);
-
-        /**
-         * Scales temperature data
-         */
-        float tempScale(int16_t sensorData);
-
-        /**
-         * Scales pressure data
-         */
-        float pressureScale(int16_t sensorData);
-
-        /**
-         * Scales magnetometer data
-         */
-        float magnetometerScale(int16_t sensorData);
-
-        private:
-
-        mraa_spi_context _spi;
-        mraa_gpio_context _rst;
-
-    };
-}
-
diff --git a/src/adis16448/adis16448.json b/src/adis16448/adis16448.json
deleted file mode 100644
index 914e397..0000000
--- a/src/adis16448/adis16448.json
+++ /dev/null
@@ -1,45 +0,0 @@
-{
-    "Library": "adis16448",
-    "Description": "Industrial Grade Ten Degrees of Freedom Inertial Sensor",
-    "Sensor Class":
-    {
-        "ADIS16448":
-        {
-            "Name": "API for the Analog Devices ADIS16448 Accelerometer",
-            "Description": "This is an industrial-grade accelerometer by Analog Devices.",
-            "Aliases": ["adis16448"],
-            "Categories": ["imu"],
-            "Connections": ["spi"],
-            "Project Type": ["prototyping", "industrial"],
-            "Manufacturers": ["generic"],
-            "Kits": [],
-            "Examples":
-            {
-                "Java": [],
-                "Python": [],
-                "Node.js": ["adis16448.js"],
-                "C++": ["adis16448.cxx"],
-                "C": []
-            },
-            "Specifications":
-            {
-                "Working Voltage": {"unit": "v", "low": 3.15, "high": 3.45},
-                "Working Current": {"unit": "mA", "low": 76, "high": 104}
-            },
-            "Platforms":
-            {
-                "Intel Joule Module":
-                {
-                    "Notes": ["Requires pull-up resistors with carrier board"],
-                    "Images": [""]
-                }
-            },
-            "Urls" :
-            {
-                "Product Pages": ["http://www.analog.com/en/products/sensors/inertial-measurement-units/adis16448.html"],
-                "Datasheets": ["http://www.analog.com/media/en/technical-documentation/data-sheets/ADIS16448.pdf"],
-                "Schematics": []
-            }
-        }
-    }
-}
diff --git a/src/ads1x15/CMakeLists.txt b/src/ads1x15/CMakeLists.txt
deleted file mode 100644
index cce80b4..0000000
--- a/src/ads1x15/CMakeLists.txt
+++ /dev/null
@@ -1,9 +0,0 @@
-set (libname "ads1x15")
-set (libdescription "Texas Instruments I2C ADC Library")
-set (module_src ${libname}.cxx ads1115.cxx ads1015.cxx)
-set (module_hpp ${libname}.hpp ads1115.hpp ads1015.hpp)
-upm_module_init(interfaces mraa)
-compiler_flag_supported(CXX is_supported -Wno-overloaded-virtual)
-if (is_supported)
-    target_compile_options(${libname} PUBLIC -Wno-overloaded-virtual)
-endif(is_supported)
diff --git a/src/ads1x15/ads1015.cxx b/src/ads1x15/ads1015.cxx
deleted file mode 100644
index 40fefda..0000000
--- a/src/ads1x15/ads1015.cxx
+++ /dev/null
@@ -1,169 +0,0 @@
-/*
- * Author: Marc Graham <marc@m2ag.net>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <unistd.h>
-
-#include "ads1015.hpp"
-#include "mraa/i2c.hpp"
-
-using namespace upm;
-
-void
-ADS1015::setSPS(ADSSAMPLERATE rate){
-    updateConfigRegister((m_config_reg & ~ADS1X15_DR_MASK) | rate);
-}
-
-ADS1015::ADS1015(int bus, uint8_t address, float vref) : ADS1X15(bus, address) {
-    m_name = "ADS1015";
-    m_conversionDelay = ADS1015_CONVERSIONDELAY;
-    m_bitShift = 4;
-    ADS1X15::getCurrentConfig();
-    if (vref < 0.0 || vref > 6.144)
-        UPM_THROW("vref out of range");
-    else if (vref > 4.096)
-        setGain(GAIN_TWOTHIRDS);
-    else if (vref > 2.048)
-        setGain(GAIN_ONE);
-    else if (vref > 1.024)
-        setGain(GAIN_TWO);
-    else if (vref > 0.512)
-        setGain(GAIN_FOUR);
-    else if (vref > 0.256)
-        setGain(GAIN_EIGHT);
-    else
-        setGain(GAIN_SIXTEEN);
-}
-
-ADS1015::~ADS1015(){};
-
-const char*
-ADS1015::getModuleName() {
-    return m_name.c_str();
-}
-
-
-unsigned int
-ADS1015::getNumInputs() {
-    return 4;
-}
-
-unsigned int
-ADS1015::getResolutionInBits() {
-    return 12;
-}
-
-uint16_t
-ADS1015::getRawValue(unsigned int input) {
-    ADS1X15::ADSMUXMODE mode = getMuxMode(input);
-    updateConfigRegister((m_config_reg & ~ADS1X15_MUX_MASK) | mode, true);
-    usleep(m_conversionDelay);
-    uint16_t value = i2c->readWordReg(ADS1X15_REG_POINTER_CONVERT);
-    value = value >> m_bitShift;
-    return swapWord(value);
-}
-
-float
-ADS1015::getVoltage(unsigned int input) {
-    ADSMUXMODE mode = getMuxMode(input);
-    return getSample(mode);
-}
-
-
-
-//Private functions
-float
-ADS1015::getMultiplier(void){
-    float multi = 0.0;
-    switch((ADSGAIN)m_config_reg & ADS1X15_PGA_MASK){
-    case GAIN_TWOTHIRDS:
-        multi = 0.003;
-        break;
-    case GAIN_ONE:
-        multi = 0.002;
-        break;
-    case GAIN_TWO:
-        multi = 0.001;
-        break;
-    case GAIN_FOUR:
-        multi = 0.0005;
-        break;
-    case GAIN_EIGHT:
-        multi = 0.00025;
-        break;
-    case GAIN_SIXTEEN:
-        multi = 0.000125;
-        break;
-    default:
-        multi = 0.001;
-        break;
-    }
-    return multi;
-}
-
-void
-ADS1015::setDelay(){
-    switch((int)ADS1X15::getSPS()){
-    case 0:
-        m_conversionDelay = 8000;
-        break;
-    case 32:
-        m_conversionDelay = 4000;
-        break;
-    case 64:
-        m_conversionDelay = 3000;
-        break;
-    case 96:
-        m_conversionDelay = 1100;
-        break;
-    case 128:
-        m_conversionDelay = 700;
-        break;
-    case 160:
-        m_conversionDelay = 500;
-        break;
-    case 192:
-        m_conversionDelay = 400;
-        break;
-    default:
-        m_conversionDelay = 8000;
-        break;
-    }
-}
-
-ADS1X15::ADSMUXMODE
-ADS1015::getMuxMode(unsigned int input) {
-    switch (input) {
-    case 0:
-        return SINGLE_0;
-    case 1:
-        return SINGLE_1;
-    case 2:
-        return SINGLE_2;
-    case 3:
-        return SINGLE_3;
-    default:
-        UPM_THROW("Invalid input");
-    }
-}
-
diff --git a/src/ads1x15/ads1015.hpp b/src/ads1x15/ads1015.hpp
deleted file mode 100644
index 3b7cbe0..0000000
--- a/src/ads1x15/ads1015.hpp
+++ /dev/null
@@ -1,186 +0,0 @@
-/*
- * Author: Marc Graham <marc@m2ag.net>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-/*=========================================================================*/
-
-#pragma once
-
-#include "ads1x15.hpp"
-#include "interfaces/iADC.hpp"
-
-#define ADS1015_VREF 2.048
-
-/*=========================================================================
-    CONVERSION DELAY (in microS)
-    -----------------------------------------------------------------------*/
-    #define ADS1015_CONVERSIONDELAY         (8000)
-/*=========================================================================*/
-
-
-/*=========================================================================
-    CONFIG REGISTER
-
-  -----------------------------------------------------------------------*/
-
-#define ADS1015_DR_MASK      (0x00E0)
-#define ADS1015_DR_128SPS    (0x0000)  // 128 samples per second
-#define ADS1015_DR_250SPS    (0x0020)  // 250 samples per second
-#define ADS1015_DR_490SPS    (0x0040)  // 490 samples per second
-#define ADS1015_DR_920SPS    (0x0060)  // 920 samples per second
-#define ADS1015_DR_1600SPS   (0x0080)  // 1600 samples per second (default)
-#define ADS1015_DR_2400SPS   (0x00A0)  // 2400 samples per second
-#define ADS1015_DR_3300SPS   (0x00C0)  // 3300 samples per second
-
-/*=========================================================================*/
-
-namespace upm {
-  /**
-   * @library ads1x15
-   * @sensor ADS1015
-   * @comname 12-bit ADC with Integrated MUX, PGA, Comparator, Oscillator, and Reference
-   * @type electric
-   * @man ti adafruit
-   * @con i2c
-   * @web http://www.ti.com/lit/ds/symlink/ads1015.pdf
-   *
-   * @brief API for ADS1015
-   *
-   * The ADS1013, ADS1014, and ADS1015 are precision analog-to-digital converters (ADCs) with 12 bits of resolution
-   * offered in an ultra-small, leadless QFN-10 package or an MSOP-10 package. The ADS1013/4/5 are designed with
-   * precision, power, and ease of implementation in mind. The ADS1013/4/5 feature an onboard reference and oscillator.
-   * Data is transferred via an I2C-compatible serial interface; four I2C slave addresses can be selected. The ADS1013/4/5
-   * operate from a single power supply ranging from 2.0V to 5.5V.
-   * The ADS1013/4/5 can perform conversions at rates up to 3300 samples per second (SPS). An onboard PGA is available
-   * on the ADS1014 and ADS1015 that offers input ranges from the supply to as low as +/- 256mV, allowing both large and small
-   * signals to be measured with high resolution. The ADS1015 also features an input multiplexer (MUX) that provides two
-   * differential or four single-ended inputs.
-   * The ADS1013/4/5 operate either in continuous conversion mode or a single-shot mode that automatically powers down
-   * after a conversion and greatly reduces current consumption during idle periods. The ADS1013/4/5 are specified from
-   * -40 deg C to +125 deg C.
-   *
-   * Tested with Adafriut ADS1015 board: https://www.adafruit.com/products/1083
-   *
-   * @image html ads1015.jpg
-   * @snippet ads1x15.cxx Interesting
-   * @snippet ads1x15-ads1015.cxx Interesting
-   * @snippet ads1x15-adc-sensor.cxx Interesting
-   */
-    class ADS1015 : public ADS1X15, public IADC {
-
-        public:
-
-        /**
-         * @enum ADSSAMPLERATE
-         * @brief uint16_t enum containing values
-         * representing the sample rate of the device.
-         *
-         * @var ADSSAMPLERATE::SPS_128  = 0x0000
-         * @var ADSSAMPLERATE::SPS_250  = 0x0020
-         * @var ADSSAMPLERATE::SPS_490  = 0x0040
-         * @var ADSSAMPLERATE::SPS_920  = 0x0060
-         * @var ADSSAMPLERATE::SPS_1600 = 0x0080
-         * @var ADSSAMPLERATE::SPS_2400 = 0x00A0
-         * @var ADSSAMPLERATE::SPS_3300 = 0x00C0
-         */
-        typedef enum ADSSAMPLERATE {
-         SPS_128           = ADS1015_DR_128SPS,
-         SPS_250           = ADS1015_DR_250SPS,
-         SPS_490           = ADS1015_DR_490SPS,
-         SPS_920           = ADS1015_DR_920SPS,
-         SPS_1600          = ADS1015_DR_1600SPS,
-         SPS_2400          = ADS1015_DR_2400SPS,
-         SPS_3300          = ADS1015_DR_3300SPS
-        } ADSSAMPLERATE;
-
-
-            /**
-             * ADS1015 constructor
-             *
-             * This constructor includes a vref parameter that can be used
-             * to set gain so it matches full scale value of input
-             *
-             * @param bus i2c bus the sensor is attached to.
-             * @param address Optional device address. Default is 0x48.
-             * @param vref Optional reference (i.e. half full swing) voltage. Default is 2.048V
-             */
-            ADS1015 (int bus, uint8_t address = 0x48, float vref = ADS1015_VREF);
-
-            /**
-             * ADS1X15 destructor
-             */
-            ~ADS1015 ();
-
-            /**
-             * Sets the sample rate of the device. This function
-             * needs to be overridden in subclasses as the ADS1115 and
-             * ADS1015 have different sample rates.
-             *
-             * @param rate ADSSAMPLERATE enum
-             */
-            void setSPS(ADSSAMPLERATE rate = SPS_1600);
-
-            /**
-             * Get number of inputs
-             *
-             * @return number of inputs
-             */
-            unsigned int getNumInputs();
-
-            /**
-             * Read current value for current single ended analogue input
-             *
-             * @return current conversion value
-             */
-            uint16_t getRawValue(unsigned int input);
-
-            /**
-             * Read current voltage for current single ended analogue input
-             *
-             * @return current voltage
-             */
-            float getVoltage(unsigned int input);
-
-            /**
-             * Read current voltage for current single ended analogue input
-             *
-             * @return current voltage
-             */
-            unsigned int getResolutionInBits();
-
-            /**
-             * Returns module name
-             *
-             * @return modulename as const char*
-             */
-            const char* getModuleName();
-
-
-        protected:
-            float getMultiplier(void);
-            void setDelay(void);
-
-        private:
-            ADS1X15::ADSMUXMODE getMuxMode(unsigned int input);
-
-    };
-}
diff --git a/src/ads1x15/ads1115.cxx b/src/ads1x15/ads1115.cxx
deleted file mode 100644
index a26aba4..0000000
--- a/src/ads1x15/ads1115.cxx
+++ /dev/null
@@ -1,103 +0,0 @@
-/*
- * Author: Marc Graham <marc@m2ag.net>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#include "ads1115.hpp"
-
-using namespace upm;
-
-ADS1115::ADS1115(int bus, uint8_t address) : ADS1X15(bus, address) {
-    m_name = "ADS1115";
-    m_conversionDelay = ADS1115_CONVERSIONDELAY;
-    m_bitShift = 0;
-    ADS1X15::getCurrentConfig();
-}
-
-ADS1115::~ADS1115(){};
-
-void
-ADS1115::setSPS(ADSDATARATE rate){
-    updateConfigRegister((m_config_reg & ~ADS1X15_DR_MASK) | rate);
-}
-
-//Protected functions
-float
-ADS1115::getMultiplier(void){
-    float multi = 0.0;
-    switch((ADSGAIN)m_config_reg & ADS1X15_PGA_MASK){
-    case GAIN_TWOTHIRDS:
-        multi = 0.0001875;
-        break;
-    case GAIN_ONE:
-        multi = 0.000125;
-        break;
-    case GAIN_TWO:
-        multi = 0.0000625;
-        break;
-    case GAIN_FOUR:
-        multi = 0.00003125;
-        break;
-    case GAIN_EIGHT:
-        multi = 0.000015625;
-        break;
-    case GAIN_SIXTEEN:
-        multi = 0.0000078125;
-        break;
-    default:
-        multi = 0.0001875;
-        break;
-    }
-    return multi;
-}
-
-void
-ADS1115::setDelay(){
-    switch((int)ADS1X15::getSPS()){
-    case 0:
-        m_conversionDelay = 126000;
-        break;
-    case 32:
-        m_conversionDelay = 63000;
-        break;
-    case 64:
-        m_conversionDelay = 32000;
-        break;
-    case 96:
-        m_conversionDelay = 16000;
-        break;
-    case 128:
-        m_conversionDelay = 8000;
-        break;
-    case 160:
-        m_conversionDelay = 4500;
-        break;
-    case 192:
-        m_conversionDelay = 2200;
-        break;
-    case 224:
-        m_conversionDelay = 1200;
-        break;
-    default:
-        m_conversionDelay = 126000;
-        break;
-    }
-}
diff --git a/src/ads1x15/ads1115.hpp b/src/ads1x15/ads1115.hpp
deleted file mode 100644
index d4329d8..0000000
--- a/src/ads1x15/ads1115.hpp
+++ /dev/null
@@ -1,146 +0,0 @@
-/*
- * Author: Marc Graham <marc@m2ag.net>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-/*=========================================================================*/
-
-#pragma once
-
-#include "ads1x15.hpp"
-
-
-
-/*=========================================================================
-    CONVERSION DELAY (in microS)
-    -----------------------------------------------------------------------*/
-    #define ADS1115_CONVERSIONDELAY         (8000)
-/*=========================================================================*/
-
-
-/*=========================================================================
-    CONFIG REGISTER
-
-  -----------------------------------------------------------------------*/
-
-#define ADS1115_DR_MASK      (0x00E0)
-#define ADS1115_DR_8SPS      (0x0000)  // 8 samples per second
-#define ADS1115_DR_16SPS     (0x0020)  // 16 samples per second
-#define ADS1115_DR_32SPS     (0x0040)  // 32 samples per second
-#define ADS1115_DR_64SPS     (0x0060)  // 64 samples per second
-#define ADS1115_DR_128SPS    (0x0080)  // 128 samples per second (default)
-#define ADS1115_DR_250SPS    (0x00A0)  // 250 samples per second
-#define ADS1115_DR_475SPS    (0x00C0)  // 475 samples per second
-#define ADS1115_DR_860SPS    (0x00E0)  // 860 samples per second
-
-/*=========================================================================*/
-
-namespace upm {
-  /**
-   * @library ads1x15
-   * @sensor ADS1115
-   * @comname 16-bit ADC with Integrated MUX, PGA, Comparator, Oscillator, and Reference
-   * @type electric
-   * @man ti adafruit
-   * @con i2c
-   * @web http://www.ti.com/lit/ds/symlink/ads1115.pdf
-   *
-   * @brief API for ADS1115
-   *
-   * The ADS1113, ADS1114, and ADS1115 are precision analog-to-digital converters (ADCs) with 16 bits of resolution offered
-   * in an ultra-small, leadless QFN-10 package or an MSOP-10 package. The ADS1113/4/5 are designed with precision, power,
-   * and ease of implementation in mind. The ADS1113/4/5 feature an onboard reference and oscillator. Data is transferred via
-   * an I2C-compatible serial interface; four I2C slave addresses can be selected. The ADS1113/4/5 operate from a single power
-   * supply ranging from 2.0V to 5.5V.
-   * The ADS1113/4/5 can perform conversions at rates up to 860 samples per second (SPS). An onboard PGA is available on
-   * the ADS1114 and ADS1115 that offers input ranges from the supply to as low as +/- 256mV, allowing both large and small
-   * signals to be measured with high resolution. The ADS1115 also features an input multiplexer (MUX) that provides two
-   * differential or four single-ended inputs.
-   * The ADS1113/4/5 operate either in continuous conversion mode or a single-shot mode that automatically powers down after
-   * a conversion and greatly reduces current consumption during idle periods. The ADS1113/4/5 are specified from -40 deg C to +125 deg C.
-   *
-   * Tested with DIYMall ADS1115 board. Also available from Adafruit: https://www.adafruit.com/products/1085
-   *
-   * @image html ads1115.jpg
-   * @snippet ads1x15.cxx Interesting
-   * @snippet ads1x15-ads1115.cxx Interesting
-   */
-    class ADS1115 : public ADS1X15 {
-
-        public:
-
-            /**
-             * @enum ADSSAMPLERATE
-             * @brief uint16_t enum containing values
-             * representing the sample rate of the device.
-             *
-             * @var ADSSAMPLERATE::SPS_8   = 0x0000
-             * @var ADSSAMPLERATE::SPS_16  = 0x0020
-             * @var ADSSAMPLERATE::SPS_32  = 0x0040
-             * @var ADSSAMPLERATE::SPS_64  = 0x0060
-             * @var ADSSAMPLERATE::SPS_128 = 0x0080
-             * @var ADSSAMPLERATE::SPS_250 = 0x00A0
-             * @var ADSSAMPLERATE::SPS_475 = 0x00C0
-             * @var ADSSAMPLERATE::SPS_860 = 0x00E0
-             */
-            typedef enum ADSDATARATE
-            {
-              SPS_8            = ADS1115_DR_8SPS,
-              SPS_16           = ADS1115_DR_16SPS,
-              SPS_32           = ADS1115_DR_32SPS,
-              SPS_64           = ADS1115_DR_64SPS,
-              SPS_128          = ADS1115_DR_128SPS,
-              SPS_250          = ADS1115_DR_250SPS,
-              SPS_475          = ADS1115_DR_475SPS,
-              SPS_860          = ADS1115_DR_860SPS
-            } ADSDATARATE;
-
-
-
-            /**
-             * ADS1X15 constructor
-             *
-             * @param bus i2c bus the sensor is attached to.
-             * @param address Device address. Default is 0x48.
-             */
-            ADS1115 (int bus, uint8_t address = 0x48);
-
-            /**
-             * ADS1X15 destructor
-             */
-            ~ADS1115();
-
-            /**
-             * Sets the sample rate of the device. This function
-             * needs to be overridden in subclasses as the ADS1115 and
-             * ADS1015 have different sample rates.
-             *
-             * @param rate ADSSAMPLERATE enum
-             */
-            void setSPS(ADSDATARATE rate = ADS1115::SPS_128);
-
-
-        protected:
-          float getMultiplier(void);
-          void setDelay(void);
-
-    };
-}
diff --git a/src/ads1x15/ads1x15.cxx b/src/ads1x15/ads1x15.cxx
deleted file mode 100644
index 47701b2..0000000
--- a/src/ads1x15/ads1x15.cxx
+++ /dev/null
@@ -1,188 +0,0 @@
-/*
- * Author: Marc Graham <marc@m2ag.net>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-
-#include "ads1x15.hpp"
-#include "mraa/i2c.hpp"
-
-#include <unistd.h>
-#include <syslog.h>
-
-using namespace upm;
-
-ADS1X15::ADS1X15(int bus, uint8_t address){
-
-     if(!(i2c = new mraa::I2c(bus))){
-           throw std::invalid_argument(std::string(__FUNCTION__) +": I2c.init() failed");
-           return;
-     }
-
-     if((i2c->address(address) != mraa::SUCCESS)){
-           throw std::runtime_error(std::string(__FUNCTION__) + ": I2c.address() failed");
-           return;
-     }
-
-     if(i2c->frequency( mraa::I2C_FAST) != mraa::SUCCESS){
-           syslog(LOG_WARNING, "%s: I2c.frequency(I2C_FAST) failed, using default speed", std::string(__FUNCTION__).c_str());
-     }
-     //Will be reset by sub class.
-     m_bitShift = 0;
-     m_conversionDelay = .001;
-     m_config_reg = 0x0000;
-}
-
-ADS1X15::~ADS1X15(){}
-
-float
-ADS1X15::getSample(ADSMUXMODE mode){
-     updateConfigRegister((m_config_reg & ~ADS1X15_MUX_MASK) | mode, true);
-     usleep(m_conversionDelay);
-     return getLastSample();
-}
-
-float
-ADS1X15::getLastSample(int reg){
-     uint16_t value = i2c->readWordReg(reg);
-     bool neg = false;
-     value = swapWord(value);
-     if(value & 0x8000){
-          neg = true;
-          value = ~value;
-     }
-     if(m_name == "ADS1015") value = value >> m_bitShift;
-     if(neg) return 0.0 - value * getMultiplier();
-      else return value * getMultiplier();
-}
-
-void
-ADS1X15::setGain(ADSGAIN gain){
-     updateConfigRegister((m_config_reg & ~ADS1X15_PGA_MASK) | gain);
-}
-
-void
-ADS1X15::setSPS(ADSSAMPLERATE rate){
-     updateConfigRegister((m_config_reg & ~ADS1X15_DR_MASK) | rate);
-}
-
-void
-ADS1X15::setCompMode(bool mode){
-     if(mode) updateConfigRegister((m_config_reg & ~ADS1X15_CMODE_MASK));
-      else updateConfigRegister((m_config_reg & ~ADS1X15_CMODE_MASK) | ADS1X15_CMODE_WINDOW);
-}
-
-void
-ADS1X15::setCompPol(bool mode){
-     if(!mode) updateConfigRegister((m_config_reg & ~ADS1X15_CPOL_MASK));
-      else updateConfigRegister((m_config_reg & ~ADS1X15_CPOL_MASK) | ADS1X15_CPOL_ACTVHI);
-}
-
-void
-ADS1X15::setCompLatch(bool mode){
-     if(mode) updateConfigRegister((m_config_reg & ~ADS1X15_CLAT_MASK));
-      else updateConfigRegister((m_config_reg & ~ADS1X15_CLAT_MASK) | ADS1X15_CLAT_LATCH);
-}
-
-void
-ADS1X15::setCompQue(ADSCOMP mode){
-     updateConfigRegister((m_config_reg & ~ADS1X15_CQUE_MASK) | mode);
-}
-
-void
-ADS1X15::setContinuous(bool mode){
-     if(mode) updateConfigRegister((m_config_reg & ~ADS1X15_MODE_MASK));
-      else updateConfigRegister((m_config_reg & ~ADS1X15_MODE_MASK) | ADS1X15_MODE_SINGLE);
-}
-
-float
-ADS1X15::getThresh(ADSTHRESH reg){
-     if(reg == THRESH_HIGH || reg == THRESH_LOW) return getLastSample(reg);
-     else return 0.0;
-}
-
-void
-ADS1X15::setThresh(ADSTHRESH reg, float value){
-     uint16_t set_value;
-     switch((int)reg){
-     case 4: //set conversion_rdy operation
-          if(i2c->writeWordReg(ADS1X15_REG_POINTER_LOWTHRESH, 0x0000) != mraa::SUCCESS){
-            throw std::runtime_error(std::string(__FUNCTION__) + ": I2c.write() failed");
-            return;
-          }
-          if(i2c->writeWordReg(ADS1X15_REG_POINTER_HITHRESH, 0x0080) != mraa::SUCCESS){
-            throw std::runtime_error(std::string(__FUNCTION__) + ": I2c.write() failed");
-            return;
-          }
-          break;
-     case 2:
-     case 3:
-          set_value = value / getMultiplier();
-          set_value = set_value << m_bitShift;
-          if(i2c->writeWordReg(reg, swapWord(set_value)) != mraa::SUCCESS){
-            throw std::runtime_error(std::string(__FUNCTION__) + ": I2c.write() failed");
-            return;
-          }
-          break;
-     case 5: //set default
-     default:
-          if(i2c->writeWordReg(ADS1X15_REG_POINTER_LOWTHRESH, 0x0080) != mraa::SUCCESS){
-            throw std::runtime_error(std::string(__FUNCTION__) + ": I2c.write() failed");
-            return;
-          }
-          if(i2c->writeWordReg(ADS1X15_REG_POINTER_HITHRESH, 0xF07F) != mraa::SUCCESS){
-            throw std::runtime_error(std::string(__FUNCTION__) + ": I2c.write() failed");
-            return;
-          }
-          break;
-     }
-}
-
-
-//Private functions
-void
-ADS1X15::getCurrentConfig(){
-     m_config_reg = i2c->readWordReg(ADS1X15_REG_POINTER_CONFIG);
-     m_config_reg = swapWord(m_config_reg);
-     setDelay();
-}
-
-void
-ADS1X15::updateConfigRegister(uint16_t update, bool read){
-     uint16_t temp = update;
-     //Mask out read bit if we are just updating the configuration.
-     if(!read) temp = update & 0x7FFF;
-     if(i2c->writeWordReg(ADS1X15_REG_POINTER_CONFIG, swapWord(temp)) != mraa::SUCCESS){
-            throw std::runtime_error(std::string(__FUNCTION__) + ": I2c.write() failed");
-            return;
-     }
-     //If we update the configuration re-set the in memory copy.
-     if(!read) getCurrentConfig();
-}
-
-uint16_t
-ADS1X15::swapWord(uint16_t value){
-     uint16_t res = value;
-     return ((res & 0xFF) << 8) | ((res >> 8 ) & 0xFF);
-}
-
-
diff --git a/src/ads1x15/ads1x15.hpp b/src/ads1x15/ads1x15.hpp
deleted file mode 100644
index 69f8412..0000000
--- a/src/ads1x15/ads1x15.hpp
+++ /dev/null
@@ -1,424 +0,0 @@
-/*
- * Author: Marc Graham <marc@m2ag.net>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#pragma once
-
-#include <iostream>
-#include <string>
-
-namespace mraa {class I2c;}
-
-/*=========================================================================
-    I2C ADDRESS/BITS
-    -----------------------------------------------------------------------*/
-#define ADS1X15_ADDRESS                 (0x48)    // 1001 000 (ADDR = GND)
-/*=========================================================================*/
-
-
-/*=========================================================================
-    POINTER REGISTER
-    -----------------------------------------------------------------------*/
-#define ADS1X15_REG_POINTER_MASK        (0x03)
-#define ADS1X15_REG_POINTER_CONVERT     (0x00)
-#define ADS1X15_REG_POINTER_CONFIG      (0x01)
-#define ADS1X15_REG_POINTER_LOWTHRESH   (0x02)
-#define ADS1X15_REG_POINTER_HITHRESH    (0x03)
-/*=========================================================================*/
-
-/*=========================================================================
-    CONFIG REGISTER
-
-    -----------------------------------------------------------------------*/
-#define ADS1X15_OS_MASK      (0x8000)
-#define ADS1X15_OS_SINGLE    (0x8000)  // Write: Set to start a single-conversion
-#define ADS1X15_OS_BUSY      (0x0000)  // Read: Bit = 0 when conversion is in progress
-#define ADS1X15_OS_NOTBUSY   (0x8000)  // Read: Bit = 1 when device is not performing a conversion
-
-#define ADS1X15_MUX_MASK     (0x7000)
-#define ADS1X15_MUX_DIFF_0_1 (0x0000)  // Differential P = AIN0, N = AIN1 (default)
-#define ADS1X15_MUX_DIFF_0_3 (0x1000)  // Differential P = AIN0, N = AIN3
-#define ADS1X15_MUX_DIFF_1_3 (0x2000)  // Differential P = AIN1, N = AIN3
-#define ADS1X15_MUX_DIFF_2_3 (0x3000)  // Differential P = AIN2, N = AIN3
-#define ADS1X15_MUX_SINGLE_0 (0x4000)  // Single-ended AIN0
-#define ADS1X15_MUX_SINGLE_1 (0x5000)  // Single-ended AIN1
-#define ADS1X15_MUX_SINGLE_2 (0x6000)  // Single-ended AIN2
-#define ADS1X15_MUX_SINGLE_3 (0x7000)  // Single-ended AIN3
-
-#define ADS1X15_PGA_MASK     (0x0E00)
-#define ADS1X15_PGA_6_144V   (0x0000)  // +/-6.144V range = Gain 2/3
-#define ADS1X15_PGA_4_096V   (0x0200)  // +/-4.096V range = Gain 1
-#define ADS1X15_PGA_2_048V   (0x0400)  // +/-2.048V range = Gain 2 (default)
-#define ADS1X15_PGA_1_024V   (0x0600)  // +/-1.024V range = Gain 4
-#define ADS1X15_PGA_0_512V   (0x0800)  // +/-0.512V range = Gain 8
-#define ADS1X15_PGA_0_256V   (0x0A00)  // +/-0.256V range = Gain 16
-
-#define ADS1X15_MODE_MASK    (0x0100)
-#define ADS1X15_MODE_CONTIN  (0x0000)  // Continuous conversion mode
-#define ADS1X15_MODE_SINGLE  (0x0100)  // Power-down single-shot mode (default)
-
-#define ADS1X15_DR_MASK      (0x00E0)
-
-#define ADS1X15_CMODE_MASK   (0x0010)
-#define ADS1X15_CMODE_TRAD   (0x0000)  // Traditional comparator with hysteresis (default)
-#define ADS1X15_CMODE_WINDOW (0x0010)  // Window comparator
-
-#define ADS1X15_CPOL_MASK    (0x0008)
-#define ADS1X15_CPOL_ACTVLOW (0x0000)  // ALERT/RDY pin is low when active (default)
-#define ADS1X15_CPOL_ACTVHI  (0x0008)  // ALERT/RDY pin is high when active
-
-#define ADS1X15_CLAT_MASK    (0x0400)  // Determines if ALERT/RDY pin latches once asserted
-#define ADS1X15_CLAT_NONLAT  (0x0000)  // Non-latching comparator (default)
-#define ADS1X15_CLAT_LATCH   (0x0400)  // Latching comparator
-
-#define ADS1X15_CQUE_MASK    (0x0003)
-/* This wouldn't compile for the python wrapper. with these in for some reason.
-#define ADS1X15_CQUE_1CONV   (0x0000)  // Assert ALERT/RDY after one conversions
-#define ADS1X15_CQUE_2CONV     (0x0001)  // Assert ALERT/RDY after two conversions
-#define ADS1X15_CQUE_4CONV     (0x0002)  // Assert ALERT/RDY after four conversions
-#define ADS1X15_CQUE_NONE      (0x0003)  // Disable the comparator and put ALERT/RDY in high state (default)
-*/
-/*=========================================================================*/
-
-namespace upm {
-  /**
-   * @brief ADS1X15 Family ADC Library
-   *
-   * Library for TI analog to digital converter ic. Base clase fro ADS1X15 provides all the functionality that
-   * ADS1115 and ADS1015 ics have in common.
-   *
-   * @defgroup ads1x15 libupm-ads1x15
-   * @ingroup ti adafruit i2c electric
-   */
-    class ADS1X15 {
-
-        public:
-
-           /**
-            * @enum ADSGAIN
-            * @brief uint16_t enum containing values for
-            * setting gain for ADS1X15 devices.
-            *
-            * @var ADSGAIN::TWOTHIRDS = 0x0000
-            * @var ADSGAIN::ONE       = 0x0200
-            * @var ADSGAIN::TWO       = 0x0400
-            * @var ADSGAIN::FOUR      = 0x0600
-            * @var ADSGAIN::EIGHT     = 0x0800
-            * @var ADSGAIN::SIXTEEN   = 0x0A00
-            */
-            typedef enum ADSGAIN {
-              GAIN_TWOTHIRDS    = ADS1X15_PGA_6_144V,
-              GAIN_ONE          = ADS1X15_PGA_4_096V,
-              GAIN_TWO          = ADS1X15_PGA_2_048V,
-              GAIN_FOUR         = ADS1X15_PGA_1_024V,
-              GAIN_EIGHT        = ADS1X15_PGA_0_512V,
-              GAIN_SIXTEEN      = ADS1X15_PGA_0_256V
-            } ADSGAIN ;
-
-            /**
-             * @enum ADSMUXMODE
-             * @brief uint16_t enum containing values used
-             * for selecting ADS1X15 read operations.
-             *
-             * @var ADSMUXMODE::DIFF_0_1 = 0x0000
-             * @var ADSMUXMODE::DIFF_0_2 = 0x1000
-             * @var ADSMUXMODE::DIFF_1_3 = 0x2000
-             * @var ADSMUXMODE::DIFF_2_3 = 0x3000
-             * @var ADSMUXMODE::SINGLE_0 = 0x4000
-             * @var ADSMUXMODE::SINGLE_1 = 0x5000
-             * @var ADSMUXMODE::SINGLE_2 = 0x6000
-             * @var ADSMUXMODE::SINGLE_3 = 0x7000
-             */
-            typedef enum ADSMUXMODE {
-              DIFF_0_1        = ADS1X15_MUX_DIFF_0_1,  // Differential P = AIN0, N = AIN1 (default)
-              DIFF_0_3        = ADS1X15_MUX_DIFF_0_3,  // Differential P = AIN0, N = AIN3
-              DIFF_1_3        = ADS1X15_MUX_DIFF_1_3,  // Differential P = AIN1, N = AIN3
-              DIFF_2_3        = ADS1X15_MUX_DIFF_2_3,  // Differential P = AIN2, N = AIN3
-              SINGLE_0        = ADS1X15_MUX_SINGLE_0,  // Single-ended AIN0
-              SINGLE_1        = ADS1X15_MUX_SINGLE_1,  // Single-ended AIN1
-              SINGLE_2        = ADS1X15_MUX_SINGLE_2,  // Single-ended AIN2
-              SINGLE_3        = ADS1X15_MUX_SINGLE_3   // Single-ended AIN3
-            } ADSMUXMODE;
-
-            /**
-             * @enum ADSCOMP
-             * @brief uint16_t enum containing values
-             * for setting ADS1X15 comparator queue modes.
-             *
-             * @var ADSCOMP::CQUE_1CONV = 0x0000
-             * @var ADSCOMP::CQUE_2CONV = 0x0001
-             * @var ADSCOMP::CQUE_3CONV = 0x0002
-             * @var ADSCOMP::CQUE_NONE  = 0x0003
-             */
-            typedef enum ADSCOMP {
-               CQUE_1CONV      = 0x0000,    // Assert ALERT/RDY after one conversions
-               CQUE_2CONV      = 0x0001,    // Assert ALERT/RDY after two conversions
-               CQUE_4CONV      = 0x0002,    // Assert ALERT/RDY after four conversions
-               CQUE_NONE       = 0x0003      // Disable the comparator and put ALERT/RDY in high state (default)
-            } ADSCOMP;
-
-            /**
-             * @enum ADSTHRESH
-             * @brief uint8_t enum containing register addresses
-             * used for setting HI and LOW threshold values as
-             * well as setting conversion ready and set to default.
-             *
-             * @var ADSTHRESH::THRESH_LOW     = 0x02
-             * @var ADSTHRESH::THRESH_HIGH    = 0x03
-             * @var ADSTHRESH::CONVERSION_RDY = 0x04
-             * @var ADSTHRESH::THRESH_DEFAULT = 0x05
-             */
-            typedef enum ADSTHRESH {
-                THRESH_LOW      = ADS1X15_REG_POINTER_LOWTHRESH,
-                THRESH_HIGH     = ADS1X15_REG_POINTER_HITHRESH,
-                CONVERSION_RDY  = 0x04,
-                THRESH_DEFAULT  = 0x05
-
-            } ADSTHRESH;
-
-            /**
-             * @enum ADSSAMPLERATE
-             * @brief uint16_t enum containing values
-             * representing the sample rate of the device.
-             * Will be overridden in subclass
-             *
-             * @var ADSSAMPLERATE::SPS_DEFAULT = 0x0080
-             */
-            typedef enum ADSSAMPLERATE {
-               SPS_DEFAULT     = 0x0080
-            } ADSSAMPLERATE;
-
-            /**
-             * ADS1X15 constructor
-             *
-             * @param bus i2c bus the sensor is attached to.
-             * @param address Device address. Default is 0x48.
-             */
-            ADS1X15(int bus, uint8_t address);
-
-            /**
-             * ADS1X15 destructor
-             */
-            virtual ~ADS1X15 ();
-
-            /**
-             * Returns the name of the sensor
-             */
-            std::string name()
-            {
-                return m_name;
-            }
-
-            /**
-             *  Returns the contents of conversion register without performing
-             *  a conversion operation. Will use a multiplier based on the
-             *  current gain setting to give the voltage as a float. Used
-             *  internally to return the HI and LOW threshold values.
-             *
-             *  @param reg uint8_t value specifying register to read.
-             *  Should generally be called with no parameter.
-             */
-            float getLastSample(int reg = ADS1X15_REG_POINTER_CONVERT);
-
-            /**
-             * Performs a read as specified by ADS1X15::ADSMUXMOE and
-             * returns the value as a float. Uses getLastSample() internally
-             * to return voltage value.
-             *
-             * @pram mode ADSMUXMODE specifying inputs to be sampled.
-             */
-            float getSample(ADSMUXMODE mode = ADS1X15::DIFF_0_1);
-
-            /**
-             * Returns the current gain setting being used by the device
-             * as an ADSGAIN value.
-             */
-            ADSGAIN getGain(){
-                return  (ADSGAIN)(m_config_reg & ADS1X15_PGA_MASK);
-            }
-
-            /**
-             * Sets the PGA gain bits to the desired gain. Default
-             * is +/- 2.094 volts.
-             *
-             * @param gain ADSGAIN value reprenting the desired gain.
-             * See warnings in spec sheet.
-             */
-            void setGain(ADSGAIN gain = ADS1X15::GAIN_TWO);
-
-            /**
-             * Returns the current device sample rate a an ADSSAMPLERATE
-             * value.
-             */
-            ADSSAMPLERATE getSPS(void){
-                return (ADSSAMPLERATE)(m_config_reg & ADS1X15_DR_MASK);
-            }
-
-            /**
-             * Sets the sample rate of the device. This function
-             * needs to be overrode in subclasses as the ADS1115 and
-             * ADS1015 have different data rates.
-             *
-             * @param ADSSAMPLERATE enum
-             * SPS_DEFAULT = 0x0080
-             */
-            virtual void setSPS(ADSSAMPLERATE rate);
-
-            /**
-             * Returns the comparator mode.
-             * False = Traditional comparator with Hysteresis (default)
-             * True  = Window Comparator
-             */
-            bool getCompMode(void){
-                return (bool)(m_config_reg & ADS1X15_CMODE_MASK);
-            }
-
-            /**
-             * Sets the comparator mode of the device.
-             *
-             * @param mode bool value denoting mode.
-             * False = Traditional comparator with Hysteresis (default)
-             * True  = Window Comparator
-             */
-            void setCompMode(bool mode = false);
-
-            /**
-             * Get comparator polarity. Reports the polarity
-             * of the ALERT/RDY pin. Returns:
-             * False = Active Low (default)
-             * True  = Active High
-             */
-            bool getCompPol(void){
-                return (bool)(m_config_reg & ADS1X15_CPOL_MASK);
-            }
-
-            /**
-             * Sets the comparator polarity. Controls the
-             * polarity of the ALERT/RDY pin.
-             *
-             * @param mode bool.
-             * False = Active Low (default)
-             * True  = Active High
-             */
-            void setCompPol(bool mode = false);
-
-            /**
-             * Returns bool representing the state of the
-             * comparator latching functionality.
-             * False = Non Latching comparator (default)
-             * True  = Latching Comparator
-             */
-            bool getCompLatch(void){
-                return (bool)(m_config_reg & ADS1X15_CLAT_MASK);
-            }
-
-            /**
-             * Sets bit controlling comparator operation.
-             *
-             * @param mode bool
-             * False = Non Latching comparator (default)
-             * True  = Latching Comparator
-             */
-            void setCompLatch(bool mode = false);
-
-            /**
-             * Returns ADSCOMP value representing the state of
-             * comparator queue.
-             *
-             * CQUE_1CONV = Assert after one conversion
-             * CQUE_2CONV = Assert after two conversions
-             * CQUE_2CONV = Assert after four conversions
-             * CQUE_NONE = Disable comparator (default)
-             */
-            ADSCOMP getCompQue(void){
-                return (ADSCOMP)(m_config_reg & ADS1X15_CQUE_MASK);
-            }
-
-            /**
-             * Sets bits controlling Comparator queue operation.
-             *
-             * @param mode ADSCOMP enum.
-             * CQUE_1CONV = Assert after one conversion
-             * CQUE_2CONV = Assert after two conversions
-             * CQUE_2CONV = Assert after four conversions
-             * CQUE_NONE  = Disable comparator (default)
-             */
-            void setCompQue(ADSCOMP mode = ADS1X15::CQUE_NONE);
-
-            /**
-             * Returns bool reflecting state of device mode bit.
-             *
-             * False = Power Down Single shot mode (default)
-             * True  = Continuous conversion mode
-             */
-            bool getContinuous(void){
-                return !(bool)(m_config_reg & ADS1X15_MODE_MASK);
-            }
-
-            /**
-             * Sets the state of device mode but.
-             *
-             * @param mode bool
-             * False = Power Down Single shot mode (default)
-             * True  = Continuous conversion mode
-             */
-            void setContinuous(bool mode = false);
-
-            /**
-             * Returns current high or low threshold setting.
-             *
-             * @param reg ADSTHRES enum value.
-             * Returns 0.0 unless THRESH_HIGH or THRESH_LOW requested.
-             */
-            float getThresh(ADSTHRESH reg = THRESH_DEFAULT);
-
-            /**
-             * Sets threshold levels or configures for conversion ready
-             * operation of ALERT/RDY output.
-             *
-             * @param reg ADSTHRESH enum
-             * @param value float value to set threshold register to.
-             *
-             * THRESH_LOW      = Sets low thresh register.
-             * THRESH_HIGH     = Sets high thresh register.
-             * CONVERSION_RDY  = Configures conversion ready operation
-             * THRESH_DEFAULT  = resets high/low registers to startup values.
-             */
-            void setThresh(ADSTHRESH reg = THRESH_DEFAULT , float value = 0.0);
-
-        protected:
-            std::string m_name;
-            float m_conversionDelay;
-            uint8_t m_bitShift;
-            uint16_t m_config_reg;
-            //Must be overridden in subclass for proper values.
-            virtual float getMultiplier(void) = 0;
-            //Must be overridden in subclass for proper values.
-            virtual void setDelay(void) = 0;
-            void getCurrentConfig();
-            void updateConfigRegister(uint16_t update, bool read = false);
-            uint16_t swapWord(uint16_t value);
-
-            mraa::I2c* i2c;
-
-    };}
diff --git a/src/ads1x15/ads1x15.i b/src/ads1x15/ads1x15.i
deleted file mode 100644
index e3252da..0000000
--- a/src/ads1x15/ads1x15.i
+++ /dev/null
@@ -1,35 +0,0 @@
-%include "../common_top.i"
-
-/* BEGIN Java syntax  ------------------------------------------------------- */
-#ifdef SWIGJAVA
-%import "../interfaces/javaupm_iADC.i"
-%typemap(javaimports) SWIGTYPE %{import upm_interfaces.*;%}
-
-JAVA_JNI_LOADLIBRARY(javaupm_ads1x15)
-#endif
-/* END Java syntax */
-
-/* BEGIN Javascript syntax  ------------------------------------------------- */
-#ifdef SWIGJAVASCRIPT
-%include "iModuleStatus.hpp"
-%include "iADC.hpp"
-#endif
-/* END Javascript syntax */
-
-/* BEGIN Python syntax  ----------------------------------------------------- */
-#ifdef SWIGPYTHON
-%include "iModuleStatus.hpp"
-%include "iADC.hpp"
-#endif
-/* END Python syntax */
-
-/* BEGIN Common SWIG syntax ------------------------------------------------- */
-%{
-#include "ads1x15.hpp"
-#include "ads1015.hpp"
-#include "ads1115.hpp"
-%}
-%include "ads1x15.hpp"
-%include "ads1115.hpp"
-%include "ads1015.hpp"
-/* END Common SWIG syntax */
diff --git a/src/ads1x15/ads1x15.json b/src/ads1x15/ads1x15.json
deleted file mode 100644
index e33b88b..0000000
--- a/src/ads1x15/ads1x15.json
+++ /dev/null
@@ -1,87 +0,0 @@
-{
-    "Library": "ADS1x15",
-    "Description": "TI ADC Library",
-    "Sensor Class":
-    {
-        "ADS1015":
-        {
-            "Name": "12-bit ADC with Integrated MUX, PGA, Comparator, Oscillator, and Reference",
-            "Description": "The ADS1013, ADS1014, and ADS1015 are precision analog-to-digital converters (ADCs) with 12 bits of resolution offered in an ultra-small, leadless QFN-10 package or an MSOP-10 package. The ADS1013/4/5 are designed with precision, power, and ease of implementation in mind. The ADS1013/4/5 feature an onboard reference and oscillator. Data is transferred via an I2C-compatible serial interface; four I2C slave addresses can be selected. The ADS1013/4/5 operate from a single power supply ranging from 2.0V to 5.5V. The ADS1013/4/5 can perform conversions at rates up to 3300 samples per second (SPS). An onboard PGA is available on the ADS1014 and ADS1015 that offers input ranges from the supply to as low as +/- 256mV, allowing both large and small signals to be measured with high resolution. The ADS1015 also features an input multiplexer (MUX) that provides two differential or four single-ended inputs. The ADS1013/4/5 operate either in continuous conversion mode or a single-shot mode that automatically powers down after a conversion and greatly reduces current consumption during idle periods. The ADS1013/4/5 are specified from -40 deg C to +125 deg C. Tested with Adafriut ADS1015 board.",
-            "Aliases": ["ads1015"],
-            "Categories": ["electric"],
-            "Connections": ["i2c"],
-            "Project Type": ["prototyping", "industrial"],
-            "Manufacturers": ["ti", "adafruit", "seeed", "sparkfun"],
-            "Image": "ads1015.jpg",
-            "Examples":
-            {
-                "Java": ["Ads1015_Example.java"],
-                "Python": ["ads1015.py"],
-                "Node.js": ["ads1115.js", "ads1x15.js"],
-                "C++": ["ads1x15-adc-sensor.cxx", "ads1x15-ads1015.cxx", "ads1x15.cxx"]
-            },
-            "Specifications":
-            {
-                "Vdd": {"unit": "v", "low" : 2.0, "high": 5.5},
-                "Data Rate":{"unit": "sps", "low": 128, "high": 3300},
-                "I (continuous mode)" : {"unit": "uA", "typical": 150},
-                "I2C Addresses": {"unit": "address", "low": "0x48", "high": "0x4B"}
-            },
-            "Platforms":
-            {
-                "Intel Joule Module":
-                {
-                    "Notes": ["On SeeedStudio Grove Shield for Intel Joule"]
-                },
-                "Intel Edison Module":
-                {
-                    "Notes": ["On SparkFun Block for Intel Edison - ADC"]
-                }
-            },
-            "Urls" :
-            {
-                "Product Pages": ["https://www.adafruit.com/product/1083", "http://wiki.seeed.cc/Grove_Shield_for_Intel_Joule/", "https://www.sparkfun.com/products/13770"],
-                "Datasheets": ["http://www.ti.com/lit/ds/symlink/ads1015.pdf"],
-                "Schematics": ["https://learn.adafruit.com/adafruit-4-channel-adc-breakouts/signal-connections"]
-            }
-        },
-        "ADS1115":
-        {
-            "Name": "16-bit ADC with Integrated MUX, PGA, Comparator, Oscillator, and Reference",
-            "Description": "The ADS1113, ADS1114, and ADS1115 are precision analog-to-digital converters (ADCs) with 16 bits of resolution offered in an ultra-small, leadless QFN-10 package or an MSOP-10 package. The ADS1113/4/5 are designed with precision, power, and ease of implementation in mind. The ADS1113/4/5 feature an onboard reference and oscillator. Data is transferred via an I2C-compatible serial interface; four I2C slave addresses can be selected. The ADS1113/4/5 operate from a single power supply ranging from 2.0V to 5.5V. The ADS1113/4/5 can perform conversions at rates up to 860 samples per second (SPS). An onboard PGA is available on the ADS1114 and ADS1115 that offers input ranges from the supply to as low as +/- 256mV, allowing both large and small signals to be measured with high resolution. The ADS1115 also features an input multiplexer (MUX) that provides two differential or four single-ended inputs. The ADS1113/4/5 operate either in continuous conversion mode or a single-shot mode that automatically powers down after a conversion and greatly reduces current consumption during idle periods. The ADS1113/4/5 are specified from -40 deg C to +125 deg C. Tested with DIYMall ADS1115 board.",
-            "Aliases": ["ads1115"],
-            "Categories": ["electric"],
-            "Connections": ["i2c"],
-            "Project Type": ["prototyping", "industrial"],
-            "Manufacturers": ["ti", "adafruit", "dfrobot"],
-            "Image": "ads1115.jpg",
-            "Examples":
-            {
-                "Java": ["Ads1115_Example.java"],
-                "Python": ["ads1115.py"],
-                "Node.js": ["ads1115.js", "ads1x15.js"],
-                "C++": ["ads1x15-adc-sensor.cxx", "ads1x15-ads1115.cxx", "ads1x15.cxx"]
-            },
-            "Specifications":
-            {
-                "Vdd": {"unit": "v", "low" : 2.0, "high": 5.5},
-                "Data Rate":{"unit": "sps", "low": 8, "high": 860},
-                "I (continuous mode)" : {"unit": "uA", "typical": 150},
-                "I2C Addresses": {"unit": "address", "low": "0x48", "high": "0x4B"}
-            },
-            "Platforms":
-            {
-                "Intel Joule Module":
-                {
-                    "Notes": ["On DFRobot Gravity Expansion Shield for Intel Joule"]
-                }
-            },
-            "Urls" :
-            {
-                "Product Pages": ["https://www.adafruit.com/product/1085", "https://www.dfrobot.com/product-1560.html"],
-                "Datasheets": ["http://www.ti.com/lit/ds/symlink/ads1115.pdf"],
-                "Schematics": ["https://learn.adafruit.com/adafruit-4-channel-adc-breakouts/signal-connections"]
-            }
-        }
-    }
-}
diff --git a/src/adxl335/CMakeLists.txt b/src/adxl335/CMakeLists.txt
deleted file mode 100644
index 20adad7..0000000
--- a/src/adxl335/CMakeLists.txt
+++ /dev/null
@@ -1,5 +0,0 @@
-set (libname "adxl335")
-set (libdescription "Low-power, 3-axis +/- 3 g Accelerometer")
-set (module_src ${libname}.cxx)
-set (module_hpp ${libname}.hpp)
-upm_module_init(mraa)
diff --git a/src/adxl335/adxl335.cxx b/src/adxl335/adxl335.cxx
deleted file mode 100644
index 3a564c9..0000000
--- a/src/adxl335/adxl335.cxx
+++ /dev/null
@@ -1,121 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Adapted from the seeedstudio example
- * https://github.com/Seeed-Studio/Accelerometer_ADXL335
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <iostream>
-#include <string>
-#include <stdexcept>
-
-#include "adxl335.hpp"
-
-using namespace std;
-using namespace upm;
-
-ADXL335::ADXL335(int pinX, int pinY, int pinZ, float aref)
-{
-  m_aref = aref;
-  m_zeroX = 0.0;
-  m_zeroY = 0.0;
-  m_zeroZ = 0.0;
-
-  if ( !(m_aioX = mraa_aio_init(pinX)) )
-    {
-      throw std::invalid_argument(std::string(__FUNCTION__) +
-                                  ": mraa_aio_init(X) failed, invalid pin?");
-      return;
-    }
-
-  if ( !(m_aioY = mraa_aio_init(pinY)) )
-    {
-      throw std::invalid_argument(std::string(__FUNCTION__) +
-                                  ": mraa_aio_init(Y) failed, invalid pin?");
-      return;
-    }
-
-  if ( !(m_aioZ = mraa_aio_init(pinZ)) )
-    {
-      throw std::invalid_argument(std::string(__FUNCTION__) +
-                                  ": mraa_aio_init(Z) failed, invalid pin?");
-      return;
-    }
-}
-
-ADXL335::~ADXL335()
-{
-  mraa_aio_close(m_aioX);
-  mraa_aio_close(m_aioY);
-  mraa_aio_close(m_aioZ);
-}
-
-void ADXL335::values(int *xVal, int *yVal, int *zVal)
-{
-  *xVal = mraa_aio_read(m_aioX);
-  *yVal = mraa_aio_read(m_aioY);
-  *zVal = mraa_aio_read(m_aioZ);
-}
-
-std::vector<int> ADXL335::values()
-{
-  std::vector<int> v(3);
-  values(&v[0], &v[1], &v[2]);
-  return v;
-}
-
-void ADXL335::acceleration(float *xAccel, float *yAccel, float *zAccel)
-{
-  int x, y, z;
-  float xVolts, yVolts, zVolts;
-
-  values(&x, &y, &z);
-  xVolts = float(x) * m_aref / 1024.0;
-  yVolts = float(y) * m_aref / 1024.0;
-  zVolts = float(z) * m_aref / 1024.0;
-
-  *xAccel = (xVolts - m_zeroX) / ADXL335_SENSITIVITY;
-  *yAccel = (yVolts - m_zeroY) / ADXL335_SENSITIVITY;
-  *zAccel = (zVolts - m_zeroZ) / ADXL335_SENSITIVITY;
-}
-
-std::vector<float> ADXL335::acceleration()
-{
-  std::vector<float> v(3);
-  acceleration(&v[0], &v[1], &v[2]);
-  return v;
-}
-
-void ADXL335::calibrate()
-{
-  // make sure the sensor is still before running calibration.
-
-  int x, y, z;
-  usleep(10000);
-
-  values(&x, &y, &z);
-
-  setZeroX(float(x) * m_aref / 1024.0);
-  setZeroY(float(y) * m_aref / 1024.0);
-  setZeroZ(float(z) * m_aref / 1024.0);
-}
diff --git a/src/adxl335/adxl335.hpp b/src/adxl335/adxl335.hpp
deleted file mode 100644
index 9a84021..0000000
--- a/src/adxl335/adxl335.hpp
+++ /dev/null
@@ -1,148 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Adapted from the seeedstudio example
- * https://github.com/Seeed-Studio/Accelerometer_ADXL335
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#pragma once
-
-#include <string>
-#include <vector>
-#include <mraa/aio.h>
-
-#define ADXL335_DEFAULT_AREF 5.0
-#define ADXL335_SENSITIVITY 0.25 // 0.25v/g
-
-namespace upm {
-
-  /**
-   * @brief ADXL335 Accelerometer
-   * @defgroup adxl335 libupm-adxl335
-   * @ingroup seeed analog accelerometer
-   */
-
-  /**
-   * @library adxl335
-   * @sensor adxl335
-   * @comname Low-power, 3-axis +/- 3 g Accelerometer
-   * @altname Grove 3-Axis Analog Accelerometer
-   * @type accelerometer
-   * @man seeed
-   * @con analog
-   * @web http://www.analog.com/en/products/mems/accelerometers/adxl335.html
-   *
-   * @brief API for the ADXL335 3-Axis Analog Accelerometer
-   *
-   * UPM module for the ADXL335 3-axis analog accelerometer. This
-   * was tested on a Grove 3-axis Analog Accelerometer. It uses 3
-   * analog pins, one for each axis: X, Y, and Z.
-   *
-   * @image html adxl335.jpg
-   * @snippet adxl335.cxx Interesting
-   */
-  class ADXL335 {
-  public:
-    /**
-     * ADXL335 constructor
-     *
-     * @param pinX Analog pin to use for X-axis
-     * @param pinY Analog pin to use for Y-axis
-     * @param pinZ Analog pin to use for Z-axis
-     * @param aref Analog reference voltage; default is 5.0v
-     */
-    ADXL335(int pinX, int pinY, int pinZ, float aref=ADXL335_DEFAULT_AREF);
-
-    /**
-     * ADXL335 destructor
-     */
-    ~ADXL335();
-
-    /**
-     * Sets the "zero" value of the X-axis, determined through calibration
-     *
-     * @param zeroX  "Zero" value of the X-axis
-     */
-    void setZeroX(float zeroX) { m_zeroX = zeroX; };
-
-    /**
-     * Sets the "zero" value of the Y-axis, determined through calibration
-     *
-     * @param zeroY  "Zero" value of the Y-axis
-     */
-    void setZeroY(float zeroY) { m_zeroY = zeroY; };
-
-    /**
-     * Sets the "zero" value of the Z-axis, determined through calibration
-     *
-     * @param zeroZ  "Zero" value of the Z-axis
-     */
-    void setZeroZ(float zeroZ) { m_zeroZ = zeroZ; };
-
-    /**
-     * Gets the analog values for the 3 axes
-     *
-     * @param xVal Pointer to the returned X-axis value
-     * @param yVal Pointer to the returned Y-axis value
-     * @param zVal Pointer to the returned Z-axis value
-     */
-    void values(int *xVal, int *yVal, int *zVal);
-
-    /**
-     * Gets the analog values for the 3 axes
-     *
-     * @return std::vector of x, y, z analog acceleration values
-     */
-    std::vector<int> values();
-
-    /**
-     * Gets the acceleration along all 3 axes
-     *
-     * @param xAccel Pointer to returned X-axis value
-     * @param yAccel Pointer to returned Y-axis value
-     * @param zAccel Pointer to returned Z-axis value
-     */
-    void acceleration(float *xAccel, float *yAccel, float *zAccel);
-
-    /**
-     * Gets the acceleration along all 3 axes
-     *
-     * @return std::vector of x, y, z acceleration values
-     */
-    std::vector<float> acceleration();
-
-    /**
-     * While the sensor is still, measures the X-axis, Y-axis, and Z-axis
-     * values and uses those values as the zero values.
-     */
-    void calibrate();
-
-  private:
-    mraa_aio_context m_aioX;
-    mraa_aio_context m_aioY;
-    mraa_aio_context m_aioZ;
-    float m_aref;
-    float m_zeroX, m_zeroY, m_zeroZ;
-  };
-}
-
-
diff --git a/src/adxl335/adxl335.i b/src/adxl335/adxl335.i
deleted file mode 100644
index 6aa280b..0000000
--- a/src/adxl335/adxl335.i
+++ /dev/null
@@ -1,61 +0,0 @@
-%include "../common_top.i"
-
-/* BEGIN Java syntax  ------------------------------------------------------- */
-#ifdef SWIGJAVA
-%apply int *OUTPUT { int *xVal, int *yVal, int *zVal };
-%apply float *OUTPUT { float *xAccel, float *yAccel, float *zAccel  };
-
-%typemap(jni) float* "jfloatArray"
-%typemap(jstype) float* "float[]"
-%typemap(jtype) float* "float[]"
-
-%typemap(javaout) float* {
-    return $jnicall;
-}
-
-%typemap(out) float *acceleration {
-    $result = JCALL1(NewFloatArray, jenv, 3);
-    JCALL4(SetFloatArrayRegion, jenv, $result, 0, 3, $1);
-}
-
-%typemap(jni) int* "jintArray"
-%typemap(jstype) int* "int[]"
-%typemap(jtype) int* "int[]"
-
-%typemap(javaout) int* {
-    return $jnicall;
-}
-
-%typemap(out) int *values {
-    $result = JCALL1(NewIntArray, jenv, 3);
-    JCALL4(SetIntArrayRegion, jenv, $result, 0, 3, (const signed int*)$1);
-    delete [] $1;
-}
-
-%ignore values(int *, int *, int *);
-%ignore acceleration(float *, float *, float *);
-
-JAVA_JNI_LOADLIBRARY(javaupm_adxl335)
-#endif
-/* END Java syntax */
-
-/* BEGIN Javascript syntax  ------------------------------------------------- */
-#ifdef SWIGJAVASCRIPT
-%pointer_functions(int, intp);
-%pointer_functions(float, floatp);
-#endif
-/* END Javascript syntax */
-
-/* BEGIN Python syntax  ----------------------------------------------------- */
-#ifdef SWIGPYTHON
-%pointer_functions(int, intp);
-%pointer_functions(float, floatp);
-#endif
-/* END Python syntax */
-
-/* BEGIN Common SWIG syntax ------------------------------------------------- */
-%{
-#include "adxl335.hpp"
-%}
-%include "adxl335.hpp"
-/* END Common SWIG syntax */
diff --git a/src/adxl335/adxl335.json b/src/adxl335/adxl335.json
deleted file mode 100644
index 7538d39..0000000
--- a/src/adxl335/adxl335.json
+++ /dev/null
@@ -1,46 +0,0 @@
-{
-    "Library": "adxl335",
-    "Description": "Low-power, 3-axis +/- 3 g Accelerometer",
-    "Sensor Class":
-    {
-        "ADXL335":
-        {
-            "Name": "API for the Analog Devices ADIS16448 Accelerometer",
-            "Description": "UPM module for the ADXL335 3-axis analog accelerometer. This was tested on a Grove 3-axis Analog Accelerometer. It uses 3 analog pins, one for each axis: X, Y, and Z.",
-            "Aliases": ["adxl335"],
-            "Categories": ["imu", "accelerometers"],
-            "Connections": ["analog"],
-            "Project Type": ["prototyping", "industrial"],
-            "Manufacturers": ["seeed"],
-            "Kits": [],
-            "Image": "adxl335.jpg",
-            "Examples":
-            {
-                "Java": [],
-                "Python": ["adxl335.py"],
-                "Node.js": ["adxl335.js"],
-                "C++": ["adxl335.cxx"],
-                "C": []
-            },
-            "Specifications":
-            {
-                "Working Voltage": {"unit": "v", "low": 1.8, "high": 3.6},
-                "Working Current": {"unit": "uA", "low": 350, "high": 350}
-            },
-            "Platforms":
-            {
-                "Intel Joule Module":
-                {
-                    "Notes": ["Requires pull-up resistors with carrier board"],
-                    "Images": [""]
-                }
-            },
-            "Urls" :
-            {
-                "Product Pages": ["http://www.analog.com/en/products/mems/accelerometers/adxl335.html"],
-                "Datasheets": ["http://www.analog.com/media/en/technical-documentation/data-sheets/ADXL335.pdf"],
-                "Schematics": []
-            }
-        }
-    }
-}
diff --git a/src/adxl345/CMakeLists.txt b/src/adxl345/CMakeLists.txt
deleted file mode 100644
index e306678..0000000
--- a/src/adxl345/CMakeLists.txt
+++ /dev/null
@@ -1,5 +0,0 @@
-set (libname "adxl345")
-set (libdescription "3-axis, +/- 2/4/8/16 g Digital Accelerometer")
-set (module_src ${libname}.cxx)
-set (module_hpp ${libname}.hpp)
-upm_module_init(mraa)
diff --git a/src/adxl345/adxl345.cxx b/src/adxl345/adxl345.cxx
deleted file mode 100644
index 878683e..0000000
--- a/src/adxl345/adxl345.cxx
+++ /dev/null
@@ -1,167 +0,0 @@
-/*
- * Author: Mihai Tudor Panu <mihai.tudor.panu@intel.com>
- * Copyright (c) 2014 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <iostream>
-#include <string>
-#include <stdexcept>
-#include <unistd.h>
-#include "math.h"
-#include "adxl345.hpp"
-
-#define READ_BUFFER_LENGTH 6
-
-//address and id
-#define ADXL345_I2C_ADDR 0x53
-#define ADXL345_ID 0x00
-
-//control registers
-#define ADXL345_OFSX 0x1E
-#define ADXL345_OFSY 0x1F
-#define ADXL345_OFSZ 0x20
-#define ADXL345_TAP_THRESH 0x1D
-#define ADXL345_TAP_DUR 0x21
-#define ADXL345_TAP_LATENCY 0x22
-#define ADXL345_ACT_THRESH 0x24
-#define ADXL345_INACT_THRESH 0x25
-#define ADXL345_INACT_TIME 0x26
-#define ADXL345_INACT_ACT_CTL 0x27
-#define ADXL345_FALL_THRESH 0x28
-#define ADXL345_FALL_TIME 0x29
-#define ADXL345_TAP_AXES 0x2A
-#define ADXL345_ACT_TAP_STATUS 0x2B
-
-//interrupt registers
-#define ADXL345_INT_ENABLE 0x2E
-#define ADXL345_INT_MAP 0x2F
-#define ADXL345_INT_SOURCE 0x30
-
-//data registers (read only)
-#define ADXL345_XOUT_L 0x32
-#define ADXL345_XOUT_H 0x33
-#define ADXL345_YOUT_L 0x34
-#define ADXL345_YOUT_H 0x35
-#define ADXL345_ZOUT_L 0x36
-#define ADXL345_ZOUT_H 0x37
-#define DATA_REG_SIZE 6
-
-//data and power management
-#define ADXL345_BW_RATE 0x2C
-#define ADXL345_POWER_CTL 0x2D
-#define ADXL345_DATA_FORMAT 0x31
-#define ADXL345_FIFO_CTL 0x38
-#define ADXL345_FIFO_STATUS 0x39
-
-//useful values
-#define ADXL345_POWER_ON 0x08
-#define ADXL345_AUTO_SLP 0x30
-#define ADXL345_STANDBY 0x00
-
-//scales and resolution
-#define ADXL345_FULL_RES 0x08
-#define ADXL345_10BIT 0x00
-#define ADXL345_2G 0x00
-#define ADXL345_4G 0x01
-#define ADXL345_8G 0x02
-#define ADXL345_16G 0x03
-
-using namespace upm;
-
-Adxl345::Adxl345(int bus) : m_i2c(bus)
-{
-    //init bus and reset chip
-    if ( m_i2c.address(ADXL345_I2C_ADDR) != mraa::SUCCESS ){
-        throw std::invalid_argument(std::string(__FUNCTION__) +
-                                    ": i2c.address() failed");
-        return;
-    }
-
-    m_buffer[0] = ADXL345_POWER_CTL;
-    m_buffer[1] = ADXL345_POWER_ON;
-    if( m_i2c.write(m_buffer, 2) != mraa::SUCCESS){
-        throw std::runtime_error(std::string(__FUNCTION__) +
-                                    ": i2c.write() control register failed");
-        return;
-    }
-
-    m_buffer[0] = ADXL345_DATA_FORMAT;
-    m_buffer[1] = ADXL345_16G | ADXL345_FULL_RES;
-    if( m_i2c.write(m_buffer, 2) != mraa::SUCCESS){
-        throw std::runtime_error(std::string(__FUNCTION__) +
-                                    ": i2c.write() mode register failed");
-        return;
-    }
-
-    //2.5V sensitivity is 256 LSB/g = 0.00390625 g/bit
-    //3.3V x and y sensitivity is 265 LSB/g = 0.003773584 g/bit, z is the same
-
-    m_offsets[0] = 0.003773584;
-    m_offsets[1] = 0.003773584;
-    m_offsets[2] = 0.00390625;
-
-    Adxl345::update();
-}
-
-float*
-Adxl345::getAcceleration()
-{
-    for(int i = 0; i < 3; i++){
-        m_accel[i] = m_rawaccel[i] * m_offsets[i];
-    }
-    return &m_accel[0];
-}
-
-int16_t*
-Adxl345::getRawValues()
-{
-    return &m_rawaccel[0];
-}
-
-uint8_t
-Adxl345::getScale(){
-
-    uint8_t result;
-
-    m_i2c.writeByte(ADXL345_DATA_FORMAT);
-
-    result = m_i2c.readByte();
-
-    return pow(2, (result & 0x03) + 1);
-}
-
-mraa::Result
-Adxl345::update(void)
-{
-    m_i2c.writeByte(ADXL345_XOUT_L);
-
-    m_i2c.read(m_buffer, DATA_REG_SIZE);
-
-    // x
-    m_rawaccel[0] = ((m_buffer[1] << 8 ) | m_buffer[0]);
-    // y
-    m_rawaccel[1] = ((m_buffer[3] << 8 ) | m_buffer[2]);
-    // z
-    m_rawaccel[2] = ((m_buffer[5] << 8 ) | m_buffer[4]);
-
-    return mraa::SUCCESS;
-}
diff --git a/src/adxl345/adxl345.hpp b/src/adxl345/adxl345.hpp
deleted file mode 100644
index 8ff243f..0000000
--- a/src/adxl345/adxl345.hpp
+++ /dev/null
@@ -1,111 +0,0 @@
-/*
- * Author: Mihai Tudor Panu <mihai.tudor.panu@intel.com>
- * Copyright (c) 2014 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#pragma once
-
-#include <mraa/i2c.hpp>
-
-#define READ_BUFFER_LENGTH 6
-
-namespace upm {
-
-/**
- * @brief ADXL345 Accelerometer
- * @defgroup adxl345 libupm-adxl345
- * @ingroup seeed i2c accelerometer
- */
-
-/**
- * @library adxl345
- * @sensor adxl345
- * @comname 3-axis, +/- 2/4/8/16 g Digital Accelerometer
- * @altname Grove 3-Axis Digital Accelerometer (16g)
- * @type accelerometer
- * @man seeed
- * @con i2c
- * @web http://www.analog.com/media/en/technical-documentation/data-sheets/ADXL345.pdf
- *
- * @brief API for the ADXL345 3-Axis Digital Accelerometer
- *
- * ADXL345 is a 3-axis digital accelerometer.
- * (http://www.seeedstudio.com/wiki/images/2/2c/ADXL345_datasheet.pdf)
- * The sensor has configurable resolutions to measure +/- 2g, +/- 4g, +/- 8g, or +/- 16g.
- * Note: The Grove* version of the sensor is incompatible with and not detected
- * on the I2C bus by the Intel(R) Edison using an Arduino* breakout board at 5V
- * (3V works fine).
- *
- * @image html adxl345.jpeg
- * @snippet adxl345.cxx Interesting
- */
-class Adxl345 {
-public:
-    /**
-     * Creates an ADXL345 object
-     *
-     * @param bus Number of the used I2C bus
-     */
-    Adxl345(int bus);
-
-    /**
-     * there is no need for a ADXL345 object destructor
-     * ~Adxl345();
-     */
-
-    /**
-     * Returns a pointer to a float[3] that contains acceleration (g) forces
-     *
-     * @return float* to a float[3]
-     */
-    float* getAcceleration();
-
-    /**
-     * Returns a pointer to an int[3] that contains the raw register values
-     * for X, Y, and Z
-     *
-     * @return int* to an int[3]
-     */
-    int16_t* getRawValues();
-
-    /**
-     * Returns the scale the accelerometer is currently set up to: 2, 4, 8,
-     * or 16
-     *
-     * @return uint with the current scale value
-     */
-    uint8_t getScale();
-
-    /**
-     * Updates the acceleration values from the I2C bus
-     *
-     * @return 0 if successful
-     */
-    mraa::Result update();
-private:
-    float m_accel[3];
-    float m_offsets[3];
-    int16_t m_rawaccel[3];
-    uint8_t m_buffer[READ_BUFFER_LENGTH];
-    mraa::I2c m_i2c;
-};
-
-}
diff --git a/src/adxl345/adxl345.i b/src/adxl345/adxl345.i
deleted file mode 100644
index 596ad21..0000000
--- a/src/adxl345/adxl345.i
+++ /dev/null
@@ -1,73 +0,0 @@
-%include "../common_top.i"
-
-/* BEGIN Java syntax  ------------------------------------------------------- */
-#ifdef SWIGJAVA
-%typemap(jni) float* "jfloatArray"
-%typemap(jstype) float* "float[]"
-%typemap(jtype) float* "float[]"
-
-%typemap(javaout) float* {
-    return $jnicall;
-}
-
-%typemap(out) float * {
-    $result = JCALL1(NewFloatArray, jenv, 3);
-    JCALL4(SetFloatArrayRegion, jenv, $result, 0, 3, $1);
-}
-
-%typemap(jni) int16_t* "jshortArray"
-%typemap(jstype) int16_t* "short[]"
-%typemap(jtype) int16_t* "short[]"
-
-%typemap(javaout) int16_t* {
-    return $jnicall;
-}
-
-%typemap(out) int16_t *getRawValues {
-    $result = JCALL1(NewShortArray, jenv, 3);
-    JCALL4(SetShortArrayRegion, jenv, $result, 0, 3, (jshort*)$1);
-    delete [] $1;
-}
-
-JAVA_JNI_LOADLIBRARY(javaupm_adxl345)
-#endif
-/* END Java syntax */
-
-/* BEGIN Javascript syntax  ------------------------------------------------- */
-#ifdef SWIGJAVASCRIPT
-%include "../carrays_int16_t.i"
-%include "../carrays_float.i"
-
-%typemap(out) int16_t * {
-    $result = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_int16Array, 0 | 0 );
-}
-
-%typemap(out) float * {
-    $result = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_floatArray, 0 | 0 );
-}
-
-%include <carrays.i>
-#endif
-/* END Javascript syntax */
-
-/* BEGIN Python syntax  ----------------------------------------------------- */
-#ifdef SWIGPYTHON
-%include "../carrays_int16_t.i"
-%include "../carrays_float.i"
-
-%typemap(out) int16_t * {
-    $result = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_int16Array, 0 | 0 );
-}
-
-%typemap(out) float * {
-    $result = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_floatArray, 0 | 0 );
-}
-#endif
-/* END Python syntax */
-
-/* BEGIN Common SWIG syntax ------------------------------------------------- */
-%{
-#include "adxl345.hpp"
-%}
-%include "adxl345.hpp"
-/* END Common SWIG syntax */
diff --git a/src/adxl345/adxl345.json b/src/adxl345/adxl345.json
deleted file mode 100644
index 2e40c3e..0000000
--- a/src/adxl345/adxl345.json
+++ /dev/null
@@ -1,46 +0,0 @@
-{
-    "Library": "adxl345",
-    "Description": "3-axis, +/- 2/4/8/16 g Digital Accelerometer",
-    "Sensor Class":
-    {
-        "Adxl345":
-        {
-            "Name": "API for the ADXL345 3-Axis Digital Accelerometer",
-            "Description": "ADXL345 is a 3-axis digital accelerometer. The sensor has configurable resolutions to measure +/- 2g, +/- 4g, +/- 8g, or +/- 16g.",
-            "Aliases": ["adxl335"],
-            "Categories": ["imu", "accelerometers"],
-            "Connections": ["i2c"],
-            "Project Type": ["prototyping", "industrial"],
-            "Manufacturers": ["seeed"],
-            "Kits": [],
-            "Image": "adxl335.jpg",
-            "Examples":
-            {
-                "Java": [],
-                "Python": ["adxl345.py"],
-                "Node.js": ["adxl345.js"],
-                "C++": ["adxl345.cxx"],
-                "C": []
-            },
-            "Specifications":
-            {
-                "Working Voltage": {"unit": "v", "low": 2, "high": 3.6},
-                "Working Current": {"unit": "uA", "low": 30, "high": 140}
-            },
-            "Platforms":
-            {
-                "Intel Edison":
-                {
-                    "Notes": ["The Grove* version of the sensor is incompatible with and not detected on the I2C bus by the Intel(R) Edison using an Arduino* breakout board at 5V (3V works fine)."],
-                    "Images": [""]
-                }
-            },
-            "Urls" :
-            {
-                "Product Pages": ["http://www.analog.com/en/products/mems/accelerometers/adxl345.html"],
-                "Datasheets": ["http://www.seeedstudio.com/wiki/images/2/2c/ADXL345_datasheet.pdf", "http://www.analog.com/media/en/technical-documentation/data-sheets/ADXL345.pdf"],
-                "Schematics": []
-            }
-        }
-    }
-}
diff --git a/src/adxrs610/CMakeLists.txt b/src/adxrs610/CMakeLists.txt
deleted file mode 100644
index 57c8b99..0000000
--- a/src/adxrs610/CMakeLists.txt
+++ /dev/null
@@ -1,5 +0,0 @@
-set (libname "adxrs610")
-set (libdescription "Gyro Breakout Board (300 Degrees/second)")
-set (module_src ${libname}.cxx)
-set (module_hpp ${libname}.hpp)
-upm_module_init(mraa)
diff --git a/src/adxrs610/adxrs610.cxx b/src/adxrs610/adxrs610.cxx
deleted file mode 100644
index c5d3f17..0000000
--- a/src/adxrs610/adxrs610.cxx
+++ /dev/null
@@ -1,99 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <iostream>
-
-#include "adxrs610.hpp"
-
-using namespace std;
-using namespace upm;
-
-ADXRS610::ADXRS610(int dPin, int tPin, float aref) :
-  m_aioData(dPin), m_aioTemp(tPin)
-{
-  // ADC resolution of data and temp should be the same...
-  m_aRes = (1 << m_aioData.getBit());
-  m_aref = aref;
-
-  setZeroPoint(calibrateZeroPoint());
-  setDeadband(0.0);
-
-  m_centerVolts = aref / 2.0;
-
-}
-
-ADXRS610::~ADXRS610()
-{
-}
-
-float ADXRS610::getDataVolts()
-{
-  int val = m_aioData.read();
-
-  return(float(val) * (m_aref / float(m_aRes)));
-}
-
-float ADXRS610::getTemperatureVolts()
-{
-  int val = m_aioTemp.read();
-
-  return(float(val) * (m_aref / float(m_aRes)));
-}
-
-float ADXRS610::calibrateZeroPoint(unsigned int samples)
-{
-  // The gyro should be in a stable, non-moving state
-
-  float sum = 0;
-  for (unsigned int i=0; i<samples; i++)
-    sum += getDataVolts();
-
-  return sum / samples;
-}
-
-float ADXRS610::getTemperature()
-{
-  float tempV = getTemperatureVolts();
-  
-  // nominal 2.5 volts at 25C
-  if (tempV > m_centerVolts)
-    return (m_temperatureNom + ((tempV - m_centerVolts) / m_temperatureCoeff));
-  else
-    return (m_temperatureNom - ((m_centerVolts - tempV) / m_temperatureCoeff));
-}
-
-float ADXRS610::getAngularVelocity()
-{
-  float dataV = getDataVolts();
-
-  // check the deadband
-  if (dataV < (m_zeroPoint + m_deadband) &&
-      dataV > (m_zeroPoint - m_deadband))
-    return 0.0;
-  
-  if (dataV > m_zeroPoint)
-    return ((dataV - m_zeroPoint) / m_degreeCoeff);
-  else
-    return -((m_zeroPoint - dataV) / m_degreeCoeff);
-}
diff --git a/src/adxrs610/adxrs610.hpp b/src/adxrs610/adxrs610.hpp
deleted file mode 100644
index 81021b0..0000000
--- a/src/adxrs610/adxrs610.hpp
+++ /dev/null
@@ -1,175 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#pragma once
-
-#include <iostream>
-#include <string>
-#include <mraa/aio.hpp>
-
-// volts per degree / second (typ)
-#define m_degreeCoeff 0.006
-
-// volts per degree C (typ)
-#define m_temperatureCoeff 0.009
-
-// nominal temperature at m_centerVolts
-#define m_temperatureNom 25.0
-
-namespace upm {
-  /**
-   * @brief ADXRS610 Gyroscope
-   * @defgroup adxrs610 libupm-adxrs610
-   * @ingroup dfrobot analog compass
-   */
-
-  /**
-   * @library adxrs610
-   * @sensor adxrs610
-   * @comname Gyro Breakout Board (300 Degrees/second)
-   * @altname ADXRS610
-   * @type compass
-   * @man dfrobot
-   * @web http://www.dfrobot.com/index.php?route=product/product&product_id=642
-   * @con analog
-   *
-   * @brief DFRobot ADXRS610 Gyro Breakout board
-   *
-   * The ADXRS610 is a MEMS based single axis gyroscope with a range
-   * of +/- 300 degrees/sec.  It also incorporates a temperature
-   * sensing unit that can be used for advanced calibration.
-   *
-   * This sensor returns an analog voltage proportional to the
-   * rotation about the Z-axis in degrees/sec.  The temperature
-   * component returns a proportional analog values in degrees C.
-   *
-   * This driver was developed using the DFRobot ADXRS610 Gyro Breakout board.
-   *
-   * @image html adxrs610.jpg
-   * @snippet adxrs610.cxx Interesting
-   */
-
-  class ADXRS610 {
-  public:
-
-    /**
-     * ADXRS610 constructor
-     *
-     * @param dPin Analog pin to use for DATAOUT
-     * @param tPin Analog pin to use for temperature measurement
-     * @param aref Analog reference voltage; default is 5.0 V
-     */
-    ADXRS610(int dPin, int tPin, float aref=5.0);
-
-    /**
-     * ADXRS610 destructor
-     */
-    ~ADXRS610();
-
-    /**
-     * Returns the voltage detected on the DATA analog pin
-     *
-     * @return The detected voltage
-     */
-    float getDataVolts();
-
-    /**
-     * Returns the voltage detected on the TEMP analog pin
-     *
-     * @return The detected voltage
-     */
-    float getTemperatureVolts();
-
-    /**
-     * This method allows you to specify a deadband region around the
-     * zero point of the gyro (at rest).  This can be used as a
-     * primitive filter to ignore movment around the zero point.
-     *
-     * @param deadband The voltage around the zero point which will be
-     * ignored
-     */
-    void setDeadband(float deadband) { m_deadband = deadband; };
-
-    /**
-     * Set the zero point.  This is the point measured and averaged
-     * when the sensor is not moving.  It is set at construction time
-     * (averaged over a number of samples), but can be overridden here.
-     *
-     * @param zeroPoint The averaged zero point of the sensor at rest
-     */
-    void setZeroPoint(float zeroPoint) { m_zeroPoint = zeroPoint; };
-
-    /**
-     * This method samples the data pin samples times to produce an
-     * average.  This value can then be used as the zero point
-     * (setZeroPoint()).
-     *
-     * @param samples the number of samples to take an average over.
-     * The default is 50.  
-     * @return the average of the reading over samples times.
-     */
-    float calibrateZeroPoint(unsigned int samples=50);
-
-    /**
-     * Return the zero point value.
-     *
-     * @return the current zero point value
-     */
-    float getZeroPoint() { return m_zeroPoint; };
-
-    /**
-     * Return the measured temperature in Celsius.  Note, the
-     * datasheet says that this value is very repeatable, but is not
-     * an accurate absolute temperature.
-     *
-     * @return the current temperature in C
-     */
-    float getTemperature();
-
-    /**
-     * Return the measured angular velocity in degrees/sec.
-     *
-     * @return the current angular velocity in degrees/sec
-     */
-    float getAngularVelocity();
-
-  protected:
-    mraa::Aio m_aioData;
-    mraa::Aio m_aioTemp;
-
-  private:
-    float m_aref;
-    // ADC resolution
-    int m_aRes;
-
-    // measured or set zero point value
-    float m_zeroPoint;
-    // desired deadband, default is 0.0
-    float m_deadband;
-
-    // aref / 2
-    float m_centerVolts;
-  };
-}
-
-
diff --git a/src/adxrs610/adxrs610.json b/src/adxrs610/adxrs610.json
deleted file mode 100644
index fb936da..0000000
--- a/src/adxrs610/adxrs610.json
+++ /dev/null
@@ -1,46 +0,0 @@
-{
-    "Library": "adxrs610",
-    "Description": "Gyro Breakout Board (300 Degrees/second)",
-    "Sensor Class":
-    {
-        "ADXRS610":
-        {
-            "Name": "DFRobot ADXRS610 Gyro Breakout Board",
-            "Description": "The ADXRS610 is a MEMS based single axis gyroscope with a range of +/- 300 degrees/sec.  It also incorporates a temperature sensing unit that can be used for advanced calibration. This sensor returns an analog voltage proportional to the rotation about the Z-axis in degrees/sec.  The temperature component returns a proportional analog values in degrees C. This driver was developed using the DFRobot ADXRS610 Gyro Beakout board.",
-            "Aliases": ["adxrs610"],
-            "Categories": ["imu", "gyroscope"],
-            "Connections": ["analog"],
-            "Project Type": ["prototyping", "industrial"],
-            "Manufacturers": ["dfrobot"],
-            "Kits": [],
-            "Image": "adxrs610.jpg",
-            "Examples":
-            {
-                "Java": [],
-                "Python": ["adxrs610.py"],
-                "Node.js": ["adxrs610.js"],
-                "C++": ["adxrs610.cxx"],
-                "C": []
-            },
-            "Specifications":
-            {
-                "Vdd": {"unit": "v", "low" : 5.0, "high": 5.0},
-                "Quiescent Current": {"unit": "mA", "low": 3.5, "high": 4.5}
-            },
-            "Platforms":
-            {
-                "Intel Joule Module":
-                {
-                    "Notes": ["Requires pull-up resistors with carrier board"],
-                    "Images": [""]
-                }
-            },
-            "Urls" :
-            {
-                "Product Pages": ["https://www.dfrobot.com/product-642.html"],
-                "Datasheets": ["http://image.dfrobot.com/image/data/SEN0070/ADXRS610%20datasheet_EN.pdf"],
-                "Schematics": ["http://image.dfrobot.com/image/data/SEN0070/ADXRS610_Gyro_Breakout.pdf"]
-            }
-        }
-    }
-}
diff --git a/src/am2315/CMakeLists.txt b/src/am2315/CMakeLists.txt
deleted file mode 100644
index 0915f3c..0000000
--- a/src/am2315/CMakeLists.txt
+++ /dev/null
@@ -1,5 +0,0 @@
-set (libname "am2315")
-set (libdescription "Digital Temperature and Humidity Sensor")
-set (module_src ${libname}.cpp)
-set (module_hpp ${libname}.hpp)
-upm_module_init(mraa)
diff --git a/src/am2315/am2315.cpp b/src/am2315/am2315.cpp
deleted file mode 100644
index 3ff165b..0000000
--- a/src/am2315/am2315.cpp
+++ /dev/null
@@ -1,318 +0,0 @@
-/*
- * Author: William Penner <william.penner@intel.com>
- * Copyright (c) 2014 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining a copy
- * of this software and associated documentation files (the "Software"), to deal
- * in the Software without restriction, including without limitation the rights
- * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
- * copies of the Software, and to permit persons to whom the Software is
- * furnished to do so, subject to the following conditions:
- *
- * The above copyright notice and this permission notice shall be included in
- * all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
- * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
- * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
- * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
- * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
- * THE SOFTWARE.
- */
-
-#include <iostream>
-#include <string>
-#include <stdexcept>
-#include <unistd.h>
-#include <stdlib.h>
-#include <sched.h>
-#include <time.h>
-
-#include "am2315.hpp"
-
-using namespace upm;
-
-char g_name[] = AM2315_NAME;
-
-AM2315::AM2315(int bus, int devAddr) {
-    m_temperature = 0;
-    m_humidity    = 0;
-    m_last_time = 0;
-
-    m_name = g_name;
-
-    m_controlAddr = devAddr;
-    m_bus = bus;
-
-    m_base_priority = sched_getscheduler(0);
-
-    if ( !(m_i2ControlCtx = mraa_i2c_init(m_bus)) ) 
-      {
-        throw std::invalid_argument(std::string(__FUNCTION__) +
-                                    ": mraa_i2c_init() failed");
-        return;
-      }
-
-    mraa_result_t ret = mraa_i2c_address(m_i2ControlCtx, m_controlAddr);
-    if (ret != MRAA_SUCCESS) {
-        throw std::invalid_argument(std::string(__FUNCTION__) +
-                                    ": mraa_i2c_address() failed");
-        return;
-    }
-    m_model = i2cReadReg_16(AM2315_MODEL);
-    m_version = i2cReadReg_8(AM2315_VERSION);
-    m_id = i2cReadReg_32(AM2315_ID);
-
-    fprintf(stdout,"%s: Model: 0x%04x Version: 0x%02x ID: 0x%08x\n",
-            m_name, m_model, m_version, m_id );
-}
-
-AM2315::~AM2315() {
-    mraa_i2c_stop(m_i2ControlCtx);
-}
-
-void
-AM2315::update_values(void)
-{
-    time_t ctime = time(NULL);
-    if ((ctime - m_last_time) >= AM2315_SAMPLE) {
-        uint32_t uival = i2cReadReg_32(AM2315_HUMIDITY);
-        m_humidity = uival >> 16;
-        m_temperature = uival & 0xffff;
-        m_last_time = ctime;
-    }
-    else {
-        // In case the time is changed - backwards
-        if (ctime < m_last_time)
-            m_last_time = ctime;
-    }
-}
-
-float
-AM2315::getTemperature(void)
-{
-    update_values();
-    return (float)m_temperature / 10;
-}
-
-float
-AM2315::getTemperatureF(void)
-{
-    return getTemperature() * 9 / 5 + 32;
-}
-
-float
-AM2315::getHumidity(void)
-{
-    update_values();
-    return (float)m_humidity / 10;
-}
-
-/*
- * Test function: when reading the AM2315 many times rapidly should
- * result in a temperature increase.  This test will verify that the
- * value is changing from read to read
- */
-
-int
-AM2315::testSensor(void)
-{
-    int i;
-    int iError = 0;
-    float fTemp, fHum;
-    float fTempMax, fTempMin;
-    float fHumMax, fHumMin;
-
-    fprintf(stdout, "%s: Executing Sensor Test\n", m_name );
-
-    fHum  = getHumidity();
-    fTemp = getTemperature();
-    fTempMax = fTempMin = fTemp;
-    fHumMax  = fHumMin  = fHum;
-
-    // Then sample the sensor a few times
-    for (i=0; i < 10; i++) {
-        fHum  = getHumidity();
-        fTemp = getTemperature();
-        if (fHum  < fHumMin)  fHumMin  = fHum;
-        if (fHum  > fHumMax)  fHumMax  = fHum;
-        if (fTemp < fTempMin) fTempMin = fTemp;
-        if (fTemp > fTempMax) fTempMax = fTemp;
-        usleep(50000);
-    }
-
-    // Now check the results
-    if (fHumMin == fHumMax && fTempMin == fTempMax) {
-        fprintf(stdout, "%s:  Humidity/Temp reading was unchanged - warning\n",
-                m_name );
-        iError++;
-    }
-    if (iError == 0) {
-        fprintf(stdout, "%s:  Device appears functional\n", m_name );
-    }
-
-    fprintf(stdout, "%s: Test complete\n", m_name );
-
-    return iError;
-}
-
-uint16_t
-AM2315::crc16(uint8_t* ptr, uint8_t len)
-{
-    uint16_t crc = 0xffff;
-    uint8_t i;
-
-    while(len--) {
-        crc ^= *ptr++;
-        for (i=0; i < 8; i++) {
-            if (crc & 0x01) {
-                crc >>= 1;
-                crc ^= 0xA001;
-            }
-            else {
-                crc >>= 1;
-            }
-        }
-    }
-    return crc;
-}
-
-/*
- * Functions to read and write data to the i2c device in the
- * special format used by the device.  This is using i2c to
- * interface to a controller that the AOSONG AM2315 uses to
- * perform the measurements and manage other registers.
- */
-int
-AM2315::i2cWriteReg(uint8_t reg, uint8_t* data, uint8_t ilen)
-{
-    uint8_t tdata[16] = { AM2315_WRITE, reg, ilen };
-    mraa_result_t error;
-
-    for (int i=0; i < ilen; i++) {
-        tdata[i+3] = data[i];
-    }
-    uint16_t crc = crc16(tdata, ilen+3);
-    // CRC is sent out backwards from other registers (low, high)
-    tdata[ilen+3] = crc;
-    tdata[ilen+4] = (crc >> 8);
-
-    int iLoops = 5;
-    mraa_set_priority(HIGH_PRIORITY);
-    do {
-        error = mraa_i2c_write(m_i2ControlCtx, tdata, ilen+5);
-        usleep(800);
-    } while(error != MRAA_SUCCESS && --iLoops);
-    mraa_set_priority(m_base_priority);
-
-    if (error != MRAA_SUCCESS) {
-        fprintf(stdout, "%s: Error, timeout writing sensor.\n", m_name);
-        return -1;
-    }
-    crc = crc16(tdata,3);
-    mraa_i2c_read(m_i2ControlCtx, tdata, 5);
-    if ((tdata[0] != AM2315_WRITE) ||
-        (tdata[1] != reg)          ||
-        (tdata[2] != ilen)         ||
-        (tdata[3] != (crc & 0xff)) ||
-        (tdata[4] != (crc >> 8))) {
-        fprintf(stdout, "%s: CRC error during write verification\n", m_name);
-        return -1;
-    }
-    return 0;
-}
-
-
-// TODO: Need to patch up function to return only the data that
-// is needed and not require the various functions that call this
-// to send it enough buffer to cover the function
-
-uint8_t
-AM2315::i2cReadReg(int reg, uint8_t* data, int ilen)
-{
-  uint8_t tdata[16] = { AM2315_READ, static_cast<uint8_t>(reg),
-                        static_cast<uint8_t>(ilen) };
-
-    mraa_result_t ret;
-    int iLoops = 5;
-    mraa_set_priority(HIGH_PRIORITY);
-    do {
-        ret = mraa_i2c_write(m_i2ControlCtx, tdata, 3);
-        usleep(800);
-    } while(ret != MRAA_SUCCESS && --iLoops);
-    if (ret != MRAA_SUCCESS) {
-        fprintf(stdout, "%s: Error, timeout reading sensor.\n", m_name);
-        mraa_set_priority(m_base_priority);
-        return -1;
-    }
-    usleep(5000);
-    mraa_i2c_read(m_i2ControlCtx, tdata, ilen+4);
-    mraa_set_priority(m_base_priority);
-
-    uint16_t crc = crc16(tdata, ilen+2);
-    if ((tdata[0] != AM2315_READ)  ||
-        (tdata[1] != ilen)         ||
-        (tdata[ilen+2] != (crc & 0xff)) ||
-        (tdata[ilen+3] != (crc >> 8))) {
-        fprintf(stdout, "%s: Read crc failed.\n", m_name);
-    }
-    for (int i=0; i < ilen; i++)
-        data[i] = tdata[i+2];
-
-    return 0;
-}
-
-/*
- * Functions to set up the reads and writes to simplify the process of
- * formatting data as needed by the microcontroller
- */
-
-int
-AM2315::i2cWriteReg_32(int reg, uint32_t ival) {
-    uint8_t data[4];
-    data[0] = ival >> 24;
-    data[1] = ival >> 16;
-    data[1] = ival >>  8;
-    data[1] = ival & 0xff;
-    return i2cWriteReg(reg, data, 4);
-}
-
-int
-AM2315::i2cWriteReg_16(int reg, uint16_t ival) {
-    uint8_t data[2];
-    data[0] = ival & 0xff;
-    data[1] = ival >> 8;
-    return i2cWriteReg(reg, data, 2);
-}
-
-int
-AM2315::i2cWriteReg_8(int reg, uint8_t ival) {
-    uint8_t data[2];
-    data[0] = ival & 0xff;
-    data[1] = ival >> 8;
-    return i2cWriteReg(reg, data, 2);
-}
-
-uint32_t
-AM2315::i2cReadReg_32 (int reg) {
-    uint8_t data[4];
-    i2cReadReg(reg, data, 4);
-    return ((((((uint32_t)data[0] << 8) | data[1]) << 8) |
-            data[2]) << 8) | data[3];
-}
-
-uint16_t
-AM2315::i2cReadReg_16 (int reg) {
-    uint8_t data[2];
-    i2cReadReg(reg, data, 2);
-    return ((int16_t)data[0] << 8) | (uint16_t)data[1];
-}
-
-uint8_t
-AM2315::i2cReadReg_8 (int reg) {
-    uint8_t data[1];
-    i2cReadReg(reg, data, 1);
-    return data[0];
-}
-
diff --git a/src/am2315/am2315.hpp b/src/am2315/am2315.hpp
deleted file mode 100644
index 75ad96c..0000000
--- a/src/am2315/am2315.hpp
+++ /dev/null
@@ -1,201 +0,0 @@
-/*
- * Author: William Penner <william.penner@intel.com>
- * Copyright (c) 2014 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining a copy
- * of this software and associated documentation files (the "Software"), to deal
- * in the Software without restriction, including without limitation the rights
- * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
- * copies of the Software, and to permit persons to whom the Software is
- * furnished to do so, subject to the following conditions:
- *
- * The above copyright notice and this permission notice shall be included in
- * all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
- * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
- * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
- * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
- * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
- * THE SOFTWARE.
- */
-
-#pragma once
-
-#include <string>
-#include <mraa/i2c.h>
-#include <math.h>
-
-#define AM2315_NAME "am2315"
-#define AM2315_I2C_ADDRESS 0x5c
-
-#define AM2315_READ     0x03
-#define AM2315_WRITE    0x10
-
-/* AM2315 Commands */
-#define AM2315_HUMIDITY 0x00
-#define AM2315_TEMP     0x02
-#define AM2315_MODEL    0x08
-#define AM2315_VERSION  0x0A
-#define AM2315_ID       0x0B
-#define AM2315_STATUS   0x0F
-#define AM2315_USER_A   0x10
-#define AM2315_USER_B   0x12
-
-#define AM2315_SAMPLE   2
-
-#define HIGH_PRIORITY   99
-
-namespace upm {
-
-/**
- * @brief AM2315 Temperature & Humidity Sensor
- * @defgroup am2315 libupm-am2315
- * @ingroup adafruit i2c temp
- */
-
-/**
- * @library am2315
- * @sensor am2315
- * @comname Digital Temperature and Humidity Sensor
- * @type temp
- * @man adafruit
- * @web http://www.adafruit.com/products/1293
- * @con i2c
- *
- * @brief API for the AM2315 Temperature & Humidity Sensor
- *
- * AM2315 by Measurement Specialties
- * (http://www.aosong.com/asp_bin/Products/en/AM2315.pdf)
- * is a digital humidity sensor with temperature output.
- * RH reports between 0 and 100%, and the temperature range is
- * -40 to +125 degC.
- * The sampling period of this sensor is 2 seconds. Reads occurring
- * more often than that return cached data.
- *
- * @image html am2315.jpeg
- * @snippet am2315.cxx Interesting
- */
-class AM2315 {
-    public:
-        /**
-         * Instantiates an AM2315 object
-         *
-         * @param bus Number of the used bus
-         * @param devAddr Address of the used I2C device
-         */
-        AM2315 (int bus, int devAddr=AM2315_I2C_ADDRESS);
-
-        /**
-         * AM2315 object destructor; basically, it closes the I2C connection.
-         */
-        ~AM2315 ();
-
-        /**
-         * Gets the current measured humidity [RH]
-         *
-         * Data is updated every 2 seconds - accesses occurring more often than
-         * that return cached data
-         */
-        float getHumidity(void);
-
-        /**
-         * Gets the humidity cell temperature [degC]
-         *
-         * Data is updated every 2 seconds - accesses occurring more often than
-         * that return cached data
-         */
-        float getTemperature(void);
-
-        /**
-         * Gets the humidity cell temperature [degF]
-         *
-         * Data is updated every 2 seconds - accesses occurring more often than
-         * that return cached data
-         */
-        float getTemperatureF(void);
-
-        /**
-         * Function intended to test the device and verify it
-         * is operating correctly.
-         *
-         */
-        int testSensor(void);
-
-        /**
-         * Writes a four-byte (32b) register
-         *
-         * Note: these access routines are not the normal accesses to an I2C
-         * device. AM2315 contains a microcontroller that manages the
-         * actual readings. These handlers then make requests over I2C using
-         * a protocol defined by AM2315.
-         *
-         * @param reg Address of the register
-         * @param ival 32b value
-         */
-        int i2cWriteReg_32(int reg, uint32_t ival);
-
-        /**
-         * Writes a two-byte (16b) register
-         *
-         * @param reg Address of the register
-         * @param ival 16b value
-         */
-        int i2cWriteReg_16(int reg, uint16_t ival);
-
-        /**
-         * Writes a one-byte (8b) register
-         *
-         * @param reg Address of the register
-         * @param ival 8b value
-         */
-        int i2cWriteReg_8(int reg, uint8_t ival);
-
-        /**
-         * Reads a four-byte register
-         *
-         * @param reg Address of the register
-         */
-        uint32_t i2cReadReg_32 (int reg);
-
-        /**
-         * Reads a two-byte register
-         *
-         * @param reg Address of the register
-         */
-        uint16_t i2cReadReg_16 (int reg);
-
-        /**
-         * Reads a one-byte register
-         *
-         * @param reg Address of the register
-         */
-        uint8_t i2cReadReg_8 (int reg);
-
-    private:
-
-        char* m_name;
-
-        int m_controlAddr;
-        int m_bus;
-        mraa_i2c_context m_i2ControlCtx;
-
-        void update_values(void);
-        uint8_t i2cReadReg(int reg, uint8_t* data, int ilen);
-        int i2cWriteReg(uint8_t reg, uint8_t* data, uint8_t ilen);
-        uint16_t crc16(uint8_t* ptr, uint8_t len);
-
-        int32_t   m_temperature;
-        int32_t   m_humidity;
-
-        uint16_t  m_model;
-        uint16_t  m_version;
-        uint32_t  m_id;
-
-        time_t    m_last_time;
-
-        int       m_base_priority;
-};
-
-}
diff --git a/src/am2315/am2315.json b/src/am2315/am2315.json
deleted file mode 100644
index 03089d1..0000000
--- a/src/am2315/am2315.json
+++ /dev/null
@@ -1,47 +0,0 @@
-{
-    "Library": "am2315",
-    "Description": "Digital Temperature and Humidity Sensor",
-    "Sensor Class":
-    {
-        "AM2315":
-        {
-            "Name": "API for the AM2315 Temperature & Humidity Sensor",
-            "Description": "The AM2315 is a digital humidity sensor with temperature output. RH reports between 0 and 100%, and the temperature range is -40 to +125 degC. The sampling period of this sensor is 2 seconds. Reads occurring more often than that return cached data.",
-            "Aliases": ["am2315"],
-            "Categories": ["humidity", "temperature"],
-            "Connections": ["i2c"],
-            "Project Type": ["prototyping", "industrial"],
-            "Manufacturers": ["adafruit"],
-            "Kits": [],
-            "Examples":
-            {
-                "Java": ["AM2315_Example.java"],
-                "Python": [],
-                "Node.js": [],
-                "C++": ["am2315.cxx"],
-                "C": []
-            },
-            "Specifications":
-            {
-                "Vcc": {"unit": "v", "low" : 3.5, "high": 5.5},
-                "Current Draw": {"unit": "mA", "low": 0.0, "high": 10},
-                "Temperature Sensor Range": {"unit": "degC", "low": -20, "high": 80},
-                "Humidity Sensor Range": {"unit": "%", "low": 0, "high": 100}
-            },
-            "Platforms":
-            {
-                "Intel Joule Module":
-                {
-                    "Notes": ["Requires pull-up resistors with carrier board"],
-                    "Images": [""]
-                }
-            },
-            "Urls" :
-            {
-                "Product Pages": ["http://www.adafruit.com/products/1293"],
-                "Datasheets": ["https://cdn-shop.adafruit.com/datasheets/AM2315.pdf"],
-                "Schematics": []
-            }
-        }
-    }
-}
diff --git a/src/apa102/CMakeLists.txt b/src/apa102/CMakeLists.txt
deleted file mode 100644
index 54731a6..0000000
--- a/src/apa102/CMakeLists.txt
+++ /dev/null
@@ -1,8 +0,0 @@
-upm_mixed_module_init (NAME apa102
-    DESCRIPTION "LED Strip"
-    C_HDR apa102.h
-    C_SRC apa102.c
-    CPP_HDR apa102.hpp
-    CPP_SRC apa102.cxx
-    FTI_SRC apa102_fti.c
-    REQUIRES mraa utilities-c)
diff --git a/src/apa102/apa102.c b/src/apa102/apa102.c
deleted file mode 100644
index 3443cb1..0000000
--- a/src/apa102/apa102.c
+++ /dev/null
@@ -1,140 +0,0 @@
-/*
- * Author: Mihai Tudor Panu <mihai.tudor.panu@intel.com>
- * Copyright (c) 2016 Intel Corporation
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <string.h>
-#include <assert.h>
-
-#include "apa102.h"
-#include "upm_utilities.h"
-
-apa102_context apa102_init(int ledcount, int bus, int cs) {
-
-    apa102_context dev = (apa102_context)malloc(sizeof(struct _apa102_context));
-
-    if(!dev)
-        return NULL;
-
-    memset(dev, 0, sizeof(struct _apa102_context));
-    dev->leds = ledcount;
-
-    // Try to allocate and zero out buffer
-    uint16_t endframelength = (dev->leds + 15) / 16;
-    dev->framelength = 4 * (1 + dev->leds) + endframelength;
-    if ((dev->buffer = (uint8_t*)malloc(dev->framelength))) {
-        memset(dev->buffer, 0x00, dev->framelength - endframelength);
-        memset(&dev->buffer[dev->framelength - endframelength], 0xFF, endframelength);
-        int i;
-        for (i = 1; i <= dev->leds; i++) {
-            dev->buffer[i * 4] = 224;
-        }
-    } else {
-        printf("%s: Failed to allocate LED buffer.\n", __FUNCTION__);
-        apa102_close(dev);
-        return NULL;
-    }
-
-    dev->spi = NULL;
-    dev->cs = NULL;
-
-    // Initialize MRAA contexts
-    if (!(dev->spi = mraa_spi_init(bus))) {
-        printf("%s: mraa_spi_init(bus) failed.\n", __FUNCTION__);
-        apa102_close(dev);
-        return NULL;
-    }
-
-    if (cs >= 0) {
-        if (!(dev->cs = mraa_gpio_init(cs))) {
-          printf("%s: mraa_gpio_init(cs) failed.\n", __FUNCTION__);
-          apa102_close(dev);
-          return NULL;
-        }
-        mraa_gpio_dir(dev->cs, MRAA_GPIO_OUT);
-    }
-
-    return dev;
-}
-
-void apa102_close(apa102_context dev) {
-    assert(dev != NULL);
-
-    if (dev->spi)
-        mraa_spi_stop(dev->spi);
-    if (dev->cs)
-        mraa_gpio_close(dev->cs);
-    if(dev->buffer)
-        free(dev->buffer);
-    free(dev);
-}
-
-upm_result_t apa102_set_led(apa102_context dev, uint16_t index, uint8_t brightness, uint8_t r, uint8_t g, uint8_t b) {
-    return apa102_set_leds(dev, index, index, brightness, r, g, b);
-}
-
-upm_result_t apa102_set_led_brightness(apa102_context dev, uint16_t index, uint8_t brightness) {
-    return apa102_set_leds_brightness(dev, index, index, brightness);
-}
-
-upm_result_t apa102_set_leds(apa102_context dev, uint16_t s_index, uint16_t e_index, uint8_t brightness, uint8_t r, uint8_t g, uint8_t b) {
-    assert(dev != NULL);
-    int i;
-    uint16_t s_idx = (s_index + 1) * 4;
-    uint16_t e_idx = (e_index + 1) * 4;
-
-    for (i = s_idx; i <= e_idx; i += 4) {
-        dev->buffer[i] = brightness | 224;
-        dev->buffer[i + 1] = b;
-        dev->buffer[i + 2] = g;
-        dev->buffer[i + 3] = r;
-    }
-    return UPM_SUCCESS;
-}
-
-upm_result_t apa102_set_leds_brightness(apa102_context dev, uint16_t s_index, uint16_t e_index, uint8_t brightness) {
-    assert(dev != NULL);
-    int i;
-    uint16_t s_idx = (s_index + 1) * 4;
-    uint16_t e_idx = (e_index + 1) * 4;
-
-    for (i = s_idx; i <= e_idx; i += 4) {
-        dev->buffer[i] = brightness | 224;
-    }
-    return UPM_SUCCESS;
-}
-
-upm_result_t apa102_refresh(apa102_context dev) {
-    assert(dev != NULL);
-    if(!dev->cs) {
-        uint8_t* recv =
-            mraa_spi_write_buf(dev->spi, dev->buffer, dev->framelength);
-        if (recv != NULL) free(recv);
-    } else {
-        mraa_gpio_write(dev->cs, 1);
-        uint8_t* recv =
-            mraa_spi_write_buf(dev->spi, dev->buffer, dev->framelength);
-        if (recv != NULL) free(recv);
-        mraa_gpio_write(dev->cs, 0);
-    }
-    return UPM_SUCCESS;
-}
diff --git a/src/apa102/apa102.cxx b/src/apa102/apa102.cxx
deleted file mode 100644
index 46b7323..0000000
--- a/src/apa102/apa102.cxx
+++ /dev/null
@@ -1,197 +0,0 @@
-/*
- * Author: Yannick Adam <yannick.adam@gmail.com>
- * Copyright (c) 2016 Yannick Adam
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <cstring>
-#include <iostream>
-#include <stdexcept>
-#include <stdlib.h>
-#include <unistd.h>
-
-#include "apa102.hpp"
-
-using namespace upm;
-
-APA102::APA102(uint16_t ledCount, uint8_t spiBus, bool batchMode, int8_t csn)
-        : m_ledCount(ledCount), m_batchMode(batchMode)
-{
-    mraa::Result res = mraa::SUCCESS;
-    m_leds = NULL;
-
-    // Optional chip select pin
-    m_csnPinCtx = NULL;
-    if (csn > -1) {
-        m_csnPinCtx = new mraa::Gpio(csn);
-        res = m_csnPinCtx->dir(mraa::DIR_OUT);
-        if (res != mraa::SUCCESS) {
-            throw std::invalid_argument(std::string(__FUNCTION__) +
-                                        ": GPIO failed to set direction");
-        }
-    }
-
-    CSOff();
-    // Initialize SPI
-    m_spi = new mraa::Spi(spiBus);
-
-    // Initialize LED array
-    uint16_t endFrameLength = (m_ledCount + 15) / 16; // End frame should be (leds/2) bits
-    m_frameLength = endFrameLength + (m_ledCount + 1) * 4;
-    if ((m_leds = (uint8_t*) malloc(m_frameLength))) {
-        memset(m_leds, 0x00, m_frameLength - 4);                               // Clear state
-        memset(&m_leds[m_frameLength - endFrameLength], 0xFF, endFrameLength); // Frame End
-
-        // Need to set the brightness to "0" for each Led
-        for (int i = 1; i <= m_ledCount; i++) {
-            m_leds[i * 4] = 224;
-        }
-
-    } else {
-        throw std::runtime_error(std::string(__FUNCTION__) +
-                                 ": Failed to allocate memory for LED Strip");
-    }
-}
-
-APA102::~APA102()
-{
-    // Clear leds
-    if (m_leds) {
-        free(m_leds);
-    }
-
-    // Clear SPI
-    if (m_spi) {
-        delete m_spi;
-    }
-
-    // Clear GPIO
-    if (m_csnPinCtx) {
-        delete m_csnPinCtx;
-    }
-}
-
-
-void
-APA102::setLed(uint16_t ledIdx, uint8_t brightness, uint8_t r, uint8_t g, uint8_t b)
-{
-    setLeds(ledIdx, ledIdx, brightness, r, g, b);
-}
-
-void
-APA102::setLedBrightness(uint16_t ledIdx, uint8_t brightness)
-{
-    setLedsBrightness(ledIdx, ledIdx, brightness);
-}
-
-void
-APA102::setAllLeds(uint8_t brightness, uint8_t r, uint8_t g, uint8_t b)
-{
-    setLeds(0, m_ledCount - 1, brightness, r, g, b);
-}
-
-void
-APA102::setLeds(uint16_t startIdx, uint16_t endIdx, uint8_t brightness, uint8_t r, uint8_t g, uint8_t b)
-{
-    uint16_t s_idx = (startIdx + 1) * 4;
-    uint16_t e_idx = (endIdx + 1) * 4;
-
-    for (uint16_t i = s_idx; i <= e_idx; i += 4) {
-        m_leds[i] = brightness | 224;
-        m_leds[i + 1] = b;
-        m_leds[i + 2] = g;
-        m_leds[i + 3] = r;
-    }
-
-    if (!m_batchMode) {
-        pushState();
-    }
-}
-
-void
-APA102::setLedsBrightness(uint16_t startIdx, uint16_t endIdx, uint8_t brightness)
-{
-    uint16_t s_idx = (startIdx + 1) * 4;
-    uint16_t e_idx = (endIdx + 1) * 4;
-
-    for (uint16_t i = s_idx; i <= e_idx; i += 4) {
-        m_leds[i] = brightness | 224;
-    }
-
-    if (!m_batchMode) {
-        pushState();
-    }
-}
-
-void
-APA102::setLeds(uint16_t startIdx, uint16_t endIdx, uint8_t* colors)
-{
-    uint16_t s_idx = (startIdx + 1) * 4;
-    memcpy(&m_leds[s_idx], colors, (endIdx - startIdx + 1) * 4);
-
-    if (!m_batchMode) {
-        pushState();
-    }
-}
-
-void
-APA102::setBusSpeed(int hz)
-{
-    if (m_spi->frequency(hz) != mraa::SUCCESS) {
-        throw std::runtime_error(std::string(__FUNCTION__) +
-                                    ": Failed to change SPI bus speed");
-    }
-}
-
-void
-APA102::pushState(void)
-{
-    CSOn();
-    uint8_t* recv = m_spi->write(m_leds, m_frameLength);
-    if (recv != NULL) free(recv);
-    CSOff();
-}
-
-/*
- * **************
- *  private area
- * **************
- */
-
-mraa::Result
-APA102::CSOn()
-{
-    if (m_csnPinCtx) {
-        return m_csnPinCtx->write(HIGH);
-    }
-
-    return mraa::ERROR_FEATURE_NOT_SUPPORTED;
-}
-
-mraa::Result
-APA102::CSOff()
-{
-    if (m_csnPinCtx) {
-        return m_csnPinCtx->write(LOW);
-    }
-
-    return mraa::ERROR_FEATURE_NOT_SUPPORTED;
-}
diff --git a/src/apa102/apa102.h b/src/apa102/apa102.h
deleted file mode 100644
index 1ed1c5f..0000000
--- a/src/apa102/apa102.h
+++ /dev/null
@@ -1,133 +0,0 @@
-/*
- * Author: Mihai Tudor Panu <mihai.tudor.panu@intel.com>
- * Copyright (c) 2016 Intel Corporation
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#pragma once
-
-#include <stdint.h>
-#include "upm.h"
-#include "mraa/gpio.h"
-#include "mraa/spi.h"
-
-#ifdef __cplusplus
-extern "C" {
-#endif
-
-/**
- * @file apa102.h
- * @library apa102
- * @brief C API for controlling APA102/DotStar RGB LED Strips
- *
- * @include apa102.c
- */
-
-/**
- * Device context
- */
-typedef struct _apa102_context {
-    mraa_spi_context        spi;
-
-    // optional chip select
-    mraa_gpio_context       cs;
-
-    uint8_t*    buffer;
-    int         leds;
-    int         framelength;
-} *apa102_context;
-
-
-/**
- * Instantiates a new APA102 LED Strip
- *
- * @param ledcount  Number of LEDs on the strip
- * @param bus       SPI bus to use
- * @param cs        Pin to use for chip select. -1 if not used.
- * @return an initialized apa102 context on success, NULL on error.
- */
-apa102_context apa102_init(int ledcount, int bus, int cs);
-
-/**
- * APA102 close function
- *
- * @param dev The apa102_context to close
- */
-void apa102_close(apa102_context dev);
-
-/**
- * Sets the color and brightness for one LED in the buffer
- *
- * @param dev           The apa102_context to use
- * @param index         Index of the LED (0 based)
- * @param brightness    Brightness value (0-31)
- * @param r             Red component (0-255)
- * @param g             Green component (0-255)
- * @param b             Blue component (0-255)
- * @return upm_result_t UPM success/error code
- */
-upm_result_t apa102_set_led(apa102_context dev, uint16_t index, uint8_t brightness, uint8_t r, uint8_t g, uint8_t b);
-
-/**
- * Sets the brightness for one LED in the buffer
- *
- * @param dev           The apa102_context to use
- * @param index         Index of the LED (0 based)
- * @param brightness    Brightness value (0-31)
- * @return upm_result_t UPM success/error code
- */
-upm_result_t apa102_set_led_brightness(apa102_context dev, uint16_t index, uint8_t brightness);
-
-/**
- * Sets the color and brightness for multiple LEDs in the buffer
- *
- * @param dev           The apa102_context to use
- * @param s_index       The start Index of the LED range (0 based)
- * @param e_index       The end Index of the LED range (0 based)
- * @param brightness    Brightness value (0-31)
- * @param r             Red component (0-255)
- * @param g             Green component (0-255)
- * @param b             Blue component (0-255)
- * @return upm_result_t UPM success/error code
- */
-upm_result_t apa102_set_leds(apa102_context dev, uint16_t s_index, uint16_t e_index, uint8_t brightness, uint8_t r, uint8_t g, uint8_t b);
-
-/**
- * Sets the brightness for multiple LEDs in the buffer
- *
- * @param dev           The apa102_context to use
- * @param s_index       The start Index of the LED range (0 based)
- * @param e_index       The end Index of the LED range (0 based)
- * @param brightness    Brightness value (0-31)
- * @return upm_result_t UPM success/error code
- */
-upm_result_t apa102_set_leds_brightness(apa102_context dev, uint16_t s_index, uint16_t e_index, uint8_t brightness);
-
-/**
- * Writes the buffer to the SPI bus thus updating the LED Strip
- *
- * @param dev The apa102_context to use
- * @return upm_result_t UPM success/error code
- */
-upm_result_t apa102_refresh(apa102_context dev);
-
-#ifdef __cplusplus
-}
-#endif
diff --git a/src/apa102/apa102.hpp b/src/apa102/apa102.hpp
deleted file mode 100644
index 2adf479..0000000
--- a/src/apa102/apa102.hpp
+++ /dev/null
@@ -1,175 +0,0 @@
-/*
- * Author: Yannick Adam <yannick.adam@gmail.com>
- * Copyright (c) 2016 Yannick Adam
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#pragma once
-
-#include <mraa/gpio.hpp>
-#include <mraa/spi.hpp>
-#include <string>
-
-#define HIGH 1
-#define LOW 0
-
-namespace upm
-{
-/**
- * @brief APA102 RGB LED Strip
- * @defgroup apa102 libupm-apa102
- * @ingroup spi led
- */
-
-/**
- * @library apa102
- * @sensor apa102
- * @comname LED Strip
- * @type led
- * @man adafruit
- * @con spi
- * @web https://www.adafruit.com/product/2343
- *
- * @brief API for controlling APA102/DotStar RGB LED Strips
- *
- * APA102 LED Strips provide individually controllable LEDs through a SPI interface.
- * For each LED, brightness (0-31) and RGB (0-255) values can be set.
- *
- * @image html apa102.jpg
- * @snippet apa102.cxx Interesting
- */
-class APA102
-{
-  public:
-    /**
-     * Instantiates a new APA102 LED Strip
-     *
-     * @param ledCount  Number of APA102 leds in the strip
-     * @param spiBus    SPI Bus number
-     * @param batchMode (optional) Immediately write to SPI (false, default) or wait for a pushState
-     * call (true)
-     * @param csn       (optional) Chip Select Pin
-     */
-    APA102(uint16_t ledCount, uint8_t spiBus, bool batchMode = false, int8_t csn = -1);
-
-    /**
-     * APA102 destructor
-     */
-    ~APA102();
-
-    /**
-     * Change the color and brightness for a single led
-     *
-     * @param ledIdx        Index of the LED in the strip (0 based)
-     * @param brightness    Brightness value (0-31)
-     * @param r             Red component (0-255)
-     * @param g             Green component (0-255)
-     * @param b             Blue component (0-255)
-     */
-    void setLed(uint16_t ledIdx, uint8_t brightness, uint8_t r, uint8_t g, uint8_t b);
-
-    /**
-     * Change the brightness for a single led
-     *
-     * @param ledIdx        Index of the LED in the strip (0 based)
-     * @param brightness    Brightness value (0-31)
-     */
-    void setLedBrightness(uint16_t ledIdx, uint8_t brightness);
-
-    /**
-     * Change the color and brightness for all leds
-     *
-     * @param brightness    Brightness value (0-31)
-     * @param r             Red component (0-255)
-     * @param g             Green component (0-255)
-     * @param b             Blue component (0-255)
-     */
-    void setAllLeds(uint8_t brightness, uint8_t r, uint8_t g, uint8_t b);
-
-    /**
-     * Change the color and brightness for a range of leds
-     *
-     * @param startIdx      Start index of the range of LEDs in the strip (0 based)
-     * @param endIdx        End index of the range of LEDs in the strip (0 based)
-     * @param brightness    Brightness value (0-31)
-     * @param r             Red component (0-255)
-     * @param g             Green component (0-255)
-     * @param b             Blue component (0-255)
-     */
-    void
-    setLeds(uint16_t startIdx, uint16_t endIdx, uint8_t brightness, uint8_t r, uint8_t g, uint8_t b);
-
-    /**
-     * Change the brightness for a range of leds
-     *
-     * @param startIdx      Start index of the range of LEDs in the strip (0 based)
-     * @param endIdx        End index of the range of LEDs in the strip (0 based)
-     * @param brightness    Brightness value (0-31)
-     */
-    void
-    setLedsBrightness(uint16_t startIdx, uint16_t endIdx, uint8_t brightness);
-
-    /**
-     * (Advanced) Manually control the colors and brightness of a range of LEDS
-     * Best used to maximize performance
-     *
-     * @param startIdx      Start index of the range of LEDs to update (0 based)
-     * @param endIdx        End index of the range of LEDs to update (0 based)
-     * @param colors        Pointer to an array of bytes. Each color is described as the following:
-     *                      B1: Brightness (224-255) B2: Blue (0-255) B3: Green (0-255) B4: Red
-     *(0-255)
-     *                      No check done on the boundaries
-     */
-    void setLeds(uint16_t startIdx, uint16_t endIdx, uint8_t* colors);
-
-    /**
-     * Change the speed/frequency of the SPI bus
-     * Note: Slower speeds will allow driving longer strips without having to
-     * condition the clock signal with extra hardware
-     *
-     * @param hz    Desired bus speed in Hz
-     */
-    void setBusSpeed(int hz);
-
-    /**
-     * Outputs the current LED data to the SPI bus
-     * Note: Only required if batch mode is set to TRUE
-     *
-     */
-    void pushState();
-
-  private:
-    /* Disable implicit copy and assignment operators */
-    APA102(const APA102&) = delete;
-    APA102 &operator=(const APA102&) = delete;
-
-    mraa::Spi* m_spi;
-    mraa::Gpio* m_csnPinCtx;
-
-    uint16_t m_ledCount;
-    uint8_t* m_leds;
-    uint16_t m_frameLength;
-
-    bool m_batchMode;
-
-    mraa::Result CSOn();
-    mraa::Result CSOff();
-};
-}
diff --git a/src/apa102/apa102.i b/src/apa102/apa102.i
deleted file mode 100644
index 8b8ae71..0000000
--- a/src/apa102/apa102.i
+++ /dev/null
@@ -1,52 +0,0 @@
-%include "../common_top.i"
-
-/* BEGIN Java syntax  ------------------------------------------------------- */
-#ifdef SWIGJAVA
-%typemap(jtype) (uint8_t *colors) "byte[]"
-%typemap(jstype) (uint8_t *colors) "byte[]"
-%typemap(jni) (uint8_t *colors) "jbyteArray"
-%typemap(javain) (uint8_t *colors) "$javainput"
-
-%typemap(in) (uint8_t *colors) {
-  $1 = (uint8_t*)JCALL2(GetByteArrayElements, jenv, $input, NULL);
-}
-
-JAVA_JNI_LOADLIBRARY(javaupm_apa102)
-#endif
-/* END Java syntax */
-
-/* BEGIN Javascript syntax  ------------------------------------------------- */
-#ifdef SWIGJAVASCRIPT
-%inline %{
-    #include <node_buffer.h>
-%}
-
-%typemap(in) (uint8_t *colors) {
-  if (!node::Buffer::HasInstance($input)) {
-      SWIG_exception_fail(SWIG_ERROR, "Expected a node Buffer");
-  }
-  $1 = (uint8_t*) node::Buffer::Data($input);
-}
-#endif
-/* END Javascript syntax */
-
-/* BEGIN Python syntax  ----------------------------------------------------- */
-#ifdef SWIGPYTHON
-// setLeds
-%typemap(in) (uint8_t *colors) {
-  if (PyByteArray_Check($input)) {
-    $1 = (uint8_t*) PyByteArray_AsString($input);
-  } else {
-    PyErr_SetString(PyExc_ValueError, "bytearray expected");
-    return NULL;
-  }
-}
-#endif
-/* END Python syntax */
-
-/* BEGIN Common SWIG syntax ------------------------------------------------- */
-%{
-#include "apa102.hpp"
-%}
-%include "apa102.hpp"
-/* END Common SWIG syntax */
diff --git a/src/apa102/apa102.json b/src/apa102/apa102.json
deleted file mode 100644
index a77eb49..0000000
--- a/src/apa102/apa102.json
+++ /dev/null
@@ -1,45 +0,0 @@
-{
-    "Library": "apa102",
-    "Description": "Adafruit apa102 iPixel LED library",
-    "Sensor Class": {
-        "APA102": {
-            "Name": "Adafruit apa102 iPixel LED",
-            "Description": "This is the UPM Module for the Adafruit apa102 LED. This RGB LED package offers a PWM interface for fine tuning of colors, as well as offering shifting. Each LED module can read the top layer of commands, before shifting the next layer to the next LED, allowing you to communicate to a large string of LEDs.",
-            "Aliases": ["apa102", "iPixel LED", "APA102 5050 RGB LED with integrated driver chip"],
-            "Categories": ["led"],
-            "Connections": ["SPI"],
-            "Project Type": ["prototyping", "commercial"],
-            "Manufacturers": ["Shiji Lighting", "Adafruit"],
-            "Image": "apa102.jpg",
-            "Examples": {
-                "Java": ["APA102_Example.java"],
-                "Python": ["apa102.py"],
-                "Node.js": ["apa102.js"],
-                "C++": ["apa102.cxx"]
-            },
-            "Specifications": {
-                "Vdd": {
-                    "unit": "V",
-                    "min": 5.0,
-                    "max": 5.5
-                },
-                "Supply Current Digital": {
-                    "Normal mode": {
-                        "unit": "mA",
-                        "min": "22.5",
-                        "max": "26.5"
-                    }
-                },
-                "Operating Temperature": {
-                    "unit": "°C",
-                    "min": -40,
-                    "max": 70
-                }
-            },
-            "Urls": {
-                "Product Pages": ["https://www.adafruit.com/product/2343"],
-                "Datasheets": ["https://cdn-shop.adafruit.com/datasheets/APA102.pdf"]
-            }
-        }
-    }
-}
diff --git a/src/apa102/apa102_fti.c b/src/apa102/apa102_fti.c
deleted file mode 100644
index 73e11d8..0000000
--- a/src/apa102/apa102_fti.c
+++ /dev/null
@@ -1,67 +0,0 @@
-/*
- * Author: Mihai Tudor Panu <mihai.tudor.panu@intel.com>
- * Copyright (c) 2016 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include "apa102.h"
-#include "upm_fti.h"
-
-/**
- * This file implements the Function Table Interface (FTI) for this sensor
- */
-
-const char upm_apa102_name[] = "APA102";
-const char upm_apa102_description[] = "APA102/Dotstar LED Strip";
-const upm_protocol_t upm_apa102_protocol[] = {UPM_SPI, UPM_GPIO};
-const upm_sensor_t upm_apa102_category[] = {};
-
-// forward declarations
-const void* upm_apa102_get_ft(upm_sensor_t sensor_type);
-void* upm_apa102_init_name();
-void upm_apa102_close(void *dev);
-
-static const upm_sensor_ft ft =
-{
-  .upm_sensor_init_name = &upm_apa102_init_name,
-  .upm_sensor_close = &upm_apa102_close,
-};
-
-const void* upm_apa102_get_ft(upm_sensor_t sensor_type)
-{
-  switch(sensor_type)
-    {
-    case UPM_SENSOR:
-      return &ft;
-    default:
-      return NULL;
-    }
-}
-
-void* upm_apa102_init_name()
-{
-  return NULL;
-}
-
-void upm_apa102_close(void *dev)
-{
-  apa102_close((apa102_context)dev);
-}
diff --git a/src/apds9002/CMakeLists.txt b/src/apds9002/CMakeLists.txt
deleted file mode 100644
index ed8ed56..0000000
--- a/src/apds9002/CMakeLists.txt
+++ /dev/null
@@ -1,5 +0,0 @@
-set (libname "apds9002")
-set (libdescription "Ambient Light Photo Sensor")
-set (module_src ${libname}.cxx)
-set (module_hpp ${libname}.hpp)
-upm_module_init(mraa)
diff --git a/src/apds9002/apds9002.cxx b/src/apds9002/apds9002.cxx
deleted file mode 100644
index b417d1b..0000000
--- a/src/apds9002/apds9002.cxx
+++ /dev/null
@@ -1,51 +0,0 @@
-/*
- * Author: Zion Orent <zorent@ics.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <iostream>
-#include <string>
-#include <stdexcept>
-
-#include "apds9002.hpp"
-
-using namespace upm;
-
-APDS9002::APDS9002(int pin)
-{
-  if ( !(m_aio = mraa_aio_init(pin)) ) 
-    {
-      throw std::invalid_argument(std::string(__FUNCTION__) +
-                                  ": mraa_aio_init() failed, invalid pin?");
-      return;
-    }
-}
-
-APDS9002::~APDS9002()
-{
-  mraa_aio_close(m_aio);
-}
-
-int APDS9002::value()
-{
-  return mraa_aio_read(m_aio);
-}
diff --git a/src/apds9002/apds9002.hpp b/src/apds9002/apds9002.hpp
deleted file mode 100644
index 062525b..0000000
--- a/src/apds9002/apds9002.hpp
+++ /dev/null
@@ -1,79 +0,0 @@
-/*
- * Author: Zion Orent <zorent@ics.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#pragma once
-
-#include <string>
-#include <mraa/aio.h>
-
-namespace upm {
-  /**
-   * @brief APDS-9002 Luminance Sensor
-   * @defgroup apds9002 libupm-apds9002
-   * @ingroup seeed analog light
-   */
-
-  /**
-   * @library apds9002
-   * @sensor apds9002
-   * @comname Ambient Light Photo Sensor
-   * @altname Grove Luminance Sensor
-   * @type light
-   * @man seeed
-   * @con analog
-   * @web https://www.seeedstudio.com/Grove-Luminance-Sensor-p-1941.html
-   *
-   * @brief UPM module for the APDS-9002 Luminance Sensor
-   *
-   * This sensor transforms luminous intensity to output analog values.
-   * It uses an APDS-9002 ambient light sensor.
-   *
-   * @image html apds9002.jpg
-   * @snippet apds9002.cxx Interesting
-   */
-
-  class APDS9002 {
-  public:
-    /**
-     * APDS-9002 luminance sensor constructor
-     *
-     * @param pin Analog pin to use
-     */
-    APDS9002(int pin);
-    /**
-     * APDS9002 destructor
-     */
-    ~APDS9002();
-    /**
-     * Gets the luminance value from the sensor
-     *
-     * @return Luminance value
-     */
-    int value();
-
-  private:
-    mraa_aio_context m_aio;
-  };
-}
-
-
diff --git a/src/apds9002/apds9002.json b/src/apds9002/apds9002.json
deleted file mode 100644
index 33459e3..0000000
--- a/src/apds9002/apds9002.json
+++ /dev/null
@@ -1,61 +0,0 @@
-{
-    "Library": "apds9002",
-    "Description": "Seeed luminance sensor library",
-    "Sensor Class": {
-        "APDS9002": {
-            "Name": "Seeed luminance sensor",
-            "Description": "This is the UPM Module for the apds9002, Seeed luminance sensor. This sensor offers a luminance sensor solution that has a responsitivity close to that of the human eye. Operates at 3.3 and 5 volts on a Seeed standard breakout board.",
-            "Aliases": ["apds9002", "Grove - Luminance Sensor"],
-            "Categories": ["light"],
-            "Connections": ["Analog"],
-            "Project Type": ["prototyping", "mobile"],
-            "Manufacturers": ["Avago", "Seeed"],
-            "Image": "apds9002.jpg",
-            "Examples": {
-                "Java": ["Apds9002_Example.java"],
-                "Python": ["apds9002.py"],
-                "Node.js": ["apds9002.js"],
-                "C++": ["apds9002.cxx"]
-            },
-            "Specifications": {
-                "Vdd": {
-                    "unit": "V",
-                    "min": 2.4,
-                    "max": 5.5
-                },
-                "Measurement range":{
-                    "unit": "Lux",
-                    "min" : "0",
-                    "max" : "1000"
-                },
-                "Operating Temperature": {
-                    "unit": "°C",
-                    "min": -40,
-                    "max": 85
-                },
-                "Rise time": {
-                    "unit": "ms",
-                    "typ" : 0.95,
-                    "max" : 2
-                },
-                "Fall time": {
-                    "unit": "ms",
-                    "typ" : 0.8,
-                    "max" : 2
-                }
-            },
-            "Platforms": {
-                "Intel Edison": {
-                    "Notes": ["Might require Seeed breakout board"]
-                },
-                "Arduino 101": {
-                    "Notes": ["Might require Seeed breakout board"]
-                }
-            },
-            "Urls": {
-                "Product Pages": ["https://www.seeedstudio.com/Grove-Luminance-Sensor-p-1941.html"],
-                "Datasheets": ["http://www.mouser.com/ds/2/678/V02-3579EN-DS-APDS-9002-11Jun20120-909745.pdf"]
-            }
-        }
-    }
-}
diff --git a/src/apds9930/CMakeLists.txt b/src/apds9930/CMakeLists.txt
deleted file mode 100644
index 42cad3d..0000000
--- a/src/apds9930/CMakeLists.txt
+++ /dev/null
@@ -1,7 +0,0 @@
-if (MRAA_IIO_FOUND)
-    set (libname "apds9930")
-    set (libdescription "Digital Ambient Light and Proximity Sensor")
-    set (module_src ${libname}.cxx)
-    set (module_hpp ${libname}.hpp)
-    upm_module_init(mraa)
-endif (MRAA_IIO_FOUND)
diff --git a/src/apds9930/apds9930.cxx b/src/apds9930/apds9930.cxx
deleted file mode 100644
index 085ee92..0000000
--- a/src/apds9930/apds9930.cxx
+++ /dev/null
@@ -1,84 +0,0 @@
-/*
- * Author: Lay, Kuan Loon <kuan.loon.lay@intel.com>
- * Copyright (c) 2016 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <iostream>
-#include <string>
-#include <stdexcept>
-
-#include "apds9930.hpp"
-
-using namespace upm;
-
-APDS9930::APDS9930(int device)
-{
-    if (!(m_iio = mraa_iio_init(device))) {
-        throw std::invalid_argument(std::string(__FUNCTION__) +
-                                    ": mraa_iio_init() failed, invalid device?");
-        return;
-    }
-}
-
-APDS9930::~APDS9930()
-{
-    if (m_iio)
-        mraa_iio_close(m_iio);
-}
-
-int
-APDS9930::getAmbient()
-{
-    int iio_value = 0;
-    mraa_iio_read_int(m_iio, "in_illuminance_input", &iio_value);
-    return iio_value;
-}
-
-int
-APDS9930::getProximity()
-{
-    int iio_value = 0;
-    mraa_iio_read_int(m_iio, "in_proximity_raw", &iio_value);
-    return iio_value;
-}
-
-bool
-APDS9930::enableProximity(bool enable)
-{
-    if (enable)
-        mraa_iio_write_int(m_iio, "in_proximity_en", 1);
-    else
-        mraa_iio_write_int(m_iio, "in_proximity_en", 0);
-
-    return true;
-}
-
-bool
-APDS9930::enableIlluminance(bool enable)
-{
-    if (enable)
-        mraa_iio_write_int(m_iio, "in_illuminance_en", 1);
-    else
-        mraa_iio_write_int(m_iio, "in_illuminance_en", 0);
-
-    return true;
-}
\ No newline at end of file
diff --git a/src/apds9930/apds9930.hpp b/src/apds9930/apds9930.hpp
deleted file mode 100644
index 38a46e0..0000000
--- a/src/apds9930/apds9930.hpp
+++ /dev/null
@@ -1,93 +0,0 @@
-/*
- * Author: Lay, Kuan Loon <kuan.loon.lay@intel.com>
- * Copyright (c) 2016 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#pragma once
-
-#include <string>
-#include <mraa/iio.h>
-
-namespace upm
-{
-/**
- * @brief APDS9930 Digital Proximity and Ambient Light Sensor
- * @defgroup apds9930 libupm-apds9930
- * @ingroup Avago Technologies iio i2c proximity and ambient light sensor
- */
-
-/**
- * @library apds9930
- * @sensor apds9930
- * @comname Digital Ambient Light and Proximity Sensor
- * @type light proximity
- * @man avago
- * @con iio i2c
- * @web https://www.broadcom.com/products/optical-sensors/integrated-ambient-light-proximity-sensors/apds-9930
- *
- * @brief APDS9930 Digital Proximity and Ambient Light Sensor
- *
- * This sensor provides digital ambient light sensing (ALS),
- * IR LED and a complete proximity detection system.
- *
- * @snippet apds9930.cxx Interesting
- */
-
-class APDS9930
-{
-  public:
-    /**
-     * APDS-9930 digital proximity and ambient light sensor constructor
-     *
-     * @param device iio device number
-     */
-    APDS9930(int device);
-    /**
-     * APDS9930 destructor
-     */
-    ~APDS9930();
-    /**
-     * Gets the ambient luminance value from the sensor
-     *
-     * @return Ambient Luminance value
-     */
-    int getAmbient();
-    /**
-     * Gets the proximity value from the sensor
-     *
-     * @return Proximity value
-     */
-    int getProximity();
-    /**
-     * Enable proximity
-     * @param enable state
-     */
-    bool enableProximity(bool enable);
-    /**
-     * Enable illuminance
-     * @param enable state
-     */
-    bool enableIlluminance(bool enable);
-
-  private:
-    mraa_iio_context m_iio;
-};
-}
diff --git a/src/apds9930/apds9930.json b/src/apds9930/apds9930.json
deleted file mode 100644
index f65bd7f..0000000
--- a/src/apds9930/apds9930.json
+++ /dev/null
@@ -1,45 +0,0 @@
-{
-    "Library": "apds9930",
-    "Description": "SparkFun apds9930 ambient light and color sensor library",
-    "Sensor Class": {
-        "APDS9930": {
-            "Name": "SparkFun apds9930 ambient light and color sensor",
-            "Description": "This is the UPM Module for the SparkFun RGB and ambient light sensor. This sensor also has gesture and proximity detection, coupled with IR and UV filters to reduce background noise. Uses i2c to communicate and can operate on 3.3 volts.",
-            "Aliases": ["apds9930", "SparkFun RGB and Gesture Sensor - APDS-9960"],
-            "Categories": ["light", "proximity"],
-            "Connections": ["iio", "i2c"],
-            "Project Type": ["prototyping", "mobile", "robotics"],
-            "Manufacturers": ["Avago", "SparkFun"],
-            "Examples": {
-                "C++": ["apds9930.cxx"]
-            },
-            "Specifications": {
-                "Vdd": {
-                    "unit": "V",
-                    "min": 2.4,
-                    "max": 3.8
-                },
-                "Supply Current Digital": {
-                    "Normal Mode": {
-                        "unit": "uA",
-                        "min": "38.0",
-                        "max": "790"
-                    },
-                    "Sleep mode": {
-                        "unit": "uA",
-                        "typ" : "1.0"
-                    }
-                },
-                "Operating Temperature": {
-                    "unit": "°C",
-                    "min": -30,
-                    "max": 85
-                }
-            },
-            "Urls": {
-                "Product Pages": ["https://www.sparkfun.com/products/12787"],
-                "Datasheets": ["https://cdn.sparkfun.com/datasheets/Sensors/Proximity/apds9960.pdf"]
-            }
-        }
-    }
-}
diff --git a/src/at42qt1070/CMakeLists.txt b/src/at42qt1070/CMakeLists.txt
deleted file mode 100644
index b4ea726..0000000
--- a/src/at42qt1070/CMakeLists.txt
+++ /dev/null
@@ -1,5 +0,0 @@
-set (libname "at42qt1070")
-set (libdescription "Seven-channel QTouch Touch Sensor")
-set (module_src ${libname}.cxx)
-set (module_hpp ${libname}.hpp)
-upm_module_init(mraa)
diff --git a/src/at42qt1070/at42qt1070.cxx b/src/at42qt1070/at42qt1070.cxx
deleted file mode 100644
index fed9f38..0000000
--- a/src/at42qt1070/at42qt1070.cxx
+++ /dev/null
@@ -1,260 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <unistd.h>
-#include <math.h>
-#include <iostream>
-#include <string>
-#include <stdexcept>
-
-#include "at42qt1070.hpp"
-
-using namespace upm;
-using namespace std;
-
-
-AT42QT1070::AT42QT1070(int bus, uint8_t address)
-{
-    m_addr = address;
-
-    // setup our i2c link
-    if (!(m_i2c = mraa_i2c_init(bus))) {
-        throw std::invalid_argument(std::string(__FUNCTION__) +
-                                    ": mraa_i2c_init() failed");
-        return;
-    }
-
-    mraa_result_t rv;
-
-    if ((rv = mraa_i2c_address(m_i2c, m_addr)) != MRAA_SUCCESS) {
-        throw std::invalid_argument(std::string(__FUNCTION__) +
-                                    ": mraa_i2c_address() failed");
-        return;
-    }
-
-    if (readChipID() != 0x2E) {
-        throw std::runtime_error("Chip ID does not match the expected value (2Eh)");
-    }
-
-    m_buttonStates = 0;
-    m_calibrating = false;
-    m_overflow = false;
-}
-
-AT42QT1070::~AT42QT1070()
-{
-    mraa_i2c_stop(m_i2c);
-}
-
-bool
-AT42QT1070::writeByte(uint8_t reg, uint8_t byte)
-{
-    mraa_result_t rv = mraa_i2c_write_byte_data(m_i2c, byte, reg);
-
-    if (rv != MRAA_SUCCESS) {
-        throw std::runtime_error(std::string(__FUNCTION__) +
-                                 ": mraa_i2c_write_byte() failed");
-        return false;
-    }
-
-    return true;
-}
-
-bool
-AT42QT1070::writeWord(uint8_t reg, uint16_t word)
-{
-    mraa_result_t rv = mraa_i2c_write_word_data(m_i2c, word, reg);
-
-    if (rv != MRAA_SUCCESS) {
-        throw std::runtime_error(std::string(__FUNCTION__) +
-                                 ": mraa_i2c_write_word() failed");
-        return false;
-    }
-
-    return true;
-}
-
-uint8_t
-AT42QT1070::readByte(uint8_t reg)
-{
-    int x = mraa_i2c_read_byte_data(m_i2c, reg);
-    if (x != -1) {
-        return (uint8_t) x;
-    }
-    return 0;
-}
-
-uint16_t
-AT42QT1070::readWord(uint8_t reg)
-{
-    int x = mraa_i2c_read_word_data(m_i2c, reg);
-    if (x != -1) {
-        return (uint16_t) x;
-    }
-    return 0;
-}
-
-uint8_t
-AT42QT1070::readChipID(void)
-{
-    return readByte(REG_CHIPID);
-}
-
-void
-AT42QT1070::updateState()
-{
-    uint8_t stat = readByte(REG_DETSTATUS);
-
-    // if we are calibrating, don't change anything
-    if (stat & DET_CALIBRATE) {
-        m_calibrating = true;
-        return;
-    } else {
-        m_calibrating = false;
-    }
-
-    if (stat & DET_OVERFLOW)
-        m_overflow = true;
-    else
-        m_overflow = false;
-
-    // if a touch is occurring, read the button states
-    if (stat & DET_TOUCH) {
-        uint8_t keys = readByte(REG_KEYSTATUS);
-        // high bit is reserved, filter it out
-        m_buttonStates = keys & ~0x80;
-    } else {
-        m_buttonStates = 0;
-    }
-}
-
-uint8_t
-AT42QT1070::getLPMode(void)
-{
-    return readByte(REG_LP);
-}
-
-uint8_t
-AT42QT1070::setLPMode(uint8_t mode)
-{
-    writeByte(REG_LP, mode);
-
-    return getLPMode();
-}
-
-uint8_t
-AT42QT1070::getAVE(uint8_t key)
-{
-    uint8_t value, ave;
-
-    if (key > 6) {
-        throw std::invalid_argument("Only keys 0-6 are allowed");
-    }
-
-    value = readByte(REG_AVE0 + key);
-    ave = (value & 0xFC) >> 2;
-
-    return ave;
-}
-
-uint8_t
-AT42QT1070::setAVE(uint8_t key, uint8_t ave)
-{
-    uint8_t value;
-
-    if (key > 6) {
-        throw std::invalid_argument("Only keys 0-6 are allowed");
-    }
-
-    switch (ave) {
-        case 1:
-        case 2:
-        case 4:
-        case 8:
-        case 16:
-        case 32:
-            break;
-
-        default:
-            throw std::invalid_argument("Invalid averaging factor");
-    }
-
-    value = readByte(REG_AVE0 + key);
-    value = value & 0x03;
-    value = value | (ave << 2);
-    writeByte(REG_AVE0 + key, value);
-
-    return getAVE(key);
-}
-
-uint8_t
-AT42QT1070::getAKSGroup(uint8_t key)
-{
-    uint8_t value, aks;
-
-    if (key > 6) {
-        throw std::invalid_argument("Only keys 0-6 are allowed");
-    }
-
-    value = readByte(REG_AVE0 + key);
-    aks = value & 0x03;
-
-    return aks;
-}
-
-uint8_t
-AT42QT1070::setAKSGroup(uint8_t key, uint8_t group)
-{
-    uint8_t value;
-
-    if (key > 6) {
-        throw std::invalid_argument("Only keys 0-6 are allowed");
-    }
-
-    if (group > 3) {
-        throw std::invalid_argument("Only groups 0-3 are allowed");
-    }
-
-    value = readByte(REG_AVE0 + key);
-    value = value & 0xFC;
-    value = value | group;
-
-    writeByte(REG_AVE0 + key, value);
-
-    return getAKSGroup(key);
-}
-
-bool
-AT42QT1070::reset()
-{
-    // write a non-zero value to the reset register
-    return writeByte(REG_RESET, 0xff);
-}
-
-bool
-AT42QT1070::calibrate()
-{
-    // write a non-zero value to the calibrate register
-    return writeByte(REG_CALIBRATE, 0xff);
-}
diff --git a/src/at42qt1070/at42qt1070.hpp b/src/at42qt1070/at42qt1070.hpp
deleted file mode 100644
index 825ebdd..0000000
--- a/src/at42qt1070/at42qt1070.hpp
+++ /dev/null
@@ -1,314 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#pragma once
-
-#include <stdint.h>
-#include <sys/time.h>
-
-#include <string>
-#include <mraa/i2c.h>
-
-#define AT42QT1070_I2C_BUS 0
-#define AT42QT1070_DEFAULT_I2C_ADDR 0x1b
-
-namespace upm
-{
-/**
- * @brief Atmel AT42QT1070 QTouch Sensor
- * @defgroup at42qt1070 libupm-at42qt1070
- * @ingroup seeed i2c touch
- */
-
-/**
- * @library at42qt1070
- * @sensor at42qt1070
- * @comname Seven-channel QTouch Touch Sensor
- * @altname Grove QTouch Sensor
- * @type touch
- * @man seeed
- * @con i2c
- * @web http://wiki.seeed.cc/Grove-Q_Touch_Sensor/
- *
- * @brief API for the Atmel AT42QT1070 QTouch Sensor
- *
- * This class implements support for the Atmel AT42QT1070 QTouch
- * sensor, which supports 7 capacitive buttons.
- *
- * It was developed using a Grove-Q Touch Sensor board.
- *
- * @image html at42qt1070.jpg
- * @snippet at42qt1070.cxx Interesting
- */
-class AT42QT1070
-{
-  public:
-    // registers
-    typedef enum {
-        REG_CHIPID = 0,
-        REG_FWVERS = 1,
-
-        REG_DETSTATUS = 2, // detection status
-        REG_KEYSTATUS = 3, // key status
-
-        REG_KEYSIG0_H = 4, // key signal
-        REG_KEYSIG0_L = 5,
-        REG_KEYSIG1_H = 6,
-        REG_KEYSIG1_L = 7,
-        REG_KEYSIG2_H = 8,
-        REG_KEYSIG2_L = 9,
-        REG_KEYSIG3_H = 10,
-        REG_KEYSIG3_L = 11,
-        REG_KEYSIG4_H = 12,
-        REG_KEYSIG4_L = 13,
-        REG_KEYSIG5_H = 14,
-        REG_KEYSIG5_L = 15,
-        REG_KEYSIG6_H = 16,
-        REG_KEYSIG6_L = 17,
-
-        REG_REFDATA0_H = 18, // key reference data
-        REG_REFDATA0_L = 19,
-        REG_REFDATA1_H = 20,
-        REG_REFDATA1_L = 21,
-        REG_REFDATA2_H = 22,
-        REG_REFDATA2_L = 23,
-        REG_REFDATA3_H = 24,
-        REG_REFDATA3_L = 25,
-        REG_REFDATA4_H = 26,
-        REG_REFDATA4_L = 27,
-        REG_REFDATA5_H = 28,
-        REG_REFDATA5_L = 29,
-        REG_REFDATA6_H = 30,
-        REG_REFDATA6_L = 31,
-
-        REG_NTHR0 = 32, // negative threshold level
-        REG_NTHR1 = 33,
-        REG_NTHR2 = 34,
-        REG_NTHR3 = 35,
-        REG_NTHR4 = 36,
-        REG_NTHR5 = 37,
-        REG_NTHR6 = 38,
-
-        REG_AVE0 = 39, // key suppression
-        REG_AVE1 = 40,
-        REG_AVE2 = 41,
-        REG_AVE3 = 42,
-        REG_AVE4 = 43,
-        REG_AVE5 = 44,
-        REG_AVE6 = 45,
-
-        REG_DI0 = 46, // detection integrator
-        REG_DI1 = 47,
-        REG_DI2 = 48,
-        REG_DI3 = 49,
-        REG_DI4 = 50,
-        REG_DI5 = 51,
-        REG_DI6 = 52,
-
-        REG_GUARD = 53, // FastOutDI/Max Cal/Guard channel
-        REG_LP = 54,    // low power
-        REG_MAXON = 55, // max on duration
-        REG_CALIBRATE = 56,
-        REG_RESET = 57
-    } AT42QT1070_REG_T;
-
-    // detection register bits
-    typedef enum {
-        DET_TOUCH = 0x01,
-        // 0x02-0x20 reserved
-        DET_OVERFLOW = 0x40,
-        DET_CALIBRATE = 0x80
-    } AT42QT1070_DET_T;
-
-
-    /**
-     * AT42QT1070 constructor
-     *
-     * @param bus I2C bus to use
-     * @param address Address for this sensor
-     */
-    AT42QT1070(int bus, uint8_t address = AT42QT1070_DEFAULT_I2C_ADDR);
-
-    /**
-     * AT42QT1070 destructor
-     */
-    ~AT42QT1070();
-
-    /**
-     * Writes a byte value into the register
-     *
-     * @param reg Register location to write into
-     * @param byte Byte to write
-     * @return True if successful
-     */
-    bool writeByte(uint8_t reg, uint8_t byte);
-
-    /**
-     * Writes a word value into the register.  Note: the device must have the
-     * auto-increment bit set in the MODE1 register to work.
-     *
-     * @param reg Register location to write into
-     * @param word Word to write
-     * @return True if successful
-     */
-    bool writeWord(uint8_t reg, uint16_t word);
-
-    /**
-     * Read a byte value from the register
-     *
-     * @param reg Register location to read from
-     * @return Value in the specified register
-     */
-    uint8_t readByte(uint8_t reg);
-
-    /**
-     * Read a word value from the register.  Note: the device must have the
-     * auto-increment bit set in the MODE1 register to work.
-     *
-     * @param reg Register location to read from
-     * @return Value in the specified register
-     */
-    uint16_t readWord(uint8_t reg);
-
-
-    /**
-     * Reads the Chip ID register on the sensor
-     *
-     * @return Value of the Chip ID register
-     */
-    uint8_t readChipID(void);
-
-    /**
-     * Reads the current touch status and detection state
-     *
-     * @return Key status bits for all keys (0-6)
-     */
-    void updateState();
-
-
-    /**
-     * Reads the current low-power mode setting
-     *
-     * @return Low-power mode setting from the sensor
-     */
-    uint8_t getLPMode(void);
-
-    /**
-     * Changes the low-pomer mode setting on the sensor
-     *
-     * @param mode dDsired new mode
-     * @return New setting on the sensor
-     */
-    uint8_t setLPMode(uint8_t mode);
-
-
-    /**
-     * Reads the current averaging factor setting for a key
-     *
-     * @param key Key being read
-     * @return Averaging factor
-     */
-    uint8_t getAVE(uint8_t key);
-
-    /**
-     * Changes the averaging factor setting for a key
-     *
-     * @param key Key being changed
-     * @param ave New averaging factor
-     * @return New averaging factor as read from the device
-     */
-    uint8_t setAVE(uint8_t key, uint8_t ave);
-
-    /**
-     * Reads the AKS group of which a key is part
-     *
-     * @param key Key (0-6) being queried
-     * @return AKS group of which the key is part
-     */
-    uint8_t getAKSGroup(uint8_t key);
-
-    /**
-     * Changes the AKS group of which a key is part
-     *
-     * @param key Key (0-6) being changed
-     * @param group New group for the key
-     * @return New value on the sensor
-     */
-    uint8_t setAKSGroup(uint8_t key, uint8_t group);
-
-    /**
-     * Returns the overflow indicator
-     *
-     * @return True if overflow is indicated
-     */
-    bool
-    isOverflowed()
-    {
-        return m_overflow;
-    };
-
-    /**
-     * Returns the calibrating indicator
-     *
-     * @return True if calibration is in progress
-     */
-    bool
-    isCalibrating()
-    {
-        return m_calibrating;
-    };
-
-    /**
-     * Issues a reset command
-     *
-     * @return True if successful
-     */
-    bool reset();
-
-    /**
-     * Issues a calibrate command
-     *
-     * @return True if successful
-     */
-    bool calibrate();
-
-    /**
-     * Gets the current button states
-     *
-     * @returns Button states
-     */
-    uint8_t
-    getButtons()
-    {
-        return m_buttonStates;
-    };
-
-  private:
-    uint8_t m_buttonStates;
-    bool m_calibrating;
-    bool m_overflow;
-
-    mraa_i2c_context m_i2c;
-    uint8_t m_addr;
-};
-}
diff --git a/src/at42qt1070/at42qt1070.json b/src/at42qt1070/at42qt1070.json
deleted file mode 100644
index 2360180..0000000
--- a/src/at42qt1070/at42qt1070.json
+++ /dev/null
@@ -1,57 +0,0 @@
-{
-    "Library": "at42qt1070",
-    "Description": "Atmel Touch Sensor library",
-    "Sensor Class": {
-        "AT42QT1070": {
-            "Name": "Atmel AT42QT1070 touch sensor",
-            "Description": "This is the UPM Module for the Atmel at42qt1070 touch sensor. This sensor is a single touch capacitive sensor, able to detect when a capacitive load is applied to one of the five pins offered. It has extensive exernal noise and RF suppression built in. When a capacitive load is detected, the corrisponding output is pulled low until the load is eliminated.",
-            "Aliases": ["at42qt1070", "Grove-Q Touch Sensor"],
-            "Categories": ["touch"],
-            "Connections": ["i2c"],
-            "Project Type": ["prototyping"],
-            "Manufacturers": ["Atmel", "Seeed"],
-            "Image": "at42qt1070.jpg",
-            "Examples": {
-                "Python": ["at42qt1070.py"],
-                "Node.js": ["at42qt1070.js"],
-                "C++": ["at42qt1070.cxx"]
-            },
-            "Specifications": {
-                "Vdd": {
-                    "unit": "V",
-                    "min": 1.8,
-                    "max": 5.5
-                },
-                "Supply Current Digital": {
-                    "3.3 Vdc": {
-                        "unit": "mA",
-                        "min": "0.0",
-                        "max": "1.0"
-                    }
-                },
-                "Operating Temperature": {
-                    "unit": "°C",
-                    "min": -40,
-                    "max": 85
-                },
-                "Capacitance": {
-                    "unit": "pF",
-                    "min": 1,
-                    "max": 30
-                }
-            },
-            "Platforms": {
-                "Intel Edison": {
-                    "Notes": ["Might require Seeed breakout board"]
-                },
-                "Arduino 101": {
-                    "Notes": ["Might require Seeed breakout board"]
-                }
-            },
-            "Urls": {
-                "Product Pages": ["https://www.seeedstudio.com/Grove-Q-Touch-Sensor-p-1854.html"],
-                "Datasheets": ["http://ww1.microchip.com/downloads/en/DeviceDoc/Atmel-9596-AT42-QTouch-BSW-AT42QT1070_Datasheet.pdf"]
-            }
-        }
-    }
-}
\ No newline at end of file
-- 
2.7.4

