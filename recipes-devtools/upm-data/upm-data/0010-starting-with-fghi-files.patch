From 62341b5d41a15347a33ef0010d8a2208e346cdb9 Mon Sep 17 00:00:00 2001
From: Ganesh K <ganesh.k@phytec.in>
Date: Mon, 24 Jun 2019 19:31:30 +0530
Subject: [PATCH 10/10] starting with fghi files

---
 src/flex/CMakeLists.txt                        |   8 -
 src/flex/flex.c                                | 136 -----
 src/flex/flex.cxx                              |  52 --
 src/flex/flex.h                                | 141 -----
 src/flex/flex.hpp                              |  81 ---
 src/flex/flex.json                             |  39 --
 src/flex/flex_fti.c                            | 119 ----
 src/gas/CMakeLists.txt                         |   8 -
 src/gas/README.txt                             |   8 -
 src/gas/gas.cxx                                |  98 ----
 src/gas/gas.hpp                                | 104 ----
 src/gas/gas.i                                  |  75 ---
 src/gas/gas.json                               | 275 ---------
 src/gas/mq2.cxx                                |  33 --
 src/gas/mq2.hpp                                |  75 ---
 src/gas/mq3.cxx                                |  33 --
 src/gas/mq3.hpp                                |  74 ---
 src/gas/mq4.cxx                                |  35 --
 src/gas/mq4.hpp                                |  76 ---
 src/gas/mq5.cxx                                |  33 --
 src/gas/mq5.hpp                                |  75 ---
 src/gas/mq6.cxx                                |  35 --
 src/gas/mq6.hpp                                |  76 ---
 src/gas/mq7.cxx                                |  35 --
 src/gas/mq7.hpp                                |  76 ---
 src/gas/mq8.cxx                                |  35 --
 src/gas/mq8.hpp                                |  76 ---
 src/gas/mq9.cxx                                |  33 --
 src/gas/mq9.hpp                                |  73 ---
 src/gas/mqx.c                                  | 136 -----
 src/gas/mqx.h                                  | 158 ------
 src/gas/mqx_fti.c                              | 122 ----
 src/gas/tp401.cxx                              |  39 --
 src/gas/tp401.hpp                              |  90 ---
 src/gp2y0a/CMakeLists.txt                      |   9 -
 src/gp2y0a/gp2y0a.c                            |  80 ---
 src/gp2y0a/gp2y0a.cxx                          |  69 ---
 src/gp2y0a/gp2y0a.h                            |  80 ---
 src/gp2y0a/gp2y0a.hpp                          |  88 ---
 src/gp2y0a/gp2y0a.json                         |  39 --
 src/gp2y0a/gp2y0a_fti.c                        |  80 ---
 src/gprs/CMakeLists.txt                        |   5 -
 src/gprs/gprs.cxx                              |  78 ---
 src/gprs/gprs.hpp                              | 155 -----
 src/gprs/gprs.i                                |  16 -
 src/gprs/gprs.json                             |  40 --
 src/grove/CMakeLists.txt                       |   5 -
 src/grove/grove.cxx                            |   1 -
 src/grove/grove.hpp                            |  34 --
 src/grove/grove.i                              |  33 --
 src/grove/grove.json                           | 381 -------------
 src/grove/grovebase.hpp                        |  49 --
 src/grove/grovebutton.cxx                      |  75 ---
 src/grove/grovebutton.hpp                      | 100 ----
 src/grove/groveled.cxx                         |  67 ---
 src/grove/groveled.hpp                         |  98 ----
 src/grove/grovelight.cxx                       |  63 ---
 src/grove/grovelight.hpp                       |  84 ---
 src/grove/groverelay.cxx                       |  69 ---
 src/grove/groverelay.hpp                       |  97 ----
 src/grove/groverotary.cxx                      |  79 ---
 src/grove/groverotary.hpp                      | 108 ----
 src/grove/groveslide.cxx                       |  68 ---
 src/grove/groveslide.hpp                       |  89 ---
 src/grove/grovetemp.cxx                        |  68 ---
 src/grove/grovetemp.hpp                        |  94 ----
 src/grovecollision/CMakeLists.txt              |   5 -
 src/grovecollision/grovecollision.cxx          |  53 --
 src/grovecollision/grovecollision.hpp          |  74 ---
 src/grovecollision/grovecollision.json         |  41 --
 src/groveehr/CMakeLists.txt                    |   5 -
 src/groveehr/groveehr.cxx                      | 130 -----
 src/groveehr/groveehr.hpp                      | 128 -----
 src/groveehr/groveehr.i                        |  16 -
 src/groveehr/groveehr.json                     |  40 --
 src/groveeldriver/CMakeLists.txt               |   5 -
 src/groveeldriver/groveeldriver.cxx            |  62 --
 src/groveeldriver/groveeldriver.hpp            |  80 ---
 src/groveeldriver/groveeldriver.json           |  40 --
 src/groveelectromagnet/CMakeLists.txt          |   5 -
 src/groveelectromagnet/groveelectromagnet.cxx  |  62 --
 src/groveelectromagnet/groveelectromagnet.hpp  |  79 ---
 src/groveelectromagnet/groveelectromagnet.json |  41 --
 src/groveemg/CMakeLists.txt                    |   5 -
 src/groveemg/groveemg.cxx                      |  69 ---
 src/groveemg/groveemg.hpp                      |  84 ---
 src/groveemg/groveemg.json                     |  37 --
 src/grovegprs/CMakeLists.txt                   |   5 -
 src/grovegprs/grovegprs.cxx                    |  78 ---
 src/grovegprs/grovegprs.hpp                    | 156 -----
 src/grovegprs/grovegprs.i                      |  16 -
 src/grovegprs/grovegprs.json                   |  40 --
 src/grovegsr/CMakeLists.txt                    |   5 -
 src/grovegsr/grovegsr.cxx                      |  70 ---
 src/grovegsr/grovegsr.hpp                      |  86 ---
 src/grovegsr/grovegsr.json                     |  38 --
 src/grovelinefinder/CMakeLists.txt             |   5 -
 src/grovelinefinder/grovelinefinder.cxx        |  59 --
 src/grovelinefinder/grovelinefinder.hpp        |  86 ---
 src/grovelinefinder/grovelinefinder.json       |  40 --
 src/grovemd/CMakeLists.txt                     |   5 -
 src/grovemd/grovemd.cxx                        | 244 --------
 src/grovemd/grovemd.hpp                        | 257 ---------
 src/grovemoisture/CMakeLists.txt               |   5 -
 src/grovemoisture/grovemoisture.cxx            |  48 --
 src/grovemoisture/grovemoisture.hpp            |  83 ---
 src/grovemoisture/grovemoisture.json           |  38 --
 src/groveo2/CMakeLists.txt                     |   5 -
 src/groveo2/groveo2.cxx                        |  56 --
 src/groveo2/groveo2.hpp                        |  75 ---
 src/groveo2/groveo2.json                       |  39 --
 src/grovescam/CMakeLists.txt                   |   5 -
 src/grovescam/grovescam.cxx                    | 490 ----------------
 src/grovescam/grovescam.hpp                    | 196 -------
 src/grovescam/grovescam.i                      |  16 -
 src/grovescam/grovescam.json                   |  39 --
 src/grovespeaker/CMakeLists.txt                |   5 -
 src/grovespeaker/grovespeaker.cxx              | 150 -----
 src/grovespeaker/grovespeaker.hpp              | 105 ----
 src/grovespeaker/grovespeaker.json             |  40 --
 src/groveultrasonic/CMakeLists.txt             |   5 -
 src/groveultrasonic/groveultrasonic.cxx        | 102 ----
 src/groveultrasonic/groveultrasonic.hpp        | 123 ----
 src/groveultrasonic/groveultrasonic.i          |  16 -
 src/groveultrasonic/groveultrasonic.json       |  40 --
 src/grovevdiv/CMakeLists.txt                   |   5 -
 src/grovevdiv/grovevdiv.cxx                    |  68 ---
 src/grovevdiv/grovevdiv.hpp                    | 100 ----
 src/grovevdiv/grovevdiv.json                   |  37 --
 src/grovewater/CMakeLists.txt                  |   5 -
 src/grovewater/grovewater.cxx                  |  54 --
 src/grovewater/grovewater.hpp                  |  76 ---
 src/grovewater/grovewater.json                 |  39 --
 src/grovewfs/CMakeLists.txt                    |   5 -
 src/grovewfs/grovewfs.cxx                      | 124 ----
 src/grovewfs/grovewfs.hpp                      | 142 -----
 src/grovewfs/grovewfs.i                        |  16 -
 src/grovewfs/grovewfs.json                     |  40 --
 src/gsr/CMakeLists.txt                         |   8 -
 src/gsr/gsr.c                                  | 136 -----
 src/gsr/gsr.cxx                                |  67 ---
 src/gsr/gsr.h                                  | 141 -----
 src/gsr/gsr.hpp                                |  84 ---
 src/gsr/gsr.json                               |  39 --
 src/gsr/gsr_fti.c                              | 119 ----
 src/guvas12d/CMakeLists.txt                    |   9 -
 src/guvas12d/guvas12d.c                        | 128 -----
 src/guvas12d/guvas12d.cxx                      |  93 ---
 src/guvas12d/guvas12d.h                        | 108 ----
 src/guvas12d/guvas12d.hpp                      | 123 ----
 src/guvas12d/guvas12d.json                     |  40 --
 src/guvas12d/guvas12d_fti.c                    | 119 ----
 src/h3lis331dl/CMakeLists.txt                  |   5 -
 src/h3lis331dl/h3lis331dl.cxx                  | 622 --------------------
 src/h3lis331dl/h3lis331dl.hpp                  | 638 ---------------------
 src/h3lis331dl/h3lis331dl.i                    |  27 -
 src/h3lis331dl/h3lis331dl.json                 |  39 --
 src/h803x/CMakeLists.txt                       |  10 -
 src/h803x/h803x.cxx                            | 356 ------------
 src/h803x/h803x.hpp                            | 547 ------------------
 src/h803x/h803x.i                              |  14 -
 src/h803x/h803x.json                           |  38 --
 src/hcsr04/CMakeLists.txt                      |   8 -
 src/hcsr04/hcsr04.c                            | 127 -----
 src/hcsr04/hcsr04.cxx                          |  51 --
 src/hcsr04/hcsr04.h                            |  84 ---
 src/hcsr04/hcsr04.hpp                          |  78 ---
 src/hcsr04/hcsr04.i                            |  15 -
 src/hcsr04/hcsr04.json                         |  38 --
 src/hdc1000/CMakeLists.txt                     |   5 -
 src/hdc1000/hdc1000.cpp                        | 135 -----
 src/hdc1000/hdc1000.hpp                        | 148 -----
 src/hdc1000/hdc1000.json                       |  38 --
 src/hdxxvxta/CMakeLists.txt                    |   5 -
 src/hdxxvxta/hdxxvxta.cxx                      | 122 ----
 src/hdxxvxta/hdxxvxta.hpp                      | 170 ------
 src/hdxxvxta/hdxxvxta.i                        |  14 -
 src/hdxxvxta/hdxxvxta.json                     |  35 --
 src/hka5/CMakeLists.txt                        |   9 -
 src/hka5/hka5.c                                | 265 ---------
 src/hka5/hka5.cxx                              |  80 ---
 src/hka5/hka5.h                                | 140 -----
 src/hka5/hka5.hpp                              | 138 -----
 src/hka5/hka5.i                                |  14 -
 src/hka5/hka5.json                             |  37 --
 src/hka5/hka5_fti.c                            |  67 ---
 src/hlg150h/CMakeLists.txt                     |   5 -
 src/hlg150h/hlg150h.cxx                        |  80 ---
 src/hlg150h/hlg150h.hpp                        |  83 ---
 src/hlg150h/hlg150h.i                          |  19 -
 src/hlg150h/hlg150h.json                       |  42 --
 src/hlg150h/mraa-utils.cxx                     |  49 --
 src/hlg150h/mraa-utils.hpp                     |  37 --
 src/hm11/CMakeLists.txt                        |   5 -
 src/hm11/hm11.cxx                              | 166 ------
 src/hm11/hm11.hpp                              | 144 -----
 src/hm11/hm11.i                                |  23 -
 src/hm11/hm11.json                             |  39 --
 src/hmc5883l/CMakeLists.txt                    |  11 -
 src/hmc5883l/hmc5883l.c                        | 246 --------
 src/hmc5883l/hmc5883l.cxx                      |  81 ---
 src/hmc5883l/hmc5883l.h                        | 132 -----
 src/hmc5883l/hmc5883l.hpp                      | 114 ----
 src/hmc5883l/hmc5883l.i                        |  49 --
 src/hmc5883l/hmc5883l.json                     |  39 --
 src/hmc5883l/hmc5883l_fti.c                    |  87 ---
 src/hmtrp/CMakeLists.txt                       |   5 -
 src/hmtrp/hmtrp.cxx                            | 503 -----------------
 src/hmtrp/hmtrp.hpp                            | 270 ---------
 src/hmtrp/hmtrp.i                              |  55 --
 src/hmtrp/hmtrp.json                           |  40 --
 src/hp20x/CMakeLists.txt                       |   5 -
 src/hp20x/hp20x.cxx                            | 287 ----------
 src/hp20x/hp20x.hpp                            | 385 -------------
 src/hp20x/hp20x.json                           |  40 --
 src/ht9170/CMakeLists.txt                      |   5 -
 src/ht9170/ht9170.cxx                          | 124 ----
 src/ht9170/ht9170.hpp                          |  97 ----
 src/ht9170/ht9170.json                         |  39 --
 src/htu21d/CMakeLists.txt                      |   5 -
 src/htu21d/htu21d.cpp                          | 278 ---------
 src/htu21d/htu21d.hpp                          | 220 --------
 src/htu21d/htu21d.i                            |  16 -
 src/htu21d/htu21d.json                         |  32 --
 src/hwxpxx/CMakeLists.txt                      |  10 -
 src/hwxpxx/hwxpxx.cxx                          | 379 -------------
 src/hwxpxx/hwxpxx.hpp                          | 283 ----------
 src/hwxpxx/hwxpxx.i                            |  14 -
 src/hwxpxx/hwxpxx.json                         |  40 --
 src/hx711/CMakeLists.txt                       |   5 -
 src/hx711/hx711.cxx                            | 144 -----
 src/hx711/hx711.hpp                            | 138 -----
 src/hx711/hx711.i                              |  14 -
 src/hx711/hx711.json                           |  37 --
 src/ili9341/CMakeLists.txt                     |   5 -
 src/ili9341/ili9341.cxx                        | 487 ----------------
 src/ili9341/ili9341.hpp                        | 343 -----------
 src/ili9341/ili9341.i                          |  18 -
 src/ili9341/ili9341.json                       |  38 --
 src/ili9341/ili9341_gfx.cxx                    | 750 -------------------------
 src/ili9341/ili9341_gfx.hpp                    | 412 --------------
 src/ili9341/license.txt                        |  24 -
 src/ims/CMakeLists.txt                         |   9 -
 src/ims/ims.c                                  | 230 --------
 src/ims/ims.cxx                                | 111 ----
 src/ims/ims.h                                  | 152 -----
 src/ims/ims.hpp                                | 147 -----
 src/ims/ims.i                                  |  16 -
 src/ims/ims.json                               |  39 --
 src/ims/ims_defs.h                             |  64 ---
 src/ims/ims_fti.c                              | 146 -----
 src/ina132/CMakeLists.txt                      |   5 -
 src/ina132/ina132.cxx                          |  65 ---
 src/ina132/ina132.hpp                          |  81 ---
 src/ina132/ina132.json                         |  38 --
 src/isd1820/CMakeLists.txt                     |   5 -
 src/isd1820/isd1820.cxx                        |  91 ---
 src/isd1820/isd1820.hpp                        |  92 ---
 src/isd1820/isd1820.json                       |  33 --
 src/itg3200/CMakeLists.txt                     |   5 -
 src/itg3200/itg3200.cxx                        | 147 -----
 src/itg3200/itg3200.hpp                        | 118 ----
 src/itg3200/itg3200.i                          |  72 ---
 src/itg3200/itg3200.json                       |  39 --
 264 files changed, 23642 deletions(-)
 delete mode 100644 src/flex/CMakeLists.txt
 delete mode 100644 src/flex/flex.c
 delete mode 100644 src/flex/flex.cxx
 delete mode 100644 src/flex/flex.h
 delete mode 100644 src/flex/flex.hpp
 delete mode 100644 src/flex/flex.json
 delete mode 100644 src/flex/flex_fti.c
 delete mode 100644 src/gas/CMakeLists.txt
 delete mode 100644 src/gas/README.txt
 delete mode 100644 src/gas/gas.cxx
 delete mode 100644 src/gas/gas.hpp
 delete mode 100644 src/gas/gas.i
 delete mode 100644 src/gas/gas.json
 delete mode 100644 src/gas/mq2.cxx
 delete mode 100644 src/gas/mq2.hpp
 delete mode 100644 src/gas/mq3.cxx
 delete mode 100644 src/gas/mq3.hpp
 delete mode 100644 src/gas/mq4.cxx
 delete mode 100644 src/gas/mq4.hpp
 delete mode 100644 src/gas/mq5.cxx
 delete mode 100644 src/gas/mq5.hpp
 delete mode 100644 src/gas/mq6.cxx
 delete mode 100644 src/gas/mq6.hpp
 delete mode 100644 src/gas/mq7.cxx
 delete mode 100644 src/gas/mq7.hpp
 delete mode 100644 src/gas/mq8.cxx
 delete mode 100644 src/gas/mq8.hpp
 delete mode 100644 src/gas/mq9.cxx
 delete mode 100644 src/gas/mq9.hpp
 delete mode 100644 src/gas/mqx.c
 delete mode 100644 src/gas/mqx.h
 delete mode 100644 src/gas/mqx_fti.c
 delete mode 100644 src/gas/tp401.cxx
 delete mode 100644 src/gas/tp401.hpp
 delete mode 100644 src/gp2y0a/CMakeLists.txt
 delete mode 100644 src/gp2y0a/gp2y0a.c
 delete mode 100644 src/gp2y0a/gp2y0a.cxx
 delete mode 100644 src/gp2y0a/gp2y0a.h
 delete mode 100644 src/gp2y0a/gp2y0a.hpp
 delete mode 100644 src/gp2y0a/gp2y0a.json
 delete mode 100644 src/gp2y0a/gp2y0a_fti.c
 delete mode 100644 src/gprs/CMakeLists.txt
 delete mode 100644 src/gprs/gprs.cxx
 delete mode 100644 src/gprs/gprs.hpp
 delete mode 100644 src/gprs/gprs.i
 delete mode 100644 src/gprs/gprs.json
 delete mode 100644 src/grove/CMakeLists.txt
 delete mode 100644 src/grove/grove.cxx
 delete mode 100644 src/grove/grove.hpp
 delete mode 100644 src/grove/grove.i
 delete mode 100644 src/grove/grove.json
 delete mode 100644 src/grove/grovebase.hpp
 delete mode 100644 src/grove/grovebutton.cxx
 delete mode 100644 src/grove/grovebutton.hpp
 delete mode 100644 src/grove/groveled.cxx
 delete mode 100644 src/grove/groveled.hpp
 delete mode 100644 src/grove/grovelight.cxx
 delete mode 100644 src/grove/grovelight.hpp
 delete mode 100644 src/grove/groverelay.cxx
 delete mode 100644 src/grove/groverelay.hpp
 delete mode 100644 src/grove/groverotary.cxx
 delete mode 100644 src/grove/groverotary.hpp
 delete mode 100644 src/grove/groveslide.cxx
 delete mode 100644 src/grove/groveslide.hpp
 delete mode 100644 src/grove/grovetemp.cxx
 delete mode 100644 src/grove/grovetemp.hpp
 delete mode 100644 src/grovecollision/CMakeLists.txt
 delete mode 100644 src/grovecollision/grovecollision.cxx
 delete mode 100644 src/grovecollision/grovecollision.hpp
 delete mode 100644 src/grovecollision/grovecollision.json
 delete mode 100644 src/groveehr/CMakeLists.txt
 delete mode 100644 src/groveehr/groveehr.cxx
 delete mode 100644 src/groveehr/groveehr.hpp
 delete mode 100644 src/groveehr/groveehr.i
 delete mode 100644 src/groveehr/groveehr.json
 delete mode 100644 src/groveeldriver/CMakeLists.txt
 delete mode 100644 src/groveeldriver/groveeldriver.cxx
 delete mode 100644 src/groveeldriver/groveeldriver.hpp
 delete mode 100644 src/groveeldriver/groveeldriver.json
 delete mode 100644 src/groveelectromagnet/CMakeLists.txt
 delete mode 100644 src/groveelectromagnet/groveelectromagnet.cxx
 delete mode 100644 src/groveelectromagnet/groveelectromagnet.hpp
 delete mode 100644 src/groveelectromagnet/groveelectromagnet.json
 delete mode 100644 src/groveemg/CMakeLists.txt
 delete mode 100644 src/groveemg/groveemg.cxx
 delete mode 100644 src/groveemg/groveemg.hpp
 delete mode 100644 src/groveemg/groveemg.json
 delete mode 100644 src/grovegprs/CMakeLists.txt
 delete mode 100644 src/grovegprs/grovegprs.cxx
 delete mode 100644 src/grovegprs/grovegprs.hpp
 delete mode 100644 src/grovegprs/grovegprs.i
 delete mode 100644 src/grovegprs/grovegprs.json
 delete mode 100644 src/grovegsr/CMakeLists.txt
 delete mode 100644 src/grovegsr/grovegsr.cxx
 delete mode 100644 src/grovegsr/grovegsr.hpp
 delete mode 100644 src/grovegsr/grovegsr.json
 delete mode 100644 src/grovelinefinder/CMakeLists.txt
 delete mode 100644 src/grovelinefinder/grovelinefinder.cxx
 delete mode 100644 src/grovelinefinder/grovelinefinder.hpp
 delete mode 100644 src/grovelinefinder/grovelinefinder.json
 delete mode 100644 src/grovemd/CMakeLists.txt
 delete mode 100644 src/grovemd/grovemd.cxx
 delete mode 100644 src/grovemd/grovemd.hpp
 delete mode 100644 src/grovemoisture/CMakeLists.txt
 delete mode 100644 src/grovemoisture/grovemoisture.cxx
 delete mode 100644 src/grovemoisture/grovemoisture.hpp
 delete mode 100644 src/grovemoisture/grovemoisture.json
 delete mode 100644 src/groveo2/CMakeLists.txt
 delete mode 100644 src/groveo2/groveo2.cxx
 delete mode 100644 src/groveo2/groveo2.hpp
 delete mode 100644 src/groveo2/groveo2.json
 delete mode 100644 src/grovescam/CMakeLists.txt
 delete mode 100644 src/grovescam/grovescam.cxx
 delete mode 100644 src/grovescam/grovescam.hpp
 delete mode 100644 src/grovescam/grovescam.i
 delete mode 100644 src/grovescam/grovescam.json
 delete mode 100644 src/grovespeaker/CMakeLists.txt
 delete mode 100644 src/grovespeaker/grovespeaker.cxx
 delete mode 100644 src/grovespeaker/grovespeaker.hpp
 delete mode 100644 src/grovespeaker/grovespeaker.json
 delete mode 100644 src/groveultrasonic/CMakeLists.txt
 delete mode 100644 src/groveultrasonic/groveultrasonic.cxx
 delete mode 100644 src/groveultrasonic/groveultrasonic.hpp
 delete mode 100644 src/groveultrasonic/groveultrasonic.i
 delete mode 100644 src/groveultrasonic/groveultrasonic.json
 delete mode 100644 src/grovevdiv/CMakeLists.txt
 delete mode 100644 src/grovevdiv/grovevdiv.cxx
 delete mode 100644 src/grovevdiv/grovevdiv.hpp
 delete mode 100644 src/grovevdiv/grovevdiv.json
 delete mode 100644 src/grovewater/CMakeLists.txt
 delete mode 100644 src/grovewater/grovewater.cxx
 delete mode 100644 src/grovewater/grovewater.hpp
 delete mode 100644 src/grovewater/grovewater.json
 delete mode 100644 src/grovewfs/CMakeLists.txt
 delete mode 100644 src/grovewfs/grovewfs.cxx
 delete mode 100644 src/grovewfs/grovewfs.hpp
 delete mode 100644 src/grovewfs/grovewfs.i
 delete mode 100644 src/grovewfs/grovewfs.json
 delete mode 100644 src/gsr/CMakeLists.txt
 delete mode 100644 src/gsr/gsr.c
 delete mode 100644 src/gsr/gsr.cxx
 delete mode 100644 src/gsr/gsr.h
 delete mode 100644 src/gsr/gsr.hpp
 delete mode 100644 src/gsr/gsr.json
 delete mode 100644 src/gsr/gsr_fti.c
 delete mode 100644 src/guvas12d/CMakeLists.txt
 delete mode 100644 src/guvas12d/guvas12d.c
 delete mode 100644 src/guvas12d/guvas12d.cxx
 delete mode 100644 src/guvas12d/guvas12d.h
 delete mode 100644 src/guvas12d/guvas12d.hpp
 delete mode 100644 src/guvas12d/guvas12d.json
 delete mode 100644 src/guvas12d/guvas12d_fti.c
 delete mode 100644 src/h3lis331dl/CMakeLists.txt
 delete mode 100644 src/h3lis331dl/h3lis331dl.cxx
 delete mode 100644 src/h3lis331dl/h3lis331dl.hpp
 delete mode 100644 src/h3lis331dl/h3lis331dl.i
 delete mode 100644 src/h3lis331dl/h3lis331dl.json
 delete mode 100644 src/h803x/CMakeLists.txt
 delete mode 100644 src/h803x/h803x.cxx
 delete mode 100644 src/h803x/h803x.hpp
 delete mode 100644 src/h803x/h803x.i
 delete mode 100644 src/h803x/h803x.json
 delete mode 100644 src/hcsr04/CMakeLists.txt
 delete mode 100644 src/hcsr04/hcsr04.c
 delete mode 100644 src/hcsr04/hcsr04.cxx
 delete mode 100644 src/hcsr04/hcsr04.h
 delete mode 100644 src/hcsr04/hcsr04.hpp
 delete mode 100644 src/hcsr04/hcsr04.i
 delete mode 100644 src/hcsr04/hcsr04.json
 delete mode 100644 src/hdc1000/CMakeLists.txt
 delete mode 100644 src/hdc1000/hdc1000.cpp
 delete mode 100644 src/hdc1000/hdc1000.hpp
 delete mode 100644 src/hdc1000/hdc1000.json
 delete mode 100644 src/hdxxvxta/CMakeLists.txt
 delete mode 100644 src/hdxxvxta/hdxxvxta.cxx
 delete mode 100644 src/hdxxvxta/hdxxvxta.hpp
 delete mode 100644 src/hdxxvxta/hdxxvxta.i
 delete mode 100644 src/hdxxvxta/hdxxvxta.json
 delete mode 100644 src/hka5/CMakeLists.txt
 delete mode 100644 src/hka5/hka5.c
 delete mode 100644 src/hka5/hka5.cxx
 delete mode 100644 src/hka5/hka5.h
 delete mode 100644 src/hka5/hka5.hpp
 delete mode 100644 src/hka5/hka5.i
 delete mode 100644 src/hka5/hka5.json
 delete mode 100644 src/hka5/hka5_fti.c
 delete mode 100644 src/hlg150h/CMakeLists.txt
 delete mode 100644 src/hlg150h/hlg150h.cxx
 delete mode 100644 src/hlg150h/hlg150h.hpp
 delete mode 100644 src/hlg150h/hlg150h.i
 delete mode 100644 src/hlg150h/hlg150h.json
 delete mode 100644 src/hlg150h/mraa-utils.cxx
 delete mode 100644 src/hlg150h/mraa-utils.hpp
 delete mode 100644 src/hm11/CMakeLists.txt
 delete mode 100644 src/hm11/hm11.cxx
 delete mode 100644 src/hm11/hm11.hpp
 delete mode 100644 src/hm11/hm11.i
 delete mode 100644 src/hm11/hm11.json
 delete mode 100644 src/hmc5883l/CMakeLists.txt
 delete mode 100644 src/hmc5883l/hmc5883l.c
 delete mode 100644 src/hmc5883l/hmc5883l.cxx
 delete mode 100644 src/hmc5883l/hmc5883l.h
 delete mode 100644 src/hmc5883l/hmc5883l.hpp
 delete mode 100644 src/hmc5883l/hmc5883l.i
 delete mode 100644 src/hmc5883l/hmc5883l.json
 delete mode 100644 src/hmc5883l/hmc5883l_fti.c
 delete mode 100644 src/hmtrp/CMakeLists.txt
 delete mode 100644 src/hmtrp/hmtrp.cxx
 delete mode 100644 src/hmtrp/hmtrp.hpp
 delete mode 100644 src/hmtrp/hmtrp.i
 delete mode 100644 src/hmtrp/hmtrp.json
 delete mode 100644 src/hp20x/CMakeLists.txt
 delete mode 100644 src/hp20x/hp20x.cxx
 delete mode 100644 src/hp20x/hp20x.hpp
 delete mode 100644 src/hp20x/hp20x.json
 delete mode 100644 src/ht9170/CMakeLists.txt
 delete mode 100644 src/ht9170/ht9170.cxx
 delete mode 100644 src/ht9170/ht9170.hpp
 delete mode 100644 src/ht9170/ht9170.json
 delete mode 100644 src/htu21d/CMakeLists.txt
 delete mode 100644 src/htu21d/htu21d.cpp
 delete mode 100644 src/htu21d/htu21d.hpp
 delete mode 100644 src/htu21d/htu21d.i
 delete mode 100644 src/htu21d/htu21d.json
 delete mode 100644 src/hwxpxx/CMakeLists.txt
 delete mode 100644 src/hwxpxx/hwxpxx.cxx
 delete mode 100644 src/hwxpxx/hwxpxx.hpp
 delete mode 100644 src/hwxpxx/hwxpxx.i
 delete mode 100644 src/hwxpxx/hwxpxx.json
 delete mode 100644 src/hx711/CMakeLists.txt
 delete mode 100644 src/hx711/hx711.cxx
 delete mode 100644 src/hx711/hx711.hpp
 delete mode 100644 src/hx711/hx711.i
 delete mode 100644 src/hx711/hx711.json
 delete mode 100644 src/ili9341/CMakeLists.txt
 delete mode 100644 src/ili9341/ili9341.cxx
 delete mode 100644 src/ili9341/ili9341.hpp
 delete mode 100644 src/ili9341/ili9341.i
 delete mode 100644 src/ili9341/ili9341.json
 delete mode 100644 src/ili9341/ili9341_gfx.cxx
 delete mode 100644 src/ili9341/ili9341_gfx.hpp
 delete mode 100644 src/ili9341/license.txt
 delete mode 100644 src/ims/CMakeLists.txt
 delete mode 100644 src/ims/ims.c
 delete mode 100644 src/ims/ims.cxx
 delete mode 100644 src/ims/ims.h
 delete mode 100644 src/ims/ims.hpp
 delete mode 100644 src/ims/ims.i
 delete mode 100644 src/ims/ims.json
 delete mode 100644 src/ims/ims_defs.h
 delete mode 100644 src/ims/ims_fti.c
 delete mode 100644 src/ina132/CMakeLists.txt
 delete mode 100644 src/ina132/ina132.cxx
 delete mode 100644 src/ina132/ina132.hpp
 delete mode 100644 src/ina132/ina132.json
 delete mode 100644 src/isd1820/CMakeLists.txt
 delete mode 100644 src/isd1820/isd1820.cxx
 delete mode 100644 src/isd1820/isd1820.hpp
 delete mode 100644 src/isd1820/isd1820.json
 delete mode 100644 src/itg3200/CMakeLists.txt
 delete mode 100644 src/itg3200/itg3200.cxx
 delete mode 100644 src/itg3200/itg3200.hpp
 delete mode 100644 src/itg3200/itg3200.i
 delete mode 100644 src/itg3200/itg3200.json

diff --git a/src/flex/CMakeLists.txt b/src/flex/CMakeLists.txt
deleted file mode 100644
index 0b15dcb..0000000
--- a/src/flex/CMakeLists.txt
+++ /dev/null
@@ -1,8 +0,0 @@
-upm_mixed_module_init (NAME flex
-    DESCRIPTION "Resistive Flex Sensor"
-    C_HDR flex.h
-    C_SRC flex.c
-    CPP_HDR flex.hpp
-    CPP_SRC flex.cxx
-    FTI_SRC flex_fti.c
-    REQUIRES mraa)
diff --git a/src/flex/flex.c b/src/flex/flex.c
deleted file mode 100644
index 3195114..0000000
--- a/src/flex/flex.c
+++ /dev/null
@@ -1,136 +0,0 @@
-/*
- * Author: Noel Eck <noel.eck@intel.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <string.h>
-#include <stdlib.h>
-
-#include "flex.h"
-
-flex_context flex_init(int16_t pin)
-{
-    // make sure MRAA is initialized
-    int mraa_rv;
-    if ((mraa_rv = mraa_init()) != MRAA_SUCCESS)
-    {
-        printf("%s: mraa_init() failed (%d).\n", __FUNCTION__, mraa_rv);
-        return NULL;
-    }
-
-    flex_context dev = (flex_context) malloc(sizeof(struct _flex_context));
-
-    if (dev == NULL)
-      return NULL;
-
-    /* Init aio pin */
-    dev->aio = mraa_aio_init(pin);
-
-    if (dev->aio == NULL) {
-        free(dev);
-        return NULL;
-    }
-
-    /* Set the ADC ref, scale, and offset defaults */
-    dev->m_aRef = 5.0;
-    dev->m_scale = 1.0;
-    dev->m_offset = 0.0;
-
-    return dev;
-}
-
-void flex_close(flex_context dev)
-{
-    mraa_aio_close(dev->aio);
-    free(dev);
-}
-
-upm_result_t flex_set_aref(const flex_context dev, float aref)
-{
-    dev->m_aRef = aref;
-    return UPM_SUCCESS;
-}
-
-upm_result_t flex_set_scale(const flex_context dev, float scale)
-{
-    dev->m_scale = scale;
-    return UPM_SUCCESS;
-}
-
-upm_result_t flex_set_offset(const flex_context dev, float offset)
-{
-    dev->m_offset = offset;
-    return UPM_SUCCESS;
-}
-
-float flex_get_aref(const flex_context dev)
-{
-    return dev->m_aRef;
-}
-
-float flex_get_scale(const flex_context dev)
-{
-    return dev->m_scale;
-}
-
-float flex_get_offset(const flex_context dev)
-{
-    return dev->m_offset;
-}
-
-upm_result_t flex_get_normalized(const flex_context dev, float *value)
-{
-    *value = mraa_aio_read_float(dev->aio);
-    if (*value < 0)
-        return UPM_ERROR_OPERATION_FAILED;
-    return UPM_SUCCESS;
-}
-
-upm_result_t flex_get_raw_volts(const flex_context dev, float *value)
-{
-    *value = mraa_aio_read_float(dev->aio);
-    if (*value < 0)
-        return UPM_ERROR_OPERATION_FAILED;
-
-    /* Scale by the ADC reference voltage */
-    *value *= dev->m_aRef;
-
-    return UPM_SUCCESS;
-}
-
-upm_result_t flex_get_volts(const flex_context dev, float *value)
-{
-    *value = mraa_aio_read_float(dev->aio);
-    if (*value < 0)
-        return UPM_ERROR_OPERATION_FAILED;
-
-     /* Apply raw scale */
-    *value *= dev->m_scale;
-
-     /* Scale to aRef */
-    *value *= dev->m_aRef;
-
-    /* Apply the offset in volts */
-    *value += dev->m_offset;
-
-    return UPM_SUCCESS;
-}
diff --git a/src/flex/flex.cxx b/src/flex/flex.cxx
deleted file mode 100644
index 0ab1d73..0000000
--- a/src/flex/flex.cxx
+++ /dev/null
@@ -1,52 +0,0 @@
-/*
- * Author: Zion Orent <zorent@ics.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <iostream>
-#include <string>
-#include <stdexcept>
-
-#include "flex.hpp"
-
-using namespace upm;
-using namespace std;
-
-Flex::Flex(int pin)
-{
-  if ( !(m_aio = mraa_aio_init(pin)) )
-    {
-      throw std::invalid_argument(std::string(__FUNCTION__) +
-                                  ": mraa_aio_init() failed, invalid pin?");
-      return;
-    }
-}
-
-Flex::~Flex()
-{
-  mraa_aio_close(m_aio);
-}
-
-int Flex::value()
-{
-  return mraa_aio_read(m_aio);
-}
diff --git a/src/flex/flex.h b/src/flex/flex.h
deleted file mode 100644
index 3c751de..0000000
--- a/src/flex/flex.h
+++ /dev/null
@@ -1,141 +0,0 @@
-/*
- * Author: Noel Eck <noel.eck@intel.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#pragma once
-
-#include "upm.h"
-#include "mraa/aio.h"
-
-#ifdef __cplusplus
-extern "C" {
-#endif
-
-/**
- * @file flex.h
- * @library flex
- * @brief C API for the Spectra Symbol Flex Sensor
- *
- * @include flex.c
- */
-
-/**
- * driver context
- */
-typedef struct _flex_context {
-    /* mraa aio pin context */
-    mraa_aio_context aio;
-    /* Analog voltage reference */
-    float m_aRef;
-    /* Scale */
-    float m_scale;
-    /* Offset in sensor units */
-    float m_offset;
-} *flex_context;
-
-/**
- * Initialize analog sensor
- * @param pin Analog pin
- * @return sensor context
- */
-flex_context flex_init(int16_t pin);
-
-/**
- * Analog sensor destructor
- * @param sensor context pointer
- */
-void flex_close(flex_context dev);
-
-/**
- * Set ADC reference voltage
- * @param dev sensor context pointer
- * @param aref ADC reference voltage
- * @return Function result code
- */
-upm_result_t flex_set_aref(const flex_context dev, float aref);
-
-/**
- * Set sensor scale.  This scale is applied to the return value:
- *     counts = counts * scale
- * @param dev sensor context pointer
- * @param scale count scale value used
- * @return Function result code
- */
-upm_result_t flex_set_scale(const flex_context dev, float scale);
-
-/**
- * Set sensor offset.  This offset is applied to the return value:
- *     value = value + offset
- * @param dev sensor context pointer
- * @param offset count offset value used
- * @return Function result code
- */
-upm_result_t flex_set_offset(const flex_context dev, float offset);
-
-/**
- * Get sensor aref
- * @param dev sensor context pointer
- * @return Sensor ADC reference voltage
- */
-float flex_get_aref(const flex_context dev);
-
-/**
- * Get sensor scale
- * @param dev sensor context pointer
- * @return Sensor scale
- */
-float flex_get_scale(const flex_context dev);
-
-/**
- * Get sensor offset
- * @param dev sensor context pointer
- * @return Sensor offset
- */
-float flex_get_offset(const flex_context dev);
-
-/**
- * Read normalized value for sensor
- * @param dev sensor context pointer
- * @param *value Normalized value (0.0 -> 1.0)
- * @return Function result code
- */
-upm_result_t flex_get_normalized(const flex_context dev, float *value);
-
-/**
- * Read raw voltage from the sensor
- * @param dev sensor context pointer
- * @param *value Raw sensor voltage
- * @return Function result code
- */
-upm_result_t flex_get_raw_volts(const flex_context dev, float *value);
-
-/**
- * Read scaled/offset voltage from the sensor
- * @param dev sensor context pointer
- * @param *value Adjusted sensor voltage
- * @return Function result code
- */
-upm_result_t flex_get_volts(const flex_context dev, float *value);
-#ifdef __cplusplus
-}
-#endif
diff --git a/src/flex/flex.hpp b/src/flex/flex.hpp
deleted file mode 100644
index 833d4c7..0000000
--- a/src/flex/flex.hpp
+++ /dev/null
@@ -1,81 +0,0 @@
-/*
- * Author: Zion Orent <zorent@ics.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#pragma once
-
-#include <string>
-#include <mraa/aio.h>
-
-namespace upm {
-
-  /**
-   * @brief Spectra Symbol Flex Sensor
-   * @defgroup flex libupm-flex
-   * @ingroup sparkfun analog flexfor
-   */
-
-  /**
-   * @library flex
-   * @sensor flex
-   * @comname Resistive Flex Sensor
-   * @type flexfor
-   * @man sparkfun
-   * @web https://www.sparkfun.com/products/8606
-   * @con analog
-   *
-   * @brief API for the Spectra Symbol Flex Sensor
-   *
-   * A simple flex sensor. The resistance across the sensor increases when
-   * flexed. Patented technology by Spectra Symbol, these sensors were used in
-   * the original Nintendo* Power Glove.
-   *
-   * @image html flex.jpg
-   * <br><em>Flex Sensor image provided by SparkFun* under
-   * <a href=https://creativecommons.org/licenses/by/2.0/>
-   * CC BY 2.0</a>.</em>
-   *
-   * @snippet flex.cxx Interesting
-   */
-  class Flex {
-  public:
-    /**
-     * Flex sensor constructor
-     *
-     * @param pin Analog pin to use
-     */
-    Flex(int pin);
-    /**
-     * Flex sensor destructor
-     */
-    ~Flex();
-    /**
-     * @return Analog flex value
-     */
-    int value();
-
-  private:
-    mraa_aio_context m_aio;
-  };
-}
-
-
diff --git a/src/flex/flex.json b/src/flex/flex.json
deleted file mode 100644
index 851ca1c..0000000
--- a/src/flex/flex.json
+++ /dev/null
@@ -1,39 +0,0 @@
-{
-    "Library": "flex",
-    "Description": "API for the Spectra Symbol Flex Sensor",
-    "Sensor Class":
-    {
-        "Flex":
-        {
-            "Name": "Resistive Flex Sensor",
-            "Description": "A simple flex sensor. The resistance across the sensor increases when flexed. Patented technology by Spectra Symbol, these sensors were used in the original Nintendo* Power Glove.",
-            "Aliases": ["flex"],
-            "Categories": ["flex sensors"],
-            "Connections": ["analog"],
-            "Project Type": ["prototyping", "industrial"],
-            "Manufacturers": ["sparkfun"],
-            "Kits": [],
-            "Image": "flex.jpg",
-            "Examples":
-            {
-                "Java": ["FlexSensor_Example.java"],
-                "Python": [],
-                "Node.js": ["flex.js"],
-                "C++": ["flex.cxx"],
-                "C": []
-            },
-            "Specifications":
-            {
-                "Flat Resistance": {"unit": "KOhms", "typ": 10},
-                "Bend Resistance": {"unit": "KOhms", "low": 60, "high": 110},
-                "Temperature Range": {"unit": "degC", "low": -35, "high": 80}
-            },
-            "Urls" :
-            {
-                "Product Pages": ["https://www.sparkfun.com/products/8606"],
-                "Datasheets": ["https://cdn.sparkfun.com/datasheets/Sensors/ForceFlex/FLEXSENSORREVA1.pdf"],
-                "Schematics": []
-            }
-        }
-    }
-}
diff --git a/src/flex/flex_fti.c b/src/flex/flex_fti.c
deleted file mode 100644
index 5965234..0000000
--- a/src/flex/flex_fti.c
+++ /dev/null
@@ -1,119 +0,0 @@
-/*
- * Author: Noel Eck <noel.eck@intel.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <string.h>
-#include <stdlib.h>
-
-#include "flex.h"
-#include "upm_fti.h"
-#include "fti/upm_sensor.h"
-#include "fti/upm_raw.h"
-
-/** 
- * This file implements the Function Table Interface (FTI) for this sensor
- */
-
-const char upm_flex_name[] = "flex";
-const char upm_flex_description[] = "Analog flex sensor";
-const upm_protocol_t upm_flex_protocol[] = {UPM_ANALOG};
-const upm_sensor_t upm_flex_category[] = {UPM_RAW};
-
-// forward declarations
-const void* upm_flex_get_ft(upm_sensor_t sensor_type);
-void* upm_flex_init_str(const char* protocol, const char* params);
-void upm_flex_close(void* dev);
-const upm_sensor_descriptor_t upm_flex_get_descriptor();
-upm_result_t upm_flex_set_offset(const void* dev, float offset);
-upm_result_t upm_flex_set_scale(const void* dev, float scale);
-upm_result_t upm_flex_get_value(const void* dev, float *value);
-
-/* This sensor implementes 2 function tables */
-/* 1. Generic base function table */
-static const upm_sensor_ft ft_gen =
-{
-    .upm_sensor_init_name = &upm_flex_init_str,
-    .upm_sensor_close = &upm_flex_close,
-    .upm_sensor_get_descriptor = &upm_flex_get_descriptor
-};
-
-/* 2. RAW function table */
-static const upm_raw_ft ft_raw =
-{
-    .upm_raw_set_offset = &upm_flex_set_offset,
-    .upm_raw_set_scale = &upm_flex_set_scale,
-    .upm_raw_get_value = &upm_flex_get_value
-};
-
-const void* upm_flex_get_ft(upm_sensor_t sensor_type)
-{
-    switch(sensor_type)
-    {
-        case UPM_SENSOR:
-            return &ft_gen;
-        case UPM_RAW:
-            return &ft_raw;
-        default:
-            return NULL;
-    }
-}
-
-void* upm_flex_init_str(const char* protocol, const char* params)
-{
-    fprintf(stderr, "String initialization - not implemented, using ain0: %s\n", __FILENAME__);
-    return flex_init(0);
-}
-
-void upm_flex_close(void* dev)
-{
-    flex_close((flex_context)dev);
-}
-
-const upm_sensor_descriptor_t upm_flex_get_descriptor()
-{
-    /* Fill in the descriptor */
-    upm_sensor_descriptor_t usd;
-    usd.name = upm_flex_name;
-    usd.description = upm_flex_description;
-    usd.protocol_size = 1;
-    usd.protocol = upm_flex_protocol;
-    usd.category_size = 1;
-    usd.category = upm_flex_category;
-
-    return usd;
-}
-
-upm_result_t upm_flex_set_offset(const void* dev, float offset)
-{
-    return flex_set_offset((flex_context)dev, offset);
-}
-
-upm_result_t upm_flex_set_scale(const void* dev, float scale)
-{
-    return flex_set_scale((flex_context)dev, scale);
-}
-
-upm_result_t upm_flex_get_value(const void* dev, float *value)
-{
-    return flex_get_volts((flex_context)dev, value);
-}
diff --git a/src/gas/CMakeLists.txt b/src/gas/CMakeLists.txt
deleted file mode 100644
index 4f93589..0000000
--- a/src/gas/CMakeLists.txt
+++ /dev/null
@@ -1,8 +0,0 @@
-upm_mixed_module_init (NAME gas
-    DESCRIPTION "Generic Gas Detection Sensor Library"
-    C_HDR mqx.h
-    C_SRC mqx.c
-    CPP_HDR gas.hpp mq2.hpp mq3.hpp mq4.hpp mq5.hpp mq6.hpp mq7.hpp mq8.hpp mq9.hpp tp401.hpp
-    CPP_SRC gas.cxx mq2.cxx mq3.cxx mq4.cxx mq5.cxx mq6.cxx mq7.cxx mq8.cxx mq9.cxx tp401.cxx
-    FTI_SRC mqx_fti.c
-    REQUIRES mraa)
diff --git a/src/gas/README.txt b/src/gas/README.txt
deleted file mode 100644
index 3045f0f..0000000
--- a/src/gas/README.txt
+++ /dev/null
@@ -1,8 +0,0 @@
-Grove - Gas Sensor(MQ-2):Combustible Gas Smoke [medium sensitivity]
-Grove - Gas Sensor(MQ-3):Alcohol and Benzine [high sensitivity] Long warm-up
-Grove - Gas Sensor(MQ-5):LPG, Natural Gas, Town Gas [high sensitivity]
-Grove - Gas Sensor(MQ-9):LPG, CO, CH4 [low sensitivity]
-Grove - Air Quality Sensor(TP-401): CO, alcohol, acetone, thinner, others [high sensitivity].
-
-Note - Gas sensors need to be heated, first minute the data is incorrect. Air
-Quality sensor needs 48h to stabilize.
diff --git a/src/gas/gas.cxx b/src/gas/gas.cxx
deleted file mode 100644
index ac26110..0000000
--- a/src/gas/gas.cxx
+++ /dev/null
@@ -1,98 +0,0 @@
-/*
- * Author: Brendan Le Foll <brendan.le.foll@intel.com>
- * Copyright (c) 2014 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <iostream>
-#include <unistd.h>
-#include <stdlib.h>
-#include <functional>
-#include <string.h>
-#include <stdexcept>
-#include "gas.hpp"
-
-using namespace upm;
-
-Gas::Gas(int gasPin) : m_aio(gasPin) {
-}
-
-Gas::~Gas() {
-}
-
-int
-Gas::getSampledWindow (unsigned int freqMS, int numberOfSamples,
-                            uint16_t * buffer) {
-    int sampleIdx = 0;
-
-    // must have freq
-    if (!freqMS) {
-        return 0;
-    }
-
-    // too many samples
-    if (numberOfSamples > 0xFFFFFF) {
-        return 0;
-    }
-
-    while (sampleIdx < numberOfSamples) {
-        buffer[sampleIdx++] = getSample();
-        usleep(freqMS * 1000);
-    }
-
-    return sampleIdx;
-}
-
-int
-Gas::findThreshold (thresholdContext* ctx, unsigned int threshold,
-                                uint16_t * buffer, int len) {
-    long sum = 0;
-    for (int i = 0; i < len; i++) {
-        sum += buffer[i];
-    }
-
-    ctx->averageReading = sum / len;
-    ctx->runningAverage = (((ctx->averagedOver-1) * ctx->runningAverage) + ctx->averageReading) / ctx->averagedOver;
-
-    if (ctx->runningAverage > threshold) {
-        return ctx->runningAverage;
-    } else {
-        return 0;
-    }
-}
-
-int
-Gas::getSampledData (thresholdContext* ctx) {
-    return ctx->runningAverage;
-}
-
-int
-Gas::getSample () {
-    return m_aio.read();
-}
-
-void
-Gas::printGraph (thresholdContext* ctx, uint8_t resolution) {
-    std::cout << "(" << ctx->runningAverage << ") | ";
-    for (unsigned int i = 0; i < ctx->runningAverage / resolution; i++)
-        std::cout << "*";
-    std::cout << std::endl;
-}
diff --git a/src/gas/gas.hpp b/src/gas/gas.hpp
deleted file mode 100644
index c7edf63..0000000
--- a/src/gas/gas.hpp
+++ /dev/null
@@ -1,104 +0,0 @@
-/*
- * Author: Brendan Le Foll <brendan.le.foll@intel.com>
- * Copyright (c) 2014 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#pragma once
-
-#include <string>
-#include <mraa/aio.hpp>
-
-struct thresholdContext {
-    long averageReading;
-    unsigned long runningAverage;
-    int averagedOver;
-};
-
-namespace upm {
-/**
- * @brief Gas Sensors Library
- *
- * Library for air quality and gas detecting sensors. Base class Gas provides buffered
- * sampling, threshold checking, basic printing function, and standard read function.
- *
- * @defgroup gas libupm-gas
- * @ingroup seeed analog gaseous eak hak
- */
-class Gas {
-    public:
-        /**
-         * Instantiates a Gas object
-         *
-         * @param gasPin Pin where gas is connected
-         */
-        Gas(int gasPin);
-
-        /**
-         * Gas object destructor
-         */
-        virtual ~Gas();
-
-        /**
-         * Gets samples from the gas sensor according to the provided window and
-         * number of samples
-         *
-         * @param freqMS Time between each sample (in milliseconds)
-         * @param numberOfSamples Number of sample to sample for this window
-         * @param buffer Buffer with sampled data
-         */
-        virtual int getSampledWindow (unsigned int freqMS, int numberOfSamples, uint16_t * buffer);
-
-        /**
-         * Given the sampled buffer, this method returns TRUE/FALSE if the threshold
-         * is reached
-         *
-         * @param ctx Threshold context
-         * @param threshold Sample threshold
-         * @param buffer Buffer with samples
-         * @param len Buffer length
-         */
-        virtual int findThreshold (thresholdContext* ctx, unsigned int threshold, uint16_t * buffer, int len);
-
-        /**
-         * Returns average data for the sampled window
-         *
-         * @param ctx Threshold context
-         */
-        virtual int getSampledData (thresholdContext* ctx);
-
-        /**
-         * Returns one sample from the sensor
-         */
-        virtual int getSample ();
-
-        /**
-         *
-         * Prints a running average of the threshold context
-         *
-         * @param ctx Threshold context
-         */
-        virtual void printGraph (thresholdContext* ctx, uint8_t resolution);
-
-    protected:
-        mraa::Aio    m_aio;
-};
-
-}
diff --git a/src/gas/gas.i b/src/gas/gas.i
deleted file mode 100644
index fb2effe..0000000
--- a/src/gas/gas.i
+++ /dev/null
@@ -1,75 +0,0 @@
-%include "../common_top.i"
-
-/* BEGIN Java syntax  ------------------------------------------------------- */
-#ifdef SWIGJAVA
-%typemap(jni) (uint16_t *buffer, int len) "jshortArray";
-%typemap(jtype) (uint16_t *buffer, int len) "short[]";
-%typemap(jstype) (uint16_t *buffer, int len) "short[]";
-
-%typemap(javain) (uint16_t *buffer, int len) "$javainput";
-
-%typemap(in) (uint16_t *buffer, int len) {
-        $1 = (uint16_t *) JCALL2(GetShortArrayElements, jenv, $input, NULL);
-        $2 = JCALL1(GetArrayLength, jenv, $input);
-}
-
-%typemap(freearg) (uint16_t *buffer, int len) {
-        JCALL3(ReleaseShortArrayElements, jenv, $input, (jshort *)$1, 0);
-}
-
-%typemap(jni) (int numberOfSamples, uint16_t *buffer) "jshortArray";
-%typemap(jtype) (int numberOfSamples, uint16_t *buffer) "short[]";
-%typemap(jstype) (int numberOfSamples, uint16_t *buffer) "short[]";
-
-%typemap(javain) (int numberOfSamples, uint16_t *buffer) "$javainput";
-
-%typemap(in) (int numberOfSamples, uint16_t *buffer) {
-        $2 = (uint16_t *) JCALL2(GetShortArrayElements, jenv, $input, NULL);
-        $1 = JCALL1(GetArrayLength, jenv, $input);
-}
-
-%typemap(freearg) (int numberOfSamples, uint16_t *buffer) {
-        JCALL3(ReleaseShortArrayElements, jenv, $input, (jshort *)$2, 0);
-}
-
-JAVA_JNI_LOADLIBRARY(javaupm_gas)
-#endif
-/* END Java syntax */
-
-/* BEGIN Javascript syntax  ------------------------------------------------- */
-#ifdef SWIGJAVASCRIPT
-%include "../carrays_uint16_t.i"
-#endif
-/* END Javascript syntax */
-
-/* BEGIN Python syntax  ----------------------------------------------------- */
-#ifdef SWIGPYTHON
-%include "../carrays_uint16_t.i"
-#endif
-/* END Python syntax */
-
-/* BEGIN Common SWIG syntax ------------------------------------------------- */
-%{
-#include "gas.hpp"
-#include "mq2.hpp"
-#include "mq3.hpp"
-#include "mq4.hpp"
-#include "mq5.hpp"
-#include "mq6.hpp"
-#include "mq7.hpp"
-#include "mq8.hpp"
-#include "mq9.hpp"
-#include "tp401.hpp"
-%}
-
-%include "gas.hpp"
-%include "mq2.hpp"
-%include "mq3.hpp"
-%include "mq4.hpp"
-%include "mq5.hpp"
-%include "mq6.hpp"
-%include "mq7.hpp"
-%include "mq8.hpp"
-%include "mq9.hpp"
-%include "tp401.hpp"
-/* END Common SWIG syntax */
diff --git a/src/gas/gas.json b/src/gas/gas.json
deleted file mode 100644
index aedacfc..0000000
--- a/src/gas/gas.json
+++ /dev/null
@@ -1,275 +0,0 @@
-{
-    "Library": "gas",
-    "Description": "Gas Sensor Library",
-    "Sensor Class":
-    {
-        "MQ2":
-        {
-            "Name": "MQ2 Methane, Butane, Liquefied Petroleum Gas (LPG), and Smoke Sensor",
-            "Description": "The MQ2 Gas Sensor module is useful for gas leakage detection (in home and industry). It can detect LPG, i-butane, methane, alcohol, hydrogen, smoke, and other combustible gases. It's a medium-sensitivity sensor with a detection range of 300-10,000 ppm.",
-            "Aliases": ["mq2"],
-            "Categories": ["gas"],
-            "Connections": ["analog"],
-            "Project Type": ["prototyping", "safety", "industrial"],
-            "Manufacturers": ["seeed"],
-            "Kits": ["hak"],
-            "Examples":
-            {
-                "Java": [],
-                "Python": [],
-                "Node.js": [],
-                "C++": ["gas-mq2.cxx"],
-                "C": ["gas-mqx.c"]
-            },
-            "Specifications":
-            {
-                "Operating Voltage": {"unit": "V", "typ": 5},
-                "Operating Current": {"unit": "mA", "low": 0.1, "high": 160},
-                "Heater Resistance": {"unit": "Ohms", "typ": 33},
-                "Sensor Resistance": {"unit": "KOhms", "low": 3, "high": 30}
-            },
-            "Urls" :
-            {
-                "Product Pages": ["https://www.seeedstudio.com/Grove-Gas-Sensor(MQ2)-p-937.html"],
-                "Datasheets": ["http://wiki.seeed.cc/Grove-Gas_Sensor-MQ2/"],
-                "Schematics": []
-            }
-        },
-        
-        "MQ3":
-        {
-            "Name": "MQ3 Alcohol, Ethanol, Smoke Sensor",
-            "Description": "The MQ3 Gas Sensor module is useful for gas leakage detection (in home and industry). It can detect alcohol vapors and benzine. It's highly sensitive but has a long warm-up time of about 1 minute. It's detection range is 0.04-4 mg/L Alcohol.",
-            "Aliases": ["mq3"],
-            "Categories": ["gas"],
-            "Connections": ["analog"],
-            "Project Type": ["prototyping", "safety", "industrial"],
-            "Manufacturers": ["seeed"],
-            "Kits": [],
-            "Examples":
-            {
-                "Java": [],
-                "Python": [],
-                "Node.js": [],
-                "C++": ["gas-mq3.cxx"],
-                "C": ["gas-mqx.c"]
-            },
-            "Specifications":
-            {
-                "Operating Voltage": {"unit": "V", "typ": 5},
-                "Operating Current": {"unit": "mA", "low": 0.1, "high": 150},
-                "Heater Resistance": {"unit": "Ohms", "typ": 33},
-                "Sensor Resistance": {"unit": "MOhms", "low": 1, "high": 8},
-                "Detectable Concentration": {"unit": "mg/L", "low": 0.05, "high": 10}
-            },
-            "Urls" :
-            {
-                "Product Pages": ["https://www.seeedstudio.com/Grove-Gas-Sensor%28MQ3%29-p-1418.html"],
-                "Datasheets": ["http://wiki.seeed.cc/Grove-Gas_Sensor-MQ3/"],
-                "Schematics": []
-            }
-        },
-        
-        "MQ4":
-        {
-            "Name": "MQ4 Methane and Connecticut Natural Gas (CNG) Sensor",
-            "Description": "The MQ4 Gas Sensor module is useful for detecting CH4 (Methane), and natural gas concentrations in the air.  It has a detection range of 100-10000 ppm. For optimum use, it requires calibration after a pre-heat time of at least 24 hours.  See the datasheet for details.",
-            "Aliases": ["mq4"],
-            "Categories": ["gas"],
-            "Connections": ["analog"],
-            "Project Type": ["prototyping", "safety", "industrial"],
-            "Manufacturers": ["dfrobot"],
-            "Kits": [],
-            "Examples":
-            {
-                "Java": [],
-                "Python": [],
-                "Node.js": [],
-                "C++": ["gas-mq4.cxx"],
-                "C": ["gas-mqx.c"]
-            },
-            "Specifications":
-            {
-                "Operating Voltage": {"unit": "V", "typ": 5},
-                "Operating Current": {"unit": "mA", "low": 0.1, "high": 150},
-                "Heater Resistance": {"unit": "Ohms", "typ": 33},
-                "Sensor Resistance": {"unit": "KOhms", "low": 10, "high": 60}
-            },
-            "Urls" :
-            {
-                "Product Pages": ["https://www.dfrobot.com/product-683.html"],
-                "Datasheets": ["http://image.dfrobot.com/image/data/SEN0129/MQ-4.pdf", "https://www.dfrobot.com/wiki/index.php/Analog_Gas_Sensor(MQ4)_(SKU:SEN0129)"],
-                "Schematics": []
-            }
-        },
-        
-        "MQ5":
-        {
-            "Name": "MQ5 Natural Gas and Liquefied Petroleum Gas (LPG) Sensor",
-            "Description": "The MQ5 Gas Sensor module is useful for gas leakage detection (in home and industry). It can detect LPG, natural gas, town gas, and so on. It is highly sensitive and has a detection range of 300-10,000 ppm.",
-            "Aliases": ["mq5"],
-            "Categories": ["gas"],
-            "Connections": ["analog"],
-            "Project Type": ["prototyping", "safety", "industrial"],
-            "Manufacturers": ["seeed"],
-            "Kits": ["eak"],
-            "Examples":
-            {
-                "Java": [],
-                "Python": [],
-                "Node.js": [],
-                "C++": ["gas-mq5.cxx"],
-                "C": ["gas-mqx.c"]
-            },
-            "Specifications":
-            {
-                "Operating Voltage": {"unit": "V", "typ": 5},
-                "Operating Current": {"unit": "mA", "low": 0.1, "high": 160},
-                "Heater Resistance": {"unit": "Ohms", "typ": 31},
-                "Sensor Resistance": {"unit": "KOhms", "low": 10, "high": 60},
-                "Detectable Concentration": {"unit": "ppm", "low": 200, "high": 10000}
-            },
-            "Urls" :
-            {
-                "Product Pages": ["https://www.seeedstudio.com/Grove-Gas-Sensor%28MQ5%29-p-938.html"],
-                "Datasheets": ["http://wiki.seeed.cc/Grove-Gas_Sensor-MQ5/", "https://raw.githubusercontent.com/SeeedDocument/Grove-Gas_Sensor-MQ5/master/res/MQ-5.pdf"],
-                "Schematics": []
-            }
-        },
-        
-        "MQ6":
-        {
-            "Name": "MQ6 Liquefied Petroleum Gas (LPG) and Butane Sensor",
-            "Description": "The MQ6 Gas Sensor module is useful for detecting LPG, iso-butane, propane, and LNG concentrations in the air.  It has a detection range of 200-10000 ppm. For optimum use, it requires calibration after a pre-heat time of at least 24 hours.  See the datasheet for details.",
-            "Aliases": ["mq6"],
-            "Categories": ["gas"],
-            "Connections": ["analog"],
-            "Project Type": ["prototyping", "safety", "industrial"],
-            "Manufacturers": ["dfrobot"],
-            "Kits": [],
-            "Examples":
-            {
-                "Java": [],
-                "Python": [],
-                "Node.js": [],
-                "C++": ["gas-mq6.cxx"],
-                "C": ["gas-mqx.c"]
-            },
-            "Specifications":
-            {
-                "Operating Voltage": {"unit": "V", "typ": 5},
-                "Operating Current": {"unit": "mA", "low": 0.1, "high": 150},
-                "Heater Resistance": {"unit": "Ohms", "typ": 33},
-                "Sensor Resistance": {"unit": "KOhms", "low": 10, "high": 60},
-                "Detectable Concentration": {"unit": "ppm", "low": 200, "high": 10000}
-            },
-            "Urls" :
-            {
-                "Product Pages": ["https://www.dfrobot.com/product-685.html"],
-                "Datasheets": ["https://www.dfrobot.com/wiki/index.php/LPG_Gas_Sensor(MQ6)_(SKU:SEN0131)", "http://image.dfrobot.com/image/data/SEN0131/MQ-6.pdf"],
-                "Schematics": ["http://image.dfrobot.com/image/data/SEN0131/MQ-X%20Schematic.pdf"]
-            }
-        },
-        
-        "MQ7":
-        {
-            "Name": "MQ7 Carbon Monoxide Sensor",
-            "Description": "The Grove MQ7 Gas Sensor module is useful for detecting Carbon Monoxide (CO) concentrations in the air.  It has a detection range of 20-2000 ppm. For optimum use, it requires calibration after a pre-heat time of 48 hours.  See the datasheet for details.",
-            "Aliases": ["mq7"],
-            "Categories": ["gas"],
-            "Connections": ["analog"],
-            "Project Type": ["prototyping", "safety", "industrial"],
-            "Manufacturers": ["dfrobot"],
-            "Kits": [],
-            "Examples":
-            {
-                "Java": [],
-                "Python": [],
-                "Node.js": [],
-                "C++": ["gas-mq7.cxx"],
-                "C": ["gas-mqx.c"]
-            },
-            "Specifications":
-            {
-                "Operating Voltage": {"unit": "V", "typ": 5},
-                "Operating Current": {"unit": "mA", "typ": 70},
-                "Heater Resistance": {"unit": "Ohms", "typ": 33},
-                "Detectable Concentration": {"unit": "ppm", "low": 20, "high": 2000}
-            },
-            "Urls" :
-            {
-                "Product Pages": ["https://www.dfrobot.com/product-686.html"],
-                "Datasheets": ["https://www.dfrobot.com/wiki/index.php/Carbon_Monoxide_Gas_Sensor(MQ7)_(SKU:SEN0132)", "http://image.dfrobot.com/image/data/SEN0132/MQ-7.pdf"],
-                "Schematics": ["http://image.dfrobot.com/image/data/SEN0132/MQ-X%20Schematic.pdf"]
-            }
-        },
-        
-        "MQ8":
-        {
-            "Name": "MQ8 Flammable (Hydrogen) Gas Sensor",
-            "Description": "The MQ8 Gas Sensor module is useful for detecting Hydrogen gas concentrations in the air.  It has a detection range of 100-10000 ppm. For optimum use, it requires calibration after a pre-heat time of at least 24 hours.  See the datasheet for details.",
-            "Aliases": ["mq8"],
-            "Categories": ["gas"],
-            "Connections": ["analog"],
-            "Project Type": ["prototyping", "safety", "industrial"],
-            "Manufacturers": ["dfrobot"],
-            "Kits": [],
-            "Examples":
-            {
-                "Java": [],
-                "Python": [],
-                "Node.js": [],
-                "C++": ["gas-mq8.cxx"],
-                "C": ["gas-mqx.c"]
-            },
-            "Specifications":
-            {
-                "Operating Voltage": {"unit": "V", "typ": 5},
-                "Operating Current": {"unit": "mA", "max": 160},
-                "Heater Resistance": {"unit": "Ohms", "typ": 31},
-                "Sensor Resistance": {"unit": "KOhms", "low": 10, "high": 60},
-                "Detectable Concentration": {"unit": "ppm", "low": 100, "high": 10000}
-            },
-            "Urls" :
-            {
-                "Product Pages": ["https://www.dfrobot.com/product-687.html"],
-                "Datasheets": ["https://www.dfrobot.com/wiki/index.php/Hydrogen_Gas_Sensor(MQ8)_(SKU:SEN0133)", "http://image.dfrobot.com/image/data/SEN0133/MQ-8.pdf"],
-                "Schematics": ["http://image.dfrobot.com/image/data/SEN0133/MQ-X%20Schematic.pdf"]
-            }
-        },
-        
-        "MQ9":
-        {
-            "Name": "MQ9 Carbon Monoxide (CO) and Flammable Gas Sensor",
-            "Description": "The Grove MQ9 Gas Sensor module is useful for gas leakage detection (in home and industry). It can detect carbon monoxide, coal gas, and liquefied gas. Its sensitivity is 10-1,000 ppm CO, and 100-10,000 ppm Gas.",
-            "Aliases": ["mq9"],
-            "Categories": ["gas"],
-            "Connections": ["analog"],
-            "Project Type": ["prototyping", "safety", "industrial"],
-            "Manufacturers": ["seeed"],
-            "Kits": [],
-            "Examples":
-            {
-                "Java": [],
-                "Python": [],
-                "Node.js": [],
-                "C++": ["gas-mq9.cxx"],
-                "C": ["gas-mqx.c"]
-            },
-            "Specifications":
-            {
-                "Operating Voltage": {"unit": "V", "typ": 5},
-                "Operating Current": {"unit": "mA", "low": 0.1, "high": 68},
-                "Heater Resistance": {"unit": "Ohms", "typ": 33},
-                "Sensor Resistance": {"unit": "Ohms", "low": 2, "high": 20000},
-                "Detectable Concentration": {"unit": "ppm", "low": 200, "high": 10000}
-            },
-            "Urls" :
-            {
-                "Product Pages": ["https://www.seeedstudio.com/Grove-Gas-Sensor%28MQ9%29-p-1419.html"],
-                "Datasheets": ["http://wiki.seeed.cc/Grove-Gas_Sensor-MQ9/", "https://raw.githubusercontent.com/SeeedDocument/Grove-Gas_Sensor-MQ9/master/res/MQ-9.pdf"],
-                "Schematics": ["https://raw.githubusercontent.com/SeeedDocument/Grove-Gas_Sensor-MQ9/master/res/Gas_Sensor_Schematic.pdf"]
-            }
-        }
-    }
-}
diff --git a/src/gas/mq2.cxx b/src/gas/mq2.cxx
deleted file mode 100644
index 913c66a..0000000
--- a/src/gas/mq2.cxx
+++ /dev/null
@@ -1,33 +0,0 @@
-/*
- * Author: Brendan Le Foll <brendan.le.foll@intel.com>
- * Copyright (c) 2014 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include "mq2.hpp"
-
-using namespace upm;
-
-MQ2::MQ2 (int gasPin) : Gas (gasPin) {
-}
-
-MQ2::~MQ2 () {
-}
diff --git a/src/gas/mq2.hpp b/src/gas/mq2.hpp
deleted file mode 100644
index 2aeefdd..0000000
--- a/src/gas/mq2.hpp
+++ /dev/null
@@ -1,75 +0,0 @@
-/*
- * Author: Brendan Le Foll <brendan.le.foll@intel.com>
- * Copyright (c) 2014 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#pragma once
-
-#include <iostream>
-#include <string>
-#include "gas.hpp"
-
-namespace upm {
-  /**
-   * @library gas
-   * @sensor mq2
-   * @comname MQ2 Methane, Butane, Liquefied Petroleum Gas (LPG), and Smoke Sensor
-   * @type gaseous
-   * @man seeed
-   * @con analog
-   * @kit hak
-   * @web http://wiki.seeed.cc/Grove-Gas_Sensor-MQ2/
-   *
-   * @brief API for the MQ2 Gas Sensor
-   *
-   * The MQ2 Gas Sensor module is useful for gas leakage detection
-   * (in home and industry). It can detect LPG, i-butane, methane, alcohol,
-   * hydrogen, smoke, and other combustible gases. It's a medium-sensitivity
-   * sensor with a detection range of 300-10,000 ppm.
-   *
-   * @image html mq2-5.jpeg
-   * @snippet gas-mq2.cxx Interesting
-   */
-    class MQ2 : public Gas {
-        public:
-            /**
-             * MQ2 constructor
-             *
-             * @param gasPin Analog pin where the sensor is connected
-             */
-            MQ2 (int gasPin);
-
-            /**
-             * MQ2 destructor
-             */
-            ~MQ2 ();
-
-            /**
-             * Returns the name of the sensor
-             */
-            std::string name()
-            {
-                return m_name;
-            }
-        private:
-            std::string m_name;
-    };
-}
diff --git a/src/gas/mq3.cxx b/src/gas/mq3.cxx
deleted file mode 100644
index 609c885..0000000
--- a/src/gas/mq3.cxx
+++ /dev/null
@@ -1,33 +0,0 @@
-/*
- * Author: Brendan Le Foll <brendan.le.foll@intel.com>
- * Copyright (c) 2014 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include "mq3.hpp"
-
-using namespace upm;
-
-MQ3::MQ3 (int gasPin) : Gas (gasPin) {
-}
-
-MQ3::~MQ3 () {
-}
diff --git a/src/gas/mq3.hpp b/src/gas/mq3.hpp
deleted file mode 100644
index cab851f..0000000
--- a/src/gas/mq3.hpp
+++ /dev/null
@@ -1,74 +0,0 @@
-/*
- * Author: Brendan Le Foll <brendan.le.foll@intel.com>
- * Copyright (c) 2014 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#pragma once
-
-#include <iostream>
-#include <string>
-#include "gas.hpp"
-
-namespace upm {
-  /**
-   * @library gas
-   * @sensor mq3
-   * @comname MQ3 Alcohol, Ethanol, Smoke Sensor
-   * @type gaseous
-   * @man seeed
-   * @con analog
-   * @web http://wiki.seeed.cc/Grove-Gas_Sensor-MQ3/
-   *
-   * @brief API for the MQ3 Gas Sensor
-   *
-   * The MQ3 Gas Sensor module is useful for gas leakage detection (in
-   * home and industry). It can detect alcohol vapors and benzine. It's
-   * highly sensitive but has a long warm-up time of about 1 minute. It's
-   * detection range is 0.04-4 mg/L Alcohol.
-   *
-   * @image html mq3-9.jpeg
-   * @snippet gas-mq3.cxx Interesting
-   */
-    class MQ3 : public Gas {
-        public:
-            /**
-             * MQ3 constructor
-             *
-             * @param gasPin Analog pin where the sensor is connected
-             */
-            MQ3 (int gasPin);
-
-            /**
-             * MQ3 destructor
-             */
-            ~MQ3 ();
-
-            /**
-             * Returns the name of the sensor
-             */
-            std::string name()
-            {
-                return m_name;
-            }
-        private:
-            std::string m_name;
-    };
-}
diff --git a/src/gas/mq4.cxx b/src/gas/mq4.cxx
deleted file mode 100644
index be07eb4..0000000
--- a/src/gas/mq4.cxx
+++ /dev/null
@@ -1,35 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include "mq4.hpp"
-
-using namespace upm;
-
-MQ4::MQ4 (int gasPin) : Gas (gasPin)
-{
-}
-
-MQ4::~MQ4 ()
-{
-}
diff --git a/src/gas/mq4.hpp b/src/gas/mq4.hpp
deleted file mode 100644
index 4675241..0000000
--- a/src/gas/mq4.hpp
+++ /dev/null
@@ -1,76 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#pragma once
-
-#include <iostream>
-#include <string>
-#include "gas.hpp"
-
-namespace upm {
-  /**
-   * @library gas
-   * @sensor mq4
-   * @comname MQ4 Methane and Connecticut Natural Gas (CNG) Sensor
-   * @type gaseous
-   * @man dfrobot
-   * @con analog
-   * @web https://www.dfrobot.com/index.php?route=product/product&product_id=683
-   *
-   * @brief API for the MQ4 Gas Sensor
-   *
-   * The MQ4 Gas Sensor module is useful for detecting CH4 (Methane),
-   * and natural gas concentrations in the air.  It has a
-   * detection range of 100-10000 ppm.
-   *
-   * For optimum use, it requires calibration after a pre-heat time of
-   * at least 24 hours.  See the datasheet for details.
-   *
-   * @image html mq2-5.jpeg
-   * @snippet gas-mq4.cxx Interesting
-   */
-    class MQ4 : public Gas {
-        public:
-            /**
-             * MQ4 constructor
-             *
-             * @param gasPin Analog pin where the sensor is connected
-             */
-            MQ4 (int gasPin);
-
-            /**
-             * MQ4 destructor
-             */
-            ~MQ4 ();
-
-            /**
-             * Returns the name of the sensor
-             */
-            std::string name()
-            {
-                return m_name;
-            }
-        private:
-            std::string m_name;
-    };
-}
diff --git a/src/gas/mq5.cxx b/src/gas/mq5.cxx
deleted file mode 100644
index ae0fcde..0000000
--- a/src/gas/mq5.cxx
+++ /dev/null
@@ -1,33 +0,0 @@
-/*
- * Author: Brendan Le Foll <brendan.le.foll@intel.com>
- * Copyright (c) 2014 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include "mq5.hpp"
-
-using namespace upm;
-
-MQ5::MQ5 (int gasPin) : Gas (gasPin) {
-}
-
-MQ5::~MQ5 () {
-}
diff --git a/src/gas/mq5.hpp b/src/gas/mq5.hpp
deleted file mode 100644
index 9be808a..0000000
--- a/src/gas/mq5.hpp
+++ /dev/null
@@ -1,75 +0,0 @@
-/*
- * Author: Brendan Le Foll <brendan.le.foll@intel.com>
- * Copyright (c) 2014 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#pragma once
-
-#include <iostream>
-#include <string>
-#include "gas.hpp"
-
-namespace upm {
-  /**
-   * @library gas
-   * @sensor mq5
-   * @comname MQ5 Natural Gas and Liquefied Petroleum Gas (LPG) Sensor
-   * @type gaseous
-   * @man seeed
-   * @con analog
-   * @web http://wiki.seeed.cc/Grove-Gas_Sensor-MQ5/
-   * @kit eak
-   *
-   * @brief API for the MQ5 Gas Sensor
-   *
-   * The MQ5 Gas Sensor module is useful for gas leakage detection
-   * (in home and industry). It can detect LPG, natural gas, town gas, and so
-   * on. It is highly sensitive and has a detection range of
-   * 300-10,000 ppm.
-   *
-   * @image html mq2-5.jpeg
-   * @snippet gas-mq5.cxx Interesting
-   */
-    class MQ5 : public Gas {
-        public:
-            /**
-             * MQ5 constructor
-             *
-             * @param gasPin Analog pin where the sensor is connected
-             */
-            MQ5 (int gasPin);
-
-            /**
-             * MQ9 destructor
-             */
-            ~MQ5 ();
-
-            /**
-             * Returns the name of the sensor
-             */
-            std::string name()
-            {
-                return m_name;
-            }
-        private:
-            std::string m_name;
-    };
-}
diff --git a/src/gas/mq6.cxx b/src/gas/mq6.cxx
deleted file mode 100644
index 023ade2..0000000
--- a/src/gas/mq6.cxx
+++ /dev/null
@@ -1,35 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include "mq6.hpp"
-
-using namespace upm;
-
-MQ6::MQ6 (int gasPin) : Gas (gasPin)
-{
-}
-
-MQ6::~MQ6 ()
-{
-}
diff --git a/src/gas/mq6.hpp b/src/gas/mq6.hpp
deleted file mode 100644
index cfbe21c..0000000
--- a/src/gas/mq6.hpp
+++ /dev/null
@@ -1,76 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#pragma once
-
-#include <iostream>
-#include <string>
-#include "gas.hpp"
-
-namespace upm {
-  /**
-   * @library gas
-   * @sensor mq6
-   * @comname MQ6 Liquefied Petroleum Gas (LPG) and Butane Sensor
-   * @type gaseous
-   * @man dfrobot
-   * @con analog
-   * @web https://www.dfrobot.com/wiki/index.php/LPG_Gas_Sensor(MQ6)_(SKU:SEN0131)
-   *
-   * @brief API for the MQ6 LPG Gas Sensor
-   *
-   * The MQ6 Gas Sensor module is useful for detecting LPG,
-   * iso-butane, propane, and LNG concentrations in the air.  It has a
-   * detection range of 200-10000 ppm.
-   *
-   * For optimum use, it requires calibration after a pre-heat time of
-   * at least 24 hours.  See the datasheet for details.
-   *
-   * @image html mq2-5.jpeg
-   * @snippet gas-mq6.cxx Interesting
-   */
-    class MQ6 : public Gas {
-        public:
-            /**
-             * MQ6 constructor
-             *
-             * @param gasPin Analog pin where the sensor is connected
-             */
-            MQ6 (int gasPin);
-
-            /**
-             * MQ6 destructor
-             */
-            ~MQ6 ();
-
-            /**
-             * Returns the name of the sensor
-             */
-            std::string name()
-            {
-                return m_name;
-            }
-        private:
-            std::string m_name;
-    };
-}
diff --git a/src/gas/mq7.cxx b/src/gas/mq7.cxx
deleted file mode 100644
index c6a3463..0000000
--- a/src/gas/mq7.cxx
+++ /dev/null
@@ -1,35 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include "mq7.hpp"
-
-using namespace upm;
-
-MQ7::MQ7 (int gasPin) : Gas (gasPin)
-{
-}
-
-MQ7::~MQ7 ()
-{
-}
diff --git a/src/gas/mq7.hpp b/src/gas/mq7.hpp
deleted file mode 100644
index 459f61e..0000000
--- a/src/gas/mq7.hpp
+++ /dev/null
@@ -1,76 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#pragma once
-
-#include <iostream>
-#include <string>
-#include "gas.hpp"
-
-namespace upm {
-  /**
-   * @library gas
-   * @sensor mq7
-   * @comname MQ7 Carbon Monoxide Sensor
-   * @type gaseous
-   * @man dfrobot
-   * @con analog
-   * @web https://www.dfrobot.com/wiki/index.php/Carbon_Monoxide_Gas_Sensor(MQ7)_(SKU:SEN0132)
-   *
-   * @brief API for the MQ7 CO Gas Sensor
-   *
-   * The Grove MQ7 Gas Sensor module is useful for detecting Carbon
-   * Monoxide (CO) concentrations in the air.  It has a detection
-   * range of 20-2000 ppm.
-   *
-   * For optimum use, it requires calibration after a pre-heat time of
-   * 48 hours.  See the datasheet for details.
-   *
-   * @image html mq3-9.jpeg
-   * @snippet gas-mq7.cxx Interesting
-   */
-    class MQ7 : public Gas {
-        public:
-            /**
-             * MQ7 constructor
-             *
-             * @param gasPin Analog pin where the sensor is connected
-             */
-            MQ7 (int gasPin);
-
-            /**
-             * MQ7 destructor
-             */
-            ~MQ7 ();
-
-            /**
-             * Returns the name of the sensor
-             */
-            std::string name()
-            {
-                return m_name;
-            }
-        private:
-            std::string m_name;
-    };
-}
diff --git a/src/gas/mq8.cxx b/src/gas/mq8.cxx
deleted file mode 100644
index bc6e0a9..0000000
--- a/src/gas/mq8.cxx
+++ /dev/null
@@ -1,35 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include "mq8.hpp"
-
-using namespace upm;
-
-MQ8::MQ8 (int gasPin) : Gas (gasPin)
-{
-}
-
-MQ8::~MQ8 ()
-{
-}
diff --git a/src/gas/mq8.hpp b/src/gas/mq8.hpp
deleted file mode 100644
index f097ed9..0000000
--- a/src/gas/mq8.hpp
+++ /dev/null
@@ -1,76 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#pragma once
-
-#include <iostream>
-#include <string>
-#include "gas.hpp"
-
-namespace upm {
-  /**
-   * @library gas
-   * @sensor mq8
-   * @comname MQ8 Flammable (Hydrogen) Gas Sensor
-   * @type gaseous
-   * @man dfrobot
-   * @con analog
-   * @web https://www.dfrobot.com/wiki/index.php/Hydrogen_Gas_Sensor(MQ8)_(SKU:SEN0133)
-   *
-   * @brief API for the MQ8 Hydrogen (H2) Gas Sensor
-   *
-   * The MQ8 Gas Sensor module is useful for detecting Hydrogen gas
-   * concentrations in the air.  It has a detection range of 100-10000
-   * ppm.
-   *
-   * For optimum use, it requires calibration after a pre-heat time of
-   * at least 24 hours.  See the datasheet for details.
-   *
-   * @image html mq2-5.jpeg
-   * @snippet gas-mq8.cxx Interesting
-   */
-    class MQ8 : public Gas {
-        public:
-            /**
-             * MQ8 constructor
-             *
-             * @param gasPin Analog pin where the sensor is connected
-             */
-            MQ8 (int gasPin);
-
-            /**
-             * MQ8 destructor
-             */
-            ~MQ8 ();
-
-            /**
-             * Returns the name of the sensor
-             */
-            std::string name()
-            {
-                return m_name;
-            }
-        private:
-            std::string m_name;
-    };
-}
diff --git a/src/gas/mq9.cxx b/src/gas/mq9.cxx
deleted file mode 100644
index bd7aa74..0000000
--- a/src/gas/mq9.cxx
+++ /dev/null
@@ -1,33 +0,0 @@
-/*
- * Author: Brendan Le Foll <brendan.le.foll@intel.com>
- * Copyright (c) 2014 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include "mq9.hpp"
-
-using namespace upm;
-
-MQ9::MQ9 (int gasPin) : Gas (gasPin) {
-}
-
-MQ9::~MQ9 () {
-}
diff --git a/src/gas/mq9.hpp b/src/gas/mq9.hpp
deleted file mode 100644
index 2edbf2e..0000000
--- a/src/gas/mq9.hpp
+++ /dev/null
@@ -1,73 +0,0 @@
-/*
- * Author: Brendan Le Foll <brendan.le.foll@intel.com>
- * Copyright (c) 2014 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#pragma once
-
-#include <iostream>
-#include <string>
-#include "gas.hpp"
-
-namespace upm {
-  /**
-   * @library gas
-   * @sensor mq9
-   * @comname MQ9 Carbon Monoxide (CO) and Flammable Gas Sensor
-   * @type gaseous
-   * @man seeed
-   * @con analog
-   * @web http://wiki.seeed.cc/Grove-Gas_Sensor-MQ9/
-   *
-   * @brief API for the MQ9 Gas Sensor
-   *
-   * The Grove MQ9 Gas Sensor module is useful for gas leakage detection (in
-   * home and industry). It can detect carbon monoxide, coal gas, and
-   * liquefied gas. Its sensitivity is 10-1,000 ppm CO, and 100-10,000 ppm Gas.
-   *
-   * @image html mq3-9.jpeg
-   * @snippet gas-mq9.cxx Interesting
-   */
-    class MQ9 : public Gas {
-        public:
-            /**
-             * MQ9 constructor
-             *
-             * @param gasPin Analog pin where the sensor is connected
-             */
-            MQ9 (int gasPin);
-
-            /**
-             * MQ9 destructor
-             */
-            ~MQ9 ();
-
-            /**
-             * Returns the name of the sensor
-             */
-            std::string name()
-            {
-                return m_name;
-            }
-        private:
-            std::string m_name;
-    };
-}
diff --git a/src/gas/mqx.c b/src/gas/mqx.c
deleted file mode 100644
index bca09be..0000000
--- a/src/gas/mqx.c
+++ /dev/null
@@ -1,136 +0,0 @@
-/*
- * Author: Noel Eck <noel.eck@intel.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <string.h>
-#include <stdlib.h>
-
-#include "mqx.h"
-
-mqx_context mqx_init(int16_t pin)
-{
-    // make sure MRAA is initialized
-    int mraa_rv;
-    if ((mraa_rv = mraa_init()) != MRAA_SUCCESS)
-    {
-        printf("%s: mraa_init() failed (%d).\n", __FUNCTION__, mraa_rv);
-        return NULL;
-    }
-
-    mqx_context dev = (mqx_context) malloc(sizeof(struct _mqx_context));
-
-    if (dev == NULL)
-      return NULL;
-
-    /* Init aio pin */
-    dev->aio = mraa_aio_init(pin);
-
-    if (dev->aio == NULL) {
-        free(dev);
-        return NULL;
-    }
-
-    /* Set the ADC ref, scale, and offset defaults */
-    dev->m_aRef = 5.0;
-    dev->m_scale = 1.0;
-    dev->m_offset = 0.0;
-
-    return dev;
-}
-
-void mqx_close(mqx_context dev)
-{
-    mraa_aio_close(dev->aio);
-    free(dev);
-}
-
-upm_result_t mqx_set_aref(const mqx_context dev, float aref)
-{
-    dev->m_aRef = aref;
-    return UPM_SUCCESS;
-}
-
-upm_result_t mqx_set_scale(const mqx_context dev, float scale)
-{
-    dev->m_scale = scale;
-    return UPM_SUCCESS;
-}
-
-upm_result_t mqx_set_offset(const mqx_context dev, float offset)
-{
-    dev->m_offset = offset;
-    return UPM_SUCCESS;
-}
-
-float mqx_get_aref(const mqx_context dev)
-{
-    return dev->m_aRef;
-}
-
-float mqx_get_scale(const mqx_context dev)
-{
-    return dev->m_scale;
-}
-
-float mqx_get_offset(const mqx_context dev)
-{
-    return dev->m_offset;
-}
-
-upm_result_t mqx_get_normalized(const mqx_context dev, float *value)
-{
-    *value = mraa_aio_read_float(dev->aio);
-    if (*value < 0)
-        return UPM_ERROR_OPERATION_FAILED;
-    return UPM_SUCCESS;
-}
-
-upm_result_t mqx_get_raw_volts(const mqx_context dev, float *value)
-{
-    *value = mraa_aio_read_float(dev->aio);
-    if (*value < 0)
-        return UPM_ERROR_OPERATION_FAILED;
-
-    /* Scale by the ADC reference voltage */
-    *value *= dev->m_aRef;
-
-    return UPM_SUCCESS;
-}
-
-upm_result_t mqx_get_volts(const mqx_context dev, float *value)
-{
-    *value = mraa_aio_read_float(dev->aio);
-    if (*value < 0)
-        return UPM_ERROR_OPERATION_FAILED;
-
-     /* Apply raw scale */
-    *value *= dev->m_scale;
-
-     /* Scale to aRef */
-    *value *= dev->m_aRef;
-
-    /* Apply the offset in volts */
-    *value += dev->m_offset;
-
-    return UPM_SUCCESS;
-}
diff --git a/src/gas/mqx.h b/src/gas/mqx.h
deleted file mode 100644
index 69462a7..0000000
--- a/src/gas/mqx.h
+++ /dev/null
@@ -1,158 +0,0 @@
-/*
- * Author: Noel Eck <noel.eck@intel.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#pragma once
-
-#include "upm.h"
-#include "mraa/aio.h"
-
-#ifdef __cplusplus
-extern "C" {
-#endif
-
-/**
- * @file mqx.h
- * @library mqx
- * @brief C API for the MQ Gas Sensors
- *
- * The mqx gas sensor driver can be used to read a wide range of sensors.  The
- * list below shows the currently supported sensors:
- *
- *      mq2: H2/LPG/CH4/CO/alcohol/smoke/propane/etc
- *          LPG/propane 200-5000 ppm
- *          butane 300-5000 ppm
- *          CH4 5000-2000 ppm
- *          H2 300-5000 ppm
- *          alcohol 100-2000 ppm
- *      mq3: Alcohol/benzine/CH4/hexane/LPG/CO .05-10 mg/L
- *      mq4: CNG (mostly methane) 200-10000 ppm
- *      mq5: H2/LPG/CH4/CO/alcohol 200-10000 ppm
- *      mq6: LPG (mostly propane/butane) 200-10000 ppm
- *      mq7: CO 20-2000 ppm
- *      mq8: H 100-10000 ppm
- *      mq9: CO/CH4/LPG 200-1000/10000/10000 ppm
- *
- * @include mqx.c
- */
-
-/**
- * driver context
- */
-typedef struct _mqx_context {
-    /* mraa aio pin context */
-    mraa_aio_context aio;
-    /* Analog voltage reference */
-    float m_aRef;
-    /* Scale */
-    float m_scale;
-    /* Offset in sensor units */
-    float m_offset;
-} *mqx_context;
-
-/**
- * Initialize analog sensor
- * @param pin Analog pin
- * @return sensor context
- */
-mqx_context mqx_init(int16_t pin);
-
-/**
- * Analog sensor destructor
- * @param sensor context pointer
- */
-void mqx_close(mqx_context dev);
-
-/**
- * Set ADC reference voltage
- * @param dev sensor context pointer
- * @param aref ADC reference voltage
- * @return Function result code
- */
-upm_result_t mqx_set_aref(const mqx_context dev, float aref);
-
-/**
- * Set sensor scale.  This scale is applied to the return value:
- *     counts = counts * scale
- * @param dev sensor context pointer
- * @param scale count scale value used
- * @return Function result code
- */
-upm_result_t mqx_set_scale(const mqx_context dev, float scale);
-
-/**
- * Set sensor offset.  This offset is applied to the return value:
- *     counts = counts + offset
- * @param dev sensor context pointer
- * @param offset count offset value used
- * @return Function result code
- */
-upm_result_t mqx_set_offset(const mqx_context dev, float offset);
-
-/**
- * Get sensor aref
- * @param dev sensor context pointer
- * @return Sensor ADC reference voltage
- */
-float mqx_get_aref(const mqx_context dev);
-
-/**
- * Get sensor scale
- * @param dev sensor context pointer
- * @return Sensor scale
- */
-float mqx_get_scale(const mqx_context dev);
-
-/**
- * Get sensor offset
- * @param dev sensor context pointer
- * @return Sensor offset
- */
-float mqx_get_offset(const mqx_context dev);
-
-/**
- * Read normalized value for sensor
- * @param dev sensor context pointer
- * @param *value Normalized value (0.0 -> 1.0)
- * @return Function result code
- */
-upm_result_t mqx_get_normalized(const mqx_context dev, float *value);
-
-/**
- * Read raw voltage from the sensor
- * @param dev sensor context pointer
- * @param *value Raw sensor voltage
- * @return Function result code
- */
-upm_result_t mqx_get_raw_volts(const mqx_context dev, float *value);
-
-/**
- * Read scaled/offset voltage from the sensor
- * @param dev sensor context pointer
- * @param *value Adjusted sensor voltage
- * @return Function result code
- */
-upm_result_t mqx_get_volts(const mqx_context dev, float *value);
-#ifdef __cplusplus
-}
-#endif
diff --git a/src/gas/mqx_fti.c b/src/gas/mqx_fti.c
deleted file mode 100644
index 57d0b05..0000000
--- a/src/gas/mqx_fti.c
+++ /dev/null
@@ -1,122 +0,0 @@
-/*
- * Author: Noel Eck <noel.eck@intel.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <string.h>
-#include <stdlib.h>
-
-#include "mqx.h"
-
-#include "upm_fti.h"
-#include "fti/upm_sensor.h"
-#include "fti/upm_raw.h"
-
-/**
- * This file implements the Function Table Interface (FTI) for this sensor
- */
-
-const char upm_mqx_name[] = "MQX";
-const char upm_mqx_description[] = "Analog gas sensor (mqx)";
-const upm_protocol_t upm_mqx_protocol[] = {UPM_ANALOG};
-const upm_sensor_t upm_mqx_category[] = {UPM_RAW};
-
-// forward declarations
-void* upm_mqx_init_str(const char* protocol, const char* params);
-void upm_mqx_close(void* dev);
-const upm_sensor_descriptor_t upm_mqx_get_descriptor();
-upm_result_t upm_mqx_set_offset(const void* dev, float offset);
-upm_result_t upm_mqx_set_scale(const void* dev, float scale);
-upm_result_t upm_mqx_get_value(const void* dev, float *value);
-
-
-/* This sensor implementes 2 function tables */
-/* 1. Generic base function table */
-static const upm_sensor_ft ft_gen =
-{
-    .upm_sensor_init_name = &upm_mqx_init_str,
-    .upm_sensor_close = &upm_mqx_close,
-    .upm_sensor_get_descriptor = &upm_mqx_get_descriptor
-};
-
-/* 2. RAW function table */
-static const upm_raw_ft ft_raw =
-{
-    .upm_raw_set_offset = &upm_mqx_set_offset,
-    .upm_raw_set_scale = &upm_mqx_set_scale,
-    .upm_raw_get_value = &upm_mqx_get_value
-};
-
-const void* upm_mqx_get_ft(upm_sensor_t sensor_type)
-{
-    switch(sensor_type)
-    {
-        case UPM_SENSOR:
-            return &ft_gen;
-        case UPM_RAW:
-            return &ft_raw;
-        default:
-            return NULL;
-    }
-}
-
-const upm_sensor_descriptor_t upm_mqx_get_descriptor()
-{
-    /* Fill in the descriptor */
-    upm_sensor_descriptor_t usd;
-    usd.name = upm_mqx_name;
-    usd.description = upm_mqx_description;
-    usd.protocol_size = 1;
-    usd.protocol = upm_mqx_protocol;
-    usd.category_size = 1;
-    usd.category = upm_mqx_category;
-
-    return usd;
-}
-
-void* upm_mqx_init_str(const char* protocol, const char* params)
-{
-    fprintf(stderr, "String initialization - not implemented, using ain0: %s\n", __FILENAME__);
-
-    return mqx_init(0);
-}
-
-void upm_mqx_close(void* dev)
-{
-    mqx_close((mqx_context)dev);
-}
-
-upm_result_t upm_mqx_get_value(const void* dev, float *value)
-{
-    return mqx_get_volts((mqx_context)dev, value);
-}
-
-upm_result_t upm_mqx_set_offset(const void* dev, float offset)
-{
-    return mqx_set_offset((mqx_context)dev, offset);
-}
-
-upm_result_t upm_mqx_set_scale(const void* dev, float scale)
-{
-    return mqx_set_scale((mqx_context)dev, scale);
-}
-
diff --git a/src/gas/tp401.cxx b/src/gas/tp401.cxx
deleted file mode 100644
index 6df491c..0000000
--- a/src/gas/tp401.cxx
+++ /dev/null
@@ -1,39 +0,0 @@
-/*
- * Author: Mihai Tudor Panu <mihai.tudor.panu@intel.com>
- * Copyright (c) 2014 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include "tp401.hpp"
-
-using namespace upm;
-
-TP401::TP401 (int gasPin) : Gas (gasPin) {
-    m_name = "Grove Air Quality Sensor";
-}
-
-TP401::~TP401 () {
-}
-
-float
-TP401::getPPM() {
-    return 25.0 * (float)TP401::getSample() / 1023.0;
-}
diff --git a/src/gas/tp401.hpp b/src/gas/tp401.hpp
deleted file mode 100644
index 2d557fc..0000000
--- a/src/gas/tp401.hpp
+++ /dev/null
@@ -1,90 +0,0 @@
-/*
- * Author: Mihai Tudor Panu <mihai.tudor.panu@intel.com>
- * Copyright (c) 2014 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#pragma once
-
-#include <iostream>
-#include <string>
-#include "gas.hpp"
-
-namespace upm {
-  /**
-   * @library gas
-   * @sensor tp401
-   * @comname TP401 Gas Sensor
-   * @altname Grove Air Quality Sensor
-   * @type gaseous
-   * @man seeed
-   * @con analog
-   * @web https://www.seeedstudio.com/Grove-Air-quality-sensor-p-1065.html
-   * @kit hak
-   *
-   * @brief API for the TP401 Gas Sensor
-   *
-   * The TP401 Gas Sensor module is useful for monitoring air purity indoors.
-   * It can detect CO and a wide range of other harmful gases, but, due to a limited detection
-   * range, it should be used only when qualitative results are needed. Example applications
-   * are air recirculation, ventilation systems, and refreshing sprayers.
-   * The sensor is linear and should be roughly sensitive to 0-20 ppm CO from 0-4 V.
-   * Note: the sensor requires 2-3 minutes to warm up initially and 48 hours of
-   * operation to stabilize completely.
-   *
-   * @image html tp401.jpeg
-   * @snippet gas-tp401.cxx Interesting
-   */
-    class TP401 : public Gas {
-        public:
-            /**
-             * TP401 constructor
-             *
-             * @param gasPin Analog pin where the sensor is connected
-             */
-            TP401 (int gasPin);
-
-            /**
-             * TP401 destructor
-             */
-            ~TP401 ();
-
-            /**
-             * Returns the name of the sensor
-             *
-             * @return Name of the sensor
-             */
-            std::string name()
-            {
-                return m_name;
-            }
-
-            /**
-             * Returns one sample in parts per million (ppm) of CO in the air based on
-             * the following sensor calibration: 0-4 V is roughly 0-20 ppm CO
-             *
-             * @return  New sample converted to ppm CO
-             */
-            float getPPM();
-
-        private:
-            std::string m_name;
-    };
-}
diff --git a/src/gp2y0a/CMakeLists.txt b/src/gp2y0a/CMakeLists.txt
deleted file mode 100644
index 80cc456..0000000
--- a/src/gp2y0a/CMakeLists.txt
+++ /dev/null
@@ -1,9 +0,0 @@
-upm_mixed_module_init (NAME gp2y0a
-    DESCRIPTION "Analog Infrared (IR) Based Distance Sensor"
-    C_HDR gp2y0a.h
-    C_SRC gp2y0a.c
-    CPP_HDR gp2y0a.hpp
-    CPP_SRC gp2y0a.cxx
-    FTI_SRC gp2y0a_fti.c
-    CPP_WRAPS_C
-    REQUIRES mraa)
diff --git a/src/gp2y0a/gp2y0a.c b/src/gp2y0a/gp2y0a.c
deleted file mode 100644
index b1b3fcc..0000000
--- a/src/gp2y0a/gp2y0a.c
+++ /dev/null
@@ -1,80 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- *         Abhishek Malik <abhishek.malik@intel.com>
- * Copyright (c) 2016 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#include "gp2y0a.h"
-
-gp2y0a_context gp2y0a_init(int pin, float a_ref){
-    // make sure MRAA is initialized
-    int mraa_rv;
-    if ((mraa_rv = mraa_init()) != MRAA_SUCCESS)
-    {
-        printf("%s: mraa_init() failed (%d).\n", __FUNCTION__, mraa_rv);
-        return NULL;
-    }
-
-    gp2y0a_context dev =
-        (gp2y0a_context) malloc(sizeof(struct _gp2y0a_context));
-
-    if (!dev)
-    {
-        printf("%s: device context allocation failed.\n",
-               __FUNCTION__);
-        return NULL;
-    }
-
-    memset((void *)dev, 0, sizeof(struct _gp2y0a_context));
-    dev->pin = pin;
-    dev->aio = mraa_aio_init(dev->pin);
-    if(dev->aio == NULL){
-        free(dev);
-        return NULL;
-    }
-    dev->a_res = (1 << mraa_aio_get_bit(dev->aio));
-
-    return dev;
-}
-
-void gp2y0a_close(gp2y0a_context dev){
-    free(dev);
-}
-
-upm_result_t gp2y0a_get_value(gp2y0a_context dev, float a_ref,
-                              uint8_t samples, float* value){
-    int val;
-    int sum = 0;
-    int i = 0;
-
-    if (samples <= 0)
-      samples = 1;
-
-    for(i=0; i<samples; i++) {
-        val = mraa_aio_read(dev->aio);
-        sum += val;
-    }
-    val = sum/samples;
-    float volts = (float)(val * a_ref) / (float)dev->a_res;
-    *value = volts;
-
-    return UPM_SUCCESS;
-}
diff --git a/src/gp2y0a/gp2y0a.cxx b/src/gp2y0a/gp2y0a.cxx
deleted file mode 100644
index 0b375a9..0000000
--- a/src/gp2y0a/gp2y0a.cxx
+++ /dev/null
@@ -1,69 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <iostream>
-#include <string>
-#include <stdexcept>
-
-#include "gp2y0a.hpp"
-
-using namespace std;
-using namespace upm;
-
-GP2Y0A::GP2Y0A(int pin)
-{
-  if (!(m_aio = mraa_aio_init(pin)))
-    {
-      throw std::invalid_argument(std::string(__FUNCTION__) +
-                                  ": mraa_aio_init() failed, invalid pin?");
-      return;
-    }
-
-  // get the ADC resolution
-  m_aRes = (1 << mraa_aio_get_bit(m_aio));
-}
-
-GP2Y0A::~GP2Y0A()
-{
-  mraa_aio_close(m_aio);
-}
-
-float GP2Y0A::value(float aref, uint8_t samples)
-{
-  int val;
-  int sum = 0;
-
-  for (int i=0; i<samples; i++)
-    {
-      val = mraa_aio_read(m_aio);
-      if (val != -1) throw std::runtime_error(std::string(__FUNCTION__) +
-                                              ": Failed to do an aio read.");
-      sum += val;
-    }
-
-  val = sum / samples;
-  float volts = float(val) * aref / float(m_aRes);
-
-  return volts;
-}
diff --git a/src/gp2y0a/gp2y0a.h b/src/gp2y0a/gp2y0a.h
deleted file mode 100644
index e11bdaf..0000000
--- a/src/gp2y0a/gp2y0a.h
+++ /dev/null
@@ -1,80 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- *         Abhishek Malik <abhishek.malik@intel.com>
- * Copyright (c) 2016 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#ifndef GP2Y0A_GP2Y0A_H_
-#define GP2Y0A_GP2Y0A_H_
-
-#include <stdlib.h>
-#include <unistd.h>
-#include <string.h>
-#include <malloc.h>
-
-#include "upm.h"
-#include "mraa/aio.h"
-
-/**
- * @file gp2y0a.h
- * @library gp2y0a
- * @brief C API for GP2Y0A IR Proximity Sensors
- *
- * @include gp2y0a.c
- */
-
-/**
- * device context
- */
-typedef struct _gp2y0a_context {
-    mraa_aio_context            aio;
-    int                         pin;
-    int                         a_res;
-} *gp2y0a_context;
-
-/**
- * GP2Y0A sensor init function
- *
- * @param pin Analog pin to use
- * @param a_ref reference voltage
- */
-gp2y0a_context gp2y0a_init(int pin, float a_ref);
-
-/**
- * GP2Y0A close function
- *
- * @param dev sensor struct
- */
-void gp2y0a_close(gp2y0a_context dev);
-
-/**
- * Gets an average voltage value from the sensor
- *
- * @param dev sensor struct
- * @param aref Reference voltage in use (usually 5.0V or 3.3V)
- * @param samples Number of samples to average over
- * @return Average voltage reading
- */
-upm_result_t gp2y0a_get_value(gp2y0a_context dev, float a_ref, uint8_t samples,
-                              float* val);
-
-#endif /* GP2Y0A_GP2Y0A_H_ */
diff --git a/src/gp2y0a/gp2y0a.hpp b/src/gp2y0a/gp2y0a.hpp
deleted file mode 100644
index fdfd5c8..0000000
--- a/src/gp2y0a/gp2y0a.hpp
+++ /dev/null
@@ -1,88 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#pragma once
-
-#include <iostream>
-#include <string>
-#include <mraa/aio.h>
-
-namespace upm {
-  /**
-   * @brief GP2Y0A-based IR Proximity Sensors
-   * @defgroup gp2y0a libupm-gp2y0a
-   * @ingroup seeed analog light
-   */
-
-  /**
-   * @library gp2y0a
-   * @sensor gp2y0a
-   * @comname Analog Infrared (IR) Based Distance Sensor
-   * @altname Grove 80cm IR Proximity Sensor
-   * @type light
-   * @man seeed
-   * @con analog
-   * @web http://wiki.seeed.cc/Grove-80cm_Infrared_Proximity_Sensor/
-   *
-   * @brief API for the GP2Y0A family of IR Proximity Sensors
-   *
-   * Sensors of this family return an analog voltage corresponding to the distance 
-   * of an object from the sensor. The voltage is lower when objects
-   * are far away; the voltage increases as objects get closer
-   * to the sensor.  
-   *
-   * @image html gp2y0a.jpg
-   * @snippet gp2y0a.cxx Interesting
-   */
-  class GP2Y0A {
-  public:
-
-    /**
-     * GP2Y0A sensor constructor
-     *
-     * @param pin Analog pin to use
-     */
-    GP2Y0A(int pin);
-
-    /**
-     * GP2Y0A destructor
-     */
-    ~GP2Y0A();
-
-    /**
-     * Gets an average voltage value from the sensor
-     *
-     * @param aref Reference voltage in use (usually 5.0V or 3.3V)
-     * @param samples Number of samples to average over
-     * @return Average voltage reading
-     */
-    float value(float aref, uint8_t samples);
-
-  private:
-    mraa_aio_context m_aio;
-    // ADC resolution
-    int m_aRes;
-  };
-}
-
-
diff --git a/src/gp2y0a/gp2y0a.json b/src/gp2y0a/gp2y0a.json
deleted file mode 100644
index 7a35a95..0000000
--- a/src/gp2y0a/gp2y0a.json
+++ /dev/null
@@ -1,39 +0,0 @@
-{
-    "Library": "gp2y0a",
-    "Description": "API for the GP2Y0A family of IR Proximity Sensors",
-    "Sensor Class":
-    {
-        "GP2Y0A":
-        {
-            "Name": "Analog Infrared (IR) Based Distance Sensor",
-            "Description": "Sensors of this family return an analog voltage corresponding to the distance of an object from the sensor. The voltage is lower when objects are far away; the voltage increases as objects get closer to the sensor.",
-            "Aliases": ["gp2y0a"],
-            "Categories": ["proximity", "light"],
-            "Connections": ["analog"],
-            "Project Type": ["prototyping", "robotics"],
-            "Manufacturers": ["seeed"],
-            "Kits": [],
-            "Image": "gp2y0a.jpg",
-            "Examples":
-            {
-                "Java": ["Gp2y0a_Example.java"],
-                "Python": ["gp2y0a.py"],
-                "Node.js": ["gp2y0a.js"],
-                "C++": ["gp2y0a.cxx"],
-                "C": ["gp2y0a.c"]
-            },
-            "Specifications":
-            {
-                "Operating Voltage": {"unit": "V", "low": 2.5, "typ": 5, "high": 7},
-                "Operating Current": {"unit": "mA", "typ": 33, "max": 50},
-                "Measurement Range": {"unit": "cm", "low": 10, "high": 80}
-            },
-            "Urls" :
-            {
-                "Product Pages": ["https://www.seeedstudio.com/Grove-80cm-Infrared-Proximity-Sensor-p-788.html"],
-                "Datasheets": ["http://wiki.seeed.cc/Grove-80cm_Infrared_Proximity_Sensor/"],
-                "Schematics": []
-            }
-        }
-    }
-}
diff --git a/src/gp2y0a/gp2y0a_fti.c b/src/gp2y0a/gp2y0a_fti.c
deleted file mode 100644
index 002f9eb..0000000
--- a/src/gp2y0a/gp2y0a_fti.c
+++ /dev/null
@@ -1,80 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- *         Abhishek Malik <abhishek.malik@intel.com>
- * Copyright (c) 2016 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#include "gp2y0a.h"
-
-#include "upm_fti.h"
-#include "fti/upm_sensor.h"
-
-/**
- * This file implements the Function Table Interface (FTI) for this sensor
- */
-
-const char upm_gp2y0a_name[] = "GP2Y0A";
-const char upm_gp2y0a_description[] = "Grove 80cm IR Proximity Sensor";
-const upm_protocol_t upm_gp2y0a_protocol[] = {UPM_ANALOG};
-const upm_sensor_t upm_gp2y0a_category[] = {UPM_DISTANCE};
-
-// forward declarations
-const void* upm_gp2y0a_get_ft(upm_sensor_t sensor_type);
-const upm_sensor_descriptor_t upm_gp2y0a_get_descriptor();
-void* upm_gp2y0a_init_name();
-void upm_gp2y0a_close(void* dev);
-
-const upm_sensor_descriptor_t upm_gp2y0a_get_descriptor(){
-    upm_sensor_descriptor_t usd;
-    usd.name = upm_gp2y0a_name;
-    usd.description = upm_gp2y0a_description;
-    usd.protocol_size = 1;
-    usd.protocol = upm_gp2y0a_protocol;
-    usd.category_size = 1;
-    usd.category = upm_gp2y0a_category;
-    return usd;
-}
-
-static const upm_sensor_ft ft =
-{
-    .upm_sensor_init_name = &upm_gp2y0a_init_name,
-    .upm_sensor_close = &upm_gp2y0a_close,
-    .upm_sensor_get_descriptor = &upm_gp2y0a_get_descriptor
-};
-
-const void* upm_gp2y0a_get_ft(upm_sensor_t sensor_type)
-{
-    switch(sensor_type)
-    {
-        case UPM_SENSOR:
-            return &ft;
-        default:
-            return NULL;
-    }
-}
-
-void* upm_gp2y0a_init_name(){
-    return NULL;
-}
-
-void upm_gp2y0a_close(void* dev){
-    gp2y0a_close((gp2y0a_context)dev);
-}
diff --git a/src/gprs/CMakeLists.txt b/src/gprs/CMakeLists.txt
deleted file mode 100644
index 22b75c9..0000000
--- a/src/gprs/CMakeLists.txt
+++ /dev/null
@@ -1,5 +0,0 @@
-upm_mixed_module_init (NAME gprs
-    DESCRIPTION "General Packet Radio Service (GPRS) Module"
-    CPP_HDR gprs.hpp
-    CPP_SRC gprs.cxx
-    REQUIRES mraa)
diff --git a/src/gprs/gprs.cxx b/src/gprs/gprs.cxx
deleted file mode 100644
index 23c1240..0000000
--- a/src/gprs/gprs.cxx
+++ /dev/null
@@ -1,78 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <iostream>
-
-#include "gprs.hpp"
-
-using namespace upm;
-using namespace std;
-
-GPRS::GPRS(int uart) :
-  m_uart(uart)
-{
-}
-
-GPRS::~GPRS()
-{
-}
-
-bool GPRS::dataAvailable(unsigned int millis)
-{
-  return m_uart.dataAvailable(millis);
-}
-
-int GPRS::readData(char *buffer, unsigned int len)
-{
-  return m_uart.read(buffer, len);
-}
-
-std::string GPRS::readDataStr(int len)
-{
-  return m_uart.readStr(len);
-}
-
-int GPRS::writeData(char *buffer, unsigned int len)
-{
-  m_uart.flush();
-  return m_uart.write(buffer, len);
-}
-
-int GPRS::writeDataStr(std::string data)
-{
-  m_uart.flush();
-  return m_uart.writeStr(data);
-}
-
-int GPRS::setBaudRate(int baud)
-{
-  int ret_code = m_uart.setBaudRate(baud);
-  if (ret_code != MRAA_SUCCESS) {
-    return ret_code;
-  } else {
-    return 0;
-  }
-  //return m_uart.setBaudRate(baud);
-}
-
diff --git a/src/gprs/gprs.hpp b/src/gprs/gprs.hpp
deleted file mode 100644
index 3bf704a..0000000
--- a/src/gprs/gprs.hpp
+++ /dev/null
@@ -1,155 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Thanks to Adafruit for supplying a google translated version of the
- * Chinese datasheet and some clues in their code.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#pragma once
-
-#include <string>
-#include <iostream>
-
-#include <stdlib.h>
-#include <unistd.h>
-#include <string.h>
-
-#include <mraa/common.hpp>
-#include <mraa/uart.hpp>
-
-#define GPRS_DEFAULT_UART 0
-
-namespace upm {
-    /**
-     * @brief GPRS Modules Library
-     * @defgroup gprs libupm-gprs
-     * @ingroup seeed uart wifi
-     */
-
-    /**
-     * @library gprs
-     * @sensor gprs
-     * @comname General Packet Radio Service (GPRS) Module
-     * @altname Grove GPRS Module
-     * @type wifi
-     * @man seeed
-     * @con uart
-     * @web http://www.seeedstudio.com/wiki/GPRS_Shield_V2.0
-     *
-     * @brief API for the GPRS Module
-     *
-     * The driver was tested with the  GPRS Module, V2.  It's a
-     * GSM GPRS module based on the SIM900.  This module uses a
-     * standard 'AT' command set.  See the datasheet for a full list
-     * of available commands and their possible responses:
-     *
-     * http://www.seeedstudio.com/wiki/images/7/72/AT_Commands_v1.11.pdf
-     *
-     * It is connected via a UART at 19200 baud.
-     *
-     * @image html gprs.jpg
-     * @snippet gprs.cxx Interesting
-     */
-
-  class GPRS {
-  public:
-
-    /**
-     * GPRS object constructor
-     *
-     * @param uart Default UART to use (0 or 1). Default is 0.
-     */
-    GPRS(int uart=GPRS_DEFAULT_UART);
-
-    /**
-     * GPRS object destructor
-     */
-    ~GPRS();
-
-    /**
-     * Checks to see if there is data available for reading
-     *
-     * @param millis Number of milliseconds to wait; 0 means no waiting
-     * @return true if there is data available for reading
-     */
-    bool dataAvailable(unsigned int millis);
-
-    /**
-     * Reads any available data into a user-supplied buffer. Note: the
-     * call blocks until data is available for reading. Use
-     * dataAvailable() to determine whether there is data available
-     * beforehand, to avoid blocking.
-     *
-     * @param buffer Buffer to hold the data read
-     * @param len Length of the buffer
-     * @return Number of bytes read
-     */
-    int readData(char *buffer, unsigned int len);
-
-    /**
-     * Reads any available data and returns it in a std::string. Note:
-     * the call blocks until data is available for reading. Use
-     * dataAvailable() to determine whether there is data available
-     * beforehand, to avoid blocking.
-     *
-     * @param len Maximum length of the data to be returned
-     * @return Number of bytes read
-     */
-    std::string readDataStr(int len);
-
-    /**
-     * Writes the data in the buffer to the device.  If you are
-     * writing a command, be sure to terminate it with a carriage
-     * return (\r)
-     *
-     * @param buffer Buffer to hold the data to write
-     * @param len Length of the buffer
-     * @return Number of bytes written
-     */
-    int writeData(char *buffer, unsigned len);
-
-    /**
-     * Writes the std:string data to the device.  If you are writing a
-     * command, be sure to terminate it with a carriage return (\r)
-     *
-     * @param data Buffer to write to the device
-     * @return Number of bytes written
-     */
-    int writeDataStr(std::string data);
-
-    /**
-     * Sets the baud rate for the device.  The default is 19200.
-     *
-     * @param baud Desired baud rate.
-     * @return true if successful
-     */
-    int setBaudRate(int baud=19200);
-
-
-  protected:
-    mraa::Uart m_uart;
-
-  private:
-  };
-}
-
-
diff --git a/src/gprs/gprs.i b/src/gprs/gprs.i
deleted file mode 100644
index c9ac958..0000000
--- a/src/gprs/gprs.i
+++ /dev/null
@@ -1,16 +0,0 @@
-%include "../common_top.i"
-
-/* BEGIN Java syntax  ------------------------------------------------------- */
-#ifdef SWIGJAVA
-JAVA_JNI_LOADLIBRARY(javaupm_gprs)
-#endif
-/* END Java syntax */
-
-/* BEGIN Common SWIG syntax ------------------------------------------------- */
-%include "carrays.i"
-%{
-#include "gprs.hpp"
-%}
-%include "gprs.hpp"
-%array_class(char, charArray);
-/* END Common SWIG syntax */
diff --git a/src/gprs/gprs.json b/src/gprs/gprs.json
deleted file mode 100644
index 5b60340..0000000
--- a/src/gprs/gprs.json
+++ /dev/null
@@ -1,40 +0,0 @@
-{
-    "Library": "gprs",
-    "Description": "API for the GPRS Module",
-    "Sensor Class":
-    {
-        "GPRS":
-        {
-            "Name": "General Packet Radio Service (GPRS) Module",
-            "Description": "The driver was tested with the  GPRS Module, V2.  It's a GSM GPRS module based on the SIM900.  This module uses a standard 'AT' command set.  See the datasheet for a full list of available commands and their possible responses.",
-            "Aliases": ["gprs"],
-            "Categories": ["wireless"],
-            "Connections": ["uart"],
-            "Project Type": ["prototyping", "wireless"],
-            "Manufacturers": ["seeed"],
-            "Kits": [],
-            "Image": "gprs.jpg",
-            "Examples":
-            {
-                "Java": [],
-                "Python": ["gprs.py"],
-                "Node.js": ["gprs.js"],
-                "C++": ["gprs.cxx"],
-                "C": []
-            },
-            "Specifications":
-            {
-                "Input Voltage (5v Pin)": {"unit": "V", "Typ": 5},
-                "Input Voltage (Vin Pin)": {"unit": "V", "low": 6.5, "high": 12},
-                "Power Consumption": {"unit": "mA", "low": 1.5},
-                "Operating Temperature": {"unit": "degC", "low": -40, "high": 85}
-            },
-            "Urls" :
-            {
-                "Product Pages": ["https://www.seeedstudio.com/GPRS-Shield-V3.0-p-2333.html"],
-                "Datasheets": ["http://www.seeedstudio.com/document/SIM900datasheeet.zip", "http://wiki.seeedstudio.com/wiki/GPRS_Shield_V3.0", "http://www.seeedstudio.com/wiki/images/7/72/AT_Commands_v1.11.pdf", "http://garden.seeedstudio.com/images/a/a8/SIM900_AT_Command_Manual_V1.03.pdf", "http://garden.seeedstudio.com/images/a/a0/SIM900_ATC_V1_00.pdf"],
-                "Schematics": ["http://www.seeedstudio.com/wiki/File:GPRS_Shield_v3.0.pdf"]
-            }
-        }
-    }
-}
diff --git a/src/grove/CMakeLists.txt b/src/grove/CMakeLists.txt
deleted file mode 100644
index 9fb6b1c..0000000
--- a/src/grove/CMakeLists.txt
+++ /dev/null
@@ -1,5 +0,0 @@
-set (libname "grove")
-set (libdescription "Grove Starter Kit Sensor Library")
-set (module_src grovebutton.cxx groveled.cxx grovelight.cxx groverelay.cxx groverotary.cxx groveslide.cxx grovetemp.cxx)
-set (module_hpp grovebutton.hpp groveled.hpp grovelight.hpp groverelay.hpp groverotary.hpp groveslide.hpp grovetemp.hpp grovebase.hpp grove.hpp)
-upm_module_init(mraa)
diff --git a/src/grove/grove.cxx b/src/grove/grove.cxx
deleted file mode 100644
index 8b13789..0000000
--- a/src/grove/grove.cxx
+++ /dev/null
@@ -1 +0,0 @@
-
diff --git a/src/grove/grove.hpp b/src/grove/grove.hpp
deleted file mode 100644
index a7da875..0000000
--- a/src/grove/grove.hpp
+++ /dev/null
@@ -1,34 +0,0 @@
-/*
- * Authors: Brendan Le Foll <brendan.le.foll@intel.com>
- *          Mihai Tudor Panu <mihai.tudor.panu@intel.com>
- *          Sarah Knepper <sarah.knepper@intel.com>
- * Copyright (c) 2014 - 2016 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#pragma once
-
-#include <grovebutton.hpp>
-#include <groveled.hpp>
-#include <grovelight.hpp>
-#include <groverelay.hpp>
-#include <groverotary.hpp>
-#include <groveslide.hpp>
-#include <grovetemp.hpp>
diff --git a/src/grove/grove.i b/src/grove/grove.i
deleted file mode 100644
index cb9cc59..0000000
--- a/src/grove/grove.i
+++ /dev/null
@@ -1,33 +0,0 @@
-%include "../common_top.i"
-
-/* BEGIN Java syntax  ------------------------------------------------------- */
-#ifdef SWIGJAVA
-%apply int {mraa::Edge}
-
-JAVA_ADD_INSTALLISR_EDGE(upm::GroveButton)
-JAVA_JNI_LOADLIBRARY(javaupm_grove)
-#endif
-/* END Java syntax */
-
-/* BEGIN Common SWIG syntax ------------------------------------------------- */
-%{
-#include "grovebase.hpp"
-#include "grove.hpp"
-#include "grovebutton.hpp"
-#include "groveled.hpp"
-#include "grovelight.hpp"
-#include "groverelay.hpp"
-#include "groverotary.hpp"
-#include "groveslide.hpp"
-#include "grovetemp.hpp"
-%}
-%include "grovebase.hpp"
-%include "grove.hpp"
-%include "grovebutton.hpp"
-%include "groveled.hpp"
-%include "grovelight.hpp"
-%include "groverelay.hpp"
-%include "groverotary.hpp"
-%include "groveslide.hpp"
-%include "grovetemp.hpp"
-/* END Common SWIG syntax */
diff --git a/src/grove/grove.json b/src/grove/grove.json
deleted file mode 100644
index cd5f68e..0000000
--- a/src/grove/grove.json
+++ /dev/null
@@ -1,381 +0,0 @@
-{
-    "Library": "grove",
-    "Description": "Generic library for basic Grove sensors",
-    "Sensor Class": {
-        "Grove": {
-            "Name": "Generic library for basic Grove sensors",
-            "Description": "This is the Generic UPM Module for basic Grove sensors. This library is now deprecated and replaced by individual libraries for every sensor.",
-            "Aliases": ["grove", "libupm-grove"],
-            "Categories": ["LED", "light", "relay", "temperature", "touch"],
-            "Connections": ["i2c", "gpio", "pwm", "ainput"],
-            "Project Type": ["prototyping", "commercial"],
-            "Manufacturers": ["Seeed"],
-            "Kits": ["gsk", "eak", "hak"],
-            "Examples": {
-                "C++": ["grove-grovebutton.cxx"]
-            },
-            "Urls": {
-                "Product Pages": ["https://github.com/intel-iot-devkit/upm/tree/master/src/grove"]
-            }
-        },
-        "GroveButton": {
-            "Name": "API for the Grove Button",
-            "Description": "This is the UPM Module for the Grove button. This class is being replaced by the upm-button library and the Button class.",
-            "Aliases": ["Grove Touch Sensor", "Grove button"],
-            "Categories": ["touch"],
-            "Connections": ["gpio"],
-            "Project Type": ["prototyping"],
-            "Manufacturers": ["Seeed"],
-            "Kits": ["gsk"],
-            "Image": "grovebutton.jpg",
-            "Examples": {
-                "Java": ["GroveButton_Example.java", "GroveButton_intr_Example.java"],
-                "Python": ["grovebutton.py"],
-                "Node.js": ["grovebutton.js"],
-                "C++": ["grove-grovebutton.cxx"]
-            },
-            "Specifications": {
-                "Vsource": {
-                    "unit": "V",
-                    "min": 3.3,
-                    "max": 12.0
-                },
-                "Supply Current Digital": {
-                    "unit": "mA",
-                    "min" : 5,
-                    "max" : 25
-                },
-                "Operating Temperature": {
-                    "unit": "°C",
-                    "min": -40,
-                    "max": 85
-                }
-            },
-            "Platforms": {
-                "Intel Edison": {
-                    "Notes": ["Might need Grove base shield"]
-                },
-                "Arduino 101": {
-                    "Notes": ["Might need Grove base shield"]
-                }
-            },
-            "Urls": {
-                "Product Pages": ["https://www.seeedstudio.com/Grove-Button-p-766.html", "http://wiki.seeed.cc/Grove-Button/"],
-                "Schematics": ["https://github.com/SeeedDocument/Grove_Button/raw/master/resources/Grove_-_Button_v1.0_Source_File.zip"]
-            }
-        },
-        "GroveLed": {
-            "Name": "API for the Grove LED",
-            "Description": "This is the UPM Module for the Grove LED. This class is being replaced by the upm-led library and the Led class.",
-            "Aliases": ["Grove LED", "Grove – Chainable RGB Led V2.0"],
-            "Categories": ["LED"],
-            "Connections": ["gpio"],
-            "Project Type": ["prototyping"],
-            "Manufacturers": ["Seeed"],
-            "Kits": ["gsk"],
-            "Image": "groveled.jpg",
-            "Examples": {
-                "Java": ["GroveLED_Example.java", "GroveLed_multi_Example.java"],
-                "Python": ["groveled.py"],
-                "Node.js": ["groveled.js"],
-                "C++": ["grove-groveled.cxx", "grove-groveled-multi.cxx"]
-            },
-            "Specifications": {
-                "Vsource": {
-                    "unit": "V",
-                    "min": 4.5,
-                    "max": 7.5
-                },
-                "Supply Current": {
-                    "unit": "mA",
-                    "min" : 20,
-                    "max" : 60
-                },
-                "Operating Temperature": {
-                    "unit": "°C",
-                    "min": -40,
-                    "max": 85
-                }
-            },
-            "Platforms": {
-                "Intel Edison": {
-                    "Notes": ["Might need Grove base shield"]
-                },
-                "Arduino 101": {
-                    "Notes": ["Might need Grove base shield"]
-                }
-            },
-            "Urls": {
-                "Product Pages": ["https://www.seeedstudio.com/Grove-%E2%80%93-Chainable-RGB-Led-V2.0-p-2903.html", "http://wiki.seeed.cc/Grove-Chainable_RGB_LED/"],
-                "Datasheets": ["https://raw.githubusercontent.com/SeeedDocument/Grove-Chainable_RGB_LED/master/res/P9813_datasheet.pdf"],
-                "Schematics": ["https://github.com/SeeedDocument/Grove-Chainable_RGB_LED/raw/master/res/Grove%20-%20Chainable%20RGB%20LED%20v2.0.zip"]
-            }
-        },
-        "GroveLight": {
-            "Name": "API for the Grove Light Sensor",
-            "Description": "This is the UPM Module for the Grove Light Sensor. This class is being replaced by the upm-light library and the Light class.",
-            "Aliases": ["grovelight", "Grove - Light Sensor(P)"],
-            "Categories": ["light"],
-            "Connections": ["analog"],
-            "Project Type": ["prototyping"],
-            "Manufacturers": ["Seeed"],
-            "Kits": ["gsk"],
-            "Image": "grovelight.jpg",
-            "Examples": {
-                "Java": ["GroveLight_Example.java"],
-                "Python": ["grovelight.py"],
-                "Node.js": ["grovelight.js"],
-                "C++": ["grove-grovelight.cxx"]
-            },
-            "Specifications": {
-                "Vsource": {
-                    "unit": "V",
-                    "min": 3,
-                    "max": 5
-                },
-                "Supply Current": {
-                    "unit": "mA",
-                    "min" : 0.5,
-                    "max" : 3.0
-                },
-                "Operating Temperature": {
-                    "unit": "°C",
-                    "min": -40,
-                    "max": 85
-                },
-                "Response Time": {
-                    "unit": "ms",
-                    "min" : 20,
-                    "max" : 30
-                }
-            },
-            "Platforms": {
-                "Intel Edison": {
-                    "Notes": ["Might need Grove base shield"]
-                },
-                "Arduino 101": {
-                    "Notes": ["Might need Grove base shield"]
-                }
-            },
-            "Urls": {
-                "Product Pages": ["https://www.seeedstudio.com/Grove-Light-Sensor(P)-p-1253.html", "http://wiki.seeed.cc/Grove-Light_Sensor/"],
-                "Datasheets": ["https://github.com/SeeedDocument/Grove_Light_Sensor/raw/master/res/LM358.pdf"],
-                "Schematics": ["https://github.com/SeeedDocument/Grove_Light_Sensor/raw/master/resources/Grove%20-%20Light%20Sensor%28P%29%20v1.1.zip"]
-            }
-        },
-        "GroveRelay": {
-            "Name": "API for the Grove Relay",
-            "Description": "This is the UPM Module for the Grove relay switch. This class is being replaced by the upm-relay library and the Relay class.",
-            "Aliases": ["groverelay", "Grove - Relay"],
-            "Categories": ["relay"],
-            "Connections": ["gpio"],
-            "Project Type": ["prototyping"],
-            "Manufacturers": ["Seeed"],
-            "Kits": ["gsk", "eak", "hak"],
-            "Image": "groverelay.jpg",
-            "Examples": {
-                "Java": ["GroveRelay_Example.java"],
-                "Python": ["groverelay.py"],
-                "Node.js": ["groverelay.js"],
-                "C++": ["grove-groverelay.cxx"]
-            },
-            "Specifications": {
-                "Vsource": {
-                    "unit": "V",
-                    "min": 3.3,
-                    "max": 5.0
-                },
-                "Supply Current": {
-                    "unit": "mA",
-                    "typ" : 100
-                },
-                "Operating Temperature": {
-                    "unit": "°C",
-                    "min": -40,
-                    "max": 85
-                },
-                "Relay Life": {
-                    "unit": "Cycle",
-                    "cycles": 100000
-                },
-                "Max Switching Voltage":{
-                    "AC": {
-                        "unit" : "V",
-                        "max" : 250
-                    },
-                    "DC": {
-                        "unit": "V",
-                        "max" : 30
-                    }
-                },
-                "Max Switching Current": {
-                    "unit": "A",
-                    "max" : 5
-                }
-            },
-            "Platforms": {
-                "Intel Edison": {
-                    "Notes": ["Might need Grove base shield"]
-                },
-                "Arduino 101": {
-                    "Notes": ["Might need Grove base shield"]
-                }
-            },
-            "Urls": {
-                "Product Pages": ["https://www.seeedstudio.com/Grove-Relay-p-769.html", "http://wiki.seeed.cc/Grove-Relay/"],
-                "Datasheets": ["https://raw.githubusercontent.com/SeeedDocument/Grove-Relay/master/res/Relay_Datasheet.pdf"],
-                "Schematics": ["https://github.com/SeeedDocument/Grove-Relay/raw/master/res/Grove%20-%20Relay%20Schematic.pdf", "https://github.com/SeeedDocument/Grove-Relay/raw/master/res/Grove%20-%20Relay%20PCB.pdf", "https://raw.githubusercontent.com/SeeedDocument/Grove-Relay/master/res/Grove-Relay_Eagle_Files.zip"]
-            }
-        },
-        "GroveRotary": {
-            "Name": "API for the Grove Rotary Angle Sensor (Knob)",
-            "Description": "This is the UPM Module for the Grove Rotary Angle Sensor (Knob). This class is being replaced by the upm-rotary library and the Rotary class.",
-            "Aliases": ["groverotary", "Grove - Rotary Angle Sensor"],
-            "Categories": ["ainput"],
-            "Connections": ["analog"],
-            "Project Type": ["prototyping"],
-            "Manufacturers": ["Seeed"],
-            "Kits": ["gsk"],
-            "Image": "groverotary.jpg",
-            "Examples": {
-                "Java": ["GroveRotary_Example.java"],
-                "Python": ["groverotary.py"],
-                "Node.js": ["groverotary.js"],
-                "C++": ["grove-groverotary.cxx"]
-            },
-            "Specifications": {
-                "Vsource": {
-                    "unit": "V",
-                    "min": 4.75,
-                    "max": 5.25
-                },
-                "Supply Current": {
-                    "unit": "mA",
-                    "typ" : 20
-                },
-                "Operating Temperature": {
-                    "unit": "°C",
-                    "min": -40,
-                    "max": 85
-                },
-                "Rotary Angle":{
-                    "unit": "°",
-                    "min" : 0,
-                    "max" : 300
-                }
-            },
-            "Platforms": {
-                "Intel Edison": {
-                    "Notes": ["Might need Grove base shield"]
-                },
-                "Arduino 101": {
-                    "Notes": ["Might need Grove base shield"]
-                }
-            },
-            "Urls": {
-                "Product Pages": ["https://www.seeedstudio.com/Grove-Rotary-Angle-Sensor-p-770.html", "http://wiki.seeed.cc/Grove-Rotary_Angle_Sensor/"],
-                "Schematics": ["https://raw.githubusercontent.com/SeeedDocument/Grove-Rotary_Angle_Sensor/master/res/Grove-Rotary_Angle_Sensor_Eagle_File.zip", "https://raw.githubusercontent.com/SeeedDocument/Grove-Rotary_Angle_Sensor/master/res/Grove-Rotary_Angle_Sensor_v1.2.zip"]
-            }
-        },
-        "GroveSlide": {
-            "Name": "API for the Grove Slide Potentiometer",
-            "Description": "This is the UPM Module for the Grove Slide Potentiometer. This class is being replaced by the upm-slide library and the Slide class.",
-            "Aliases": ["groveslide", "Grove - Slide Potentiometer"],
-            "Categories": ["ainput"],
-            "Connections": ["analog"],
-            "Project Type": ["prototyping"],
-            "Manufacturers": ["Seeed"],
-            "Images": "slide.jpg",
-            "Examples": {
-                "Java": ["GroveSlide_Example.java"],
-                "Python": ["groveslide.py"],
-                "Node.js": ["groveslide.js"],
-                "C++": ["grove-groveslide.cxx"]
-            },
-            "Specifications": {
-                "Vsource": {
-                    "unit": "V",
-                    "min": 3.3,
-                    "max": 30
-                },
-                "Supply Current": {
-                    "unit": "mA",
-                    "max" : 30
-                },
-                "Operating Temperature": {
-                    "unit": "°C",
-                    "min": -40,
-                    "max": 85
-                },
-                "Sroke Length": {
-                    "unit": "mm",
-                    "min" : 0,
-                    "max" : 30
-                }
-            },
-            "Platforms": {
-                "Intel Edison": {
-                    "Notes": ["Might need Grove base shield"]
-                },
-                "Arduino 101": {
-                    "Notes": ["Might need Grove base shield"]
-                }
-            },
-            "Urls": {
-                "Product Pages": ["https://www.seeedstudio.com/Grove-Slide-Potentiometer-p-1196.html?gclid=Cj0KCQjw5arMBRDzARIsAAqmJexy5Nrps6rpUqNFk4iIL6mVfHQt7EYfly4NbdhC7wBl4p3AxQZNkjIaAuN2EALw_wcB", "http://wiki.seeed.cc/Grove-Slide_Potentiometer/"],
-                "Datasheets": ["https://raw.githubusercontent.com/SeeedDocument/Grove-Slide_Potentiometer/master/res/Sliding_potentiometer_datasheet.pdf"],
-                "Schematics": ["https://raw.githubusercontent.com/SeeedDocument/Grove-Slide_Potentiometer/master/res/Sliding_Potentiometer.rar"]
-            }
-        },
-        "GroveTemp": {
-            "Name": "API for the Grove Temperature Sensor",
-            "Description": "This is the UPM Module for the Grove Temperature Sensor. This class is being replaced by the upm-temperature library and the Temperature class.",
-            "Aliases": ["groverelay", "Grove - Temperature Sensor"],
-            "Categories": ["temperature"],
-            "Connections": ["analog"],
-            "Project Type": ["prototyping"],
-            "Manufacturers": ["Seeed"],
-            "Kits": ["gsk"],
-            "Image": "grovetemp.jpg",
-            "Examples": {
-                "Java": ["GroveTemp_Example.java"],
-                "Python": ["grovetemp.py"],
-                "Node.js": ["grovetemp.js"],
-                "C++": ["grove-grovetemp.cxx"]
-            },
-            "Specifications": {
-                "Vsource": {
-                    "unit": "V",
-                    "min": 3.3,
-                    "max": 5.0
-                },
-                "Supply Current": {
-                    "unit": "mA",
-                    "typ" : 50
-                },
-                "Operating Temperature": {
-                    "unit": "°C",
-                    "min": -40,
-                    "max": 125
-                },
-                "Accuracy": {
-                    "unit": "+/- °C",
-                    "accuracy": 1.5
-                }
-            },
-            "Platforms": {
-                "Intel Edison": {
-                    "Notes": ["Might need Grove base shield"]
-                },
-                "Arduino 101": {
-                    "Notes": ["Might need Grove base shield"]
-                }
-            },
-            "Urls": {
-                "Product Pages": ["https://www.seeedstudio.com/Grove-Temperature-Sensor-p-774.html?gclid=Cj0KCQjw5arMBRDzARIsAAqmJexygEDSrIieYoG1C37j3HmOOx7PHjXlPsWxnQo7g1sCctC_VErW2IAaAvIHEALw_wcB", "http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/"],
-                "Datasheets": ["https://github.com/SeeedDocument/Grove-Temperature_Sensor_V1.2/raw/master/res/NCP18WF104F03RC.pdf"],
-                "Schematics": ["https://github.com/SeeedDocument/Grove-Temperature_Sensor_V1.2/raw/master/res/Grove_-_Temperature_sensor_v1.1.zip"]
-            }
-        }
-    }
-}
diff --git a/src/grove/grovebase.hpp b/src/grove/grovebase.hpp
deleted file mode 100644
index d51e8d5..0000000
--- a/src/grove/grovebase.hpp
+++ /dev/null
@@ -1,49 +0,0 @@
-/*
- * Authors: Brendan Le Foll <brendan.le.foll@intel.com>
- *          Mihai Tudor Panu <mihai.tudor.panu@intel.com>
- *          Sarah Knepper <sarah.knepper@intel.com>
- * Copyright (c) 2014 - 2016 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#pragma once
-
-#include <string>
-
-namespace upm {
-
-/**
- * @deprecated This library is now deprecated and replaced by individual
- * libraries for every sensor.
- * @brief Generic Library for Basic Grove Sensors
- * @defgroup grove libupm-grove
- * @ingroup seeed gpio pwm ainput button led light relay temp touch gsk eak hak
- */
-class Grove {
-    public:
-        virtual ~Grove() {}
-        std::string name()
-        {
-            return m_name;
-        }
-    protected:
-        std::string m_name;
-};
-}
diff --git a/src/grove/grovebutton.cxx b/src/grove/grovebutton.cxx
deleted file mode 100644
index ce50d2e..0000000
--- a/src/grove/grovebutton.cxx
+++ /dev/null
@@ -1,75 +0,0 @@
-/*
- * Authors: Brendan Le Foll <brendan.le.foll@intel.com>
- *          Mihai Tudor Panu <mihai.tudor.panu@intel.com>
- *          Sarah Knepper <sarah.knepper@intel.com>
- * Copyright (c) 2014 - 2016 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <iostream>
-#include <string>
-#include <stdexcept>
-
-#include "grovebutton.hpp"
-
-using namespace upm;
-
-GroveButton::GroveButton(unsigned int pin)
-{
-    if ( !(m_gpio = mraa_gpio_init(pin)) ) {
-        throw std::invalid_argument(std::string(__FUNCTION__) +
-                                    ": mraa_gpio_init() failed, invalid pin?");
-        return;
-    }
-    mraa_gpio_dir(m_gpio, MRAA_GPIO_IN);
-    m_name = "Button Sensor";
-}
-
-GroveButton::~GroveButton()
-{
-    mraa_gpio_close(m_gpio);
-}
-
-std::string GroveButton::name()
-{
-    return m_name;
-}
-
-int GroveButton::value()
-{
-    return mraa_gpio_read(m_gpio);
-}
-
-void GroveButton::installISR(mraa::Edge level, void (*isr)(void *), void *arg)
-{
-  if (m_isrInstalled)
-    uninstallISR();
-
-  // install our interrupt handler
-  mraa_gpio_isr(m_gpio, (mraa_gpio_edge_t) level, isr, arg);
-  m_isrInstalled = true;
-}
-
-void GroveButton::uninstallISR()
-{
-  mraa_gpio_isr_exit(m_gpio);
-  m_isrInstalled = false;
-}
diff --git a/src/grove/grovebutton.hpp b/src/grove/grovebutton.hpp
deleted file mode 100644
index 60773c2..0000000
--- a/src/grove/grovebutton.hpp
+++ /dev/null
@@ -1,100 +0,0 @@
-/*
- * Authors: Brendan Le Foll <brendan.le.foll@intel.com>
- *          Mihai Tudor Panu <mihai.tudor.panu@intel.com>
- *          Sarah Knepper <sarah.knepper@intel.com>
- * Copyright (c) 2014 - 2016 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#pragma once
-
-#include <string>
-#include <mraa/gpio.hpp>
-#include "grovebase.hpp"
-
-namespace upm {
-
-/**
- * @deprecated This class is being replaced by the upm-button library and the
- * Button class.
- * @library grove
- * @sensor grovebutton
- * @comname Button
- * @altname Grove Touch Sensor
- * @type button touch
- * @man seeed
- * @con gpio
- * @kit gsk
- *
- * @brief API for the Grove Button
- *
- * Basic UPM module for the Grove button
- *
- * @image html grovebutton.jpg
- * @snippet grove-grovebutton.cxx Interesting
- */
-class GroveButton: public Grove {
-    public:
-        /**
-         * Grove button constructor
-         *
-         * @param pin Pin to use
-         */
-        GroveButton(unsigned int pin);
-        /**
-         * Grove button destructor
-         */
-        ~GroveButton();
-        /**
-         * Gets the name of the sensor
-         *
-         * @return Name of this sensor
-         */
-        std::string name();
-        /**
-         * Gets the value from the GPIO pin
-         *
-         * @return Value from the GPIO pin
-         */
-        int value();
-
-        /**
-         * Installs an interrupt service routine (ISR) to be called when
-         * the button is activated or deactivated.
-         *
-         * @param fptr Pointer to a function to be called on interrupt
-         * @param arg Pointer to an object to be supplied as an
-         * argument to the ISR.
-         */
-        void installISR(mraa::Edge level, void (*isr)(void *), void *arg);
-
-        /**
-         * Uninstalls the previously installed ISR
-         *
-         */
-        void uninstallISR();
-
-    private:
-        bool m_isrInstalled;
-        std::string m_name;
-        mraa_gpio_context m_gpio;
-};
-}
diff --git a/src/grove/groveled.cxx b/src/grove/groveled.cxx
deleted file mode 100644
index 68f107d..0000000
--- a/src/grove/groveled.cxx
+++ /dev/null
@@ -1,67 +0,0 @@
-/*
- * Authors: Brendan Le Foll <brendan.le.foll@intel.com>
- *          Mihai Tudor Panu <mihai.tudor.panu@intel.com>
- *          Sarah Knepper <sarah.knepper@intel.com>
- * Copyright (c) 2014 - 2016 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <iostream>
-#include <string>
-#include <stdexcept>
-
-#include "groveled.hpp"
-
-using namespace upm;
-
-GroveLed::GroveLed(int pin)
-{
-    if ( !(m_gpio = mraa_gpio_init(pin)) ) {
-        throw std::invalid_argument(std::string(__FUNCTION__) +
-                                    ": mraa_gpio_init() failed, invalid pin?");
-        return;
-    }
-    mraa_gpio_dir(m_gpio, MRAA_GPIO_OUT);
-    m_name = "LED Socket";
-}
-
-GroveLed::~GroveLed()
-{
-    mraa_gpio_close(m_gpio);
-}
-
-mraa_result_t GroveLed::write(int value)
-{
-    if (value >= 1) {
-        return mraa_gpio_write(m_gpio, 1);
-    }
-    return mraa_gpio_write(m_gpio, 0);
-}
-
-mraa_result_t GroveLed::on()
-{
-    return write(1);
-}
-
-mraa_result_t GroveLed::off()
-{
-    return write(0);
-}
diff --git a/src/grove/groveled.hpp b/src/grove/groveled.hpp
deleted file mode 100644
index b91bd4d..0000000
--- a/src/grove/groveled.hpp
+++ /dev/null
@@ -1,98 +0,0 @@
-/*
- * Authors: Brendan Le Foll <brendan.le.foll@intel.com>
- *          Mihai Tudor Panu <mihai.tudor.panu@intel.com>
- *          Sarah Knepper <sarah.knepper@intel.com>
- * Copyright (c) 2014 - 2016 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#pragma once
-
-#include <string>
-#include <mraa/gpio.hpp>
-#include "grovebase.hpp"
-
-namespace upm {
-
-/**
- * @deprecated This class is being replaced by the upm-led library and the
- * Led class.
- * @library grove
- * @sensor groveled
- * @comname LED
- * @type led
- * @man seeed
- * @con gpio
- * @kit gsk
- *
- * @brief API for the Grove LED
- *
- * UPM module for the Grove LED (or other similar light-emitting diodes).
- * An LED is a small lightbulb that emits light in
- * response to a small current. The longer wire of an LED connects
- * to the positive seat (anode); the shorter wire connects to the
- * negative seat (cathode). The flat side of the bulb corresponds
- * to the cathode, while the rounded side corresponds to the anode.
- *
- * @image html groveled.jpg
- * @snippet grove-groveled.cxx Interesting
- * @snippet grove-groveled-multi.cxx Interesting
- */
-class GroveLed: public Grove {
-    public:
-        /**
-         * Grove LED constructor
-         *
-         * @param pin Pin to use
-         */
-        GroveLed(int pin);
-        /**
-         * Grove LED destructor
-         */
-        ~GroveLed();
-        /**
-         * Turns the LED on or off, depending on the value.
-         * If the value is positive (greater than or equal
-         * to 1), the LED is turned on.  Otherwise, for 0
-         * or negative values, the LED is turned off.
-         *
-         * @param value Tells the LED to turn on (for values >=1)
-         * or off (for values <1)
-         *
-         * @return 0 if successful, non-zero otherwise
-         */
-        mraa_result_t write(int value);
-        /**
-         * Turns the LED off
-         *
-         * @return 0 if successful, non-zero otherwise
-         */
-        mraa_result_t off();
-        /**
-         * Turns the LED on
-         *
-         * @return 0 if successful, non-zero otherwise
-         */
-        mraa_result_t on();
-    private:
-        mraa_gpio_context m_gpio;
-};
-}
diff --git a/src/grove/grovelight.cxx b/src/grove/grovelight.cxx
deleted file mode 100644
index 3931378..0000000
--- a/src/grove/grovelight.cxx
+++ /dev/null
@@ -1,63 +0,0 @@
-/*
- * Authors: Brendan Le Foll <brendan.le.foll@intel.com>
- *          Mihai Tudor Panu <mihai.tudor.panu@intel.com>
- *          Sarah Knepper <sarah.knepper@intel.com>
- * Copyright (c) 2014 - 2016 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <iostream>
-#include <string>
-#include <stdexcept>
-
-#include "grovelight.hpp"
-#include "math.h"
-
-using namespace upm;
-
-GroveLight::GroveLight(unsigned int pin)
-{
-    if ( !(m_aio = mraa_aio_init(pin)) ) {
-        throw std::invalid_argument(std::string(__FUNCTION__) +
-                                    ": mraa_aio_init() failed, invalid pin?");
-        return;
-    }
-    m_name = "Light Sensor";
-}
-
-GroveLight::~GroveLight()
-{
-    mraa_aio_close(m_aio);
-}
-
-int GroveLight::value()
-{
-    // rough conversion to lux, using formula from Grove Starter Kit booklet
-    float a = (float) mraa_aio_read(m_aio);
-    if (a == -1.0) return -1;
-    a = 10000.0/pow(((1023.0-a)*10.0/a)*15.0,4.0/3.0);
-    return (int) round(a);
-}
-
-float GroveLight::raw_value()
-{
-    return (float) mraa_aio_read(m_aio);
-}
diff --git a/src/grove/grovelight.hpp b/src/grove/grovelight.hpp
deleted file mode 100644
index b6e8500..0000000
--- a/src/grove/grovelight.hpp
+++ /dev/null
@@ -1,84 +0,0 @@
-/*
- * Authors: Brendan Le Foll <brendan.le.foll@intel.com>
- *          Mihai Tudor Panu <mihai.tudor.panu@intel.com>
- *          Sarah Knepper <sarah.knepper@intel.com>
- * Copyright (c) 2014 - 2016 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#pragma once
-
-#include <string>
-#include <mraa/aio.hpp>
-#include "grovebase.hpp"
-
-namespace upm {
-
-/**
- * @deprecated This class is being replaced by the upm-light library and the
- * Light class.
- * @library grove
- * @sensor grovelight
- * @comname Light Sensor
- * @type light
- * @man seeed
- * @con analog
- * @kit gsk
- *
- * @brief API for the Grove Light Sensor
- *
- * The Grove light sensor detects the intensity of the ambient light.
- * As the light intensity of the environment increases, the resistance
- * of the sensor decreases. This means the raw value from the
- * analog pin is larger in bright light and smaller in the dark.
- * An approximate lux value can also be returned.
- *
- * @image html grovelight.jpg
- * @snippet grove-grovelight.cxx Interesting
- */
-class GroveLight: public Grove {
-    public:
-        /**
-         * Grove analog light sensor constructor
-         *
-         * @param pin Analog pin to use
-         */
-        GroveLight(unsigned int pin);
-        /**
-         * GroveLight destructor
-         */
-        ~GroveLight();
-        /**
-         * Gets the raw value from the AIO pin
-         *
-         * @return Raw value from the ADC
-         */
-        float raw_value();
-        /**
-         * Gets an approximate light value, in lux, from the sensor
-         *
-         * @return Normalized light reading in lux
-         */
-        int value();
-    private:
-        mraa_aio_context m_aio;
-};
-}
diff --git a/src/grove/groverelay.cxx b/src/grove/groverelay.cxx
deleted file mode 100644
index 53fba21..0000000
--- a/src/grove/groverelay.cxx
+++ /dev/null
@@ -1,69 +0,0 @@
-/*
- * Authors: Brendan Le Foll <brendan.le.foll@intel.com>
- *          Mihai Tudor Panu <mihai.tudor.panu@intel.com>
- *          Sarah Knepper <sarah.knepper@intel.com>
- * Copyright (c) 2014 - 2016 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <iostream>
-#include <string>
-#include <stdexcept>
-
-#include "groverelay.hpp"
-
-using namespace upm;
-
-GroveRelay::GroveRelay(unsigned int pin)
-{
-    if ( !(m_gpio = mraa_gpio_init(pin)) ) {
-        throw std::invalid_argument(std::string(__FUNCTION__) +
-                                    ": mraa_gpio_init() failed, invalid pin?");
-        return;
-    }
-    mraa_gpio_dir(m_gpio, MRAA_GPIO_OUT);
-    m_name = "Relay Switch";
-}
-
-GroveRelay::~GroveRelay()
-{
-    mraa_gpio_close(m_gpio);
-}
-
-mraa_result_t GroveRelay::on()
-{
-    return mraa_gpio_write(m_gpio, 1);
-}
-
-mraa_result_t GroveRelay::off()
-{
-    return mraa_gpio_write(m_gpio, 0);
-}
-
-bool GroveRelay::isOn()
-{
-    return mraa_gpio_read(m_gpio) == 1;
-}
-
-bool GroveRelay::isOff()
-{
-    return mraa_gpio_read(m_gpio) == 0;
-}
diff --git a/src/grove/groverelay.hpp b/src/grove/groverelay.hpp
deleted file mode 100644
index 9232c95..0000000
--- a/src/grove/groverelay.hpp
+++ /dev/null
@@ -1,97 +0,0 @@
-/*
- * Authors: Brendan Le Foll <brendan.le.foll@intel.com>
- *          Mihai Tudor Panu <mihai.tudor.panu@intel.com>
- *          Sarah Knepper <sarah.knepper@intel.com>
- * Copyright (c) 2014 - 2016 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#pragma once
-
-#include <string>
-#include <mraa/gpio.hpp>
-#include "grovebase.hpp"
-
-namespace upm {
-
-/**
- * @deprecated This class is being replaced by the upm-relay library and the
- * Relay class.
- * @library grove
- * @sensor groverelay
- * @comname Relay
- * @type relay
- * @man seeed
- * @con gpio
- * @kit gsk eak hak
- *
- * @brief API for the Grove Relay
- * 
- * UPM module for the Grove relay switch. The Grove relay is a
- * digital normally-open switch that uses low voltage or current to
- * control a higher voltage and/or higher current.  When closed,
- * the indicator LED lights up and current is allowed to flow.
- *
- * @image html groverelay.jpg
- * @snippet grove-groverelay.cxx Interesting
- */
-class GroveRelay: public Grove {
-    public:
-        /**
-         * Grove relay constructor
-         *
-         * @param pin Pin to use
-         */
-        GroveRelay(unsigned int pin);
-        /**
-         * Grove relay destructor
-         */
-        ~GroveRelay();
-        /**
-         * Sets the relay switch to on (closed). This allows current
-         * to flow and lights up the indicator LED.
-         *
-         * @return 0 if successful, non-zero otherwise
-         */
-        mraa_result_t on();
-        /**
-         * Sets the relay switch to off (open). This stops current
-         * from flowing and the indicator LED is not lit.
-         *
-         * @return 0 if successful, non-zero otherwise
-         */
-        mraa_result_t off();
-        /**
-         * Defines whether the relay switch is closed.
-         *
-         * @return True if the switch is on (closed), false otherwise
-         */
-        bool isOn();
-        /**
-         * Defines whether the relay switch is open.
-         *
-         * @return True if the switch is off (open), false otherwise
-         */
-        bool isOff();
-    private:
-        mraa_gpio_context m_gpio;
-};
-}
diff --git a/src/grove/groverotary.cxx b/src/grove/groverotary.cxx
deleted file mode 100644
index 925c97f..0000000
--- a/src/grove/groverotary.cxx
+++ /dev/null
@@ -1,79 +0,0 @@
-/*
- * Authors: Brendan Le Foll <brendan.le.foll@intel.com>
- *          Mihai Tudor Panu <mihai.tudor.panu@intel.com>
- *          Sarah Knepper <sarah.knepper@intel.com>
- * Copyright (c) 2014 - 2016 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <iostream>
-#include <string>
-#include <stdexcept>
-
-#include "groverotary.hpp"
-#include "math.h"
-
-using namespace upm;
-
-GroveRotary::GroveRotary(unsigned int pin)
-{
-    if ( !(m_aio = mraa_aio_init(pin)) ) {
-        throw std::invalid_argument(std::string(__FUNCTION__) +
-                                    ": mraa_aio_init() failed, invalid pin?");
-        return;
-    }
-    m_name = "Rotary Angle Sensor";
-}
-
-GroveRotary::~GroveRotary()
-{
-    mraa_aio_close(m_aio);
-}
-
-float GroveRotary::abs_value()
-{
-    return (float) mraa_aio_read(m_aio);
-}
-
-float GroveRotary::abs_deg()
-{
-    return GroveRotary::abs_value() * (float) m_max_angle / 1023.0;
-}
-
-float GroveRotary::abs_rad()
-{
-    return GroveRotary::abs_deg() * M_PI / 180.0;
-}
-
-float GroveRotary::rel_value()
-{
-    return GroveRotary::abs_value() - 512.0;
-}
-
-float GroveRotary::rel_deg()
-{
-    return GroveRotary::rel_value() * (float) m_max_angle / 1023.0;
-}
-
-float GroveRotary::rel_rad()
-{
-    return GroveRotary::rel_deg() * M_PI / 180.0;
-}
diff --git a/src/grove/groverotary.hpp b/src/grove/groverotary.hpp
deleted file mode 100644
index f3d3443..0000000
--- a/src/grove/groverotary.hpp
+++ /dev/null
@@ -1,108 +0,0 @@
-/*
- * Authors: Brendan Le Foll <brendan.le.foll@intel.com>
- *          Mihai Tudor Panu <mihai.tudor.panu@intel.com>
- *          Sarah Knepper <sarah.knepper@intel.com>
- * Copyright (c) 2014 - 2016 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#pragma once
-
-#include <string>
-#include <mraa/aio.hpp>
-#include "grovebase.hpp"
-
-namespace upm {
-
-/**
- * @deprecated This class is being replaced by the upm-rotary library and the
- * Rotary class.
- * @library grove
- * @sensor groverotary
- * @comname Rotary Angle Sensor
- * @altname Rotary Potentiometer
- * @type ainput
- * @man seeed
- * @con analog
- * @kit gsk
- *
- * @brief API for the Grove Rotary Angle Sensor (Knob)
- *
- * Basic UPM module for the Grove rotary angle sensor (knob) on analog. Provides
- * a set of functions to read the absolute pin value, degrees or radians, and another set
- * to do the same relative to the center of the knob's range.
- *
- * @image html rotaryencoder.jpg
- * @snippet grove-groverotary.cxx Interesting
- */
-class GroveRotary: public Grove {
-    public:
-        /**
-         * Grove rotary angle sensor constructor
-         *
-         * @param pin Number of the analog pin to use
-         */
-        GroveRotary(unsigned int pin);
-        /**
-         * GroveRotary destructor
-         */
-        ~GroveRotary();
-        /**
-         * Gets the absolute raw value from the AIO pin
-         *
-         * @return Unsigned value from the ADC
-         */
-        float abs_value();
-        /**
-         * Gets absolute raw degrees from the AIO pin
-         *
-         * @return Unsigned degrees from the ADC
-         */
-        float abs_deg();
-        /**
-         * Gets absolute raw radians from the AIO pin
-         *
-         * @return Unsigned radians from the ADC
-         */
-        float abs_rad();
-        /**
-         * Gets the relative value from the AIO pin
-         *
-         * @return Signed value from the ADC
-         */
-        float rel_value();
-        /**
-         * Gets relative degrees from the AIO pin
-         *
-         * @return Signed degrees from the ADC
-         */
-        float rel_deg();
-        /**
-         * Gets relative radians from the AIO pin
-         *
-         * @return Signed radians from the ADC
-         */
-        float rel_rad();
-    private:
-        mraa_aio_context m_aio;
-        static const int m_max_angle = 300;
-};
-}
diff --git a/src/grove/groveslide.cxx b/src/grove/groveslide.cxx
deleted file mode 100644
index d3c511f..0000000
--- a/src/grove/groveslide.cxx
+++ /dev/null
@@ -1,68 +0,0 @@
-/*
- * Authors: Brendan Le Foll <brendan.le.foll@intel.com>
- *          Mihai Tudor Panu <mihai.tudor.panu@intel.com>
- *          Sarah Knepper <sarah.knepper@intel.com>
- * Copyright (c) 2014 - 2016 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <iostream>
-#include <string>
-#include <stdexcept>
-
-#include "groveslide.hpp"
-#include "math.h"
-
-using namespace upm;
-
-GroveSlide::GroveSlide(unsigned int pin, float ref_voltage)
-{
-    if ( !(m_aio = mraa_aio_init(pin)) ) {
-        throw std::invalid_argument(std::string(__FUNCTION__) +
-                                    ": mraa_aio_init() failed, invalid pin?");
-        return;
-    }
-    m_ref_voltage = ref_voltage;
-    m_name = "Slide Potentiometer";
-}
-
-GroveSlide::~GroveSlide()
-{
-    mraa_aio_close(m_aio);
-}
-
-float GroveSlide::raw_value()
-{
-    return (float) mraa_aio_read(m_aio);
-}
-
-float GroveSlide::voltage_value()
-{
-    // conversion to Volts
-    float a = GroveSlide::raw_value();
-    a = m_ref_voltage * a / 1023.0 ;
-    return a;
-}
-
-float GroveSlide::ref_voltage()
-{
-    return m_ref_voltage;
-}
diff --git a/src/grove/groveslide.hpp b/src/grove/groveslide.hpp
deleted file mode 100644
index 8dffa1e..0000000
--- a/src/grove/groveslide.hpp
+++ /dev/null
@@ -1,89 +0,0 @@
-/*
- * Authors: Brendan Le Foll <brendan.le.foll@intel.com>
- *          Mihai Tudor Panu <mihai.tudor.panu@intel.com>
- *          Sarah Knepper <sarah.knepper@intel.com>
- * Copyright (c) 2014 - 2016 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#pragma once
-
-#include <string>
-#include <mraa/aio.hpp>
-#include "grovebase.hpp"
-
-namespace upm {
-
-/**
- * @deprecated This class is being replaced by the upm-slide library and the
- * Slide class.
- * @library grove
- * @sensor groveslide
- * @comname Slide Potentiometer
- * @type ainput
- * @man seeed
- * @con analog
- *
- * @brief API for the Grove Slide Potentiometer
- *
- * Basic UPM module for the Grove slide potentiometer on analog that
- * returns either a raw value or a scaled voltage value.
- *
- * @image html slide.jpg
- * @snippet grove-groveslide.cxx Interesting
- */
-class GroveSlide: public Grove {
-    public:
-        /**
-         * Grove analog slide potentiometer constructor
-         *
-         * @param pin Number of the analog pin to use
-         *
-         * @param ref_voltage Reference voltage the board is set to, as a floating-point value; default is 5.0V
-         */
-        GroveSlide(unsigned int pin, float ref_voltage = 5.0);
-        /**
-         * GroveSlide destructor
-         */
-        ~GroveSlide();
-        /**
-         * Gets the raw value from the AIO pin
-         *
-         * @return Raw value from the ADC
-         */
-        float raw_value();
-        /**
-         * Gets the voltage value from the pin
-         *
-         * @return Voltage reading based on the reference voltage
-         */
-        float voltage_value();
-        /**
-         * Gets the board's reference voltage passed on object initialization
-         *
-         * @return Reference voltage the class was set for
-         */
-        float ref_voltage();
-    private:
-        mraa_aio_context m_aio;
-        float m_ref_voltage;
-};
-}
diff --git a/src/grove/grovetemp.cxx b/src/grove/grovetemp.cxx
deleted file mode 100644
index 008ad5c..0000000
--- a/src/grove/grovetemp.cxx
+++ /dev/null
@@ -1,68 +0,0 @@
-/*
- * Authors: Brendan Le Foll <brendan.le.foll@intel.com>
- *          Mihai Tudor Panu <mihai.tudor.panu@intel.com>
- *          Sarah Knepper <sarah.knepper@intel.com>
- * Copyright (c) 2014 - 2016 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <iostream>
-#include <string>
-#include <stdexcept>
-
-#include "grovetemp.hpp"
-#include "math.h"
-
-using namespace upm;
-
-GroveTemp::GroveTemp(unsigned int pin, float scale, int r0, int b)
-{
-    if ( !(m_aio = mraa_aio_init(pin)) ) {
-        throw std::invalid_argument(std::string(__FUNCTION__) +
-                                    ": mraa_aio_init() failed, invalid pin?");
-        return;
-    }
-    m_name = "Temperature Sensor";
-    m_scale = scale;
-    m_r0 = r0;
-    m_b = b;
-}
-
-GroveTemp::~GroveTemp()
-{
-    mraa_aio_close(m_aio);
-}
-
-int GroveTemp::value ()
-{
-    float a = (float) mraa_aio_read(m_aio);
-    if (a == -1.0) return -1;
-    // Apply scale factor after error check
-    a *= m_scale;
-    float r = (float)(1023.0-a)*(float)m_r0/a;
-    float t = 1.0/(log(r/(float)m_r0)/(float)m_b + 1.0/298.15)-273.15;
-    return (int) round(t);
-}
-
-float GroveTemp::raw_value()
-{
-    return (float) mraa_aio_read(m_aio);
-}
diff --git a/src/grove/grovetemp.hpp b/src/grove/grovetemp.hpp
deleted file mode 100644
index 817cecf..0000000
--- a/src/grove/grovetemp.hpp
+++ /dev/null
@@ -1,94 +0,0 @@
-/*
- * Authors: Brendan Le Foll <brendan.le.foll@intel.com>
- *          Mihai Tudor Panu <mihai.tudor.panu@intel.com>
- *          Sarah Knepper <sarah.knepper@intel.com>
- * Copyright (c) 2014 - 2016 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#pragma once
-
-#include <string>
-#include <mraa/aio.hpp>
-#include "grovebase.hpp"
-
-namespace upm {
-
-/**
- * @deprecated This class is being replaced by the upm-temperature library and
- * the Temperature class.
- * @library grove
- * @sensor grovetemp
- * @comname Temperature Sensor
- * @type temp
- * @man seeed
- * @con analog
- * @kit gsk
- *
- * @brief API for the Grove Temperature Sensor
- *
- * Basic UPM module for the Grove temperature sensor on analog. This sensor
- * uses a thermistor to measure ambient temperature. The conversion formula has
- * been updated to work with versions 1.1 and 1.2 of the sensor. For the older
- * v1.0 sensor you will have to specify R0 and B values when initializing the
- * device. The range of this sensor is -40 to 125 C and accuracy is +/- 1.5 C.
- *
- * @image html grovetemp.jpg
- * @snippet grove-grovetemp.cxx Interesting
- */
-class GroveTemp: public Grove {
-    public:
-        /**
-         * Grove analog temperature sensor constructor
-         *
-         * @param pin Analog pin to use
-         * @param scale Scaling factor for raw analog value from the ADC,
-         * useful for mixed 3.3V/5V boards, default 1.0
-         * @param r0 zero power resistance, this is 100K (default) for
-         * v1.1-v1.2 and 10K for v1.0 of the sensor
-         * @param b thermistor nominal B constant, this is 4275 (default) for
-         * v1.1-v1.2 and 3975 for v1.0 of the sensor
-         */
-        GroveTemp(unsigned int pin, float scale = 1.0, int r0 = 100000, int b = 4275);
-        /**
-         * GroveTemp destructor
-         */
-        ~GroveTemp();
-        /**
-         * Gets the raw value from the AIO pin
-         *
-         * @return Raw value from the ADC
-         */
-        float raw_value();
-        /**
-         * Gets the temperature in Celsius from the sensor
-         *
-         * @return Normalized temperature in Celsius
-         */
-        int value();
-    private:
-        mraa_aio_context m_aio;
-        float m_scale;
-        int m_r0;
-        int m_b;
-
-};
-}
diff --git a/src/grovecollision/CMakeLists.txt b/src/grovecollision/CMakeLists.txt
deleted file mode 100644
index 09b00fa..0000000
--- a/src/grovecollision/CMakeLists.txt
+++ /dev/null
@@ -1,5 +0,0 @@
-set (libname "grovecollision")
-set (libdescription "Collision Sensor")
-set (module_src ${libname}.cxx)
-set (module_hpp ${libname}.hpp)
-upm_module_init(mraa)
diff --git a/src/grovecollision/grovecollision.cxx b/src/grovecollision/grovecollision.cxx
deleted file mode 100644
index d83e02e..0000000
--- a/src/grovecollision/grovecollision.cxx
+++ /dev/null
@@ -1,53 +0,0 @@
-/*
- * Author: Zion Orent <sorent@ics.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <string>
-#include <stdexcept>
-
-#include "grovecollision.hpp"
-
-using namespace upm;
-
-GroveCollision::GroveCollision(int pin)
-{
-    
-    if ( !(m_gpio = mraa_gpio_init(pin)) ) 
-      {
-        throw std::invalid_argument(std::string(__FUNCTION__) +
-                                    ": mraa_gpio_init() failed, invalid pin?");
-        return;
-      }
-    mraa_gpio_dir(m_gpio, MRAA_GPIO_IN);
-}
-
-GroveCollision::~GroveCollision()
-{
-    mraa_gpio_close(m_gpio);
-}
-
-bool GroveCollision::isColliding()
-{
-	// Collisions cause 0; no collision is 1
-	return (!(bool)mraa_gpio_read(m_gpio));
-}
diff --git a/src/grovecollision/grovecollision.hpp b/src/grovecollision/grovecollision.hpp
deleted file mode 100644
index 7c717b0..0000000
--- a/src/grovecollision/grovecollision.hpp
+++ /dev/null
@@ -1,74 +0,0 @@
-/*
- * Author: Zion Orent <sorent@ics.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#pragma once
-
-#include <mraa/gpio.h>
-
-namespace upm {
-  /**
-   * @deprecated This library is being replaced by libupm-collision
-   * @brief Grove Collision Sensor
-   * @defgroup grovecollision libupm-grovecollision
-   * @ingroup seeed gpio accelerometer
-   */
-
-  /**
-   * @deprecated This class is being replaced by Collision
-   * @library grovecollision
-   * @sensor grovecollision
-   * @comname Collision Sensor
-   * @type accelerometer
-   * @man seeed
-   * @con gpio
-   *
-   * @brief API for the Grove Collision Sensor
-   * 
-   * The Grove Collision Sensor can detect whether any
-   * collision movement or vibration happens.
-   * It outputs a low pulse signal when vibration is detected. 
-   *
-   * @image html grovecollision.jpg
-   * @snippet grovecollision.cxx Interesting
-   */
-  class GroveCollision {
-  public:
-    /**
-     * Grove collision sensor constructor
-     *
-     * @param pin Digital pin to use
-     */
-    GroveCollision(int pin);
-    /**
-     * GroveCollision destructor
-     */
-    ~GroveCollision();
-    /**
-     * @return bool  Defines whether something is colliding with sensor
-     */
-     bool isColliding();
-
-  private:
-        mraa_gpio_context m_gpio;
-	};
-}
diff --git a/src/grovecollision/grovecollision.json b/src/grovecollision/grovecollision.json
deleted file mode 100644
index 591d5d9..0000000
--- a/src/grovecollision/grovecollision.json
+++ /dev/null
@@ -1,41 +0,0 @@
-{
-    "Library": "grovecollision",
-    "Description": "API for the Grove Collision Sensor",
-    "Sensor Class":
-    {
-        "GroveCollision":
-        {
-            "Name": "Grove Collision Sensor",
-            "Description": "The Grove Collision Sensor can detect whether any collision movement or vibration happens. It outputs a low pulse signal when vibration is detected.",
-            "Aliases": ["grovecollision"],
-            "Categories": ["collision", "deprecated"],
-            "Connections": ["gpio"],
-            "Project Type": ["prototyping", "robotics"],
-            "Manufacturers": ["seeed"],
-            "Kits": [],
-            "Image": "grovecollision.jpg",
-            "Examples":
-            {
-                "Java": ["GroveCollision_Example.java"],
-                "Python": ["grovecollision.py"],
-                "Node.js": ["grovecollision.js"],
-                "C++": ["grovecollision.cxx"],
-                "C": []
-            },
-            "Specifications":
-            {
-                "Operating Voltage": {"unit": "V", "low": 3.3,  "high": 5},
-                "Operating Current": {"unit": "mA", "max": 2},
-                "Reaction Point": {"unit": "mg", "typ": 50},
-                "Off Resistance": {"unit": "MOhms", "min": 30},
-                "On Resistance": {"unit": "Ohms", "max": 100}
-            },
-            "Urls" :
-            {
-                "Product Pages": ["https://www.seeedstudio.com/Grove-Collision-Sensor-p-1132.html"],
-                "Datasheets": ["https://raw.githubusercontent.com/SeeedDocument/Grove-Collision_Sensor/master/res/DataSheet-MVS0608_02-v2_1.pdf", "http://wiki.seeed.cc/Grove-Collision_Sensor/"],
-                "Schematics": []
-            }
-        }
-    }
-}
diff --git a/src/groveehr/CMakeLists.txt b/src/groveehr/CMakeLists.txt
deleted file mode 100644
index 39250e5..0000000
--- a/src/groveehr/CMakeLists.txt
+++ /dev/null
@@ -1,5 +0,0 @@
-set (libname "groveehr")
-set (libdescription "Ear-clip Heart Rate Sensor")
-set (module_src ${libname}.cxx)
-set (module_hpp ${libname}.hpp)
-upm_module_init(mraa)
diff --git a/src/groveehr/groveehr.cxx b/src/groveehr/groveehr.cxx
deleted file mode 100644
index 953e5f5..0000000
--- a/src/groveehr/groveehr.cxx
+++ /dev/null
@@ -1,130 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2014 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <iostream>
-#include <string>
-#include <stdexcept>
-
-#include "groveehr.hpp"
-
-using namespace upm;
-using namespace std;
-
-GroveEHR::GroveEHR(int pin)
-{
-  if ( !(m_gpio = mraa_gpio_init(pin)) )
-    {
-      throw std::invalid_argument(std::string(__FUNCTION__) +
-                                  ": mraa_aio_init() failed, invalid pin?");
-      return;
-    }
-
-  mraa_gpio_dir(m_gpio, MRAA_GPIO_IN);
-
-  initClock();
-  m_beatCounter = 0;
-}
-
-GroveEHR::~GroveEHR()
-{
-  mraa_gpio_close(m_gpio);
-}
-
-void GroveEHR::initClock()
-{
-  gettimeofday(&m_startTime, NULL);
-}
-
-uint32_t GroveEHR::getMillis()
-{
-  struct timeval elapsed, now;
-  uint32_t elapse;
-
-  // get current time
-  gettimeofday(&now, NULL);
-
-  // compute the delta since m_startTime
-  if( (elapsed.tv_usec = now.tv_usec - m_startTime.tv_usec) < 0 ) 
-    {
-      elapsed.tv_usec += 1000000;
-      elapsed.tv_sec = now.tv_sec - m_startTime.tv_sec - 1;
-    } 
-  else 
-    {
-      elapsed.tv_sec = now.tv_sec - m_startTime.tv_sec;
-    }
-
-  elapse = (uint32_t)((elapsed.tv_sec * 1000) + (elapsed.tv_usec / 1000));
-
-  // never return 0
-  if (elapse == 0)
-    elapse = 1;
-
-  return elapse;
-}
-
-void GroveEHR::clearBeatCounter()
-{
-  m_beatCounter = 0;
-}
-
-void GroveEHR::startBeatCounter()
-{
-  // install our interrupt handler
-  mraa_gpio_isr(m_gpio, MRAA_GPIO_EDGE_RISING, 
-                &beatISR, this);
-}
-
-void GroveEHR::stopBeatCounter()
-{
-  // remove the interrupt handler
-  mraa_gpio_isr_exit(m_gpio);
-}
-
-uint32_t GroveEHR::beatCounter()
-{
-  return m_beatCounter;
-}
-
-void GroveEHR::beatISR(void *ctx)
-{
-  upm::GroveEHR *This = (upm::GroveEHR *)ctx;
-  This->m_beatCounter++;
-}
-
-int GroveEHR::heartRate()
-{
-  uint32_t millis = getMillis();
-  uint32_t beats = beatCounter();
-  
-  float heartRate = 0;
-  // wait at least 5 seconds before attempting to compute the
-  // heart rate
-  if (millis > 5000)
-    {
-      heartRate = (float(beats) / (float(millis) / 1000.0)) * 60.0;
-    }
-
-  return int(heartRate);
-}
diff --git a/src/groveehr/groveehr.hpp b/src/groveehr/groveehr.hpp
deleted file mode 100644
index 596644d..0000000
--- a/src/groveehr/groveehr.hpp
+++ /dev/null
@@ -1,128 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2014 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#pragma once
-
-#include <string>
-#include <stdint.h>
-#include <sys/time.h>
-#include <mraa/gpio.h>
-
-namespace upm {
-  /**
-   * @deprecated This library is being replaced by libupm-ehr
-   * @brief Grove Ear-clip Heart Rate Sensor
-   * @defgroup groveehr libupm-groveehr
-   * @ingroup seeed gpio medical
-   */
-
-  /**
-   * @deprecated This class is being replaced by EHR
-   * @library groveehr
-   * @sensor groveehr
-   * @comname Ear-clip Heart Rate Sensor
-   * @type medical
-   * @man seeed
-   * @con gpio
-   *
-   * @brief API for the Grove Ear-clip Heart Rate Sensor
-   *
-   * UPM module for the Grove ear-clip heart rate sensor. It is used to measure your
-   * heart rate. 
-   *
-   * @image html groveehr.jpg 
-   * @snippet groveehr.cxx Interesting
-   */
-  class GroveEHR {
-  public:
-    /**
-     * GroveEHR constructor
-     *
-     * @param pin Digital pin to use
-     */
-    GroveEHR(int pin);
-    /**
-     * GroveEHR destructor
-     */
-    ~GroveEHR();
-    /**
-     * Returns the time of milliseconds elapsed since initClock()
-     * was last called.
-     *
-     * @return Elapsed milliseconds
-     */
-    uint32_t getMillis();
-
-    /**
-     * Resets the clock
-     *
-     */
-    void initClock();
-
-    /**
-     * Resets the beat counter to 0. The beat counter should be
-     * stopped via stopBeatCounter() prior to calling this function.
-     *
-     */
-    void clearBeatCounter();
-
-    /**
-     * Starts the beat counter
-     *
-     */
-    void startBeatCounter();
-
-    /**
-     * Stops the beat counter
-     *
-     */
-    void stopBeatCounter();
-
-    /**
-     * Gets the beat Counter
-     *
-     * @return Beat counter
-     */
-    uint32_t beatCounter();
-
-    /**
-     * Computes the heart rate
-     *
-     * @return Computed heart rate
-     */
-    int heartRate();
-
-  private:
-    /**
-     * Beat interrupt service routine (ISR)
-     *
-     */
-    static void beatISR(void *ctx);
-    
-    volatile uint32_t m_beatCounter;
-    struct timeval m_startTime;
-    mraa_gpio_context m_gpio;
-  };
-}
-
-
diff --git a/src/groveehr/groveehr.i b/src/groveehr/groveehr.i
deleted file mode 100644
index b17c143..0000000
--- a/src/groveehr/groveehr.i
+++ /dev/null
@@ -1,16 +0,0 @@
-%include "../common_top.i"
-
-/* BEGIN Java syntax  ------------------------------------------------------- */
-#ifdef SWIGJAVA
-%ignore beatISR;
-
-JAVA_JNI_LOADLIBRARY(javaupm_groveehr)
-#endif
-/* END Java syntax */
-
-/* BEGIN Common SWIG syntax ------------------------------------------------- */
-%{
-#include "groveehr.hpp"
-%}
-%include "groveehr.hpp"
-/* END Common SWIG syntax */
diff --git a/src/groveehr/groveehr.json b/src/groveehr/groveehr.json
deleted file mode 100644
index 0aa4e6f..0000000
--- a/src/groveehr/groveehr.json
+++ /dev/null
@@ -1,40 +0,0 @@
-{
-    "Library": "groveehr",
-    "Description": "API for the  Ear-clip Heart Rate Sensor",
-    "Sensor Class":
-    {
-        "GroveEHR":
-        {
-            "Name": "Ear-clip Heart Rate Sensor",
-            "Description": "UPM module for the  ear-clip heart rate sensor. It is used to measure your heart rate.",
-            "Aliases": ["groveehr"],
-            "Categories": ["heartrate", "deprecated"],
-            "Connections": ["gpio"],
-            "Project Type": ["medical", "wearables", "prototyping"],
-            "Manufacturers": ["seeed"],
-            "Kits": [],
-            "Image": "groveehr.jpg",
-            "Examples":
-            {
-                "Java": ["GroveEHR_Example.java"],
-                "Python": ["groveehr.py"],
-                "Node.js": ["groveehr.js"],
-                "C++": ["groveehr.cxx"],
-                "C": []
-            },
-            "Specifications":
-            {
-                "Operating Voltage": {"unit": "V", "low": 3, "high": 5},
-                "Operating Current": {"unit": "mA", "typ": 6.5},
-                "Measurement Range": {"unit": "bpm", "min": 30}
-
-            },
-            "Urls" :
-            {
-                "Product Pages": ["https://www.seeedstudio.com/Grove-Ear-clip-Heart-Rate-Sensor-p-1116.html"],
-                "Datasheets": ["http://wiki.seeedstudio.com/wiki/Grove_-_Heart_rate_ear_clip_kit"],
-                "Schematics": []
-            }
-        }
-    }
-}
diff --git a/src/groveeldriver/CMakeLists.txt b/src/groveeldriver/CMakeLists.txt
deleted file mode 100644
index 0945bcc..0000000
--- a/src/groveeldriver/CMakeLists.txt
+++ /dev/null
@@ -1,5 +0,0 @@
-set (libname "groveeldriver")
-set (libdescription "Electroluminescent (EL) Driver")
-set (module_src ${libname}.cxx)
-set (module_hpp ${libname}.hpp)
-upm_module_init(mraa)
diff --git a/src/groveeldriver/groveeldriver.cxx b/src/groveeldriver/groveeldriver.cxx
deleted file mode 100644
index 322d666..0000000
--- a/src/groveeldriver/groveeldriver.cxx
+++ /dev/null
@@ -1,62 +0,0 @@
-/*
- * Author: Zion Orent <sorent@ics.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <string>
-#include <stdexcept>
-
-#include "groveeldriver.hpp"
-
-using namespace upm;
-
-GroveElDriver::GroveElDriver(int pin)
-{
-    if ( !(m_gpio = mraa_gpio_init(pin)) ) 
-      {
-        throw std::invalid_argument(std::string(__FUNCTION__) +
-                                    ": mraa_gpio_init() failed, invalid pin?");
-        return;
-      }
-    mraa_gpio_dir(m_gpio, MRAA_GPIO_OUT);
-}
-
-GroveElDriver::~GroveElDriver()
-{
-    mraa_gpio_close(m_gpio);
-}
-
-void GroveElDriver::on()
-{
-	mraa_result_t error = MRAA_SUCCESS;
-	error = mraa_gpio_write (m_gpio, HIGH);
-	if (error != MRAA_SUCCESS)
-		mraa_result_print(error);
-}
-
-void GroveElDriver::off()
-{
-	mraa_result_t error = MRAA_SUCCESS;
-	error = mraa_gpio_write (m_gpio, LOW);
-	if (error != MRAA_SUCCESS)
-		mraa_result_print(error);
-}
diff --git a/src/groveeldriver/groveeldriver.hpp b/src/groveeldriver/groveeldriver.hpp
deleted file mode 100644
index 458ac6a..0000000
--- a/src/groveeldriver/groveeldriver.hpp
+++ /dev/null
@@ -1,80 +0,0 @@
-/*
- * Author: Zion Orent <sorent@ics.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#pragma once
-
-#include <mraa/gpio.h>
-
-#define HIGH      1
-#define LOW       0
-
-namespace upm {
-  /**
-   * @deprecated This library is being replaced by libupm-eldriver
-   * @brief Grove EL Driver Module
-   * @defgroup groveeldriver libupm-groveeldriver
-   * @ingroup seeed gpio electric
-   */
-
-  /**
-   * @deprecated This class is being replaced by ElDriver
-   * @library groveeldriver
-   * @sensor groveeldriver
-   * @comname Electroluminescent (EL) Driver
-   * @type electric
-   * @man seeed
-   * @con gpio
-   *
-   * @brief API for the Grove EL Driver Module
-   * 
-   * The Grove EL Driver allows you to easily light up an
-   * EL wire with just one single Grove cable.
-   *
-   * @image html groveeldriver.jpg 
-   * @snippet groveeldriver.cxx Interesting
-   */
-  class GroveElDriver {
-  public:
-    /**
-     * Grove EL Driver constructor
-     *
-     * @param pin Digital pin to use
-     */
-    GroveElDriver(int pin);
-    /**
-     * Grove EL Driver destructor
-     */
-    ~GroveElDriver();
-    /**
-     * Turns the EL wire on
-     */
-     void on();
-    /**
-     * Turns the EL wire off
-     */
-     void off();
-
-  private:
-        mraa_gpio_context m_gpio;
-	};
-}
diff --git a/src/groveeldriver/groveeldriver.json b/src/groveeldriver/groveeldriver.json
deleted file mode 100644
index c993aa9..0000000
--- a/src/groveeldriver/groveeldriver.json
+++ /dev/null
@@ -1,40 +0,0 @@
-{
-    "Library": "groveeldriver",
-    "Description": "API for the Grove EL Driver Module",
-    "Sensor Class":
-    {
-        "GroveElDriver":
-        {
-            "Name": "Grove Electroluminescent Wire (EL) Driver",
-            "Description": "The Grove EL Driver allows you to easily light up an EL wire with just one single  cable.",
-            "Aliases": ["groveeldriver"],
-            "Categories": ["lighting", "deprecated"],
-            "Connections": ["gpio"],
-            "Project Type": ["prototyping", "commercial", "wearables"],
-            "Manufacturers": ["seeed"],
-            "Kits": [],
-            "Image": "groveeldriver.jpg",
-            "Examples":
-            {
-                "Java": [],
-                "Python": ["groveeldriver.py"],
-                "Node.js": ["groveeldriver.js"],
-                "C++": ["groveeldriver.cxx"],
-                "C": []
-            },
-            "Specifications":
-            {
-                "Operating Voltage": {"unit": "V", "low": 3.3, "high": 5},
-                "Operating Current": {"unit": "mA", "max": 300},
-                "Supported EL Capacitance": {"unit": "nF", "max": 15}
-
-            },
-            "Urls" :
-            {
-                "Product Pages": ["https://www.seeedstudio.com/Grove-EL-Driver-p-2269.html"],
-                "Datasheets": ["http://wiki.seeed.cc/Grove-EL_Driver/"],
-                "Schematics": ["https://raw.githubusercontent.com/SeeedDocument/Grove-EL_Driver/master/res/Grove-EL_Driver_v1.0.pdf"]
-            }
-        }
-    }
-}
diff --git a/src/groveelectromagnet/CMakeLists.txt b/src/groveelectromagnet/CMakeLists.txt
deleted file mode 100644
index 5353b63..0000000
--- a/src/groveelectromagnet/CMakeLists.txt
+++ /dev/null
@@ -1,5 +0,0 @@
-set (libname "groveelectromagnet")
-set (libdescription "Electromagnet")
-set (module_src ${libname}.cxx)
-set (module_hpp ${libname}.hpp)
-upm_module_init(mraa)
diff --git a/src/groveelectromagnet/groveelectromagnet.cxx b/src/groveelectromagnet/groveelectromagnet.cxx
deleted file mode 100644
index e7206f7..0000000
--- a/src/groveelectromagnet/groveelectromagnet.cxx
+++ /dev/null
@@ -1,62 +0,0 @@
-/*
- * Author: Zion Orent <sorent@ics.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <string>
-#include <stdexcept>
-
-#include "groveelectromagnet.hpp"
-
-using namespace upm;
-
-GroveElectromagnet::GroveElectromagnet(int pin)
-{
-    if ( !(m_gpio = mraa_gpio_init(pin)) ) 
-      {
-        throw std::invalid_argument(std::string(__FUNCTION__) +
-                                    ": mraa_gpio_init() failed, invalid pin?");
-        return;
-      }
-    mraa_gpio_dir(m_gpio, MRAA_GPIO_OUT);
-}
-
-GroveElectromagnet::~GroveElectromagnet()
-{
-    mraa_gpio_close(m_gpio);
-}
-
-void GroveElectromagnet::on()
-{
-	mraa_result_t error = MRAA_SUCCESS;
-	error = mraa_gpio_write (m_gpio, HIGH);
-	if (error != MRAA_SUCCESS)
-		mraa_result_print(error);
-}
-
-void GroveElectromagnet::off()
-{
-	mraa_result_t error = MRAA_SUCCESS;
-	error = mraa_gpio_write (m_gpio, LOW);
-	if (error != MRAA_SUCCESS)
-		mraa_result_print(error);
-}
diff --git a/src/groveelectromagnet/groveelectromagnet.hpp b/src/groveelectromagnet/groveelectromagnet.hpp
deleted file mode 100644
index c77402b..0000000
--- a/src/groveelectromagnet/groveelectromagnet.hpp
+++ /dev/null
@@ -1,79 +0,0 @@
-/*
- * Author: Zion Orent <sorent@ics.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#pragma once
-
-#include <mraa/gpio.h>
-
-#define HIGH      1
-#define LOW       0
-
-namespace upm {
-  /**
-   * @deprecated This library is being replaced by libupm-electromagnet
-   * @brief Grove Electromagnet Library
-   * @defgroup groveelectromagnet libupm-groveelectromagnet
-   * @ingroup seeed gpio electric
-   */
-
-  /**
-   * @deprecated This class is being replaced by Electromagnet
-   * @library groveelectromagnet
-   * @sensor groveelectromagnet
-   * @comname Electromagnet
-   * @type electric
-   * @man seeed
-   * @con gpio
-   *
-   * @brief API for the Grove Electromagnet
-   * 
-   * The Grove Electromagnet can hold up to 1 kg (approximately 2.2 lbs)
-   *
-   * @image html groveelectromagnet.jpg
-   * @snippet groveelectromagnet.cxx Interesting
-   */
-  class GroveElectromagnet {
-  public:
-    /**
-     * Grove Electromagnet constructor
-     *
-     * @param pin Digital pin to use
-     */
-    GroveElectromagnet(int pin);
-    /**
-     * Grove Electromagnet destructor
-     */
-    ~GroveElectromagnet();
-    /**
-     * Turns the magnet on
-     */
-     void on();
-    /**
-     * Turns the magnet off
-     */
-     void off();
-
-  private:
-        mraa_gpio_context m_gpio;
-	};
-}
diff --git a/src/groveelectromagnet/groveelectromagnet.json b/src/groveelectromagnet/groveelectromagnet.json
deleted file mode 100644
index 49794ac..0000000
--- a/src/groveelectromagnet/groveelectromagnet.json
+++ /dev/null
@@ -1,41 +0,0 @@
-{
-    "Library": "groveelectromagnet",
-    "Description": "Grove Electromagnet Library",
-    "Sensor Class":
-    {
-        "GroveElectromagnet":
-        {
-            "Name": "API for the Grove Electromagnet",
-            "Description": "The Grove Electromagnet can hold up to 1 kg (approximately 2.2 lbs)",
-            "Aliases": ["groveelectromagnet"],
-            "Categories": ["electric", "magnetic", "deprecated"],
-            "Connections": ["gpio"],
-            "Project Type": ["prototyping"],
-            "Manufacturers": ["seeed"],
-            "Kits": [],
-            "Image": "groveelectromagnet.jpg",
-            "Examples":
-            {
-                "Java": [],
-                "Python": ["groveelectromagnet.py"],
-                "Node.js": ["groveelectromagnet.js"],
-                "C++": ["groveelectromagnet.cxx"],
-                "C": []
-            },
-            "Specifications":
-            {
-                "Operating Voltage": {"unit": "V", "typ": 5},
-                "Operating Current": {"unit": "mA", "typ": 400},
-                "Standby Current": {"unit": "uA", "typ": 200},
-                "Max Load Weight": {"unit": "kgs", "typ": 1}
-
-            },
-            "Urls" :
-            {
-                "Product Pages": ["https://www.seeedstudio.com/Grove-Electromagnet-p-1820.html"],
-                "Datasheets": ["https://raw.githubusercontent.com/SeeedDocument/Grove-Electromagnet/master/res/ZYE1-P20-15.pdf", "http://wiki.seeed.cc/Grove-Electromagnet/"],
-                "Schematics": []
-            }
-        }
-    }
-}
diff --git a/src/groveemg/CMakeLists.txt b/src/groveemg/CMakeLists.txt
deleted file mode 100644
index c05d98c..0000000
--- a/src/groveemg/CMakeLists.txt
+++ /dev/null
@@ -1,5 +0,0 @@
-set (libname "groveemg")
-set (libdescription "Electromyography (EMG) Sensor")
-set (module_src ${libname}.cxx)
-set (module_hpp ${libname}.hpp)
-upm_module_init(mraa)
diff --git a/src/groveemg/groveemg.cxx b/src/groveemg/groveemg.cxx
deleted file mode 100644
index 538c6b5..0000000
--- a/src/groveemg/groveemg.cxx
+++ /dev/null
@@ -1,69 +0,0 @@
-/*
- * Author: Zion Orent <zorent@ics.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <iostream>
-#include <string>
-#include <stdexcept>
-
-#include "groveemg.hpp"
-
-using namespace upm;
-using namespace std;
-
-GroveEMG::GroveEMG(int pin)
-{
-    if ( !(m_aio = mraa_aio_init(pin)) )
-    {
-      throw std::invalid_argument(std::string(__FUNCTION__) +
-                                  ": mraa_aio_init() failed, invalid pin?");
-      return;
-    }
-}
-
-GroveEMG::~GroveEMG()
-{
-  mraa_aio_close(m_aio);
-}
-
-void GroveEMG::calibrate()
-{
-	int val, sum = 0;
-
-	for (int i=0; i<1100; i++)
-	{
-		val = mraa_aio_read(m_aio);
-                if (val != -1) throw std::runtime_error(std::string(__FUNCTION__) +
-                                                        ": Failed to do an aio read.");
-		sum += val;
-		usleep(1000);
-	}
-	sum /= 1100;
-	cout << "Static analog data = " << sum << endl;
-}
-
-int GroveEMG::value()
-{
-	int val = mraa_aio_read(m_aio);
-	return val;
-}
diff --git a/src/groveemg/groveemg.hpp b/src/groveemg/groveemg.hpp
deleted file mode 100644
index e5d4b07..0000000
--- a/src/groveemg/groveemg.hpp
+++ /dev/null
@@ -1,84 +0,0 @@
-/*
- * Author: Zion Orent <zorent@ics.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#pragma once
-
-#include <string>
-#include <mraa/aio.h>
-
-namespace upm {
-  /**
-   * @deprecated This library is being replaced by libupm-emg
-   * @brief Grove EMG Muscle Signal Reader
-   * @defgroup groveemg libupm-groveemg
-   * @ingroup seeed analog electric
-   */
-
-  /**
-   * @deprecated This class is being replaced by EMG
-   * @library groveemg
-   * @sensor groveemg
-   * @comname Electromyography (EMG) Sensor
-   * @type electric
-   * @man seeed
-   * @con analog
-   *
-   * @brief API for the Grove EMG Muscle Signal Reader
-   *
-   * Grove EMG muscle signal reader gathers small muscle signals,
-   * then processes them, and returns the result
-   *
-   * @image html emg.jpg
-   * @snippet groveemg.cxx Interesting
-   */
-  class GroveEMG {
-  public:
-    /**
-     * Grove EMG reader constructor
-     *
-     * @param pin Analog pin to use
-     */
-    GroveEMG(int pin);
-    /**
-     * GroveEMG destructor
-     */
-    ~GroveEMG();
-
-    /**
-     * Calibrates the Grove EMG reader
-     */
-    void calibrate();
-
-    /**
-     * Measures muscle signals from the reader
-     *
-     * @return Muscle output as analog voltage
-     */
-    int value();
-
-  private:
-    mraa_aio_context m_aio;
-  };
-}
-
-
diff --git a/src/groveemg/groveemg.json b/src/groveemg/groveemg.json
deleted file mode 100644
index 3b7dc80..0000000
--- a/src/groveemg/groveemg.json
+++ /dev/null
@@ -1,37 +0,0 @@
-{
-    "Library": "groveemg",
-    "Description": "Grove EMG Muscle Signal Reader Library",
-    "Sensor Class":
-    {
-        "GroveEMG":
-        {
-            "Name": "Grove Electromyography (EMG) Sensor",
-            "Description": "Grove EMG muscle signal reader gathers small muscle signals, then processes them, and returns the result.",
-            "Aliases": ["groveemg"],
-            "Categories": ["electromyography", "medical", "deprecated"],
-            "Connections": ["analog"],
-            "Project Type": ["wearables", "computer interfacing", "prototyping"],
-            "Manufacturers": ["seeed"],
-            "Kits": [],
-            "Examples":
-            {
-                "Java": ["GroveEmg_Example.java"],
-                "Python": ["groveemg.py"],
-                "Node.js": ["groveemg.js"],
-                "C++": ["groveemg.cxx"],
-                "C": []
-            },
-            "Specifications":
-            {
-                "Operating Voltage": {"unit": "V", "low": 3.3, "high": 5}
-
-            },
-            "Urls" :
-            {
-                "Product Pages": ["https://www.seeedstudio.com/Grove-EMG-Detector-p-1737.html"],
-                "Datasheets": ["http://wiki.seeed.cc/Grove-EMG_Detector/"],
-                "Schematics": ["https://raw.githubusercontent.com/SeeedDocument/Grove-EMG_Detector/master/res/Grove-EMG_Sensor_v1.1_SCH.pdf"]
-            }
-        }
-    }
-}
diff --git a/src/grovegprs/CMakeLists.txt b/src/grovegprs/CMakeLists.txt
deleted file mode 100644
index 233d5ca..0000000
--- a/src/grovegprs/CMakeLists.txt
+++ /dev/null
@@ -1,5 +0,0 @@
-set (libname "grovegprs")
-set (libdescription "GPRS Module")
-set (module_src ${libname}.cxx)
-set (module_hpp ${libname}.hpp)
-upm_module_init(mraa)
diff --git a/src/grovegprs/grovegprs.cxx b/src/grovegprs/grovegprs.cxx
deleted file mode 100644
index 4347d5f..0000000
--- a/src/grovegprs/grovegprs.cxx
+++ /dev/null
@@ -1,78 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <iostream>
-
-#include "grovegprs.hpp"
-
-using namespace upm;
-using namespace std;
-
-GroveGPRS::GroveGPRS(int uart) :
-  m_uart(uart)
-{
-}
-
-GroveGPRS::~GroveGPRS()
-{
-}
-
-bool GroveGPRS::dataAvailable(unsigned int millis)
-{
-  return m_uart.dataAvailable(millis);
-}
-
-int GroveGPRS::readData(char *buffer, unsigned int len)
-{
-  return m_uart.read(buffer, len);
-}
-
-std::string GroveGPRS::readDataStr(int len)
-{
-  return m_uart.readStr(len);
-}
-
-int GroveGPRS::writeData(char *buffer, unsigned int len)
-{
-  m_uart.flush();
-  return m_uart.write(buffer, len);
-}
-
-int GroveGPRS::writeDataStr(std::string data)
-{
-  m_uart.flush();
-  return m_uart.writeStr(data);
-}
-
-int GroveGPRS::setBaudRate(int baud)
-{
-  int ret_code = m_uart.setBaudRate(baud);
-  if (ret_code != mraa::SUCCESS) {
-    return ret_code;
-  } else {
-    return 0;
-  }
-  //return m_uart.setBaudRate(baud);
-}
-
diff --git a/src/grovegprs/grovegprs.hpp b/src/grovegprs/grovegprs.hpp
deleted file mode 100644
index cad7e7d..0000000
--- a/src/grovegprs/grovegprs.hpp
+++ /dev/null
@@ -1,156 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Thanks to Adafruit for supplying a google translated version of the
- * Chinese datasheet and some clues in their code.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#pragma once
-
-#include <string>
-#include <iostream>
-
-#include <stdlib.h>
-#include <unistd.h>
-#include <string.h>
-
-#include <mraa/common.hpp>
-#include <mraa/uart.hpp>
-
-#define GROVEGPRS_DEFAULT_UART 0
-
-namespace upm {
-    /**
-     * @deprecated This library is being replaced by libupm-gprs
-     * @brief Grove GPRS Module
-     * @defgroup grovegprs libupm-grovegprs
-     * @ingroup seeed uart wifi
-     */
-
-    /**
-     * @deprecated This class is being replaced by GPRS
-     * @library grovegprs
-     * @sensor grovegprs
-     * @comname GPRS Module
-     * @type wifi
-     * @man seeed
-     * @con uart
-     * @web http://www.seeedstudio.com/wiki/GPRS_Shield_V2.0
-     *
-     * @brief API for the Grove GPRS Module
-     *
-     * The driver was tested with the Grove GPRS Module, V2.  It's a
-     * GSM GPRS module based on the SIM900.  This module uses a
-     * standard 'AT' command set.  See the datasheet for a full list
-     * of available commands and their possible responses:
-     *
-     * http://www.seeedstudio.com/wiki/images/7/72/AT_Commands_v1.11.pdf
-     *
-     * It is connected via a UART at 19200 baud.
-     *
-     * @image html gprs.jpg
-     * @snippet grovegprs.cxx Interesting
-     */
-
-  class GroveGPRS {
-  public:
-
-    /**
-     * GroveGPRS object constructor
-     *
-     * @param uart Default UART to use (0 or 1). Default is 0.
-     */
-    GroveGPRS(int uart=GROVEGPRS_DEFAULT_UART);
-
-    /**
-     * GroveGPRS object destructor
-     */
-    ~GroveGPRS();
-
-    /**
-     * Checks to see if there is data available for reading
-     *
-     * @param millis Number of milliseconds to wait; 0 means no waiting
-     * @return true if there is data available for reading
-     */
-    bool dataAvailable(unsigned int millis);
-
-    /**
-     * Reads any available data into a user-supplied buffer. Note: the
-     * call blocks until data is available for reading. Use
-     * dataAvailable() to determine whether there is data available
-     * beforehand, to avoid blocking.
-     *
-     * @param buffer Buffer to hold the data read
-     * @param len Length of the buffer
-     * @return Number of bytes read
-     */
-    int readData(char *buffer, unsigned int len);
-
-    /**
-     * Reads any available data and returns it in a std::string. Note:
-     * the call blocks until data is available for reading. Use
-     * dataAvailable() to determine whether there is data available
-     * beforehand, to avoid blocking.
-     *
-     * @param len Maximum length of the data to be returned
-     * @return Number of bytes read
-     */
-    std::string readDataStr(int len);
-
-    /**
-     * Writes the data in the buffer to the device.  If you are
-     * writing a command, be sure to terminate it with a carriage
-     * return (\r)
-     *
-     * @param buffer Buffer to hold the data to write
-     * @param len Length of the buffer
-     * @return Number of bytes written
-     */
-    int writeData(char *buffer, unsigned len);
-
-    /**
-     * Writes the std:string data to the device.  If you are writing a
-     * command, be sure to terminate it with a carriage return (\r)
-     *
-     * @param data Buffer to write to the device
-     * @return Number of bytes written
-     */
-    int writeDataStr(std::string data);
-
-    /**
-     * Sets the baud rate for the device.  The default is 19200.
-     *
-     * @param baud Desired baud rate.
-     * @return true if successful
-     */
-    int setBaudRate(int baud=19200);
-
-
-  protected:
-    mraa::Uart m_uart;
-
-  private:
-  };
-}
-
-
diff --git a/src/grovegprs/grovegprs.i b/src/grovegprs/grovegprs.i
deleted file mode 100644
index dcedefe..0000000
--- a/src/grovegprs/grovegprs.i
+++ /dev/null
@@ -1,16 +0,0 @@
-%include "../common_top.i"
-
-/* BEGIN Java syntax  ------------------------------------------------------- */
-#ifdef SWIGJAVA
-JAVA_JNI_LOADLIBRARY(javaupm_grovegprs)
-#endif
-/* END Java syntax */
-
-/* BEGIN Common SWIG syntax ------------------------------------------------- */
-%include "carrays.i"
-%{
-#include "grovegprs.hpp"
-%}
-%include "grovegprs.hpp"
-%array_class(char, charArray);
-/* END Common SWIG syntax */
diff --git a/src/grovegprs/grovegprs.json b/src/grovegprs/grovegprs.json
deleted file mode 100644
index 462e380..0000000
--- a/src/grovegprs/grovegprs.json
+++ /dev/null
@@ -1,40 +0,0 @@
-{
-    "Library": "grovegprs",
-    "Description": "API for the Grove GPRS Module",
-    "Sensor Class":
-    {
-        "GroveGPRS":
-        {
-            "Name": "Grove General Packet Radio Service (GPRS) Module",
-            "Description": "The driver was tested with the Grove GPRS Module, V2.  It's a GSM GPRS module based on the SIM900.  This module uses a standard 'AT' command set.  See the datasheet for a full list of available commands and their possible responses.",
-            "Aliases": ["grovegprs"],
-            "Categories": ["wireless"],
-            "Connections": ["uart"],
-            "Project Type": ["prototyping", "wireless"],
-            "Manufacturers": ["seeed"],
-            "Kits": [],
-            "Image": "grovegprs.jpg",
-            "Examples":
-            {
-                "Java": [],
-                "Python": ["grovegprs.py"],
-                "Node.js": ["grovegprs.js"],
-                "C++": ["grovegprs.cxx"],
-                "C": []
-            },
-            "Specifications":
-            {
-                "Input Voltage (5v Pin)": {"unit": "V", "Typ": 5},
-                "Input Voltage (Vin Pin)": {"unit": "V", "low": 6.5, "high": 12},
-                "Power Consumption": {"unit": "mA", "low": 1.5},
-                "Operating Temperature": {"unit": "degC", "low": -40, "high": 85}
-            },
-            "Urls" :
-            {
-                "Product Pages": ["https://www.seeedstudio.com/GPRS-Shield-V3.0-p-2333.html"],
-                "Datasheets": ["http://www.seeedstudio.com/document/SIM900datasheeet.zip", "http://wiki.seeedstudio.com/wiki/GPRS_Shield_V3.0", "http://www.seeedstudio.com/wiki/images/7/72/AT_Commands_v1.11.pdf", "http://garden.seeedstudio.com/images/a/a8/SIM900_AT_Command_Manual_V1.03.pdf", "http://garden.seeedstudio.com/images/a/a0/SIM900_ATC_V1_00.pdf"],
-                "Schematics": ["http://www.seeedstudio.com/wiki/File:GPRS_Shield_v3.0.pdf"]
-            }
-        }
-    }
-}
diff --git a/src/grovegsr/CMakeLists.txt b/src/grovegsr/CMakeLists.txt
deleted file mode 100644
index b406743..0000000
--- a/src/grovegsr/CMakeLists.txt
+++ /dev/null
@@ -1,5 +0,0 @@
-set (libname "grovegsr")
-set (libdescription "Galvanic Skin Response (GSR) Sensor")
-set (module_src ${libname}.cxx)
-set (module_hpp ${libname}.hpp)
-upm_module_init(mraa)
diff --git a/src/grovegsr/grovegsr.cxx b/src/grovegsr/grovegsr.cxx
deleted file mode 100644
index 17b19c5..0000000
--- a/src/grovegsr/grovegsr.cxx
+++ /dev/null
@@ -1,70 +0,0 @@
-/*
- * Author: Zion Orent <zorent@ics.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <iostream>
-#include <string>
-#include <stdexcept>
-
-#include "grovegsr.hpp"
-
-using namespace upm;
-using namespace std;
-
-GroveGSR::GroveGSR(int pin)
-{
-    if ( !(m_aio = mraa_aio_init(pin)) )
-    {
-      throw std::invalid_argument(std::string(__FUNCTION__) +
-                                  ": mraa_aio_init() failed, invalid pin?");
-      return;
-    }
-}
-
-GroveGSR::~GroveGSR()
-{
-  mraa_aio_close(m_aio);
-}
-
-void GroveGSR::calibrate()
-{
-	sleep(1);
-	int val, threshold, sum = 0;
-
-	for(int i=0; i<500; i++)
-	{
-		val = mraa_aio_read(m_aio);
-		if (val != -1) throw std::runtime_error(std::string(__FUNCTION__) +
-			                                ": Failed to do an aio read.");
-		sum += val;
-		usleep(5000);
-	}
-	threshold = sum / 500;
-	cout << "Threshold = " << threshold << endl;
-}
-
-int GroveGSR::value()
-{
-	int val = mraa_aio_read(m_aio);
-	return val;
-}
diff --git a/src/grovegsr/grovegsr.hpp b/src/grovegsr/grovegsr.hpp
deleted file mode 100644
index 4cca035..0000000
--- a/src/grovegsr/grovegsr.hpp
+++ /dev/null
@@ -1,86 +0,0 @@
-/*
- * Author: Zion Orent <zorent@ics.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#pragma once
-
-#include <string>
-#include <mraa/aio.h>
-
-namespace upm {
-  /**
-   * @deprecated This library is being replaced by libupm-gsr
-   * @brief Grove GSR Galvanic Skin Response Sensor
-   * @defgroup grovegsr libupm-grovegsr
-   * @ingroup seeed analog electric
-   */
-
-  /**
-   * @deprecated This class is being replaced by GSR
-   * @library grovegsr
-   * @sensor grovegsr
-   * @comname Galvanic Skin Response (GSR) Sensor
-   * @type electric
-   * @man seeed
-   * @con analog
-   *
-   * @brief API for the Grove GSR Galvanic Skin Response Sensor
-   * 
-   * Measures the electrical conductance of skin
-   * to measure strong emotional reactions.
-   * In other words, it measures sweat on your fingers
-   * as an indicator of strong emotional reactions.
-   *
-   * @image html gsr.jpg
-   * @snippet grovegsr.cxx Interesting
-   */
-  class GroveGSR {
-  public:
-    /**
-     * Grove GSR sensor constructor
-     *
-     * @param pin Analog pin to use
-     */
-    GroveGSR(int pin);
-    /**
-     * GroveGSR destructor
-     */
-    ~GroveGSR();
-
-    /**
-     * Calibrates the Grove GSR sensor
-     */
-    void calibrate();
-
-    /**
-     * Gets the electrical conductance of the skin from the sensor
-     *
-     * @return Electrical conductance of the skin
-     */
-    int value();
-
-  private:
-    mraa_aio_context m_aio;
-  };
-}
-
-
diff --git a/src/grovegsr/grovegsr.json b/src/grovegsr/grovegsr.json
deleted file mode 100644
index a1e1ddc..0000000
--- a/src/grovegsr/grovegsr.json
+++ /dev/null
@@ -1,38 +0,0 @@
-{
-    "Library": "grovegsr",
-    "Description": "API for the Grove GSR Galvanic Skin Response Sensor",
-    "Sensor Class":
-    {
-        "GroveGSR":
-        {
-            "Name": "Galvanic Skin Response (GSR) Sensor",
-            "Description": "Measures the electrical conductance of skin to measure strong emotional reactions. In other words, it measures sweat on your fingers as an indicator of strong emotional reactions.",
-            "Aliases": ["grovegsr"],
-            "Categories": ["skinresponse"],
-            "Connections": ["analog"],
-            "Project Type": ["medical", "interface", "wearables", "prototyping"],
-            "Manufacturers": ["seeed"],
-            "Kits": [],
-            "Examples":
-            {
-                "Java": ["GroveGsr_Example.java"],
-                "Python": ["grovegsr.py"],
-                "Node.js": ["grovegsr.js"],
-                "C++": ["grovegsr.cxx"],
-                "C": []
-            },
-            "Specifications":
-            {
-                "Operating Voltage": {"unit": "V", "low": 3.3, "high": 5},
-                "Operating Current": {"unit": "mA", "low": 0.7, "high": 3},
-                "Operating Temperature": {"unit": "degC", "min": 0, "max": 70}
-            },
-            "Urls" :
-            {
-                "Product Pages": ["https://www.seeedstudio.com/Grove-GSR-sensor-p-1614.html"],
-                "Datasheets": ["http://wiki.seeed.cc/Grove-GSR_Sensor/", "file:///C:/Users/Malachai/Downloads/Lm324.pdf"],
-                "Schematics": ["https://github.com/SeeedDocument/Grove-GSR_Sensor/raw/master/res/Grove%20-%20GSR_v1.2_SCH.pdf", "https://github.com/SeeedDocument/Grove-GSR_Sensor/raw/master/res/Grove%20-%20GSR%20v1.0%20SCH.pdf"]
-            }
-        }
-    }
-}
diff --git a/src/grovelinefinder/CMakeLists.txt b/src/grovelinefinder/CMakeLists.txt
deleted file mode 100644
index f2ed089..0000000
--- a/src/grovelinefinder/CMakeLists.txt
+++ /dev/null
@@ -1,5 +0,0 @@
-set (libname "grovelinefinder")
-set (libdescription "Line Finder")
-set (module_src ${libname}.cxx)
-set (module_hpp ${libname}.hpp)
-upm_module_init(mraa)
diff --git a/src/grovelinefinder/grovelinefinder.cxx b/src/grovelinefinder/grovelinefinder.cxx
deleted file mode 100644
index 3f4f55c..0000000
--- a/src/grovelinefinder/grovelinefinder.cxx
+++ /dev/null
@@ -1,59 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2014 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <iostream>
-#include <string>
-#include <stdexcept>
-
-#include "grovelinefinder.hpp"
-
-using namespace upm;
-using namespace std;
-
-GroveLineFinder::GroveLineFinder(int pin)
-{
-  if ( !(m_gpio = mraa_gpio_init(pin)) )
-    {
-      throw std::invalid_argument(std::string(__FUNCTION__) +
-                                  ": mraa_gpio_init() failed, invalid pin?");
-      return;
-    }
-
-  mraa_gpio_dir(m_gpio, MRAA_GPIO_IN);
-}
-
-GroveLineFinder::~GroveLineFinder()
-{
-  mraa_gpio_close(m_gpio);
-}
-
-bool GroveLineFinder::whiteDetected()
-{
-  return (!mraa_gpio_read(m_gpio) ? true : false);
-}
-
-bool GroveLineFinder::blackDetected()
-{
-  return (mraa_gpio_read(m_gpio) ? true : false);
-}
diff --git a/src/grovelinefinder/grovelinefinder.hpp b/src/grovelinefinder/grovelinefinder.hpp
deleted file mode 100644
index 442070d..0000000
--- a/src/grovelinefinder/grovelinefinder.hpp
+++ /dev/null
@@ -1,86 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2014 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#pragma once
-
-#include <string>
-#include <mraa/gpio.h>
-
-namespace upm {
-  /**
-   * @deprecated This library is being replaced by libupm-linefinder
-   * @brief Grove Line Finder Sensor
-   * @defgroup grovelinefinder libupm-grovelinefinder
-   * @ingroup seeed gpio color robok
-   */
-
-  /**
-   * @deprecated This class is being replaced by LineFinder
-   * @library grovelinefinder
-   * @sensor grovelinefinder
-   * @comname Line Finder
-   * @type color
-   * @man seeed
-   * @con gpio
-   * @kit robok
-   *
-   * @brief API for the Grove Line Finder Sensor
-   *
-   * UPM module for the Grove Line Finder sensor.  It outputs a
-   * digital signal indicating whether it is detecting black on a
-   * white background, or white on a black background.
-   *
-   * @image html grovelinefinder.jpg
-   * @snippet grovelinefinder.cxx Interesting
-   */
-  class GroveLineFinder {
-  public:
-    /**
-     * Grove Line Finder digital sensor constructor
-     *
-     * @param pin Digital pin to use
-     */
-    GroveLineFinder(int pin);
-    /**
-     * GroveLineFinder destructor
-     */
-    ~GroveLineFinder();
-    /**
-     * Determines whether white has been detected
-     *
-     * @return True if white is detected
-     */
-    bool whiteDetected();
-    /**
-     * Determines whether black has been detected
-     *
-     * @return True if black is detected
-     */
-    bool blackDetected();
-
-  private:
-    mraa_gpio_context m_gpio;
-  };
-}
-
-
diff --git a/src/grovelinefinder/grovelinefinder.json b/src/grovelinefinder/grovelinefinder.json
deleted file mode 100644
index 8976b8e..0000000
--- a/src/grovelinefinder/grovelinefinder.json
+++ /dev/null
@@ -1,40 +0,0 @@
-{
-    "Library": "grovelinefinder",
-    "Description": "Grove Line Finder Sensor Library",
-    "Sensor Class":
-    {
-        "GroveLineFinder":
-        {
-            "Name": "Infrared (IR) Based Line Finder",
-            "Description": "UPM module for the Line Finder sensor. It outputs a digital signal indicating whether it is detecting black on a white background, or white on a black background.",
-            "Aliases": ["grovelinefinder"],
-            "Categories": ["grovelinefinder"],
-            "Connections": ["gpio"],
-            "Project Type": ["robotics", "prototyping"],
-            "Manufacturers": ["seeed", "dfrobot"],
-            "Kits": ["robok"],
-            "Image": "grovelinefinder.jpg",
-            "Examples":
-            {
-                "Java": ["GroveLineFinder_Example.java"],
-                "Python": ["grovelinefinder.py"],
-                "Node.js": ["grovelinefinder.js"],
-                "C++": ["grovelinefinder.cxx"],
-                "C": []
-            },
-            "Specifications":
-            {
-                "Operating Voltage": {"unit": "V", "low": 2.7, "high": 5.5},
-                "Operating Current": {"unit": "uA", "typ": 210},
-                "Operating Temperature": {"unit": "degC", "low": -40, "high": 125}
-
-            },
-            "Urls" :
-            {
-                "Product Pages": ["https://www.seeedstudio.com/Grove-Line-Finder-v1.1-p-2712.html"],
-                "Datasheets": ["file:///C:/Users/Malachai/Downloads/Lmv358.pdf", "http://wiki.seeed.cc/Grove-Line_Finder/"],
-                "Schematics": ["https://easyeda.com/Seeed/Grove_Line_Finder_v1_1-dfc99c72325e41ff93a451882fd2e143"]
-            }
-        }
-    }
-}
diff --git a/src/grovemd/CMakeLists.txt b/src/grovemd/CMakeLists.txt
deleted file mode 100644
index 4885bce..0000000
--- a/src/grovemd/CMakeLists.txt
+++ /dev/null
@@ -1,5 +0,0 @@
-set (libname "grovemd")
-set (libdescription "I2C Motor Driver")
-set (module_src ${libname}.cxx)
-set (module_hpp ${libname}.hpp)
-upm_module_init(mraa)
diff --git a/src/grovemd/grovemd.cxx b/src/grovemd/grovemd.cxx
deleted file mode 100644
index fcf83ac..0000000
--- a/src/grovemd/grovemd.cxx
+++ /dev/null
@@ -1,244 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2014 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <unistd.h>
-#include <iostream>
-#include <string>
-#include <stdexcept>
-
-#include "grovemd.hpp"
-
-using namespace upm;
-using namespace std;
-
-
-GroveMD::GroveMD(int bus, uint8_t address) :
-  m_i2c(bus)
-{
-  m_addr = address;
-
-  // this board *requires* 100Khz i2c bus only
-  mraa::Result rv;
-  if ( (rv = m_i2c.frequency(mraa::I2C_STD)) != mraa::SUCCESS )
-    {
-      throw std::invalid_argument(std::string(__FUNCTION__) +
-                                  ": I2c.frequency(I2C_STD) failed");
-      return;
-    }
-
-  if (m_i2c.address(m_addr))
-    {
-      throw std::runtime_error(std::string(__FUNCTION__) +
-                               ": I2c.address() failed");
-      return;
-    }
-
-  initClock();
-  // default to mode1 stepper operation, 200 steps per rev.
-  configStepper(200, STEP_MODE1);
-}
-
-GroveMD::~GroveMD()
-{
-  setMotorSpeeds(0, 0);
-  writePacket(SET_DIRECTION, 0, GROVEMD_NOOP);
-}
-
-bool GroveMD::writePacket(REG_T reg, uint8_t data1, uint8_t data2)
-{
-  uint8_t buf[3];
-
-  buf[0] = reg;
-  buf[1] = data1;
-  buf[2] = data2;
-
-  if ( m_i2c.write(buf, 3) != mraa::SUCCESS )
-    {
-      throw std::runtime_error(std::string(__FUNCTION__) +
-                               ": I2c.write() failed");
-      return false;
-    }
-
-  // This sleep appears to be required.  Without it, writes randomly
-  // fail (no ACK received).  This happens most often on the SET_SPEED
-  // packet.  I am guessing that there is a timing problem and/or bug
-  // in the motor driver's firmware.
-
-  usleep(100);
-
-  return true;
-}
-
-bool GroveMD::setMotorSpeeds(uint8_t speedA, uint8_t speedB)
-{
-  return writePacket(SET_SPEED, speedA, speedB);
-}
-
-bool GroveMD::setPWMFrequencyPrescale(uint8_t freq)
-{
-  return writePacket(SET_PWM_FREQ, freq, GROVEMD_NOOP);
-}
-
-bool GroveMD::setMotorDirections(DC_DIRECTION_T dirA, DC_DIRECTION_T dirB)
-{
-  uint8_t dir = ((dirB & 0x03) << 2) | (dirA & 0x03);
-  return writePacket(SET_DIRECTION, dir, GROVEMD_NOOP);
-}
-
-bool GroveMD::enableStepper(STEP_DIRECTION_T dir, uint8_t speed)
-{
-  // If mode 2, send the command and return immediately
-  if (m_stepMode == STEP_MODE2)
-    return writePacket(STEPPER_ENABLE, dir, speed);
-
-  // otherwise, mode 1, setup the basics and start stepping.
-
-  m_stepDelay = 60 * 1000 / m_stepsPerRev / speed;
-  m_stepDirection = ((dir == STEP_DIR_CW) ? 1 : -1);
-
-  // seeed says speed should always be 255,255 for stepper operation
-  setMotorSpeeds(255, 255);
-
-  while (m_totalSteps > 0)
-    {
-      if (getMillis() >= m_stepDelay)
-        {
-          // reset the clock
-          initClock();
-
-          m_currentStep += m_stepDirection;
-
-          if (m_stepDirection == 1)
-            {
-              if (m_currentStep >= m_stepsPerRev)
-                m_currentStep = 0;
-            }
-          else
-            {
-              if (m_currentStep <= 0)
-                m_currentStep = m_stepsPerRev;
-            }
-
-          m_totalSteps--;
-          stepperStep();
-        }
-    }
-
-  // and... we're done
-  return true;
-}
-
-bool GroveMD::disableStepper()
-{
-  if (m_stepMode == STEP_MODE2)
-    return writePacket(STEPPER_DISABLE, GROVEMD_NOOP, GROVEMD_NOOP);
-
-  // else, mode 1
-  writePacket(SET_DIRECTION, 0, GROVEMD_NOOP);
-  return setMotorSpeeds(0, 0);
-}
-
-bool GroveMD::setStepperSteps(unsigned int steps)
-{
-  if (m_stepMode == STEP_MODE2)
-    {
-      if (steps == 0)
-        {
-          // invalid
-          throw std::out_of_range(std::string(__FUNCTION__) +
-                                  ": invalid number of steps.  " +
-                                  "Valid values are between 1 and 255.");
-          return false;
-        }
-      return writePacket(STEPPER_NUM_STEPS, steps, GROVEMD_NOOP);
-    }
-
-  // for mode one, just store it for future use by enableStepper()
-  m_totalSteps = steps;
-  return true;
-}
-
-void GroveMD::initClock()
-{
-  gettimeofday(&m_startTime, NULL);
-}
-
-uint32_t GroveMD::getMillis()
-{
-  struct timeval elapsed, now;
-  uint32_t elapse;
-
-  // get current time
-  gettimeofday(&now, NULL);
-
-  // compute the delta since m_startTime
-  if( (elapsed.tv_usec = now.tv_usec - m_startTime.tv_usec) < 0 )
-    {
-      elapsed.tv_usec += 1000000;
-      elapsed.tv_sec = now.tv_sec - m_startTime.tv_sec - 1;
-    }
-  else
-    {
-      elapsed.tv_sec = now.tv_sec - m_startTime.tv_sec;
-    }
-
-  elapse = (uint32_t)((elapsed.tv_sec * 1000) + (elapsed.tv_usec / 1000));
-
-  // never return 0
-  if (elapse == 0)
-    elapse = 1;
-
-  return elapse;
-}
-
-void GroveMD::configStepper(unsigned int stepsPerRev, STEP_MODE_T mode)
-{
-  m_stepsPerRev = stepsPerRev;
-  m_stepMode = mode;
-  m_currentStep = 0;
-  m_stepDelay = 0;
-  m_stepDirection = 1;
-  m_totalSteps = 0;
-}
-
-void GroveMD::stepperStep()
-{
-  int step = m_currentStep % 4;
-
-  switch (step)
-    {
-    case 0:
-      writePacket(SET_DIRECTION, 0b0101, GROVEMD_NOOP);
-      break;
-    case 1:
-      writePacket(SET_DIRECTION, 0b0110, GROVEMD_NOOP);
-      break;
-    case 2:
-      writePacket(SET_DIRECTION, 0b1010, GROVEMD_NOOP);
-      break;
-    case 3:
-      writePacket(SET_DIRECTION, 0b1001, GROVEMD_NOOP);
-      break;
-    }
-}
diff --git a/src/grovemd/grovemd.hpp b/src/grovemd/grovemd.hpp
deleted file mode 100644
index 8f3439f..0000000
--- a/src/grovemd/grovemd.hpp
+++ /dev/null
@@ -1,257 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2014 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#pragma once
-
-#include <stdint.h>
-#include <sys/time.h>
-#include <string>
-#include <mraa/types.hpp>
-#include <mraa/i2c.hpp>
-
-#define GROVEMD_I2C_BUS 0
-#define GROVEMD_DEFAULT_I2C_ADDR 0x0f
-
-namespace upm {
-  /**
-   * @deprecated This library is being replaced by libupm-md
-   * @brief Grove I2C Motor Driver
-   * @defgroup grovemd libupm-grovemd
-   * @ingroup seeed i2c motor robok
-   */
-
-  /**
-   * @deprecated This class is being replaced by MD
-   * @library grovemd
-   * @sensor grovemd
-   * @comname I2C Motor Driver
-   * @type motor
-   * @man seeed
-   * @con i2c
-   * @kit robok
-   *
-   * @brief API for the Grove I2C Motor Driver 
-   *
-   * This class implements support for the Grove I2C Motor Driver.
-   * This device can support a single 4-wire stepper motor, or two
-   * 2-wire DC motors. The device contains an Atmel* ATmega8L
-   * microcontroller that manages an L298N H-bridge driver chip.
-   *
-   * This device supports an I2C bus speed of 100Khz only.
-   *
-   * The module does not provide any telemetry or status - it only
-   * accepts I2C commands for its various operations.
-   *
-   * This module was tested with version 1.3 of the Grove I2C Motor
-   * Driver.
-   *
-   * For stepper operation, this driver can run in one of two modes -
-   * Mode 1, where this driver handles the stepping operation, and
-   * Mode 2, where this driver simply sends commands to the Grove
-   * Motor Driver, and it handles the stepping operation.  Mode2
-   * requires updated (and working) firmware to be loaded onto the
-   * device.
-   *
-   * The default stepper operation mode is Mode1, which is generally
-   * more flexible and is supported on all firmware revisions.
-   *
-   * @image html grovemd.jpg
-   * An example showing the use of a DC motor
-   * @snippet grovemd.cxx Interesting
-   * An example showing the use of a 4-wire stepper
-   * @snippet grovemd-stepper.cxx Interesting
-   */
-  class GroveMD {
-
-  public:
-    // GroveMD registers
-    typedef enum { SET_SPEED           = 0x82,
-                   SET_PWM_FREQ        = 0x84,
-                   SET_DIRECTION       = 0xaa,
-                   SET_MOTOR_A         = 0xa1, // not documented
-                   SET_MOTOR_B         = 0xa5, // not documented
-                   STEPPER_ENABLE      = 0x1a, 
-                   STEPPER_DISABLE     = 0x1b,
-                   STEPPER_NUM_STEPS   = 0x1c
-    } REG_T;
-
-    // legal directions for the stepper
-    typedef enum { STEP_DIR_CCW    = 0x01,
-                   STEP_DIR_CW     = 0x00
-    } STEP_DIRECTION_T;
-    
-    // legal directions for individual DC motors
-    typedef enum { DIR_CCW    = 0x02,
-                   DIR_CW     = 0x01
-    } DC_DIRECTION_T;
-    
-    // stepper modes
-    typedef enum { STEP_MODE1 = 0x00,
-                   STEP_MODE2 = 0x01
-    } STEP_MODE_T;
-    
-    /**
-     * GroveMD constructor
-     *
-     * @param bus I2C bus to use
-     * @param address I2C address to use
-     */
-    GroveMD(int bus=GROVEMD_I2C_BUS, 
-            uint8_t address=GROVEMD_DEFAULT_I2C_ADDR);
-
-    /**
-     * GroveMD destructor
-     */
-    ~GroveMD();
-
-    /**
-     * Composes and writes a 3-byte packet to the controller
-     *
-     * @param reg Register location
-     * @param data1 First byte of data
-     * @param data2 Second byte of data
-     * @return True if successful
-     */
-    bool writePacket(REG_T reg, uint8_t data1, uint8_t data2);
-
-    /**
-     * To control DC motors, sets the speed of motors A & B.
-     * Valid values are 0-255.
-     *
-     * @param speedA Speed of motor A
-     * @param speedB Speed of motor B
-     * @return True if successful
-     */
-    bool setMotorSpeeds(uint8_t speedA, uint8_t speedB);
-
-    /**
-     * To control DC motors, sets the PWM frequency prescale
-     * factor. Note: this register is not ducumented other than to say
-     * the default value is 0x03. Presumably, this is the timer
-     * prescale factor used on the ATMega MCU timer driving the PWM.
-     *
-     * @param freq PWM prescale frequency; default is 0x03
-     * @return True if successful
-     */
-    bool setPWMFrequencyPrescale(uint8_t freq=0x03);
-
-    /**
-     * To control DC motors, sets the directions of motors A & B
-     *
-     * @param dirA Direction for motor A, DIR_CW or DIR_CCW
-     * @param dirB Direction for motor B, DIR_CW or DIR_CCW
-     * @return True if successful
-     */
-    bool setMotorDirections(DC_DIRECTION_T dirA, DC_DIRECTION_T dirB);
-
-    /**
-     * To control a stepper motor, sets its direction and speed, and
-     * then starts operation.  For Mode2, this method will return
-     * immediately.  For Mode1 (the default) this method returns when
-     * the number of steps specified by setStepperSteps() has
-     * completed.
-     *
-     * @param dir Direction, STEP_DIR_CW or STEP_DIR_CCW
-     * @param speed Motor speed. Valid range is 1-255. For Mode 1
-     * (default), this specifies the speed in RPM's.  For Mode 2,
-     * speed is multiplied by 4ms by the board, so higher numbers
-     * will mean a slower speed.
-     * @return True if successful
-     */
-    bool enableStepper(STEP_DIRECTION_T dir, uint8_t speed);
-
-    /**
-     * To control a stepper motor, stops the stepper motor.
-     *
-     * @return True if successful
-     */
-    bool disableStepper();
-
-    /**
-     * To control a stepper motor, specifies the number of steps to
-     * execute. For Mode2, valid values are between 1-255, 255 means
-     * continuous rotation.
-     *
-     * For Mode1 (the default) steps can be any positive integer.
-     *
-     * @param steps Number of steps to execute. 255 (only in Mode2)
-     * means continuous rotation.  
-     * @return True if successful
-     */
-    bool setStepperSteps(unsigned int steps);
-
-    /**
-     * Configure the initial Stepper parameters.  This should be
-     * called before any other stepper method.
-     *
-     * @param stepsPerRev The number of steps required to complete one
-     * full revolution.
-     * @param mode The stepper operating mode, default STEP_MODE1
-     * @return Elapsed milliseconds
-     */
-    void configStepper(unsigned int stepsPerRev, STEP_MODE_T mode=STEP_MODE1);
-
-  protected:
-    mraa::I2c m_i2c;
-    uint8_t m_addr;
-
-  private:
-    // steps per revolution
-    int m_stepsPerRev;
-    int m_currentStep;
-    uint32_t m_stepDelay;
-    uint32_t m_totalSteps;
-    STEP_MODE_T m_stepMode;
-
-    /**
-     * Steps the motor one tick
-     *
-     */
-    void stepperStep();
-
-    // step direction: - 1 = forward, -1 = backward
-    int m_stepDirection;
-
-    // This is a NOOP value used to pad packets
-    static const uint8_t GROVEMD_NOOP = 0x01;
-    // our timer
-    struct timeval m_startTime;
-
-    /**
-     * Returns the number of milliseconds elapsed since initClock()
-     * was last called.
-     *
-     * @return Elapsed milliseconds
-     */
-    uint32_t getMillis();
-
-    /**
-     * Resets the clock
-     *
-     */
-    void initClock();
-
-  };
-}
-
-
diff --git a/src/grovemoisture/CMakeLists.txt b/src/grovemoisture/CMakeLists.txt
deleted file mode 100644
index df307ab..0000000
--- a/src/grovemoisture/CMakeLists.txt
+++ /dev/null
@@ -1,5 +0,0 @@
-set (libname "grovemoisture")
-set (libdescription "Moisture Sensor")
-set (module_src ${libname}.cxx)
-set (module_hpp ${libname}.hpp)
-upm_module_init(mraa)
diff --git a/src/grovemoisture/grovemoisture.cxx b/src/grovemoisture/grovemoisture.cxx
deleted file mode 100644
index aa44e78..0000000
--- a/src/grovemoisture/grovemoisture.cxx
+++ /dev/null
@@ -1,48 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2014 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <iostream>
-#include <string>
-#include <stdexcept>
-
-#include "grovemoisture.hpp"
-
-using namespace upm;
-
-GroveMoisture::GroveMoisture(int pin)
-{
-  if ( !(m_aio = mraa_aio_init(pin)) )
-    throw std::invalid_argument(std::string(__FUNCTION__) +
-                                ": mraa_aio_init() failed, invalid pin?");
-}
-
-GroveMoisture::~GroveMoisture()
-{
-  mraa_aio_close(m_aio);
-}
-
-int GroveMoisture::value()
-{
-  return mraa_aio_read(m_aio);
-}
diff --git a/src/grovemoisture/grovemoisture.hpp b/src/grovemoisture/grovemoisture.hpp
deleted file mode 100644
index b80db60..0000000
--- a/src/grovemoisture/grovemoisture.hpp
+++ /dev/null
@@ -1,83 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2014 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#pragma once
-
-#include <string>
-#include <mraa/aio.h>
-
-namespace upm {
-  /**
-   * @deprecated This library is being replaced by libupm-moisture
-   * @brief Grove Moisture Sensor
-   * @defgroup grovemoisture libupm-grovemoisture
-   * @ingroup seeed analog liquid eak hak
-   */
-
-  /**
-   * @deprecated This class is being replaced by Moisture
-   * @library grovemoisture
-   * @sensor grovemoisture
-   * @comname Moisture Sensor
-   * @type liquid
-   * @man seeed
-   * @con analog
-   * @kit eak hak
-   *
-   * @brief API for the Grove Moisture Sensor
-   *
-   * UPM module for the Grove Moisture Sensor.
-   * This sensor can be used to detect the moisture content
-   * of soil or whether there is water around the sensor.
-   * As the moisture content increases, so does the value that is read.
-   * Note: this sensor is not designed to be left in soil
-   * nor to be used outdoors.
-   *
-   * @image html grovemoisture.jpg
-   * @snippet grovemoisture.cxx Interesting
-   */
-  class GroveMoisture {
-  public:
-    /**
-     * Grove analog moisture sensor constructor
-     *
-     * @param pin Analog pin to use
-     */
-    GroveMoisture(int pin);
-    /**
-     * GroveMoisture destructor
-     */
-    ~GroveMoisture();
-    /**
-     * Gets the moisture value from the sensor
-     *
-     * @return Moisture reading
-     */
-    int value();
-
-  private:
-    mraa_aio_context m_aio;
-  };
-}
-
-
diff --git a/src/grovemoisture/grovemoisture.json b/src/grovemoisture/grovemoisture.json
deleted file mode 100644
index 97ed506..0000000
--- a/src/grovemoisture/grovemoisture.json
+++ /dev/null
@@ -1,38 +0,0 @@
-{
-    "Library": "grovemoisture",
-    "Description": "API for the Grove Moisture Sensor",
-    "Sensor Class":
-    {
-        "GroveMoisture":
-        {
-            "Name": "Grove Moisture Sensor",
-            "Description": "UPM module for the Grove Moisture Sensor. This sensor can be used to detect the moisture content of soil or whether there is water around the sensor. As the moisture content increases, so does the value that is read. Note: this sensor is not designed to be left in soil nor to be used outdoors.",
-            "Aliases": ["grovemoisture"],
-            "Categories": ["moisture"],
-            "Connections": ["analog"],
-            "Project Type": ["liquid", "prototyping"],
-            "Manufacturers": ["seeed"],
-            "Kits": ["eak", "hak"],
-            "Image": "grovemoisture.jpg",
-            "Examples":
-            {
-                "Java": ["GroveMoisture_Example.java"],
-                "Python": ["grovemoisture.py"],
-                "Node.js": ["grovemoisture.js"],
-                "C++": ["grovemoisture.cxx"],
-                "C": []
-            },
-            "Specifications": {
-                "Vsource": {"unit": "V", "min": 3.3, "max": 5 },
-                "Operating Temperature": {"unit": "°C", "min": -40, "max": 85 },
-                "Supply Current": {"unit": "mA", "min" : 0, "max" : 35 }
-            },
-            "Urls" :
-            {
-                "Product Pages": ["https://www.seeedstudio.com/Grove-Moisture-Sensor-p-955.html"],
-                "Datasheets": ["http://wiki.seeed.cc/Grove-Moisture_Sensor/"],
-                "Schematics": []
-            }
-        }
-    }
-}
diff --git a/src/groveo2/CMakeLists.txt b/src/groveo2/CMakeLists.txt
deleted file mode 100644
index c83dd9c..0000000
--- a/src/groveo2/CMakeLists.txt
+++ /dev/null
@@ -1,5 +0,0 @@
-set (libname "groveo2")
-set (libdescription "Oxygen (O2) Concentration Sensor")
-set (module_src ${libname}.cxx)
-set (module_hpp ${libname}.hpp)
-upm_module_init(mraa)
diff --git a/src/groveo2/groveo2.cxx b/src/groveo2/groveo2.cxx
deleted file mode 100644
index b982d3f..0000000
--- a/src/groveo2/groveo2.cxx
+++ /dev/null
@@ -1,56 +0,0 @@
-/*
- * Author: Zion Orent <zorent@ics.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <iostream>
-#include <string>
-#include <stdexcept>
-
-#include "groveo2.hpp"
-
-using namespace upm;
-using namespace std;
-
-GroveO2::GroveO2(int pin)
-{
-    if ( !(m_aio = mraa_aio_init(pin)) )
-    {
-      throw std::invalid_argument(std::string(__FUNCTION__) +
-                                  ": mraa_aio_init() failed, invalid pin?");
-      return;
-    }
-}
-
-GroveO2::~GroveO2()
-{
-  mraa_aio_close(m_aio);
-}
-
-float GroveO2::voltageValue()
-{
-	int val = mraa_aio_read(m_aio);
-	if (val == -1) return -1.0f;
-	float sensorVoltage = (val/1024.0) * 5.0;
-	sensorVoltage = (sensorVoltage/201.0) * 10000.0;
-	return sensorVoltage;
-}
diff --git a/src/groveo2/groveo2.hpp b/src/groveo2/groveo2.hpp
deleted file mode 100644
index 0a3d776..0000000
--- a/src/groveo2/groveo2.hpp
+++ /dev/null
@@ -1,75 +0,0 @@
-/*
- * Author: Zion Orent <zorent@ics.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#pragma once
-
-#include <string>
-#include <mraa/aio.h>
-
-namespace upm {
-  /**
-   * @deprecated This library is being replaced by libupm-o2
-   * @brief Grove O2 Oxygen Gas Sensor
-   * @defgroup groveo2 libupm-groveo2
-   * @ingroup seeed analog gaseous
-   */
-
-  /**
-   * @deprecated This class is being replaced by O2
-   * @library groveo2
-   * @sensor groveo2
-   * @comname Oxygen (O2) Concentration Sensor
-   * @type gaseous
-   * @man seeed
-   * @con analog
-   *
-   * @brief API for the Grove O2 Oxygen Gas Sensor
-   *
-   * The Grove O2 Oxygen Gas sensor measures the oxygen concentration in the air
-   *
-   * @image html groveo2.jpg
-   * @snippet groveo2.cxx Interesting
-   */
-  class GroveO2 {
-  public:
-    /**
-     * Grove O2 Oxygen Gas sensor constructor
-     *
-     * @param pin Analog pin to use
-     */
-    GroveO2(int pin);
-    /**
-     * GroveO2 destructor
-     */
-    ~GroveO2();
-    /**
-     * Measures O2 from the sensor
-     *
-     * @return Oxygen concentration as voltage
-     */
-    float voltageValue();
-
-  private:
-    mraa_aio_context m_aio;
-  };
-}
diff --git a/src/groveo2/groveo2.json b/src/groveo2/groveo2.json
deleted file mode 100644
index de97061..0000000
--- a/src/groveo2/groveo2.json
+++ /dev/null
@@ -1,39 +0,0 @@
-{
-    "Library": "groveo2",
-    "Description": "Grove O2 Oxygen Gas Sensor Library",
-    "Sensor Class":
-    {
-        "GroveO2":
-        {
-            "Name": "Grove Oxygen (O2) Concentration Sensor",
-            "Description": "The Grove O2 Oxygen Gas sensor measures the oxygen concentration in the air.",
-            "Aliases": ["groveo2"],
-            "Categories": ["gas", "oxygen", "deprecated"],
-            "Connections": ["analog"],
-            "Project Type": ["environmental", "prototyping"],
-            "Manufacturers": ["seeed"],
-            "Kits": [],
-            "Image": "groveo2.jpg",
-            "Examples":
-            {
-                "Java": ["GroveO2_Example.java"],
-                "Python": ["groveo2.py"],
-                "Node.js": ["groveo2.js"],
-                "C++": ["groveo2.cxx"],
-                "C": []
-            },
-            "Specifications":
-            {
-                "Measurement Range": {"unit": "% Vol", "low": 0, "high": 25},
-                "Sensitivity": {"unit": "mA (in air)", "low": 0.1, "high": 0.3},
-                "Operating Temperature": {"unit": "degC", "low": -20, "high": 50}
-            },
-            "Urls" :
-            {
-                "Product Pages": ["https://www.seeedstudio.com/grove-gas-sensoro2-p-1541.html"],
-                "Datasheets": ["http://wiki.seeed.cc/Grove-Gas_Sensor-O2/"],
-                "Schematics": ["https://github.com/SeeedDocument/Grove_Gas_Sensor_O2/raw/master/resources/Schematics_O2.zip"]
-            }
-        }
-    }
-}
diff --git a/src/grovescam/CMakeLists.txt b/src/grovescam/CMakeLists.txt
deleted file mode 100644
index 0d4e786..0000000
--- a/src/grovescam/CMakeLists.txt
+++ /dev/null
@@ -1,5 +0,0 @@
-set (libname "grovescam")
-set (libdescription "Serial Camera Module")
-set (module_src ${libname}.cxx)
-set (module_hpp ${libname}.hpp)
-upm_module_init(mraa)
diff --git a/src/grovescam/grovescam.cxx b/src/grovescam/grovescam.cxx
deleted file mode 100644
index e789076..0000000
--- a/src/grovescam/grovescam.cxx
+++ /dev/null
@@ -1,490 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Thanks to Seeed Studio for a working arduino sketch
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <iostream>
-#include <string>
-#include <stdexcept>
-#include <errno.h>
-
-#include "grovescam.hpp"
-
-using namespace upm;
-using namespace std;
-
-static const int maxRetries = 100;
-
-GROVESCAM::GROVESCAM(int uart, uint8_t camAddr)
-{
-  m_ttyFd = -1;
-
-  // save our shifted camera address, we'll need it a lot
-  m_camAddr = (camAddr << 5);
-
-  m_picTotalLen = 0;
-
-  if ( !(m_uart = mraa_uart_init(uart)) )
-    {
-      throw std::invalid_argument(std::string(__FUNCTION__) +
-                                  ": mraa_uart_init() failed");
-      return;
-    }
-
-  // This requires a recent MRAA (1/2015)
-  const char *devPath = mraa_uart_get_dev_path(m_uart);
-
-  if (!devPath)
-    {
-      throw std::runtime_error(std::string(__FUNCTION__) +
-                               ": mraa_uart_get_dev_path() failed");
-      return;
-    }
-
-  // now open the tty
-  if ( (m_ttyFd = open(devPath, O_RDWR)) == -1)
-    {
-      throw std::runtime_error(std::string(__FUNCTION__) +
-                               ": open of " + 
-                               string(devPath) + " failed:" +
-                               string(strerror(errno)));
-      return;
-    }
-}
-
-GROVESCAM::~GROVESCAM()
-{
-  if (m_ttyFd != -1)
-    close(m_ttyFd);
-}
-
-bool GROVESCAM::dataAvailable(unsigned int millis)
-{
-  if (m_ttyFd == -1)
-    return false;
-
-  struct timeval timeout;
-
-  if (millis == 0) 
-    {
-      // no waiting
-      timeout.tv_sec = 0;
-      timeout.tv_usec = 0;
-    }
-  else 
-    {
-      timeout.tv_sec = millis / 1000;
-      timeout.tv_usec = (millis % 1000) * 1000;
-    }
-
-  fd_set readfds;
-
-  FD_ZERO(&readfds);
-
-  FD_SET(m_ttyFd, &readfds);
-  
-  if (select(m_ttyFd + 1, &readfds, NULL, NULL, &timeout) > 0)
-    return true;                // data is ready
-  else
-    return false;
-}
-
-int GROVESCAM::readData(uint8_t *buffer, int len)
-{
-  if (m_ttyFd == -1)
-    return(-1);
-
-  int rv = read(m_ttyFd, (char *)buffer, len);
-
-  if (rv < 0)
-    {
-      throw std::runtime_error(std::string(__FUNCTION__) +
-                               ": read() failed: " +
-                               string(strerror(errno)));
-      return rv;
-    }
-
-  return rv;
-}
-
-int GROVESCAM::writeData(uint8_t *buffer, int len)
-{
-  if (m_ttyFd == -1)
-    return(-1);
-
-  // first, flush any pending but unread input
-
-  tcflush(m_ttyFd, TCIFLUSH);
-
-  int rv = write(m_ttyFd, (char *)buffer, len);
-
-  if (rv < 0)
-    {
-      throw std::runtime_error(std::string(__FUNCTION__) +
-                               ": write() failed: " +
-                               string(strerror(errno)));
-      return rv;
-    }
-
-  tcdrain(m_ttyFd);
-
-  return rv;
-}
-
-bool GROVESCAM::setupTty(speed_t baud)
-{
-  if (m_ttyFd == -1)
-    return(false);
-  
-  struct termios termio;
-
-  // get current modes
-  tcgetattr(m_ttyFd, &termio);
-
-  // setup for a 'raw' mode.  81N, no echo or special character
-  // handling, such as flow control.
-  cfmakeraw(&termio);
-
-  // set our baud rates
-  cfsetispeed(&termio, baud);
-  cfsetospeed(&termio, baud);
-
-  // make it so
-  if (tcsetattr(m_ttyFd, TCSAFLUSH, &termio) < 0)
-    {
-      throw std::runtime_error(std::string(__FUNCTION__) +
-                               ": tcsetattr() failed: " +
-                               string(strerror(errno)));
-      return false;
-    }
-
-  return true;
-}
-
-void GROVESCAM::drainInput()
-{
-  uint8_t ch;
-
-  while (dataAvailable(0))
-    readData(&ch, 1);
-}
-
-bool GROVESCAM::init()
-{
-  const unsigned int pktLen = 6;
-  uint8_t cmd[pktLen] = {0xaa, static_cast<uint8_t>(0x0d|m_camAddr), 0x00,
-                         0x00, 0x00, 0x00};
-  uint8_t resp[pktLen];
-  int retries = 0;
-
-  while (true)
-    {
-      if (retries++ > maxRetries)
-        {
-          throw std::runtime_error(std::string(__FUNCTION__) +
-                                   ": maximum retries exceeded");
-          return false;
-        }
-
-      writeData(cmd, pktLen);
-
-      if (!dataAvailable(500))
-        continue;
-
-      if (readData(resp, pktLen) != pktLen)
-        continue;
-
-      if (resp[0] == 0xaa 
-          && resp[1] == (0x0e | m_camAddr) 
-          && resp[2] == 0x0d 
-          && resp[4] == 0 
-          && resp[5] == 0)
-        {
-          if (readData(resp, pktLen) != pktLen)
-            continue;
-          else
-            {
-              if (resp[0] == 0xaa 
-                  && resp[1] == (0x0d | m_camAddr) 
-                  && resp[2] == 0 
-                  && resp[3] == 0 
-                  && resp[4] == 0 
-                  && resp[5] == 0) 
-                break;
-            }
-        }
-    }
-
-  cmd[1] = 0x0e | m_camAddr;
-  cmd[2] = 0x0d;
-  writeData(cmd, pktLen);
-
-  return true;
-}
-
-bool GROVESCAM::preCapture(PIC_FORMATS_T fmt)
-{
-  const unsigned int pktLen = 6;
-  uint8_t cmd[pktLen] = { 0xaa, static_cast<uint8_t>(0x01 | m_camAddr), 0x00,
-                          0x07, 0x00, static_cast<uint8_t>(fmt) };
-  uint8_t resp[pktLen];
-  int retries = 0;
-
-  while (true)
-    {
-      if (retries++ > maxRetries)
-        {
-          throw std::runtime_error(std::string(__FUNCTION__) +
-                                   ": maximum retries exceeded");
-          return false;
-        }
-
-      drainInput();
-
-      writeData(cmd, pktLen);
-
-      if (!dataAvailable(100))
-        continue;
-
-      if (readData(resp, pktLen) != pktLen)
-        continue;
-
-      if (resp[0] == 0xaa 
-          && resp[1] == (0x0e | m_camAddr) 
-          && resp[2] == 0x01 
-          && resp[4] == 0 
-          && resp[5] == 0) break;
-    }
-
-  return true;
-}
-
-bool GROVESCAM::doCapture()
-{
-  const unsigned int pktLen = 6;
-  uint8_t cmd[pktLen] = { 0xaa, static_cast<uint8_t>(0x06 | m_camAddr), 0x08,
-                          static_cast<uint8_t>(MAX_PKT_LEN & 0xff),
-                          static_cast<uint8_t>((MAX_PKT_LEN >> 8)) & 0xff, 0};
-  uint8_t resp[pktLen];
-  int retries = 0;
-  
-  m_picTotalLen = 0;
-
-  while (true)
-    {
-      if (retries++ > maxRetries)
-        {
-          throw std::runtime_error(std::string(__FUNCTION__) +
-                                   ": maximum retries exceeded");
-          return false;
-        }
-
-      drainInput();
-      writeData(cmd, pktLen);
-      usleep(100000);
-
-      if (!dataAvailable(100))
-        continue;
-
-      if (readData(resp, pktLen) != pktLen)
-        continue;
-
-      if (resp[0] == 0xaa 
-          && resp[1] == (0x0e | m_camAddr) 
-          && resp[2] == 0x06 
-          && resp[4] == 0 
-          && resp[5] == 0)
-        break;
-    }
-
-  cmd[1] = 0x05 | m_camAddr;
-  cmd[2] = 0;
-  cmd[3] = 0;
-  cmd[4] = 0;
-  cmd[5] = 0;
-
-  retries = 0;
-  while (true)
-    {
-      if (retries++ > maxRetries)
-        {
-          throw std::runtime_error(std::string(__FUNCTION__) +
-                                   ": maximum retries exceeded");
-          return false;
-        }
-
-      drainInput();
-      writeData(cmd, pktLen);
-      if (readData(resp, pktLen) != pktLen)
-        continue;
-
-      if (resp[0] == 0xaa 
-          && resp[1] == (0x0e | m_camAddr) 
-          && resp[2] == 0x05 
-          && resp[4] == 0 
-          && resp[5] == 0)
-        break;
-    }
-
-  cmd[1] = 0x04 | m_camAddr;
-  cmd[2] = 0x01;
-
-  retries = 0;
-  while (true)
-    {
-      if (retries++ > maxRetries)
-        {
-          throw std::runtime_error(std::string(__FUNCTION__) +
-                                   ": maximum retries exceeded");
-          return false;
-        }
-
-      drainInput();
-      writeData(cmd, 6);
-
-      if (readData(resp, pktLen) != pktLen)
-        continue;
-
-      if (resp[0] == 0xaa 
-          && resp[1] == (0x0e | m_camAddr) 
-          && resp[2] == 0x04 
-          && resp[4] == 0 
-          && resp[5] == 0)
-        {
-          if (!dataAvailable(1000))
-            continue;
-
-          if (readData(resp, pktLen) != pktLen)
-            continue;
-
-          if (resp[0] == 0xaa
-              && resp[1] == (0x0a | m_camAddr)
-              && resp[2] == 0x01)
-            {
-              m_picTotalLen = (resp[3]) | (resp[4] << 8) | (resp[5] << 16);
-              break;
-            }
-        }
-    }
-
-  return true;
-}
-
-bool GROVESCAM::storeImage(const char *fname)
-{
-  if (!fname)
-    {
-      throw std::invalid_argument(std::string(__FUNCTION__) +
-                                  ": filename is NULL");
-      return false;
-    }
-
-  if (!m_picTotalLen)
-    {
-      throw std::runtime_error(std::string(__FUNCTION__) +
-                    ": Picture length is zero, you need to capture first.");
-
-      return false;
-    }
-
-  FILE *file = fopen(fname, "wb");
-
-  if (!file)
-    {
-      throw std::runtime_error(std::string(__FUNCTION__) +
-                               ": fopen() failed: " +
-                               string(strerror(errno)));
-      return false;
-    }
-  
-  /// let the games begin...
-  const unsigned int pktLen = 6;
-  unsigned int pktCnt = (m_picTotalLen) / (MAX_PKT_LEN - 6);
-  if ((m_picTotalLen % (MAX_PKT_LEN-6)) != 0) 
-    pktCnt += 1;
-  
-  uint8_t cmd[pktLen] = { 0xaa, static_cast<uint8_t>(0x0e | m_camAddr), 0x00,
-                          0x00, 0x00, 0x00 };
-  uint8_t pkt[MAX_PKT_LEN];
-  int retries = 0;
-  
-  for (unsigned int i = 0; i < pktCnt; i++)
-    {
-      cmd[4] = i & 0xff;
-      cmd[5] = (i >> 8) & 0xff;
-      
-      retries = 0;
-
-    retry:
-
-      usleep(10000);
-
-      drainInput();
-      writeData(cmd, pktLen);
-
-      if (!dataAvailable(1000))
-        {
-          if (retries++ > maxRetries)
-            {
-              throw std::runtime_error(std::string(__FUNCTION__) +
-                                       ": timeout, maximum retries exceeded");
-              return false;
-            }
-          goto retry;
-        }
-
-      uint16_t cnt = readData(pkt, MAX_PKT_LEN);
-      
-      unsigned char sum = 0;
-      for (int y = 0; y < cnt - 2; y++)
-        {
-          sum += pkt[y];
-        }
-      if (sum != pkt[cnt-2])
-        {
-          if (retries++ <= maxRetries)
-            goto retry;
-          else
-            {
-              fclose(file);
-              throw std::runtime_error(std::string(__FUNCTION__) +
-                                       ": cksum error, maximum retries exceeded");
-              return false;
-            }
-        }
-
-      fwrite((const uint8_t *)&pkt[4], cnt - 6, 1, file);
-    }
-
-  cmd[4] = 0xf0;
-  cmd[5] = 0xf0;
-  writeData(cmd, pktLen);
-
-  fclose(file);
-
-  // reset the pic length to 0 for another run.
-  m_picTotalLen = 0;
-
-  return true;
-}
diff --git a/src/grovescam/grovescam.hpp b/src/grovescam/grovescam.hpp
deleted file mode 100644
index 3ad69db..0000000
--- a/src/grovescam/grovescam.hpp
+++ /dev/null
@@ -1,196 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Thanks to Seeed Studio for a working arduino sketch
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#pragma once
-
-#include <string>
-#include <iostream>
-
-#include <stdint.h>
-#include <stdlib.h>
-#include <unistd.h>
-#include <string.h>
-#include <fcntl.h>
-#include <errno.h>
-#include <termios.h>
-#include <sys/time.h>
-#include <sys/select.h>
-#include <sys/types.h>
-#include <sys/stat.h>
-
-#include <mraa/uart.h>
-
-#define GROVESCAM_DEFAULT_UART 0
-
-#define GROVESCAM_DEFAULT_CAMERA_ADDR 0
-
-namespace upm {
-    /**
-     * @deprecated This library is being replaced by libupm-scam
-     * @brief Grove Serial Camera
-     * @defgroup grovescam libupm-grovescam
-     * @ingroup seeed uart other
-     */
-
-    /**
-     * @deprecated This class is being replaced by SCAM
-     * @library grovescam
-     * @sensor grovescam
-     * @comname Serial Camera Module
-     * @type other
-     * @man seeed
-     * @con uart
-     * @web http://www.seeedstudio.com/wiki/Grove_-_Serial_Camera_Kit
-     *
-     * @brief API for the Grove Serial Camera
-     *
-     * The driver was tested with the Grove Serial Camera. There is
-     * no protocol documentation currently available, so this module
-     * was developed based completely on the Seeed Studio* Arduino*
-     * sketch.
-     *
-     * It is connected via a UART at 115,200 baud.
-     * 
-     * @image html grovescam.jpg
-     * @snippet grovescam.cxx Interesting
-     */
-
-  class GROVESCAM {
-  public:
-
-    static const unsigned int MAX_PKT_LEN = 128;
-
-    typedef enum {
-      FORMAT_VGA                   = 7, // 640x480
-      FORMAT_CIF                   = 5, // 352*288
-      FORMAT_OCIF                  = 3  // ??? (maybe they meant QCIF?)
-    } PIC_FORMATS_T;
-
-    /**
-     * Grove Serial Camera constructor
-     *
-     * @param uart Default UART to use (0 or 1)
-     * @param camAddr 3-bit address identifier of the camera; default is 0
-     */
-    GROVESCAM(int uart, uint8_t camAddr=GROVESCAM_DEFAULT_CAMERA_ADDR);
-
-    /**
-     * GROVESCAM destructor
-     */
-    ~GROVESCAM();
-
-    /**
-     * Checks to see if there is data available for reading
-     *
-     * @param millis Number of milliseconds to wait; 0 means no waiting.
-     * @return True if there is data available for reading
-     */
-    bool dataAvailable(unsigned int millis);
-
-    /**
-     * Reads any available data into a user-supplied buffer. Note: the
-     * call blocks until data is available to be read. Use
-     * dataAvailable() to determine whether there is data available
-     * beforehand, to avoid blocking.
-     *
-     * @param buffer Buffer to hold the data read
-     * @param len Length of the buffer
-     * @return Number of bytes read
-     */
-    int readData(uint8_t *buffer, int len);
-
-    /**
-     * Writes the data in the buffer to the device
-     *
-     * @param buffer Buffer to hold the data read
-     * @param len Length of the buffer
-     * @return Number of bytes written
-     */
-    int writeData(uint8_t *buffer, int len);
-
-    /**
-     * Sets up proper tty I/O modes and the baud rate. For this device, the default
-     * baud rate is 9,600 (B9600).
-     *
-     * @param baud Desired baud rate
-     * @return True if successful
-     */
-    bool setupTty(speed_t baud=B115200);
-
-    /**
-     * Reads serial input and discards until no more characters are available
-     *
-     */
-    void drainInput();
-
-    /**
-     * Initializes the camera
-     *
-     */
-    bool init();
-
-    /**
-     * Tells the camera to prepare for a capture
-     *
-     * @param fmt One of the PIC_FORMATS_T values
-     */
-    bool preCapture(PIC_FORMATS_T fmt=FORMAT_VGA);
-
-    /**
-     * Starts the capture
-     *
-     * @return True if successful
-     */
-    bool doCapture();
-
-    /**
-     * Stores the captured image in a file
-     *
-     * @param fname Name of the file to write
-     * @return True if successful
-     */
-    bool storeImage(const char *fname);
-
-    /**
-     * Returns the picture length. Note: this is only valid after
-     * doCapture() has run successfully.
-     *
-     * @return Image length
-     */
-    int getImageSize() { return m_picTotalLen; };
-
-  protected:
-    int ttyFd() { return m_ttyFd; };
-
-  private:
-    mraa_uart_context m_uart;
-    int m_ttyFd;
-
-    uint8_t m_camAddr;
-    int m_picTotalLen;
-  };
-}
-
-
diff --git a/src/grovescam/grovescam.i b/src/grovescam/grovescam.i
deleted file mode 100644
index 3bdf151..0000000
--- a/src/grovescam/grovescam.i
+++ /dev/null
@@ -1,16 +0,0 @@
-%include "../common_top.i"
-
-/* BEGIN Java syntax  ------------------------------------------------------- */
-#ifdef SWIGJAVA
-%include "../java_buffer.i"
-
-JAVA_JNI_LOADLIBRARY(javaupm_grovescam)
-#endif
-/* END Java syntax */
-
-/* BEGIN Common SWIG syntax ------------------------------------------------- */
-%{
-#include "grovescam.hpp"
-%}
-%include "grovescam.hpp"
-/* END Common SWIG syntax */
diff --git a/src/grovescam/grovescam.json b/src/grovescam/grovescam.json
deleted file mode 100644
index 82f3771..0000000
--- a/src/grovescam/grovescam.json
+++ /dev/null
@@ -1,39 +0,0 @@
-{
-    "Library": "grovescam",
-    "Description": "Grove Serial Camera Library",
-    "Sensor Class":
-    {
-        "GROVESCAM":
-        {
-            "Name": "Serial Camera Module",
-            "Description": "UPM module for the  ear-clip heart rate sensor. It is used to measure your heart rate.",
-            "Aliases": ["grovescam"],
-            "Categories": ["imaging", "deprecated"],
-            "Connections": ["uart"],
-            "Project Type": ["prototyping", "access control", "security"],
-            "Manufacturers": ["seeed"],
-            "Kits": [],
-            "Image": "grovescam.jpg",
-            "Examples":
-            {
-                "Java": ["GROVESCAM_Example.java"],
-                "Python": ["grovescam.py"],
-                "Node.js": ["grovescam.js"],
-                "C++": ["grovescam.cxx"],
-                "C": []
-            },
-            "Specifications":
-            {
-                "Operating Voltage": {"unit": "V", "typ": 5},
-                "Resolution": {"unit": "", "max": "640x480"}
-
-            },
-            "Urls" :
-            {
-                "Product Pages": ["https://www.seeedstudio.com/Grove-Serial-Camera-Kit-p-1608.html"],
-                "Datasheets": ["http://www.seeedstudio.com/wiki/Grove_-_Serial_Camera_Kit"],
-                "Schematics": []
-            }
-        }
-    }
-}
diff --git a/src/grovespeaker/CMakeLists.txt b/src/grovespeaker/CMakeLists.txt
deleted file mode 100644
index d8b0765..0000000
--- a/src/grovespeaker/CMakeLists.txt
+++ /dev/null
@@ -1,5 +0,0 @@
-set (libname "grovespeaker")
-set (libdescription "Speaker Module")
-set (module_src ${libname}.cxx)
-set (module_hpp ${libname}.hpp)
-upm_module_init(mraa)
diff --git a/src/grovespeaker/grovespeaker.cxx b/src/grovespeaker/grovespeaker.cxx
deleted file mode 100644
index 61d2548..0000000
--- a/src/grovespeaker/grovespeaker.cxx
+++ /dev/null
@@ -1,150 +0,0 @@
-/*
- * Author: Zion Orent <sorent@ics.com>
- * Copyright (c) 2014 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <iostream>
-#include <string>
-#include <stdexcept>
-
-#include "grovespeaker.hpp"
-
-using namespace upm;
-
-GroveSpeaker::GroveSpeaker(int pin)
-{
-  if ( !(m_gpio = mraa_gpio_init(pin)) )
-    throw std::invalid_argument(std::string(__FUNCTION__) +
-                                ": mraa_gpio_init() failed, invalid pin?");
-
-    mraa_gpio_dir(m_gpio, MRAA_GPIO_OUT);
-	m_note_list['a'] = storeNote(1136, 1073, 568, 536, 284, 268);
-	m_note_list['b'] = storeNote(1012, 0, 506, 0, 253, 0);
-	m_note_list['c'] = storeNote(1911, 1804, 956, 902, 478, 451);
-	m_note_list['d'] = storeNote(1703, 1607, 851, 804, 426, 402);
-	m_note_list['e'] = storeNote(1517, 0, 758, 0, 379, 0);
-	m_note_list['f'] = storeNote(1432, 1351, 716, 676, 358, 338);
-	m_note_list['g'] = storeNote(1276, 1204, 638, 602, 319, 301);
-}
-
-GroveSpeaker::~GroveSpeaker()
-{
-    mraa_gpio_close(m_gpio);
-}
-
-NoteData GroveSpeaker::storeNote(int noteDelayLow, int noteDelayLowSharp, 
-                                 int noteDelayMed, int noteDelayMedSharp, 
-                                 int noteDelayHigh, int noteDelayHighSharp)
-{
-	NoteData note;
-	note.delayTimeLow = noteDelayLow;
-	note.delayTimeLowSharp = noteDelayLowSharp;
-	note.delayTimeMed = noteDelayMed;
-	note.delayTimeMedSharp = noteDelayMedSharp;
-	note.delayTimeHigh = noteDelayHigh;
-	note.delayTimeHighSharp = noteDelayHighSharp;
-	return note;
-}
-
-void GroveSpeaker::playAll()
-{
-	playSound('c', false, "low");
-	usleep(200000);
-	playSound('d', false, "low");
-	usleep(200000);
-	playSound('e', false, "low");
-	usleep(200000);
-	playSound('f', false, "low");
-	usleep(200000);
-	playSound('g', false, "low");
-	usleep(500000);
-	playSound('a', false, "low");
-	usleep(500000);
-	playSound('b', false, "low");
-	usleep(500000);
-}
-
-void GroveSpeaker::playSound(char letter, bool sharp, std::string vocalWeight)
-{
-	std::map<char, NoteData>::iterator it = m_note_list.find(letter);
-	if(it == m_note_list.end())
-	{
-		std::cout << "The key " << letter << " doesn't exist." << std::endl;
-		return;
-	}
-	NoteData nd = it->second;
-	int delayTime;
-	if (sharp)
-	{
-		if (vocalWeight.compare("low") == 0)
-			delayTime = nd.delayTimeLowSharp;
-		else if (vocalWeight.compare("med") == 0)
-			delayTime = nd.delayTimeMedSharp;
-		else if (vocalWeight.compare("high") == 0)
-			delayTime = nd.delayTimeHighSharp;
-		else
-		{
-			std::cout << "Correct voice weight values are low, med, or high" 
-			          << std::endl;
-			return;
-		}
-	}
-	else
-	{
-		if (vocalWeight.compare("low") == 0)
-			delayTime = nd.delayTimeLow;
-		else if (vocalWeight.compare("med") == 0)
-			delayTime = nd.delayTimeMed;
-		else if (vocalWeight.compare("high") == 0)
-			delayTime = nd.delayTimeHigh;
-		else
-		{
-			std::cout << "Correct voice weight values are low, med, or high"
-			          << std::endl;
-			return;
-		}
-	}
-	// If delayTime is zero, that means you tried to choose a sharp note 
-	// for a note that has no sharp
-	if (sharp && !delayTime)
-	{
-		std::cout << "The key " << letter << " doesn't have a sharp note."
-		          << std::endl;
-		return;
-	}
-	sound(delayTime);
-}
-
-void GroveSpeaker::sound(int note_delay)
-{
-	mraa_result_t error = MRAA_SUCCESS;
-	for (int i = 0; i < 100; i++)   
- 	{
-		error = mraa_gpio_write (m_gpio, HIGH);
-		usleep(note_delay);
-		error = mraa_gpio_write (m_gpio, LOW);
-		usleep(note_delay);
-	}
-	if (error != MRAA_SUCCESS)
-		mraa_result_print(error);
-}
-
diff --git a/src/grovespeaker/grovespeaker.hpp b/src/grovespeaker/grovespeaker.hpp
deleted file mode 100644
index ba61a39..0000000
--- a/src/grovespeaker/grovespeaker.hpp
+++ /dev/null
@@ -1,105 +0,0 @@
-/*
- * Author: Zion Orent <sorent@ics.com>
- * Copyright (c) 2014 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#pragma once
-
-#include <string>
-#include <map>
-#include <unistd.h>
-#include <mraa/gpio.h>
-
-#define HIGH      1
-#define LOW       0
-
-namespace upm {
-  /**
-   * @deprecated This library is being replaced by libupm-speaker
-   * @brief Grove Speaker
-   * @defgroup grovespeaker libupm-grovespeaker
-   * @ingroup seeed gpio sound hak
-   */
-typedef struct
-{
-    int delayTimeLow;
-    int delayTimeLowSharp;
-    int delayTimeMed;
-    int delayTimeMedSharp;
-    int delayTimeHigh;
-    int delayTimeHighSharp;
-} NoteData;
-  /**
-   * @deprecated This class is being replaced by Speaker
-   * @library grovespeaker
-   * @sensor grovespeaker
-   * @comname Speaker Module
-   * @type sound
-   * @man seeed
-   * @con gpio
-   * @kit hak
-   *
-   * @brief API for the Grove Speaker
-   *
-   * UPM module for the Grove Speaker.
-   * This sensor can generate different tones and sounds depending on the
-   * frequency of the input signal.
-   * 
-   * @image html grovespeaker.jpg 
-   * @snippet grovespeaker.cxx Interesting
-   */
-  class GroveSpeaker {
-  public:
-    /**
-     * Grove Speaker constructor
-     *
-     * @param pin Digital pin to use
-     */
-    GroveSpeaker(int pin);
-    /**
-     * GroveSpeaker destructor
-     */
-    ~GroveSpeaker();
-    /**
-     * Plays all alto notes (lowest notes)
-     *
-     */
-    void playAll();
-    /**
-     * Plays a sound and a note whether it's sharp or not
-     *
-     * @param letter Character name of the note
-     * ('a', 'b', 'c', 'd', 'e', 'f', or 'g')
-     * @param sharp If true, plays a sharp version of the note; otherwise, does not play the note
-     * @param vocalWeight String to determine whether to play a low ("low"),
-     * a medium ("med"), or a high ("high") note
-     */
-    void playSound(char letter, bool sharp, std::string vocalWeight);
-
-  private:
-        mraa_gpio_context m_gpio;
-        std::map <char, NoteData> m_note_list;
-        void sound(int note_delay);
-        NoteData storeNote(int noteDelayLow, int noteDelayLowSharp,
-                           int noteDelayMed, int noteDelayMedSharp,
-                           int noteDelayHigh, int noteDelayHighSharp);
-  };
-}
diff --git a/src/grovespeaker/grovespeaker.json b/src/grovespeaker/grovespeaker.json
deleted file mode 100644
index d4573eb..0000000
--- a/src/grovespeaker/grovespeaker.json
+++ /dev/null
@@ -1,40 +0,0 @@
-{
-    "Library": "grovespeaker",
-    "Description": "API for the Grove Speaker",
-    "Sensor Class":
-    {
-        "GroveSpeaker":
-        {
-            "Name": "Grove Speaker Module",
-            "Description": "UPM module for the Grove Speaker. This sensor can generate different tones and sounds depending on the frequency of the input signal.",
-            "Aliases": ["grovespeaker"],
-            "Categories": ["sound", "deprecated"],
-            "Connections": ["gpio"],
-            "Project Type": ["sound", "prototyping"],
-            "Manufacturers": ["seeed"],
-            "Kits": ["hak"],
-            "Image": "grovespeaker.jpg",
-            "Examples":
-            {
-                "Java": ["GroveSpeaker_Example.java"],
-                "Python": ["grovespeaker.py"],
-                "Node.js": ["grovespeaker.js"],
-                "C++": ["grovespeaker.cxx"],
-                "C": []
-            },
-            "Specifications":
-            {
-                "Operating Voltage": {"unit": "V", "low": 4, "high": 5.5},
-                "Voltage Gain": {"unit": "dB", "typ": 46},
-                "Bandwidth": {"unit": "KHz", "min": 20}
-
-            },
-            "Urls" :
-            {
-                "Product Pages": ["https://www.seeedstudio.com/Grove-Speaker-p-1445.html"],
-                "Datasheets": ["http://wiki.seeed.cc/Grove-Speaker/", "https://raw.githubusercontent.com/SeeedDocument/Grove-Speaker/master/res/LM386_Low_Voltage_Audio_Power_Amplifier_Datasheet.pdf"],
-                "Schematics": ["https://raw.githubusercontent.com/SeeedDocument/Grove-Speaker/master/res/Grove-Speaker_v1.0_sch.pdf"]
-            }
-        }
-    }
-}
diff --git a/src/groveultrasonic/CMakeLists.txt b/src/groveultrasonic/CMakeLists.txt
deleted file mode 100644
index b4447f1..0000000
--- a/src/groveultrasonic/CMakeLists.txt
+++ /dev/null
@@ -1,5 +0,0 @@
-set (libname "groveultrasonic")
-set (libdescription "Ultrasonic Proximity Sensor")
-set (module_src ${libname}.cxx)
-set (module_hpp ${libname}.hpp)
-upm_module_init(mraa)
diff --git a/src/groveultrasonic/groveultrasonic.cxx b/src/groveultrasonic/groveultrasonic.cxx
deleted file mode 100644
index eb429c8..0000000
--- a/src/groveultrasonic/groveultrasonic.cxx
+++ /dev/null
@@ -1,102 +0,0 @@
-/*
- * Author: Jun Kato <i@junkato.jp>
- * Copyright (c) 2015 Jun Kato.
- *
- * Thanks to Seeed Studio for a working arduino sketch
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <iostream>
-#include <unistd.h>
-#include <stdlib.h>
-#include <functional>
-
-#include "groveultrasonic.hpp"
-
-using namespace upm;
-
-GroveUltraSonic::GroveUltraSonic (int pin) {
-    m_name = "GroveUltraSonic";
-
-    mraa_init();
-
-    // setup pin
-    m_pinCtx = mraa_gpio_init(pin);
-    if (m_pinCtx == NULL) {
-        fprintf (stderr, "Are you sure that pin%d you requested is valid on your platform?", pin);
-        exit (1);
-    }
-    mraa_gpio_isr (m_pinCtx, MRAA_GPIO_EDGE_BOTH,
-                   &signalISR, this);
-}
-
-GroveUltraSonic::~GroveUltraSonic () {
-
-    // close pin
-    mraa_gpio_isr_exit(m_pinCtx);
-    mraa_gpio_close (m_pinCtx);
-}
-
-int
-GroveUltraSonic::getDistance () {
-
-    // output trigger signal
-    mraa_gpio_dir(m_pinCtx, MRAA_GPIO_OUT);
-    mraa_gpio_write(m_pinCtx, LOW);
-    usleep(2);
-    mraa_gpio_write(m_pinCtx, HIGH);
-    usleep(5);
-    mraa_gpio_write(m_pinCtx, LOW);
-
-    // wait for the pulse,
-    m_doWork = true;
-    m_InterruptCounter = 0;
-    mraa_gpio_dir(m_pinCtx, MRAA_GPIO_IN);
-
-    // though do not wait over 25 [ms].
-    int timer = 0;
-    while (m_doWork && timer++ < 5) {
-        // in 25 [ms], sound travels 25000 / 29 / 2 = 431 [cm],
-        // which is more than 400 [cm], the max distance measurable with this sensor.
-        usleep(5 * 1000); // 5 [ms]
-    }
-
-    // calc diff
-    long diff = m_FallingTimeStamp.tv_usec - m_RisingTimeStamp.tv_usec;
-    diff += (m_FallingTimeStamp.tv_sec - m_RisingTimeStamp.tv_sec) * 1000000;
-    return timer >= 5 ? 0 : diff;
-}
-
-void
-GroveUltraSonic::signalISR(void *ctx) {
-    upm::GroveUltraSonic *This = (upm::GroveUltraSonic *)ctx;
-    This->ackEdgeDetected();
-}
-
-void
-GroveUltraSonic::ackEdgeDetected () {
-    if (++m_InterruptCounter % 2 == 0) {
-        gettimeofday(&m_FallingTimeStamp, NULL);
-        m_doWork = false;
-    } else {
-        gettimeofday(&m_RisingTimeStamp, NULL);
-    }
-}
diff --git a/src/groveultrasonic/groveultrasonic.hpp b/src/groveultrasonic/groveultrasonic.hpp
deleted file mode 100644
index c8adce0..0000000
--- a/src/groveultrasonic/groveultrasonic.hpp
+++ /dev/null
@@ -1,123 +0,0 @@
-/*
- * Author: Jun Kato <i@junkato.jp>
- * Copyright (c) 2015 Jun Kato.
- *
- * Thanks to Seeed Studio for a working arduino sketch
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#pragma once
-
-#include <string>
-#include <mraa/aio.h>
-#include <mraa/gpio.h>
-#include <sys/time.h>
-
-#define HIGH                   1
-#define LOW                    0
-
-namespace upm {
-
-/**
- * @deprecated This library is being replaced by libupm-ultrasonic
- * @brief Grove Ultrasonic Sensor
- * @defgroup groveultrasonic libupm-groveultrasonic
- * @ingroup seeed gpio sound
- */
-
-/**
- * @deprecated This class is being replaced by UltraSonic
- * @library groveultrasonic
- * @sensor groveultrasonic
- * @comname Ultrasonic Proximity Sensor
- * @type sound
- * @man seeed
- * @con gpio
- *
- * @brief API for Grove Ultrasonic Ranger
- *
- * This Grove Ultrasonic sensor is a non-contact distance measurement module
- * which is compatible with the Grove system. It is designed for easy modular
- * project usage with industrial performance. Detection ranges from 3 cm (1.2")
- * to 4 m (13'1.5") and works best when the object is within a 30 degree angle
- * relative to the sensor.
- *
- * @image html groveultrasonic.jpg
- * @snippet groveultrasonic.cxx Interesting
- */
-class GroveUltraSonic {
-    public:
-        /**
-         * Instantiates a GroveUltraSonic object
-         *
-         * @param pin pin for triggering the sensor for distance and for receiving pulse response
-         */
-        GroveUltraSonic (int pin);
-
-        /**
-         * GroveUltraSonic object destructor.
-         */
-        ~GroveUltraSonic ();
-
-        /**
-         * Returns the echo's pulse width from the sensor in microseconds.
-         * Divide by 58 to convert distance to centimetres. 
-         * Divide by 148 to convert distance to inches.
-         */
-        int getDistance ();
-
-        /**
-         * Return name of the component
-         */
-        std::string name()
-        {
-            return m_name;
-        }
-
-        /**
-         * Returns true while the sensor is busy waiting for the echo pulse
-         */
-        bool working()
-        {
-            return m_doWork;
-        }
-
-    private:
-        bool m_doWork; /* Flag to control blocking function while waiting for falling edge interrupt */
-        mraa_gpio_context m_pinCtx;
-        uint8_t m_InterruptCounter;
-        struct timeval m_RisingTimeStamp;
-        struct timeval m_FallingTimeStamp;
-        std::string m_name;
-
-        /**
-         * ISR for the pulse signal
-         */
-        static void signalISR(void *ctx);
-
-        /**
-         * On each interrupt this function will detect if the interrupt
-         * was falling edge or rising.
-         * Should be called from the interrupt handler.
-         */
-        void ackEdgeDetected ();
-};
-
-}
diff --git a/src/groveultrasonic/groveultrasonic.i b/src/groveultrasonic/groveultrasonic.i
deleted file mode 100644
index 035c065..0000000
--- a/src/groveultrasonic/groveultrasonic.i
+++ /dev/null
@@ -1,16 +0,0 @@
-%include "../common_top.i"
-
-/* BEGIN Java syntax  ------------------------------------------------------- */
-#ifdef SWIGJAVA
-%ignore signalISR;
-
-JAVA_JNI_LOADLIBRARY(javaupm_groveultrasonic)
-#endif
-/* END Java syntax */
-
-/* BEGIN Common SWIG syntax ------------------------------------------------- */
-%{
-#include "groveultrasonic.hpp"
-%}
-%include "groveultrasonic.hpp"
-/* END Common SWIG syntax */
diff --git a/src/groveultrasonic/groveultrasonic.json b/src/groveultrasonic/groveultrasonic.json
deleted file mode 100644
index 6bee48f..0000000
--- a/src/groveultrasonic/groveultrasonic.json
+++ /dev/null
@@ -1,40 +0,0 @@
-{
-    "Library": "groveultrasonic",
-    "Description": "Grove Ultrasonic Sensor Library",
-    "Sensor Class":
-    {
-        "GroveUltraSonic":
-        {
-            "Name": "Ultrasonic Proximity Sensor",
-            "Description": "This Grove Ultrasonic sensor is a non-contact distance measurement module which is compatible with the Grove system. It is designed for easy modular project usage with industrial performance. Detection ranges from 3 cm (1.2\") to 4 m (13'1.5\") and works best when the object is within a 30 degree angle relative to the sensor.",
-            "Aliases": ["groveultrasonic"],
-            "Categories": ["proximity", "deprecated"],
-            "Connections": ["gpio"],
-            "Project Type": ["robotics", "prototyping"],
-            "Manufacturers": ["seeed"],
-            "Kits": [],
-            "Image": "groveultrasonic.jpg",
-            "Examples":
-            {
-                "Java": [],
-                "Python": [],
-                "Node.js": ["groveultrasonic.js"],
-                "C++": ["groveultrasonic.cxx"],
-                "C": []
-            },
-            "Specifications":
-            {
-                "Operating Voltage": {"unit": "V", "low": 3.2, "high": 5.2},
-                "Operating Current": {"unit": "mA", "typ": 8},
-                "Measurement Range": {"unit": "cm", "low": 2, "high": 350}
-
-            },
-            "Urls" :
-            {
-                "Product Pages": ["https://www.seeedstudio.com/Grove-Ultrasonic-Ranger-p-960.html"],
-                "Datasheets": ["http://wiki.seeed.cc/Grove-Ultrasonic_Ranger/"],
-                "Schematics": []
-            }
-        }
-    }
-}
diff --git a/src/grovevdiv/CMakeLists.txt b/src/grovevdiv/CMakeLists.txt
deleted file mode 100644
index b2508ec..0000000
--- a/src/grovevdiv/CMakeLists.txt
+++ /dev/null
@@ -1,5 +0,0 @@
-set (libname "grovevdiv")
-set (libdescription "Voltage Divider")
-set (module_src ${libname}.cxx)
-set (module_hpp ${libname}.hpp)
-upm_module_init(mraa)
diff --git a/src/grovevdiv/grovevdiv.cxx b/src/grovevdiv/grovevdiv.cxx
deleted file mode 100644
index fdf6275..0000000
--- a/src/grovevdiv/grovevdiv.cxx
+++ /dev/null
@@ -1,68 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2014 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <iostream>
-#include <string>
-#include <stdexcept>
-
-#include "grovevdiv.hpp"
-
-using namespace upm;
-using namespace std;
-
-GroveVDiv::GroveVDiv(int pin)
-{
-  if ( !(m_aio = mraa_aio_init(pin)) )
-    {
-      throw std::invalid_argument(std::string(__FUNCTION__) +
-                                  ": mraa_aio_init() failed, invalid pin?");
-      return;
-    }
-}
-
-GroveVDiv::~GroveVDiv()
-{
-  mraa_aio_close(m_aio);
-}
-
-unsigned int GroveVDiv::value(unsigned int samples)
-{
-  int sum = 0;
-
-  for (unsigned int i=0; i<samples; i++)
-    {
-      sum += mraa_aio_read(m_aio);
-      if (sum == -1) return 0;
-      usleep(2000);
-    }
-        
-  return (sum / samples);
-}
-
-float GroveVDiv::computedValue(uint8_t gain, unsigned int val, int vref, int res)
-{
-  return ((float(gain) * float(val) * float(vref) / float(res)) / 1000.0);
-
-}
-
diff --git a/src/grovevdiv/grovevdiv.hpp b/src/grovevdiv/grovevdiv.hpp
deleted file mode 100644
index de74a85..0000000
--- a/src/grovevdiv/grovevdiv.hpp
+++ /dev/null
@@ -1,100 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2014 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#pragma once
-
-#include <string>
-#include <iostream>
-#include <stdint.h>
-#include <mraa/aio.h>
-
-// reference voltage in millivolts
-#define GROVEVDIV_VREF  4980
-
-// default ADC resolution
-#define GROVEVDIV_ADC_RES 1024
-
-namespace upm {
-  /**
-   * @deprecated This library is being replaced by libupm-vdiv
-   * @brief Grove Voltage Divider Sensor
-   * @defgroup grovevdiv libupm-grovevdiv
-   * @ingroup seeed analog electric robok
-   */
-
-  /**
-   * @deprecated This class is being replaced by VDiv
-   * @library grovevdiv
-   * @sensor grovevdiv
-   * @comname Voltage Divider
-   * @type electric
-   * @man seeed
-   * @con analog
-   * @kit robok
-   *
-   * @brief API for the Grove Voltage Divider Sensor
-   *
-   * UPM module for the Grove Voltage Divider sensor
-   *
-   * @image html grovevdiv.jpg
-   * @snippet grovevdiv.cxx Interesting
-   */
-  class GroveVDiv {
-  public:
-    /**
-     * Grove Voltage Divider sensor constructor
-     *
-     * @param pin Analog pin to use
-     */
-    GroveVDiv(int pin);
-
-    /**
-     * Grove Voltage Divider destructor
-     */
-    ~GroveVDiv();
-
-    /**
-     * Gets the conversion value from the sensor
-     *
-     * @param samples Specifies how many samples to average over
-     * @return Average ADC conversion value
-     */
-    unsigned int value(unsigned int samples);
-
-    /**
-     * Computes the measured voltage
-     *
-     * @param gain Gain switch, either 3 or 10 for Grove
-     * @param val Measured voltage (from value())
-     * @param vref Reference voltage in millivolts
-     * @param res ADC resolution
-     *
-     * @return Measured voltage
-     */
-    float computedValue(uint8_t gain, unsigned int val, int vref=GROVEVDIV_VREF,
-                        int res=GROVEVDIV_ADC_RES);
-
-  private:
-    mraa_aio_context m_aio;
-  };
-}
diff --git a/src/grovevdiv/grovevdiv.json b/src/grovevdiv/grovevdiv.json
deleted file mode 100644
index da8928a..0000000
--- a/src/grovevdiv/grovevdiv.json
+++ /dev/null
@@ -1,37 +0,0 @@
-{
-    "Library": "grovevdiv",
-    "Description": "API for the Grove Voltage Divider Sensor",
-    "Sensor Class":
-    {
-        "GroveVDiv":
-        {
-            "Name": "Grove Voltage Divider Sensor",
-            "Description": "UPM module for the Grove Voltage Divider sensor.",
-            "Aliases": ["grovevdiv"],
-            "Categories": ["electric", "deprecated"],
-            "Connections": ["gpio"],
-            "Project Type": ["robotics", "prototyping"],
-            "Manufacturers": ["seeed"],
-            "Kits": ["robok"],
-            "Image": "grovevdiv.jpg",
-            "Examples":
-            {
-                "Java": ["GroveVDiv_Example.java"],
-                "Python": ["grovevdiv.py"],
-                "Node.js": ["grovevdiv.js"],
-                "C++": ["grovevdiv.cxx"],
-                "C": []
-            },
-            "Specifications":
-            {
-                "Operating Voltage": {"unit": "V", "typ": 5}
-            },
-            "Urls" :
-            {
-                "Product Pages": ["https://www.seeedstudio.com/Grove-Voltage-Divider-p-1472.html"],
-                "Datasheets": ["http://wiki.seeed.cc/Grove-Voltage_Divider/"],
-                "Schematics": ["https://github.com/SeeedDocument/Grove-Voltage_Divider/raw/master/res/LMV358ID_Datasheet.pdf"]
-            }
-        }
-    }
-}
diff --git a/src/grovewater/CMakeLists.txt b/src/grovewater/CMakeLists.txt
deleted file mode 100644
index 6fdc698..0000000
--- a/src/grovewater/CMakeLists.txt
+++ /dev/null
@@ -1,5 +0,0 @@
-set (libname "grovewater")
-set (libdescription "Water Sensor")
-set (module_src ${libname}.cxx)
-set (module_hpp ${libname}.hpp)
-upm_module_init(mraa)
diff --git a/src/grovewater/grovewater.cxx b/src/grovewater/grovewater.cxx
deleted file mode 100644
index 9220adc..0000000
--- a/src/grovewater/grovewater.cxx
+++ /dev/null
@@ -1,54 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2014 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <iostream>
-#include <string>
-#include <stdexcept>
-
-#include "grovewater.hpp"
-
-using namespace upm;
-using namespace std;
-
-GroveWater::GroveWater(int pin)
-{
-  if ( !(m_gpio = mraa_gpio_init(pin)) )
-    {
-      throw std::invalid_argument(std::string(__FUNCTION__) +
-                                  ": mraa_gpio_init() failed, invalid pin?");
-      return;
-    }
-
-  mraa_gpio_dir(m_gpio, MRAA_GPIO_IN);
-}
-
-GroveWater::~GroveWater()
-{
-  mraa_gpio_close(m_gpio);
-}
-
-bool GroveWater::isWet()
-{
-  return (!mraa_gpio_read(m_gpio) ? true : false);
-}
diff --git a/src/grovewater/grovewater.hpp b/src/grovewater/grovewater.hpp
deleted file mode 100644
index 5728ddc..0000000
--- a/src/grovewater/grovewater.hpp
+++ /dev/null
@@ -1,76 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2014 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#pragma once
-
-#include <string>
-#include <mraa/gpio.h>
-
-namespace upm {
-  /**
-   * @deprecated This library is being replaced by libupm-water
-   * @brief Grove Water Sensor
-   * @defgroup grovewater libupm-grovewater
-   * @ingroup seeed gpio liquid eak
-   */
-
-  /**
-   * @deprecated This class is being replaced by Water
-   * @library grovewater
-   * @sensor grovewater
-   * @comname Water Sensor
-   * @type liquid
-   * @man seeed
-   * @con gpio
-   * @kit eak
-   *
-   * @brief API for the Grove Water Sensor
-   *
-   * UPM module for the Grove Water sensor
-   *
-   * @image html water.jpg
-   * @snippet grovewater.cxx Interesting
-   */
-  class GroveWater {
-  public:
-    /**
-     * Grove digital water sensor constructor
-     *
-     * @param pin Digital pin to use
-     */
-    GroveWater(int pin);
-    /**
-     * GroveWater destructor
-     */
-    ~GroveWater();
-    /**
-     * Gets the water (wet/not wet) value from the sensor
-     *
-     * @return True if the sensor is wet, false otherwise
-     */
-    bool isWet();
-
-  private:
-    mraa_gpio_context m_gpio;
-  };
-}
diff --git a/src/grovewater/grovewater.json b/src/grovewater/grovewater.json
deleted file mode 100644
index d41c72a..0000000
--- a/src/grovewater/grovewater.json
+++ /dev/null
@@ -1,39 +0,0 @@
-{
-    "Library": "grovewater",
-    "Description": "Grove Water Sensor Library",
-    "Sensor Class":
-    {
-        "GroveWater":
-        {
-            "Name": "Grove Water Sensor",
-            "Description": "UPM module for the Grove Water sensor.",
-            "Aliases": ["grovewater"],
-            "Categories": ["liquid", "deprecated"],
-            "Connections": ["gpio"],
-            "Project Type": ["agriculture", "environmental", "prototyping"],
-            "Manufacturers": ["seeed"],
-            "Kits": ["eak"],
-            "Examples":
-            {
-                "Java": ["GroveWater_Example.java"],
-                "Python": ["grovewater.py"],
-                "Node.js": ["grovewater.js"],
-                "C++": ["grovewater.cxx"],
-                "C": []
-            },
-            "Specifications":
-            {
-                "Operating Voltage": {"unit": "V", "low": 4.7, "high": 5.25},
-                "Operating Current": {"unit": "mA", "max": 20},
-                "Working Temperature": {"unit": "degC", "low": 10, "high": 30}
-
-            },
-            "Urls" :
-            {
-                "Product Pages": ["https://www.seeedstudio.com/Grove-Water-Sensor-p-748.html"],
-                "Datasheets": ["http://wiki.seeed.cc/Grove-Water_Sensor/"],
-                "Schematics": []
-            }
-        }
-    }
-}
diff --git a/src/grovewfs/CMakeLists.txt b/src/grovewfs/CMakeLists.txt
deleted file mode 100644
index 89b1ac1..0000000
--- a/src/grovewfs/CMakeLists.txt
+++ /dev/null
@@ -1,5 +0,0 @@
-set (libname "grovewfs")
-set (libdescription "Water Flow Sensor")
-set (module_src ${libname}.cxx)
-set (module_hpp ${libname}.hpp)
-upm_module_init(mraa)
diff --git a/src/grovewfs/grovewfs.cxx b/src/grovewfs/grovewfs.cxx
deleted file mode 100644
index 2b6f4ba..0000000
--- a/src/grovewfs/grovewfs.cxx
+++ /dev/null
@@ -1,124 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <iostream>
-#include <string>
-#include <stdexcept>
-
-#include "grovewfs.hpp"
-
-using namespace upm;
-using namespace std;
-
-GroveWFS::GroveWFS(int pin)
-{
-  if ( !(m_gpio = mraa_gpio_init(pin)) )
-    {
-      throw std::invalid_argument(std::string(__FUNCTION__) +
-                                  ": mraa_gpio_init() failed, invalid pin?");
-      return;
-    }
-
-  mraa_gpio_dir(m_gpio, MRAA_GPIO_IN);
-
-  initClock();
-  m_flowCounter = 0;
-  m_isrInstalled = false;
-}
-
-GroveWFS::~GroveWFS()
-{
-  if (m_isrInstalled)
-    stopFlowCounter();
-
-  mraa_gpio_close(m_gpio);
-}
-
-void GroveWFS::initClock()
-{
-  gettimeofday(&m_startTime, NULL);
-}
-
-uint32_t GroveWFS::getMillis()
-{
-  struct timeval elapsed, now;
-  uint32_t elapse;
-
-  // get current time
-  gettimeofday(&now, NULL);
-
-  // compute the delta since m_startTime
-  if( (elapsed.tv_usec = now.tv_usec - m_startTime.tv_usec) < 0 ) 
-    {
-      elapsed.tv_usec += 1000000;
-      elapsed.tv_sec = now.tv_sec - m_startTime.tv_sec - 1;
-    } 
-  else 
-    {
-      elapsed.tv_sec = now.tv_sec - m_startTime.tv_sec;
-    }
-
-  elapse = (uint32_t)((elapsed.tv_sec * 1000) + (elapsed.tv_usec / 1000));
-
-  // never return 0
-  if (elapse == 0)
-    elapse = 1;
-
-  return elapse;
-}
-
-void GroveWFS::startFlowCounter()
-{
-  initClock();
-  // install our interrupt handler
-  mraa_gpio_isr(m_gpio, MRAA_GPIO_EDGE_RISING, 
-                &flowISR, this);
-
-  m_isrInstalled = true;
-}
-
-void GroveWFS::stopFlowCounter()
-{
-  // remove the interrupt handler
-  mraa_gpio_isr_exit(m_gpio);
-
-  m_isrInstalled = false;
-}
-
-void GroveWFS::flowISR(void *ctx)
-{
-  upm::GroveWFS *This = (upm::GroveWFS *)ctx;
-  This->m_flowCounter++;
-}
-
-float GroveWFS::flowRate()
-{
-  uint32_t millis = getMillis();
-  uint32_t flow = flowCounter();
-  
-  // 7.5 comes from the seeedstudio page, see the confusing datasheet :)
-  float flowRate = (float(flow) * 7.5) / ((float(millis) / 1000.0) * 60.0);
-
-  return flowRate;
-}
diff --git a/src/grovewfs/grovewfs.hpp b/src/grovewfs/grovewfs.hpp
deleted file mode 100644
index f4d230e..0000000
--- a/src/grovewfs/grovewfs.hpp
+++ /dev/null
@@ -1,142 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#pragma once
-
-#include <string>
-#include <stdint.h>
-#include <sys/time.h>
-#include <mraa/gpio.h>
-
-namespace upm {
-
-  /**
-   * @deprecated This library is being replaced by libupm-wfs
-   * @brief Grove Water Flow Sensor
-   * @defgroup grovewfs libupm-grovewfs
-   * @ingroup seeed gpio liquid eak
-   */
-
-  /**
-   * @deprecated This class is being replaced by WFS
-   * @library grovewfs
-   * @sensor grovewfs
-   * @comname Water Flow Sensor
-   * @type liquid
-   * @man seeed
-   * @web http://wiki.seeedstudio.com/wiki/G1/2_Water_Flow_sensor
-   * @con gpio
-   * @kit eak
-   *
-   * @brief API for the Grove Water Flow Sensor
-   *
-   * This sensor is used to measure water flow in liters per
-   * minute (LPM). It incorporates a Hall Effect sensor. The UPM module
-   * defines an interrupt routine to be triggered on each low pulse,
-   * keeping count. This device requires a 10K pull-up resistor for
-   * the signal line (yellow wire). There is a schematic diagram on
-   * the SeeedStudio site (3/2015):
-   * http://www.seeedstudio.com/wiki/index.php?title=G1/2_Water_Flow_sensor
-   *
-   * However, be careful when wiring this up - the schematic appears to
-   * have a bug in it: the lower left connection of the signal line
-   * (yellow) to Vcc (red) should not be there. The sensor can work
-   * with this connection, but probably not for very long.
-   *
-   * @image html grovewfs.jpg
-   * @snippet grovewfs.cxx Interesting
-   */
-  class GroveWFS {
-  public:
-    /**
-     * Grove Water Flow sensor constructor
-     *
-     * @param pin Digital pin to use
-     */
-    GroveWFS(int pin);
-    /**
-     * GroveWFS destructor
-     */
-    ~GroveWFS();
-    /**
-     * Returns the number of milliseconds elapsed since initClock()
-     * was last called.
-     *
-     * @return Elapsed milliseconds
-     */
-    uint32_t getMillis();
-
-    /**
-     * Resets the clock
-     *
-     */
-    void initClock();
-
-    /**
-     * Resets the flow counter to 0. The flow counter should be
-     * stopped via stopFlowCounter() prior to calling this function.
-     *
-     */
-    void clearFlowCounter() { m_flowCounter = 0; };
-
-    /**
-     * Starts the flow counter
-     *
-     */
-    void startFlowCounter();
-
-    /**
-     * Stops the flow counter
-     *
-     */
-    void stopFlowCounter();
-
-    /**
-     * Gets the flow counter
-     *
-     * @return Flow counter
-     */
-    uint32_t flowCounter() { return m_flowCounter; };
-
-    /**
-     * Computes the flow rate in liters per minute (LPM)
-     *
-     * @return Computed flow rate
-     */
-    float flowRate();
-
-  private:
-    /**
-     * Flow interrupt service routine (ISR)
-     *
-     */
-    static void flowISR(void *ctx);
-
-    volatile uint32_t m_flowCounter;
-    struct timeval m_startTime;
-    mraa_gpio_context m_gpio;
-    bool m_isrInstalled;
-  };
-}
-
-
diff --git a/src/grovewfs/grovewfs.i b/src/grovewfs/grovewfs.i
deleted file mode 100644
index 62595e9..0000000
--- a/src/grovewfs/grovewfs.i
+++ /dev/null
@@ -1,16 +0,0 @@
-%include "../common_top.i"
-
-/* BEGIN Java syntax  ------------------------------------------------------- */
-#ifdef SWIGJAVA
-%ignore flowISR;
-
-JAVA_JNI_LOADLIBRARY(javaupm_grovewfs)
-#endif
-/* END Java syntax */
-
-/* BEGIN Common SWIG syntax ------------------------------------------------- */
-%{
-#include "grovewfs.hpp"
-%}
-%include "grovewfs.hpp"
-/* END Common SWIG syntax */
diff --git a/src/grovewfs/grovewfs.json b/src/grovewfs/grovewfs.json
deleted file mode 100644
index 7d6e723..0000000
--- a/src/grovewfs/grovewfs.json
+++ /dev/null
@@ -1,40 +0,0 @@
-{
-    "Library": "grovewfs",
-    "Description": "API for the Grove Water Flow Sensor",
-    "Sensor Class":
-    {
-        "GroveWFS":
-        {
-            "Name": "Water Flow Sensor",
-            "Description": "This sensor is used to measure water flow in liters per minute (LPM). It incorporates a Hall Effect sensor. The UPM module defines an interrupt routine to be triggered on each low pulse, keeping count. This device requires a 10K pull-up resistor for the signal line (yellow wire). There is a schematic diagram on the SeeedStudio site (3/2015): http://www.seeedstudio.com/wiki/index.php?title=G1/2_Water_Flow_sensor However, be careful when wiring this up - the schematic appears to have a bug in it: the lower left connection of the signal line (yellow) to Vcc (red) should not be there. The sensor can work with this connection, but probably not for very long.",
-            "Aliases": ["grovewfs"],
-            "Categories": ["liquid", "deprecated"],
-            "Connections": ["gpio"],
-            "Project Type": ["agriculture", "monitoring", "prototyping"],
-            "Manufacturers": ["seeed"],
-            "Kits": ["eak"],
-            "Image": "grovewfs.jpg",
-            "Examples":
-            {
-                "Java": ["GroveWFS_Example.java"],
-                "Python": ["grovewfs.py"],
-                "Node.js": ["grovewfs.js"],
-                "C++": ["grovewfs.cxx"],
-                "C": []
-            },
-            "Specifications":
-            {
-                "Operating Voltage": {"unit": "V", "low": 5, "high": 24},
-                "Operating Current": {"unit": "mA", "typ": 15},
-                "Water Pressure": {"unit": "MPa", "max": 2},
-                "Water Temperature": {"unit": "degC", "max": 120}
-            },
-            "Urls" :
-            {
-                "Product Pages": ["https://www.seeedstudio.com/G1%26amp%3B2%26quot%3B-Water-Flow-Sensor-p-635.html"],
-                "Datasheets": ["http://wiki.seeedstudio.com/wiki/G1/2_Water_Flow_sensor", "http://www.seeedstudio.com/wiki/images/b/b7/Water_flow_sensor_datasheet.pdf"],
-                "Schematics": []
-            }
-        }
-    }
-}
diff --git a/src/gsr/CMakeLists.txt b/src/gsr/CMakeLists.txt
deleted file mode 100644
index 2b3ec8a..0000000
--- a/src/gsr/CMakeLists.txt
+++ /dev/null
@@ -1,8 +0,0 @@
-upm_mixed_module_init (NAME gsr
-    DESCRIPTION "Galvanic Skin Response (GSR) Sensor"
-    C_HDR gsr.h
-    C_SRC gsr.c
-    CPP_HDR gsr.hpp
-    CPP_SRC gsr.cxx
-    FTI_SRC gsr_fti.c
-    REQUIRES mraa)
diff --git a/src/gsr/gsr.c b/src/gsr/gsr.c
deleted file mode 100644
index 20a406b..0000000
--- a/src/gsr/gsr.c
+++ /dev/null
@@ -1,136 +0,0 @@
-/*
- * Author: Noel Eck <noel.eck@intel.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <string.h>
-#include <stdlib.h>
-
-#include "gsr.h"
-
-gsr_context gsr_init(int16_t pin)
-{
-    // make sure MRAA is initialized
-    int mraa_rv;
-    if ((mraa_rv = mraa_init()) != MRAA_SUCCESS)
-    {
-        printf("%s: mraa_init() failed (%d).\n", __FUNCTION__, mraa_rv);
-        return NULL;
-    }
-
-    gsr_context dev = (gsr_context) malloc(sizeof(struct _gsr_context));
-
-    if (dev == NULL)
-      return NULL;
-
-    /* Init aio pin */
-    dev->aio = mraa_aio_init(pin);
-
-    if (dev->aio == NULL) {
-        free(dev);
-        return NULL;
-    }
-
-    /* Set the ADC ref, scale, and offset defaults */
-    dev->m_aRef = 5.0;
-    dev->m_scale = 1.0;
-    dev->m_offset = 0.0;
-
-    return dev;
-}
-
-void gsr_close(gsr_context dev)
-{
-    mraa_aio_close(dev->aio);
-    free(dev);
-}
-
-upm_result_t gsr_set_aref(const gsr_context dev, float aref)
-{
-    dev->m_aRef = aref;
-    return UPM_SUCCESS;
-}
-
-upm_result_t gsr_set_scale(const gsr_context dev, float scale)
-{
-    dev->m_scale = scale;
-    return UPM_SUCCESS;
-}
-
-upm_result_t gsr_set_offset(const gsr_context dev, float offset)
-{
-    dev->m_offset = offset;
-    return UPM_SUCCESS;
-}
-
-float gsr_get_aref(const gsr_context dev)
-{
-    return dev->m_aRef;
-}
-
-float gsr_get_scale(const gsr_context dev)
-{
-    return dev->m_scale;
-}
-
-float gsr_get_offset(const gsr_context dev)
-{
-    return dev->m_offset;
-}
-
-upm_result_t gsr_get_normalized(const gsr_context dev, float *value)
-{
-    *value = mraa_aio_read_float(dev->aio);
-    if (*value < 0)
-        return UPM_ERROR_OPERATION_FAILED;
-    return UPM_SUCCESS;
-}
-
-upm_result_t gsr_get_raw_volts(const gsr_context dev, float *value)
-{
-    *value = mraa_aio_read_float(dev->aio);
-    if (*value < 0)
-        return UPM_ERROR_OPERATION_FAILED;
-
-    /* Scale by the ADC reference voltage */
-    *value *= dev->m_aRef;
-
-    return UPM_SUCCESS;
-}
-
-upm_result_t gsr_get_volts(const gsr_context dev, float *value)
-{
-    *value = mraa_aio_read_float(dev->aio);
-    if (*value < 0)
-        return UPM_ERROR_OPERATION_FAILED;
-
-     /* Apply raw scale */
-    *value *= dev->m_scale;
-
-     /* Scale to aRef */
-    *value *= dev->m_aRef;
-
-    /* Apply the offset in volts */
-    *value += dev->m_offset;
-
-    return UPM_SUCCESS;
-}
diff --git a/src/gsr/gsr.cxx b/src/gsr/gsr.cxx
deleted file mode 100644
index 19d4f3e..0000000
--- a/src/gsr/gsr.cxx
+++ /dev/null
@@ -1,67 +0,0 @@
-/*
- * Author: Zion Orent <zorent@ics.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <iostream>
-#include <string>
-#include <stdexcept>
-
-#include "gsr.hpp"
-
-using namespace upm;
-using namespace std;
-
-GSR::GSR(int pin)
-{
-    if ( !(m_aio = mraa_aio_init(pin)) )
-        throw std::invalid_argument(std::string(__FUNCTION__) +
-                ": mraa_aio_init() failed, invalid pin?");
-}
-
-GSR::~GSR()
-{
-    mraa_aio_close(m_aio);
-}
-
-void GSR::calibrate()
-{
-    int val, threshold, sum = 0;
-
-    for(int i=0; i<500; i++)
-    {
-        val = mraa_aio_read(m_aio);
-        if (val < 0)
-            throw std::runtime_error(std::string(__FUNCTION__) +
-                ": Failed to do an aio read.");
-        sum += val;
-        usleep(5000);
-    }
-    threshold = sum / 500;
-    cout << "Threshold = " << threshold << endl;
-}
-
-int GSR::value()
-{
-    int val = mraa_aio_read(m_aio);
-    return val;
-}
diff --git a/src/gsr/gsr.h b/src/gsr/gsr.h
deleted file mode 100644
index 46be113..0000000
--- a/src/gsr/gsr.h
+++ /dev/null
@@ -1,141 +0,0 @@
-/*
- * Author: Noel Eck <noel.eck@intel.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#pragma once
-
-#include "upm.h"
-#include "mraa/aio.h"
-
-#ifdef __cplusplus
-extern "C" {
-#endif
-
-/**
- * @file gsr.h
- * @library gsr
- * @brief C API for the GSR Sensor
- *
- * @include gsr.c
- */
-
-/**
- * driver context
- */
-typedef struct _gsr_context {
-    /* mraa aio pin context */
-    mraa_aio_context aio;
-    /* Analog voltage reference */
-    float m_aRef;
-    /* Scale */
-    float m_scale;
-    /* Offset in sensor units */
-    float m_offset;
-} *gsr_context;
-
-/**
- * Initialize analog sensor
- * @param pin Analog pin
- * @return sensor context
- */
-gsr_context gsr_init(int16_t pin);
-
-/**
- * Analog sensor destructor
- * @param sensor context pointer
- */
-void gsr_close(gsr_context dev);
-
-/**
- * Set ADC reference voltage
- * @param dev sensor context pointer
- * @param aref ADC reference voltage
- * @return Function result code
- */
-upm_result_t gsr_set_aref(const gsr_context dev, float aref);
-
-/**
- * Set sensor scale.  This scale is applied to the return value:
- *     counts = counts * scale
- * @param dev sensor context pointer
- * @param scale count scale value used
- * @return Function result code
- */
-upm_result_t gsr_set_scale(const gsr_context dev, float scale);
-
-/**
- * Set sensor offset.  This offset is applied to the return value:
- *     value = value + offset
- * @param dev sensor context pointer
- * @param offset count offset value used
- * @return Function result code
- */
-upm_result_t gsr_set_offset(const gsr_context dev, float offset);
-
-/**
- * Get sensor aref
- * @param dev sensor context pointer
- * @return Sensor ADC reference voltage
- */
-float gsr_get_aref(const gsr_context dev);
-
-/**
- * Get sensor scale
- * @param dev sensor context pointer
- * @return Sensor scale
- */
-float gsr_get_scale(const gsr_context dev);
-
-/**
- * Get sensor offset
- * @param dev sensor context pointer
- * @return Sensor offset
- */
-float gsr_get_offset(const gsr_context dev);
-
-/**
- * Read normalized value for sensor
- * @param dev sensor context pointer
- * @param *value Normalized value (0.0 -> 1.0)
- * @return Function result code
- */
-upm_result_t gsr_get_normalized(const gsr_context dev, float *value);
-
-/**
- * Read raw voltage from the sensor
- * @param dev sensor context pointer
- * @param *value Raw sensor voltage
- * @return Function result code
- */
-upm_result_t gsr_get_raw_volts(const gsr_context dev, float *value);
-
-/**
- * Read scaled/offset voltage from the sensor
- * @param dev sensor context pointer
- * @param *value Adjusted sensor voltage
- * @return Function result code
- */
-upm_result_t gsr_get_volts(const gsr_context dev, float *value);
-#ifdef __cplusplus
-}
-#endif
diff --git a/src/gsr/gsr.hpp b/src/gsr/gsr.hpp
deleted file mode 100644
index b6d5e43..0000000
--- a/src/gsr/gsr.hpp
+++ /dev/null
@@ -1,84 +0,0 @@
-/*
- * Author: Zion Orent <zorent@ics.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#pragma once
-
-#include <string>
-#include <mraa/aio.h>
-
-namespace upm {
-  /**
-   * @brief Grove GSR Galvanic Skin Response Sensor
-   * @defgroup gsr libupm-gsr
-   * @ingroup seeed analog electric
-   */
-
-  /**
-   * @library gsr
-   * @sensor gsr
-   * @comname Galvanic Skin Response (GSR) Sensor
-   * @type electric
-   * @man seeed
-   * @con analog
-   *
-   * @brief API for the Grove GSR Galvanic Skin Response Sensor
-   * 
-   * Measures the electrical conductance of skin
-   * to measure strong emotional reactions.
-   * In other words, it measures sweat on your fingers
-   * as an indicator of strong emotional reactions.
-   *
-   * @image html gsr.jpg
-   * @snippet gsr.cxx Interesting
-   */
-  class GSR {
-  public:
-    /**
-     * Grove GSR sensor constructor
-     *
-     * @param pin Analog pin to use
-     */
-    GSR(int pin);
-    /**
-     * GSR destructor
-     */
-    ~GSR();
-
-    /**
-     * Calibrates the Grove GSR sensor
-     */
-    void calibrate();
-
-    /**
-     * Gets the electrical conductance of the skin from the sensor
-     *
-     * @return Electrical conductance of the skin
-     */
-    int value();
-
-  private:
-    mraa_aio_context m_aio;
-  };
-}
-
-
diff --git a/src/gsr/gsr.json b/src/gsr/gsr.json
deleted file mode 100644
index cfda9d9..0000000
--- a/src/gsr/gsr.json
+++ /dev/null
@@ -1,39 +0,0 @@
-{
-    "Library": "gsr",
-    "Description": "API for the Grove GSR Galvanic Skin Response Sensor",
-    "Sensor Class":
-    {
-        "GSR":
-        {
-            "Name": "Galvanic Skin Response (GSR) Sensor",
-            "Description": "Measures the electrical conductance of skin to measure strong emotional reactions. In other words, it measures sweat on your fingers as an indicator of strong emotional reactions.",
-            "Aliases": ["gsr"],
-            "Categories": ["skinresponse"],
-            "Connections": ["analog"],
-            "Project Type": ["medical", "interface", "wearables", "prototyping"],
-            "Manufacturers": ["seeed"],
-            "Kits": [],
-            "Image": "gsr.jpg",
-            "Examples":
-            {
-                "Java": ["Gsr_Example.java"],
-                "Python": ["gsr.py"],
-                "Node.js": ["gsr.js"],
-                "C++": ["gsr.cxx"],
-                "C": ["gsr.c"]
-            },
-            "Specifications":
-            {
-                "Operating Voltage": {"unit": "V", "low": 3.3, "high": 5},
-                "Operating Current": {"unit": "mA", "low": 0.7, "high": 3},
-                "Operating Temperature": {"unit": "degC", "min": 0, "max": 70}
-            },
-            "Urls" :
-            {
-                "Product Pages": ["https://www.seeedstudio.com/Grove-GSR-sensor-p-1614.html"],
-                "Datasheets": ["http://wiki.seeed.cc/Grove-GSR_Sensor/", "file:///C:/Users/Malachai/Downloads/Lm324.pdf"],
-                "Schematics": ["https://github.com/SeeedDocument/Grove-GSR_Sensor/raw/master/res/Grove%20-%20GSR_v1.2_SCH.pdf", "https://github.com/SeeedDocument/Grove-GSR_Sensor/raw/master/res/Grove%20-%20GSR%20v1.0%20SCH.pdf"]
-            }
-        }
-    }
-}
diff --git a/src/gsr/gsr_fti.c b/src/gsr/gsr_fti.c
deleted file mode 100644
index ad3048a..0000000
--- a/src/gsr/gsr_fti.c
+++ /dev/null
@@ -1,119 +0,0 @@
-/*
- * Author: Noel Eck <noel.eck@intel.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <string.h>
-#include <stdlib.h>
-
-#include "gsr.h"
-#include "upm_fti.h"
-#include "fti/upm_sensor.h"
-#include "fti/upm_raw.h"
-
-/** 
- * This file implements the Function Table Interface (FTI) for this sensor
- */
-
-const char upm_gsr_name[] = "GSR";
-const char upm_gsr_description[] = "Analog gsr sensor";
-const upm_protocol_t upm_gsr_protocol[] = {UPM_ANALOG};
-const upm_sensor_t upm_gsr_category[] = {UPM_RAW};
-
-// forward declarations
-const void* upm_gsr_get_ft(upm_sensor_t sensor_type);
-void* upm_gsr_init_str(const char* protocol, const char* params);
-void upm_gsr_close(void* dev);
-const upm_sensor_descriptor_t upm_gsr_get_descriptor();
-upm_result_t upm_gsr_set_offset(const void* dev, float offset);
-upm_result_t upm_gsr_set_scale(const void* dev, float scale);
-upm_result_t upm_gsr_get_value(const void* dev, float *value);
-
-/* This sensor implementes 2 function tables */
-/* 1. Generic base function table */
-static const upm_sensor_ft ft_gen =
-{
-    .upm_sensor_init_name = &upm_gsr_init_str,
-    .upm_sensor_close = &upm_gsr_close,
-    .upm_sensor_get_descriptor = &upm_gsr_get_descriptor
-};
-
-/* 2. RAW function table */
-static const upm_raw_ft ft_raw =
-{
-    .upm_raw_set_offset = &upm_gsr_set_offset,
-    .upm_raw_set_scale = &upm_gsr_set_scale,
-    .upm_raw_get_value = &upm_gsr_get_value
-};
-
-const void* upm_gsr_get_ft(upm_sensor_t sensor_type)
-{
-    switch(sensor_type)
-    {
-        case UPM_SENSOR:
-            return &ft_gen;
-        case UPM_RAW:
-            return &ft_raw;
-        default:
-            return NULL;
-    }
-}
-
-void* upm_gsr_init_str(const char* protocol, const char* params)
-{
-    fprintf(stderr, "String initialization - not implemented, using ain0: %s\n", __FILENAME__);
-    return gsr_init(0);
-}
-
-void upm_gsr_close(void* dev)
-{
-    gsr_close((gsr_context)dev);
-}
-
-const upm_sensor_descriptor_t upm_gsr_get_descriptor()
-{
-    /* Fill in the descriptor */
-    upm_sensor_descriptor_t usd;
-    usd.name = upm_gsr_name;
-    usd.description = upm_gsr_description;
-    usd.protocol_size = 1;
-    usd.protocol = upm_gsr_protocol;
-    usd.category_size = 1;
-    usd.category = upm_gsr_category;
-
-    return usd;
-}
-
-upm_result_t upm_gsr_set_offset(const void* dev, float offset)
-{
-    return gsr_set_offset((gsr_context)dev, offset);
-}
-
-upm_result_t upm_gsr_set_scale(const void* dev, float scale)
-{
-    return gsr_set_scale((gsr_context)dev, scale);
-}
-
-upm_result_t upm_gsr_get_value(const void* dev, float *value)
-{
-    return gsr_get_volts((gsr_context)dev, value);
-}
diff --git a/src/guvas12d/CMakeLists.txt b/src/guvas12d/CMakeLists.txt
deleted file mode 100644
index 208b367..0000000
--- a/src/guvas12d/CMakeLists.txt
+++ /dev/null
@@ -1,9 +0,0 @@
-upm_mixed_module_init (NAME guvas12d
-    DESCRIPTION "Analog UV Sensor"
-    C_HDR guvas12d.h
-    C_SRC guvas12d.c
-    CPP_HDR guvas12d.hpp
-    CPP_SRC guvas12d.cxx
-    FTI_SRC guvas12d_fti.c
-    CPP_WRAPS_C
-    REQUIRES mraa utilities-c)
diff --git a/src/guvas12d/guvas12d.c b/src/guvas12d/guvas12d.c
deleted file mode 100644
index e63f2fe..0000000
--- a/src/guvas12d/guvas12d.c
+++ /dev/null
@@ -1,128 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2016 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-
-#include <assert.h>
-#include <string.h>
-#include <upm_utilities.h>
-
-#include "guvas12d.h"
-
-guvas12d_context guvas12d_init(int pin, float aref)
-{
-    guvas12d_context dev =
-        (guvas12d_context)malloc(sizeof(struct _guvas12d_context));
-
-    if (!dev)
-        return NULL;
-
-    memset((void *)dev, 0, sizeof(struct _guvas12d_context));
-
-    // make sure MRAA is initialized
-    int mraa_rv;
-    if ((mraa_rv = mraa_init()) != MRAA_SUCCESS)
-    {
-        printf("%s: mraa_init() failed (%d).\n", __FUNCTION__, mraa_rv);
-        guvas12d_close(dev);
-        return NULL;
-    }
-
-    // initialize the MRAA context
-
-    if (!(dev->aio = mraa_aio_init(pin)))
-    {
-        printf("%s: mraa_aio_init failed.\n", __FUNCTION__);
-        guvas12d_close(dev);
-
-        return NULL;
-    }
-
-    dev->ares = (float)((1 << mraa_aio_get_bit(dev->aio)) - 1);
-    dev->aref = aref;
-    dev->scale = 1.0;
-    dev->offset = 0.0;
-
-    return dev;
-}
-
-void guvas12d_close(guvas12d_context dev)
-{
-    assert(dev != NULL);
-
-    if (dev->aio)
-        mraa_aio_close(dev->aio);
-
-    free(dev);
-}
-
-upm_result_t guvas12d_get_volts(const guvas12d_context dev, float *volts)
-{
-    assert(dev != NULL);
-
-    int val;
-
-    val = mraa_aio_read(dev->aio);
-    if (val < 0)
-    {
-        printf("%s: mraa_aio_read() failed\n", __FUNCTION__);
-        return UPM_ERROR_OPERATION_FAILED;
-    }
-    *volts = (float)val * (dev->aref / dev->ares);
-
-    return UPM_SUCCESS;
-}
-
-upm_result_t guvas12d_get_intensity(const guvas12d_context dev,
-                                    float *intensity)
-{
-    assert(dev != NULL);
-
-    float volts;
-    if (guvas12d_get_volts(dev, &volts))
-    {
-        printf("%s: guvas12d_get_volts() failed\n", __FUNCTION__);
-        return UPM_ERROR_OPERATION_FAILED;
-    }
-
-    // Seeed magic number 307.0
-    *intensity = volts * 307.0;
-
-    *intensity = *intensity * dev->scale + (dev->offset * dev->scale);
-
-    return UPM_SUCCESS;
-}
-
-void guvas12d_set_offset(const guvas12d_context dev, float offset)
-{
-    assert(dev != NULL);
-
-    dev->offset = offset;
-}
-
-void guvas12d_set_scale(const guvas12d_context dev, float scale)
-{
-    assert(dev != NULL);
-
-    dev->scale = scale;
-}
diff --git a/src/guvas12d/guvas12d.cxx b/src/guvas12d/guvas12d.cxx
deleted file mode 100644
index 2ac5197..0000000
--- a/src/guvas12d/guvas12d.cxx
+++ /dev/null
@@ -1,93 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2014-2016 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <iostream>
-#include <string>
-#include <stdexcept>
-
-#include "guvas12d.hpp"
-
-using namespace upm;
-using namespace std;
-
-GUVAS12D::GUVAS12D(int pin, float aref) :
-    m_guvas12d(guvas12d_init(pin, aref))
-{
-    if (!m_guvas12d)
-    {
-      throw std::runtime_error(std::string(__FUNCTION__) +
-                               ": guvas12d_init() failed");
-      return;
-    }
-}
-
-GUVAS12D::~GUVAS12D()
-{
-    guvas12d_close(m_guvas12d);
-}
-
-float GUVAS12D::value(float aref, unsigned int samples)
-{
-    (void)(samples); // unused, this method is deprecated.
-
-    // this is a hack, but this function should go away anyway
-    if (aref != m_guvas12d->aref)
-        m_guvas12d->aref = aref;
-
-    return volts();
-}
-
-float GUVAS12D::volts()
-{
-    float volts;
-    if (guvas12d_get_volts(m_guvas12d, &volts))
-    {
-      throw std::runtime_error(std::string(__FUNCTION__) +
-                               ": guvas12d_get_volts() failed");
-    }
-
-    return volts;
-}
-
-float GUVAS12D::intensity()
-{
-    float i;
-    if (guvas12d_get_intensity(m_guvas12d, &i))
-    {
-      throw std::runtime_error(std::string(__FUNCTION__) +
-                               ": guvas12d_get_intensity() failed");
-    }
-
-    return i;
-}
-
-void GUVAS12D::setScale(float scale)
-{
-    guvas12d_set_scale(m_guvas12d, scale);
-}
-
-void GUVAS12D::setOffset(float offset)
-{
-    guvas12d_set_offset(m_guvas12d, offset);
-}
diff --git a/src/guvas12d/guvas12d.h b/src/guvas12d/guvas12d.h
deleted file mode 100644
index f4d8658..0000000
--- a/src/guvas12d/guvas12d.h
+++ /dev/null
@@ -1,108 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2016 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#pragma once
-
-#include <stdlib.h>
-#include <stdio.h>
-#include <upm.h>
-#include <mraa/aio.h>
-
-#ifdef __cplusplus
-extern "C" {
-#endif
-
-    /**
-     * @file guvas12d.h
-     * @library guvas12d
-     * @brief C API for the guvas12d driver
-     *
-     * @include guvas12d.c
-     */
-
-    /**
-     * Device context
-     */
-    typedef struct _guvas12d_context {
-        mraa_aio_context    aio;
-
-        // ADC reference voltage
-        float               aref;
-        // ADC resolution
-        float               ares;
-
-        float               scale;
-        float               offset;
-    } *guvas12d_context;
-
-    /**
-     * GUVA-S12D UV sensor constructor
-     *
-     * @param pin Analog pin to use
-     */
-    guvas12d_context guvas12d_init(int pin, float aref);
-
-    /**
-     * GUVAS12D destructor
-     */
-    void guvas12d_close(guvas12d_context dev);
-
-    /**
-     * Gets the voltage value from the sensor
-     *
-     * @param volts Pointer to average voltage reading
-     * @return UPM status.
-     */
-    upm_result_t guvas12d_get_volts(const guvas12d_context dev, float *volts);
-
-    /**
-     * Gets the illumination intensity in mW/m^2
-     *
-     * @param volts Pointer to average voltage reading
-     * @return UPM status.
-     * @return illumination intensity in mW/m^2
-     */
-    upm_result_t guvas12d_get_intensity(const guvas12d_context dev,
-                                        float *intensity);
-
-    /**
-     * Set sensor offset.  This offset is applied to the illumination
-     * intensity value before scaling.  Default is 0.0.
-     *
-     * @param dev sensor context pointer
-     * @param offset Offset to apply.
-     */
-    void guvas12d_set_offset(const guvas12d_context dev, float offset);
-
-    /**
-     * Set sensor scale.  This offset is applied to the illumination
-     * intensity value before scaling.  Default is 1.0.
-     *
-     * @param dev sensor context pointer
-     * @param scale Scale to apply.
-     */
-    void guvas12d_set_scale(const guvas12d_context dev, float scale);
-
-#ifdef __cplusplus
-}
-#endif
diff --git a/src/guvas12d/guvas12d.hpp b/src/guvas12d/guvas12d.hpp
deleted file mode 100644
index 894ef24..0000000
--- a/src/guvas12d/guvas12d.hpp
+++ /dev/null
@@ -1,123 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2014-2016 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#pragma once
-
-#include <guvas12d.h>
-
-namespace upm {
-    /**
-     * @brief GUVA-S12D UV Sensors
-     * @defgroup guvas12d libupm-guvas12d
-     * @ingroup seeed analog light eak
-     */
-
-    /**
-     * @library guvas12d
-     * @sensor guvas12d
-     * @comname Analog UV Sensor
-     * @altname GUVA-S12D UV Sensor
-     * @type light
-     * @man seeed
-     * @con analog
-     * @web http://wiki.seeed.cc/Grove-UV_Sensor/
-     * @kit eak
-     *
-     * @brief API for the GUVA-S12D UV Sensor
-     *
-     * UPM module for the GUVA-S12D UV sensor
-     *
-     * @image html guvas12d.jpg
-     * @snippet guvas12d.cxx Interesting
-     */
-    class GUVAS12D {
-    public:
-
-        /**
-         * GUVA-S12D UV sensor constructor
-         *
-         * @param pin Analog pin to use
-         * @param aref Analog reference voltage to use
-         */
-        GUVAS12D(int pin, float aref=5.0);
-
-        /**
-         * GUVAS12D destructor
-         */
-        ~GUVAS12D();
-
-        /**
-         * @deprecated This method is being replaced by the volts()
-         * and illumination() methods.
-         *
-         * Gets the average voltage value from the sensor
-         *
-         * @param aref Reference voltage in use (usually 5.0 V or 3.3 V)
-         * @param samples Number of samples to average over (currently
-         * ignored)
-         * @return Average voltage reading
-         *
-         */
-        float value(float aref, unsigned int samples);
-
-        /**
-         * Gets the voltage value from the sensor
-         *
-         * @return Voltage reading
-         *
-         */
-        float volts();
-
-        /**
-         * Gets the computed illumination intensity from the sensor in
-         * mW/m^2.
-         *
-         * @return Intensity over the sensitive wavelengths in mW/m^2
-         *
-         */
-        float intensity();
-
-        /**
-         * Set sensor scale.  This scale is applied to the intensity value
-         * before the offset is applied.  Default is 1.0.
-         *
-         * @param scale Scale to apply.
-         */
-        void setScale(float scale);
-
-        /**
-         * Set sensor offset.  This offset is applied to the intensity
-         * value before scaling.  Default is 0.0.
-         *
-         * @param offset Offset to apply.
-         */
-        void setOffset(float offset);
-
-    private:
-        /* Disable implicit copy and assignment operators */
-        GUVAS12D(const GUVAS12D&) = delete;
-        GUVAS12D &operator=(const GUVAS12D&) = delete;
-
-        guvas12d_context m_guvas12d;
-    };
-}
diff --git a/src/guvas12d/guvas12d.json b/src/guvas12d/guvas12d.json
deleted file mode 100644
index 7da9c03..0000000
--- a/src/guvas12d/guvas12d.json
+++ /dev/null
@@ -1,40 +0,0 @@
-{
-    "Library": "guvas12d",
-    "Description": "API for the GUVA-S12D UV Sensor",
-    "Sensor Class":
-    {
-        "GUVAS12D":
-        {
-            "Name": "Grove Analog UV Sensor",
-            "Description": "UPM module for the GUVA-S12D UV sensor",
-            "Aliases": ["guvas12d"],
-            "Categories": ["ultraviolet"],
-            "Connections": ["gpio"],
-            "Project Type": ["environmental", "prototyping"],
-            "Manufacturers": ["seeed"],
-            "Kits": ["eak"],
-            "Image": "guvas12d.jpg",
-            "Examples":
-            {
-                "Java": ["GUVAS12D_Example.java"],
-                "Python": ["guvas12d.py"],
-                "Node.js": ["guvas12d.js"],
-                "C++": ["guvas12d.cxx"],
-                "C": ["guvas12d.c"]
-            },
-            "Specifications":
-            {
-                "Operating Voltage": {"unit": "V", "low": 3, "high": 5.1},
-                "Operating Current": {"unit": "mA", "typ": 0.31},
-                "Response Wavelength": {"unit": "nm", "low": 240, "high": 370},
-                "Working Temperature": {"unit": "degC", "low": -30, "high": 85}
-            },
-            "Urls" :
-            {
-                "Product Pages": ["https://www.seeedstudio.com/Grove-UV-Sensor-p-1540.html"],
-                "Datasheets": ["http://wiki.seeed.cc/Grove-UV_Sensor/", "https://raw.githubusercontent.com/SeeedDocument/Grove-UV_Sensor/master/res/Grove-UV_Sensor_v1.1_Datasheets.zip"],
-                "Schematics": ["https://github.com/SeeedDocument/Grove-UV_Sensor/raw/master/res/Grove%20-%20UV%20Sensor%20v1.1sch.pdf"]
-            }
-        }
-    }
-}
diff --git a/src/guvas12d/guvas12d_fti.c b/src/guvas12d/guvas12d_fti.c
deleted file mode 100644
index 1b3a337..0000000
--- a/src/guvas12d/guvas12d_fti.c
+++ /dev/null
@@ -1,119 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2016 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <string.h>
-#include <stdlib.h>
-
-#include "guvas12d.h"
-#include "fti/upm_sensor.h"
-#include "fti/upm_voltage.h"
-
-/**
- * This file implements the Function Table Interface (FTI) for this sensor
- */
-
-const char upm_guvas12d_name[] = "GUVAS12D";
-const char upm_guvas12d_description[] = "Analog UV sensor";
-const upm_protocol_t upm_guvas12d_protocol[] = {UPM_ANALOG};
-const upm_sensor_t upm_guvas12d_category[] = {UPM_VOLTAGE};
-
-// forward declarations
-void* upm_guvas12d_init_str(const char* protocol, const char* params);
-void upm_guvas12d_close(void* dev);
-const void* upm_guvas12d_get_ft(upm_sensor_t sensor_type);
-const upm_sensor_descriptor_t upm_guvas12d_get_descriptor();
-upm_result_t upm_guvas12d_set_offset(const void* dev, float offset);
-upm_result_t upm_guvas12d_set_scale(const void* dev, float scale);
-upm_result_t upm_guvas12d_get_value(const void* dev, float *value);
-
-/* This sensor implementes 2 function tables */
-/* 1. Generic base function table */
-static const upm_sensor_ft ft_gen =
-{
-    .upm_sensor_init_name = &upm_guvas12d_init_str,
-    .upm_sensor_close = &upm_guvas12d_close,
-    .upm_sensor_get_descriptor = &upm_guvas12d_get_descriptor
-};
-
-/* 2. VOLTAGE function table */
-static const upm_voltage_ft ft_voltage =
-{
-    .upm_voltage_set_offset = &upm_guvas12d_set_offset,
-    .upm_voltage_set_scale = &upm_guvas12d_set_scale,
-    .upm_voltage_get_value = &upm_guvas12d_get_value
-};
-
-const void* upm_guvas12d_get_ft(upm_sensor_t sensor_type)
-{
-    switch(sensor_type)
-    {
-        case UPM_SENSOR:
-            return &ft_gen;
-        case UPM_VOLTAGE:
-            return &ft_voltage;
-        default:
-            return NULL;
-    }
-}
-
-void* upm_guvas12d_init_str(const char* protocol, const char* params)
-{
-    return NULL;
-}
-
-void upm_guvas12d_close(void* dev)
-{
-    guvas12d_close((guvas12d_context)dev);
-}
-
-const upm_sensor_descriptor_t upm_guvas12d_get_descriptor()
-{
-    /* Fill in the descriptor */
-    upm_sensor_descriptor_t usd;
-    usd.name = upm_guvas12d_name;
-    usd.description = upm_guvas12d_description;
-    usd.protocol_size = 1;
-    usd.protocol = upm_guvas12d_protocol;
-    usd.category_size = 1;
-    usd.category = upm_guvas12d_category;
-
-    return usd;
-}
-
-upm_result_t upm_guvas12d_set_offset(const void* dev, float offset)
-{
-    guvas12d_set_offset((guvas12d_context)dev, offset);
-    return UPM_SUCCESS;
-}
-
-upm_result_t upm_guvas12d_set_scale(const void* dev, float scale)
-{
-    guvas12d_set_scale((guvas12d_context)dev, scale);
-    return UPM_SUCCESS;
-}
-
-upm_result_t upm_guvas12d_get_value(const void* dev, float *value)
-{
-    return guvas12d_get_volts((guvas12d_context)dev, value);
-}
diff --git a/src/h3lis331dl/CMakeLists.txt b/src/h3lis331dl/CMakeLists.txt
deleted file mode 100644
index db4c931..0000000
--- a/src/h3lis331dl/CMakeLists.txt
+++ /dev/null
@@ -1,5 +0,0 @@
-set (libname "h3lis331dl")
-set (libdescription "I2C 3-axis Digital Accelerometer (400g)")
-set (module_src ${libname}.cxx)
-set (module_hpp ${libname}.hpp)
-upm_module_init(mraa)
diff --git a/src/h3lis331dl/h3lis331dl.cxx b/src/h3lis331dl/h3lis331dl.cxx
deleted file mode 100644
index 58a1f01..0000000
--- a/src/h3lis331dl/h3lis331dl.cxx
+++ /dev/null
@@ -1,622 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <unistd.h>
-#include <math.h>
-#include <iostream>
-#include <stdexcept>
-#include <string>
-
-#include "h3lis331dl.hpp"
-
-using namespace upm;
-using namespace std;
-
-
-H3LIS331DL::H3LIS331DL(int bus, uint8_t address):
-  m_i2c(bus)
-{
-  m_addr = address;
-
-  mraa::Result rv;
-  if ( (rv = m_i2c.address(m_addr)) != mraa::SUCCESS)
-    {
-      throw std::runtime_error(std::string(__FUNCTION__) +
-                               ": I2c.address() failed");
-      return;
-    }
-
-  m_rawX = m_rawY = m_rawZ = 0;
-  setAdjustmentOffsets(0, 0, 0);
-}
-
-H3LIS331DL::~H3LIS331DL()
-{
-}
-
-bool H3LIS331DL::init(DR_BITS_T odr, PM_BITS_T pm, FS_BITS_T fs)
-{
-  if (!setDataRate(odr)) {
-    return false;
-  }
-  if (!setPowerMode(pm)) {
-    return false;
-  }
-  if (!setFullScale(fs)) {
-    return false;
-  }
-
-  // now enable X, Y, and Z axes
-  if (!enableAxis(REG1_XEN | REG1_YEN | REG1_ZEN)) {
-    return false;
-  }
-
-  return true;
-}
-
-uint8_t H3LIS331DL::getChipID()
-{
-  return m_i2c.readReg(REG_WHOAMI);
-}
-
-bool H3LIS331DL::setDataRate(DR_BITS_T odr)
-{
-  uint8_t reg1 = m_i2c.readReg(REG_REG1);
-
-  reg1 &= ~(REG1_DR0 | REG1_DR1);
-  reg1 |= (odr << REG1_DR_SHIFT);
-
-  if (m_i2c.writeReg(REG_REG1, reg1))
-    {
-      throw std::runtime_error(std::string(__FUNCTION__) +
-                               ": I2c.writeReg() failed");
-      return false;
-    }
-
-  return true;
-}
-
-bool H3LIS331DL::setPowerMode(PM_BITS_T pm)
-{
-  uint8_t reg1 = m_i2c.readReg(REG_REG1);
-
-  reg1 &= ~(REG1_PM0 | REG1_PM1 | REG1_PM2);
-  reg1 |= (pm << REG1_PM_SHIFT);
-
-  if (m_i2c.writeReg(REG_REG1, reg1))
-    {
-      throw std::runtime_error(std::string(__FUNCTION__) +
-                               ": I2c.writeReg() failed");
-      return false;
-    }
-
-  return true;
-}
-
-bool H3LIS331DL::enableAxis(uint8_t axisEnable)
-{
-  uint8_t reg1 = m_i2c.readReg(REG_REG1);
-
-  reg1 &= ~(REG1_XEN | REG1_YEN | REG1_ZEN);
-  reg1 |= (axisEnable & (REG1_XEN | REG1_YEN | REG1_ZEN));
-
-  if (m_i2c.writeReg(REG_REG1, reg1))
-    {
-      throw std::runtime_error(std::string(__FUNCTION__) +
-                               ": I2c.writeReg() failed");
-      return false;
-    }
-
-  return true;
-}
-
-bool H3LIS331DL::setFullScale(FS_BITS_T fs)
-{
-  uint8_t reg4 = m_i2c.readReg(REG_REG4);
-
-  reg4 &= ~(REG4_FS0 | REG4_FS1);
-  reg4 |= (fs << REG4_FS_SHIFT);
-
-  if (m_i2c.writeReg(REG_REG4, reg4))
-    {
-      throw std::runtime_error(std::string(__FUNCTION__) +
-                               ": I2c.writeReg() failed");
-      return false;
-    }
-
-  return true;
-}
-
-bool H3LIS331DL::setHPCF(HPCF_BITS_T val)
-{
-  uint8_t reg = m_i2c.readReg(REG_REG2);
-
-  reg &= ~(REG2_HPCF0 | REG2_HPCF1);
-  reg |= (val << REG2_HPCF_SHIFT);
-
-  if (m_i2c.writeReg(REG_REG2, reg))
-    {
-      throw std::runtime_error(std::string(__FUNCTION__) +
-                               ": I2c.writeReg() failed");
-      return false;
-    }
-
-  return true;
-}
-
-bool H3LIS331DL::setHPM(HPM_BITS_T val)
-{
-  uint8_t reg = m_i2c.readReg(REG_REG2);
-
-  reg &= ~(REG2_HPM0 | REG2_HPM1);
-  reg |= (val << REG2_HPM_SHIFT);
-
-  if (m_i2c.writeReg(REG_REG2, reg))
-    {
-      throw std::runtime_error(std::string(__FUNCTION__) +
-                               ": I2c.writeReg() failed");
-      return false;
-    }
-
-  return true;
-}
-
-bool H3LIS331DL::boot()
-{
-  uint8_t reg = m_i2c.readReg(REG_REG2);
-
-  reg |= REG2_BOOT;
-
-  if (m_i2c.writeReg(REG_REG2, reg))
-    {
-      throw std::runtime_error(std::string(__FUNCTION__) +
-                               ": I2c.writeReg() failed");
-      return false;
-    }
-
-  // wait for the boot bit to clear
-  do {
-    reg = m_i2c.readReg(REG_REG2);
-    usleep(200000);
-  } while (reg & REG2_BOOT);
-
-  return true;
-}
-
-bool H3LIS331DL::enableHPF1(bool enable)
-{
-  uint8_t reg = m_i2c.readReg(REG_REG2);
-
-  if (enable)
-    reg |= REG2_HPEN1;
-  else
-    reg &= ~REG2_HPEN1;
-
-  if (m_i2c.writeReg(REG_REG2, reg))
-    {
-      throw std::runtime_error(std::string(__FUNCTION__) +
-                               ": I2c.writeReg() failed");
-      return false;
-    }
-
-  return true;
-}
-
-bool H3LIS331DL::enableHPF2(bool enable)
-{
-  uint8_t reg = m_i2c.readReg(REG_REG2);
-
-  if (enable)
-    reg |= REG2_HPEN2;
-  else
-    reg &= ~REG2_HPEN2;
-
-  if (m_i2c.writeReg(REG_REG2, reg))
-    {
-      throw std::runtime_error(std::string(__FUNCTION__) +
-                               ": I2c.writeReg() failed");
-      return false;
-    }
-
-  return true;
-}
-
-bool H3LIS331DL::enableFDS(bool enable)
-{
-  uint8_t reg = m_i2c.readReg(REG_REG2);
-
-  if (enable)
-    reg |= REG2_FDS;
-  else
-    reg &= ~REG2_FDS;
-
-  if (m_i2c.writeReg(REG_REG2, reg))
-    {
-      throw std::runtime_error(std::string(__FUNCTION__) +
-                               ": I2c.writeReg() failed");
-      return false;
-    }
-
-  return true;
-}
-
-bool H3LIS331DL::setInterruptActiveLow(bool enable)
-{
-  uint8_t reg = m_i2c.readReg(REG_REG3);
-
-  if (enable)
-    reg |= REG3_IHL;
-  else
-    reg &= ~REG3_IHL;
-
-  if (m_i2c.writeReg(REG_REG3, reg))
-    {
-      throw std::runtime_error(std::string(__FUNCTION__) +
-                               ": I2c.writeReg() failed");
-      return false;
-    }
-
-  return true;
-}
-
-bool H3LIS331DL::setInterruptOpenDrain(bool enable)
-{
-  uint8_t reg = m_i2c.readReg(REG_REG3);
-
-  if (enable)
-    reg |= REG3_PP_OD;
-  else
-    reg &= ~REG3_PP_OD;
-
-  if (m_i2c.writeReg(REG_REG3, reg))
-    {
-      throw std::runtime_error(std::string(__FUNCTION__) +
-                               ": I2c.writeReg() failed");
-      return false;
-    }
-
-  return true;
-}
-
-bool H3LIS331DL::setInterrupt1Latch(bool enable)
-{
-  uint8_t reg = m_i2c.readReg(REG_REG3);
-
-  if (enable)
-    reg |= REG3_LIR1;
-  else
-    reg &= ~REG3_LIR1;
-
-  if (m_i2c.writeReg(REG_REG3, reg))
-    {
-      throw std::runtime_error(std::string(__FUNCTION__) +
-                               ": I2c.writeReg() failed");
-      return false;
-    }
-
-  return true;
-}
-
-bool H3LIS331DL::setInterrupt2Latch(bool enable)
-{
-  uint8_t reg = m_i2c.readReg(REG_REG3);
-
-  if (enable)
-    reg |= REG3_LIR2;
-  else
-    reg &= ~REG3_LIR2;
-
-  if (m_i2c.writeReg(REG_REG3, reg))
-    {
-      throw std::runtime_error(std::string(__FUNCTION__) +
-                               ": I2c.writeReg() failed");
-      return false;
-    }
-
-  return true;
-}
-
-bool H3LIS331DL::setInterrupt1PadConfig(I_CFG_BITS_T val)
-{
-  uint8_t reg = m_i2c.readReg(REG_REG3);
-
-  reg &= ~(REG3_I1_CFG0 | REG3_I1_CFG1);
-  reg |= (val << REG3_I1_CFG_SHIFT);
-
-  if (m_i2c.writeReg(REG_REG3, reg))
-    {
-      throw std::runtime_error(std::string(__FUNCTION__) +
-                               ": I2c.writeReg() failed");
-      return false;
-    }
-
-  return true;
-}
-
-bool H3LIS331DL::setInterrupt2PadConfig(I_CFG_BITS_T val)
-{
-  uint8_t reg = m_i2c.readReg(REG_REG3);
-
-  reg &= ~(REG3_I2_CFG0 | REG3_I2_CFG1);
-  reg |= (val << REG3_I2_CFG_SHIFT);
-
-  if (m_i2c.writeReg(REG_REG3, reg))
-    {
-      throw std::runtime_error(std::string(__FUNCTION__) +
-                               ": I2c.writeReg() failed");
-      return false;
-    }
-
-  return true;
-}
-
-
-bool H3LIS331DL::enableBDU(bool enable)
-{
-  uint8_t reg = m_i2c.readReg(REG_REG4);
-
-  if (enable)
-    reg |= REG4_BDU;
-  else
-    reg &= ~REG4_BDU;
-
-  if (m_i2c.writeReg(REG_REG4, reg))
-    {
-      throw std::runtime_error(std::string(__FUNCTION__) +
-                               ": I2c.writeReg() failed");
-      return false;
-    }
-
-  return true;
-}
-
-bool H3LIS331DL::enableBLE(bool enable)
-{
-  uint8_t reg = m_i2c.readReg(REG_REG4);
-
-  if (enable)
-    reg |= REG4_BLE;
-  else
-    reg &= ~REG4_BLE;
-
-  if (m_i2c.writeReg(REG_REG4, reg))
-    {
-      throw std::runtime_error(std::string(__FUNCTION__) +
-                               ": I2c.writeReg() failed");
-      return false;
-    }
-
-  return true;
-}
-
-bool H3LIS331DL::enableSleepToWake(bool enable)
-{
-  uint8_t reg = m_i2c.readReg(REG_REG5);
-
-  if (enable)
-    reg |= (REG5_TURNON0 | REG5_TURNON1);
-  else
-    reg &= ~(REG5_TURNON0 | REG5_TURNON1);
-
-  if (m_i2c.writeReg(REG_REG5, reg))
-    {
-      throw std::runtime_error(std::string(__FUNCTION__) +
-                               ": I2c.writeReg() failed");
-      return false;
-    }
-
-  return true;
-}
-
-uint8_t H3LIS331DL::getStatus()
-{
-  return m_i2c.readReg(REG_STATUS);
-}
-
-bool H3LIS331DL::setInterrupt1Config(uint8_t val)
-{
-  uint8_t reg = m_i2c.readReg(REG_INT1_CFG);
-
-  // mask off reserved bit
-  reg = (val & ~0x40);
-
-  if (m_i2c.writeReg(REG_INT1_CFG, reg))
-    {
-      throw std::runtime_error(std::string(__FUNCTION__) +
-                               ": I2c.writeReg() failed");
-      return false;
-    }
-
-  return true;
-}
-
-bool H3LIS331DL::setInterrupt1Source(uint8_t val)
-{
-  uint8_t reg = m_i2c.readReg(REG_INT1_SRC);
-
-  // mask off reserved bit
-  reg = (val & ~0x80);
-
-  if (m_i2c.writeReg(REG_INT1_SRC, reg))
-    {
-      throw std::runtime_error(std::string(__FUNCTION__) +
-                               ": I2c.writeReg() failed");
-      return false;
-    }
-
-  return true;
-}
-
-bool H3LIS331DL::setInterrupt1Threshold(uint8_t val)
-{
-  if (m_i2c.writeReg(REG_INT1_THS, val))
-    {
-      throw std::runtime_error(std::string(__FUNCTION__) +
-                               ": I2c.writeReg() failed");
-      return false;
-    }
-
-  return true;
-}
-
-bool H3LIS331DL::setInterrupt1Duration(uint8_t val)
-{
-  if (m_i2c.writeReg(REG_INT1_DUR, val))
-    {
-      throw std::runtime_error(std::string(__FUNCTION__) +
-                               ": I2c.writeReg() failed");
-      return false;
-    }
-
-  return true;
-}
-
-bool H3LIS331DL::setInterrupt2Config(uint8_t val)
-{
-  uint8_t reg = m_i2c.readReg(REG_INT2_CFG);
-
-  // mask off reserved bit
-  reg = (val & ~0x40);
-
-  if (m_i2c.writeReg(REG_INT2_CFG, reg))
-    {
-      throw std::runtime_error(std::string(__FUNCTION__) +
-                               ": I2c.writeReg() failed");
-      return false;
-    }
-
-  return true;
-}
-
-bool H3LIS331DL::setInterrupt2Source(uint8_t val)
-{
-  uint8_t reg = m_i2c.readReg(REG_INT2_SRC);
-
-  // mask off reserved bit
-  reg = (val & ~0x80);
-
-  if (m_i2c.writeReg(REG_INT2_SRC, reg))
-    {
-      throw std::runtime_error(std::string(__FUNCTION__) +
-                               ": I2c.writeReg() failed");
-      return false;
-    }
-
-  return true;
-}
-
-bool H3LIS331DL::setInterrupt2Threshold(uint8_t val)
-{
-  if (m_i2c.writeReg(REG_INT2_THS, val))
-    {
-      throw std::runtime_error(std::string(__FUNCTION__) +
-                               ": I2c.writeReg() failed");
-      return false;
-    }
-
-  return true;
-}
-
-bool H3LIS331DL::setInterrupt2Duration(uint8_t val)
-{
-  if (m_i2c.writeReg(REG_INT2_DUR, val))
-    {
-      throw std::runtime_error(std::string(__FUNCTION__) +
-                               ": I2c.writeReg() failed");
-      return false;
-    }
-
-  return true;
-}
-
-void H3LIS331DL::update()
-{
-  uint8_t low, high;
-
-  // X
-  low = m_i2c.readReg(REG_OUT_X_L);
-  high = m_i2c.readReg(REG_OUT_X_H);
-  m_rawX = ((high << 8) | low);
-
-  // Y
-  low = m_i2c.readReg(REG_OUT_Y_L);
-  high = m_i2c.readReg(REG_OUT_Y_H);
-  m_rawY = ((high << 8) | low);
-
-  // Z
-  low = m_i2c.readReg(REG_OUT_Z_L);
-  high = m_i2c.readReg(REG_OUT_Z_H);
-  m_rawZ = ((high << 8) | low);
-}
-
-void H3LIS331DL::setAdjustmentOffsets(int adjX, int adjY, int adjZ)
-{
-  m_adjX = adjX;
-  m_adjY = adjY;
-  m_adjZ = adjZ;
-}
-
-void H3LIS331DL::getAcceleration(float *aX, float *aY, float *aZ)
-{
-  const float gains = 0.003;    // Seeed magic number?
-
-  *aX = float(m_rawX - m_adjX) * gains;
-  *aY = float(m_rawY - m_adjY) * gains;
-  *aZ = float(m_rawZ - m_adjZ) * gains;
-}
-
-void H3LIS331DL::getRawXYZ(int *x, int *y, int*z)
-{
-  *x = m_rawX;
-  *y = m_rawY;
-  *z = m_rawZ;
-}
-
-void H3LIS331DL::getXYZ(int *x, int *y, int*z)
-{
-  *x = (m_rawX - m_adjX);
-  *y = (m_rawY - m_adjY);
-  *z = (m_rawZ - m_adjZ);
-}
-
-std::vector<float> H3LIS331DL::getAcceleration()
-{
-  std::vector<float> v(3);
-  getAcceleration(&v[0], &v[1], &v[2]);
-  return v;
-}
-
-std::vector<int> H3LIS331DL::getRawXYZ()
-{
-  std::vector<int> v(3);
-  getRawXYZ(&v[0], &v[1], &v[2]);
-  return v;
-}
-
-std::vector<int> H3LIS331DL::getXYZ()
-{
-  std::vector<int> v(3);
-  getXYZ(&v[0], &v[1], &v[2]);
-  return v;
-}
diff --git a/src/h3lis331dl/h3lis331dl.hpp b/src/h3lis331dl/h3lis331dl.hpp
deleted file mode 100644
index 903a488..0000000
--- a/src/h3lis331dl/h3lis331dl.hpp
+++ /dev/null
@@ -1,638 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#pragma once
-
-#include <string>
-#include <vector>
-#include <mraa/common.hpp>
-#include <mraa/i2c.hpp>
-
-#define H3LIS331DL_I2C_BUS 0
-#define H3LIS331DL_DEFAULT_I2C_ADDR 0x18
-
-namespace upm {
-  
-  /**
-   * @brief H3LIS331DL 400g Accelerometer
-   * @defgroup h3lis331dl libupm-h3lis331dl
-   * @ingroup seeed stmicro i2c accelerometer
-   */
-
-  /**
-   * @library h3lis331dl
-   * @sensor h3lis331dl
-   * @comname I2C 3-axis Digital Accelerometer (400g)
-   * @altname Grove 3-Axis Digital Accelerometer (400g)
-   * @type accelerometer
-   * @man seeed stmicro
-   * @web http://www.seeedstudio.com/depot/Grove-3Axis-Digital-Accelerometer400g-p-1897.html
-   * @con i2c
-   *
-   * @brief API for the H3LIS331DL-based Grove 3-Axis Digital Accelerometer (400g)
-   *
-   * This is a high-performance, high-range accelerometer for extreme applications.
-   *
-   * @image html h3lis331dl.jpg
-   * @snippet h3lis331dl.cxx Interesting
-   */
-  class H3LIS331DL {
-  public:
-
-    /**
-     * H3LIS331DL registers
-     */
-    typedef enum {
-      // Reserved bytes must not be written into as they contain
-      // factory calibration data. Changing those values may lead to
-      // improper functioning of the device.
-
-      // 0x00-0x0E reserved 
-
-      REG_WHOAMI                = 0x0f,
-
-      // 0x10-0x1f reserved
-
-      REG_REG1                  = 0x20,
-      REG_REG2                  = 0x21,
-      REG_REG3                  = 0x22,
-      REG_REG4                  = 0x23,
-      REG_REG5                  = 0x24,
-
-      REG_HP_FILTER_RESET       = 0x25,
-      REG_REFERENCE             = 0x26,
-
-      REG_STATUS                = 0x27,
-
-      REG_OUT_X_L               = 0x28,
-      REG_OUT_X_H               = 0x29,
-      REG_OUT_Y_L               = 0x2a,
-      REG_OUT_Y_H               = 0x2b,
-      REG_OUT_Z_L               = 0x2c,
-      REG_OUT_Z_H               = 0x2d,
-
-      // 0x2e, 0x2f reserved
-
-      REG_INT1_CFG              = 0x30,
-      REG_INT1_SRC              = 0x31,
-      REG_INT1_THS              = 0x32,
-      REG_INT1_DUR              = 0x33,
-
-      REG_INT2_CFG              = 0x34,
-      REG_INT2_SRC              = 0x35,
-      REG_INT2_THS              = 0x36,
-      REG_INT2_DUR              = 0x37,
-
-      // 0x38-0x3f reserved
-    } H3LIS331DL_REG_T;
-    
-    /**
-     * REG1 bits
-     */
-    typedef enum {
-      REG1_XEN                  = 0x01, // X-axis enable
-      REG1_YEN                  = 0x02,
-      REG1_ZEN                  = 0x04,
-
-      REG1_DR0                  = 0x08, // data rate
-      REG1_DR1                  = 0x10,
-      REG1_DR_SHIFT             = 3,    // DR shift
-
-      REG1_PM0                  = 0x20, // power mode
-      REG1_PM1                  = 0x40,
-      REG1_PM2                  = 0x80,
-      REG1_PM_SHIFT             = 5
-    } REG1_BITS_T;
-
-    /**
-     * REG1 DR (output rate) bits
-     */
-    typedef enum {
-      DR_50_37                  = 0x0, // 50Hz output with 37Hz LPF cutoff
-      DR_100_74                 = 0x1,
-      DR_400_292                = 0x2,
-      DR_1000_780               = 0x3
-    } DR_BITS_T;
-
-    /**
-     * REG1 PM (power mode) bits
-     */
-    typedef enum {
-      PM_POWERDWN               = 0x0,
-      PM_NORMAL                 = 0x1,
-      PM_LP05                   = 0x2, // .5 updates/sec
-      PM_LP1                    = 0x3, // 1 update/sec
-      PM_LP2                    = 0x4,
-      PM_LP5                    = 0x5,
-      PM_LP10                   = 0x6
-    } PM_BITS_T;
-
-    /**
-     * REG2 bits
-     */
-    typedef enum {
-      REG2_HPCF0                = 0x01,
-      REG2_HPCF1                = 0x02,
-      REG2_HPCF_SHIFT           = 0,
-
-      REG2_HPEN1                = 0x04,
-      REG2_HPEN2                = 0x08,
-      REG2_FDS                  = 0x10,
-
-      REG2_HPM0                 = 0x20,
-      REG2_HPM1                 = 0x40,
-      REG2_HPM_SHIFT            = 5,
-
-      REG2_BOOT                 = 0x80
-    } REG2_BITS_T;
-
-    /**
-     * REG2 HPCF (high-pass cutoff frequency) bits
-     */
-    typedef enum {
-      HPCF_8                    = 0x0,
-      HPCF_16                   = 0x1,
-      HPCF_32                   = 0x2,
-      HPCF_64                   = 0x3,
-    } HPCF_BITS_T;
-
-    /**
-     * REG2 HPM (high-pass filter mode) bits
-     */
-    typedef enum {
-      HPM_NORMAL0               = 0x0,
-      HPM_REF                   = 0x1,
-      HPM_NORMAL1               = 0x2
-    } HPM_BITS_T;
-
-    /**
-     * REG3 bits
-     */
-    typedef enum {
-      REG3_I1_CFG0              = 0x01,
-      REG3_I1_CFG1              = 0x02,
-      REG3_I1_CFG_SHIFT         = 0,
-
-      REG3_LIR1                 = 0x04,
-
-      REG3_I2_CFG0              = 0x08,
-      REG3_I2_CFG1              = 0x10,
-      REG3_I2_CFG_SHIFT         = 3,
-
-      REG3_LIR2                 = 0x20,
-      REG3_PP_OD                = 0x40,
-      REG3_IHL                  = 0x80
-    } REG3_BITS_T;
-
-    /**
-     * REG3 I1/I2 PAD control bits
-     */
-    typedef enum {
-      I_SRC                     = 0x0, // INT source
-      I_OR                      = 0x1, // INT1 OR INT2 source
-      I_DR                      = 0x2, // Data Ready
-      I_BOOTING                 = 0x3  // Boot is running
-    } I_CFG_BITS_T;
-    
-    /**
-     * REG4 bits
-     */
-    typedef enum {
-      REG4_SIM                  = 0x01, // SPI 4 or 3 wire
-
-      // bits 01,02,04 reserved
-
-      REG4_FS0                  = 0x10,
-      REG4_FS1                  = 0x20,
-      REG4_FS_SHIFT             = 4,
-
-      REG4_BLE                  = 0x40, // big/little-endian
-      REG4_BDU                  = 0x80  // Block data update
-    } REG4_BITS_T;
-
-    /**
-     * REG4 FS (full scale) bits
-     */
-    typedef enum {
-      FS_100                    = 0x0, // 100g scale
-      FS_200                    = 0x1, // 200g scale
-      FS_400                    = 0x3  // 400g scale
-    } FS_BITS_T;
-
-    /**
-     * REG5 TURNON (sleep to wake) bits
-     */
-    typedef enum {
-      REG5_TURNON0              = 0x01, // turn-on mode for sleep-to-wake
-      REG5_TURNON1              = 0x02
- 
-      // bits 04-80 reserved
-    } REG5_BITS_T;
-
-    /**
-     * STATUS bits
-     */
-    typedef enum {
-      STATUS_XDA                = 0x01, // X data available
-      STATUS_YDA                = 0x02,
-      STATUS_ZDA                = 0x04,
-      STATUS_ZYXDA              = 0x08, // X, Y, and Z data available
-      STATUS_XOR                = 0x10, // X overrun
-      STATUS_YOR                = 0x20,
-      STATUS_ZOR                = 0x40,
-      STATUS_ZYXOR              = 0x80  // X, Y, and Z data overrun
-    } STATUS_BITS_T;
-
-    /**
-     * INT1/INT2 CFG bits
-     */
-    typedef enum {
-      INT_CFG_XLIE              = 0x01, // enable intr on low X event
-      INT_CFG_XHIE              = 0x02, // enable intr on high X event
-      INT_CFG_YLIE              = 0x04,
-      INT_CFG_YHIE              = 0x08,
-      INT_CFG_ZLIE              = 0x10,
-      INT_CFG_ZHIE              = 0x20,
-      // 0x40 reserved
-      INT_CFG_AOI               = 0x80 // AND or OR combination or intrs
-    } INT_CFG_BITS_T;
-
-    /**
-     * INT1/INT2 SRC bits
-     */
-    typedef enum {
-      INT_SRC_XL                = 0x01, // X low intr event
-      INT_SRC_XH                = 0x02, // X high intr event
-      INT_SRC_YL                = 0x04,
-      INT_SRC_YH                = 0x08,
-      INT_SRC_ZL                = 0x10,
-      INT_SRC_ZH                = 0x20,
-      INT_SRC_IA                = 0x40  // Interrupt generated (active)
-      // 0x80 reserved
-    } INT_SRC_BITS_T;
-    
-    /**
-     * H3LIS331DL constructor
-     *
-     * @param bus I2C bus to use
-     * @param address Address for this device
-     */
-    H3LIS331DL(int bus, uint8_t address = H3LIS331DL_DEFAULT_I2C_ADDR);
-
-    /**
-     * H3LIS331DL destructor
-     */
-    ~H3LIS331DL();
-    
-    /**
-     * Sets up initial values and starts operation
-     *
-     * @param odr Data rate: one of the DR_BITS_T values
-     * @param pm Power mode: one of the PM_BITS_T values
-     * @param fs FullScale: one of the FS_BITS_T values
-     * @return True if successful
-     */
-    bool init(DR_BITS_T odr=DR_50_37, PM_BITS_T pm=PM_NORMAL, 
-              FS_BITS_T fs=FS_100);
-
-    /**
-     * Reads and returns the chip ID (WHO_AM_I register)
-     *
-     * @return True if successful
-     */
-    uint8_t getChipID();
-
-    /**
-     * Sets the output data rate
-     *
-     * @param odr One of the DR_BITS_T values
-     * @return True if successful
-     */
-    bool setDataRate(DR_BITS_T odr);
-
-    /**
-     * Sets the power mode
-     *
-     * @param pm One of the PM_BITS_T values
-     * @return True if successful
-     */
-    bool setPowerMode(PM_BITS_T pm);
-
-    /**
-     * Enables one or more of the 3 axes. The argument is a bitmask
-     * composed of REG1_XEN, REG1_YEN, and/or REG1_ZEN corresponding to
-     * the axes you want enabled.
-     *
-     * @param axisEnable Bitmask of axes to enable 
-     * (REG1_XEN | REG1_YEN | REG1_ZEN)
-     * @return True if successful
-     */
-    bool enableAxis(uint8_t axisEnable);
-
-    /**
-     * Sets the scaling factor to 100g, 200g, or 400g
-     *
-     * @param fs One of the FS_BITS_T values
-     * @return True if successful
-     */
-    bool setFullScale(FS_BITS_T fs);
-
-    /**
-     * Sets a high-pass cutoff filter
-     *
-     * @param val One of the HPCF_BITS_T values
-     * @return True if successful
-     */
-    bool setHPCF(HPCF_BITS_T val);
-
-    /**
-     * Sets a high-pass filter mode
-     *
-     * @param val One of the HPM_BITS_T values
-     * @return True if successful
-     */
-    bool setHPM(HPM_BITS_T val);
-
-    /**
-     * Boots the device. Booting the device causes internal flash
-     * calibration values to be reloaded into the visible registers
-     * in case they have been corrupted. This function
-     * returns when the booting is complete.
-     *
-     * @return True if successful
-     */
-    bool boot();
-
-    /**
-     * Enables a high-pass filter for interrupt 1 source
-     *
-     * @param enable True to enable the filter, false otherwise
-     * @return True if successful
-     */
-    bool enableHPF1(bool enable);
-
-    /**
-     * Enables a high-pass filter for interrupt 2 source
-     *
-     * @param enable True to enable the filter, false otherwise
-     * @return True if successful
-     */
-    bool enableHPF2(bool enable);
-
-    /**
-     * Enables filtered data selection
-     *
-     * @param enable True to enable, false otherwise
-     * @return True if successful
-     */
-    bool enableFDS(bool enable);
-
-    /**
-     * Sets interrupts to be active low instead of high
-     *
-     * @param enable True to enable, false otherwise
-     * @return True if successful
-     */
-    bool setInterruptActiveLow(bool enable);
-
-    /**
-     * Sets an interrupt output mode to open drain rather than push/pull
-     *
-     * @param enable True to enable, false otherwise
-     * @return True if successful
-     */
-    bool setInterruptOpenDrain(bool enable);
-
-    /**
-     * Enables interrupt 1 latch
-     *
-     * @param enable True to enable, false otherwise
-     * @return True if successful
-     */
-    bool setInterrupt1Latch(bool enable);
-
-    /**
-     * Enables interrupt 2 latch
-     *
-     * @param enable True to enable, false otherwise
-     * @return True if successful
-     */
-    bool setInterrupt2Latch(bool enable);
-
-    /**
-     * Sets the interrupt 1 pad configuration
-     *
-     * @param val One fo the I_CFG_BITS_T values
-     * @return True if successful
-     */
-    bool setInterrupt1PadConfig(I_CFG_BITS_T val);
-
-    /**
-     * Sets the interrupt 2 pad configuration
-     *
-     * @param val One fo the I_CFG_BITS_T values
-     * @return True if successful
-     */
-    bool setInterrupt2PadConfig(I_CFG_BITS_T val);
-    
-    /**
-     * Enables block data update. When enabled, low/high output
-     * registers are not updated until both low and high values have
-     * been read.
-     *
-     * @param enable True to enable, false otherwise
-     * @return True if successful
-     */
-    bool enableBDU(bool enable);
-
-    /**
-     * Enables big-endian output for 16b reads
-     *
-     * @param enable True to enable, false otherwise
-     * @return True if successful
-     */
-    bool enableBLE(bool enable);
-
-    /**
-     * Enables sleep-to-wake functionality  
-     *
-     * @param enable True to enable, false otherwise
-     * @return True if successful
-     */
-    bool enableSleepToWake(bool enable);
-
-    /**
-     * Returns the contents of the REG_STATUS register
-     *
-     * @return Contents of the REG_STATUS register
-     */
-    uint8_t getStatus();
-
-    /**
-     * Sets up the interrupt 1 config register
-     *
-     * @param val Bitmask of desired INT_CFG_BITS_T bits
-     * @return True if successful
-     */
-    bool setInterrupt1Config(uint8_t val);
-
-    /**
-     * Sets up the interrupt 2 config register
-     *
-     * @param val Bitmask of desired INT_CFG_BITS_T bits
-     * @return True if successful
-     */
-    bool setInterrupt2Config(uint8_t val);
-
-    /**
-     * Sets up the interrupt 1 source register
-     *
-     * @param val Bitmask of desired INT_SRC_BITS_T bits
-     * @return True if successful
-     */
-    bool setInterrupt1Source(uint8_t val);
-
-    /**
-     * Sets up the interrupt 2 source register
-     *
-     * @param val Bitmask of desired INT_SRC_BITS_T bits
-     * @return True if successful
-     */
-    bool setInterrupt2Source(uint8_t val);
-
-    /**
-     * Sets up the interrupt 1 threshold register
-     *
-     * @param val Threshold to set
-     * @return True if successful
-     */
-    bool setInterrupt1Threshold(uint8_t val);
-
-    /**
-     * Sets up the interrupt 2 threshold register
-     *
-     * @param val Threshold to set
-     * @return True if successful
-     */
-    bool setInterrupt2Threshold(uint8_t val);
-
-    /**
-     * Sets up the interrupt 1 duration register
-     *
-     * @param val Duration to set
-     * @return True if successful
-     */
-    bool setInterrupt1Duration(uint8_t val);
-
-    /**
-     * Sets up the interrupt 2 duration register
-     *
-     * @param val Duration to set
-     * @return True if successful
-     */
-    bool setInterrupt2Duration(uint8_t val);
-
-    /**
-     * Reads the sensor and stores current values internally
-     */
-    void update();
-
-    /**
-     * Sets adjustment offsets for each of the axes. This can be used
-     * for calibration. The values supplied here are subtracted
-     * from the axis data read from the device.
-     *
-     * @param adjX Amount by which to correct the X-axis measurement
-     * @param adjY Amount by which to correct the Y-axis measurement
-     * @param adjZ Amount by which to correct the Z-axis measurement
-     */
-    void setAdjustmentOffsets(int adjX, int adjY, int adjZ);
-
-    /**
-     * Gets acceleration values for each of the axes
-     *
-     * @param aX Returned X-axis acceleration
-     * @param aY Returned Y-axis acceleration
-     * @param aZ Returned Z-axis acceleration
-     */
-    void getAcceleration(float *aX, float *aY, float *aZ);
-
-    /**
-     * Gets raw axis values
-     *
-     * @param x Returned raw X-axis value
-     * @param y Returned raw Y-axis value
-     * @param z Returned raw Z-axis value
-     */
-    void getRawXYZ(int *x, int *y, int *z);
-
-    /**
-     * Gets adjusted axis values
-     *
-     * @param x Returned X-axis value
-     * @param y Returned Y-axis value
-     * @param z Returned Z-axis value
-     */
-    void getXYZ(int *x, int *y, int *z);
-
-    /**
-     * Gets acceleration values for each of the axes
-     *
-     * @return std::vector containing X, Y, Z acceleration values
-     */
-    std::vector<float> getAcceleration();
-
-    /**
-     * Gets raw axis values
-     *
-     * @return std::vector containing X, Y, Z raw values
-     */
-    std::vector<int> getRawXYZ();
-
-    /**
-     * Gets adjusted axis values
-     *
-     * @return std::vector containing X, Y, Z adjusted axis values
-     */
-    std::vector<int> getXYZ();
-
-    /**
-     * Provides public access to the MRAA I2C context of the class for
-     * direct user access
-     *
-     * @return Reference to the class I2C context
-     */
-    mraa::I2c& i2cContext() { return m_i2c; };
-
-
-  protected:
-    int16_t m_rawX, m_rawY, m_rawZ;
-    int16_t m_adjX, m_adjY, m_adjZ;
-    mraa::I2c m_i2c;
-
-  private:
-    uint8_t m_addr;
-  };
-}
-
-
diff --git a/src/h3lis331dl/h3lis331dl.i b/src/h3lis331dl/h3lis331dl.i
deleted file mode 100644
index d014000..0000000
--- a/src/h3lis331dl/h3lis331dl.i
+++ /dev/null
@@ -1,27 +0,0 @@
-%include "../common_top.i"
-
-/* BEGIN Java syntax  ------------------------------------------------------- */
-#ifdef SWIGJAVA
-%include "std_vector.i"
-
-%apply float *OUTPUT { float *aX, float *aY, float *aZ  };
-%apply int *OUTPUT { int *x, int *y, int*z };
-
-%ignore i2cContext;
-
-%template(IntVector) std::vector<int>;
-%template(FloatVector) std::vector<float>;
-
-JAVA_JNI_LOADLIBRARY(javaupm_h3lis331dl)
-#endif
-/* END Java syntax */
-
-/* BEGIN Common SWIG syntax ------------------------------------------------- */
-%pointer_functions(int, intp);
-%pointer_functions(float, floatp);
-
-%{
-#include "h3lis331dl.hpp"
-%}
-%include "h3lis331dl.hpp"
-/* END Common SWIG syntax */
diff --git a/src/h3lis331dl/h3lis331dl.json b/src/h3lis331dl/h3lis331dl.json
deleted file mode 100644
index 102d92d..0000000
--- a/src/h3lis331dl/h3lis331dl.json
+++ /dev/null
@@ -1,39 +0,0 @@
-{
-    "Library": "h3lis331dl",
-    "Description": "H3LIS331DL I2C Accelerometer (400g) Library",
-    "Sensor Class":
-    {
-        "H3LIS331DL":
-        {
-            "Name": "I2C 3-axis Digital Accelerometer (400g)",
-            "Description": "This is a high-performance, high-range accelerometer for extreme applications.",
-            "Aliases": ["h3lis331dl"],
-            "Categories": ["accelerometer"],
-            "Connections": ["i2c"],
-            "Project Type": ["IMU", "prototyping"],
-            "Manufacturers": ["seeed", "stmicro"],
-            "Kits": [],
-            "Image": "h3lis331dl.jpg",
-            "Examples":
-            {
-                "Java": ["H3LIS331DL_Example.java"],
-                "Python": ["h3lis331dl.py"],
-                "Node.js": ["h3lis331dl.js"],
-                "C++": ["h3lis331dl.cxx"],
-                "C": []
-            },
-            "Specifications":
-            {
-                "Operating Voltage": {"unit": "V", "low": 3.3, "high": 5},
-                "Operating Current": {"unit": "uA", "typ": 300},
-                "Measurement Range": {"unit": "+-g", "low": 100, "high": 400}
-            },
-            "Urls" :
-            {
-                "Product Pages": ["httpshttps://www.seeedstudio.com/Grove-3Axis-Digital-Accelerometer400g-p-1897.html"],
-                "Datasheets": ["http://www.st.com/web/en/resource/technical/document/datasheet/DM00053090.pdf", "http://wiki.seeed.cc/Grove-3-Axis_Digital_Accelerometer-400g/"],
-                "Schematics": []
-            }
-        }
-    }
-}
diff --git a/src/h803x/CMakeLists.txt b/src/h803x/CMakeLists.txt
deleted file mode 100644
index dce473f..0000000
--- a/src/h803x/CMakeLists.txt
+++ /dev/null
@@ -1,10 +0,0 @@
-if (MODBUS_FOUND)
-  set (libname "h803x")
-  set (libdescription "Module for the Veris H803X (H8035/H8036)")
-  set (module_src ${libname}.cxx)
-  set (module_hpp ${libname}.hpp)
-
-  set (reqlibname "libmodbus")
-  upm_module_init(${MODBUS_LIBRARIES})
-  target_include_directories(${libname} PUBLIC ${MODBUS_INCLUDE_DIRS})
-endif ()
diff --git a/src/h803x/h803x.cxx b/src/h803x/h803x.cxx
deleted file mode 100644
index 03e7f58..0000000
--- a/src/h803x/h803x.cxx
+++ /dev/null
@@ -1,356 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2016 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <unistd.h>
-#include <assert.h>
-#include <errno.h>
-#include <iostream>
-#include <stdexcept>
-#include <string>
-
-#include "h803x.hpp"
-
-using namespace upm;
-using namespace std;
-
-// We can't use the modbus float conversion functions since they
-// assume the first word is the LSW.  On this device, the first word
-// is MSW.  In addition, the data is already IEEE 754 formatted, which
-// won't work with just the bit shuffling modbus_get_float*() does.
-static float regs2float(uint16_t h, uint16_t l)
-{
-  // this function will fail horribly if the following isn't true
-  assert(sizeof(float) == sizeof(uint32_t));
-
-  // we can't use a cast here, since the data is already IEEE 754
-  // formatted, so use a union instead.
-  union {
-    uint32_t i;
-    float f;
-  } converter;
-
-  converter.i = ((uint32_t)h << 16) | l;
-  return converter.f;
-}
-
-
-H803X::H803X(std::string device, int address, int baud, int bits, char parity,
-               int stopBits) :
-  m_mbContext(0)
-{
-  // check some of the parameters
-  if (!(bits == 7 || bits == 8))
-    {
-      throw std::out_of_range(std::string(__FUNCTION__)
-                              + ": bits must be 7 or 8");
-    }
-
-  if (!(parity == 'N' || parity == 'E' || parity == 'O'))
-    {
-      throw std::out_of_range(std::string(__FUNCTION__)
-                              + ": parity must be 'N', 'O', or 'E'");
-    }
-
-  if (!(stopBits == 1 || stopBits == 2))
-    {
-      throw std::out_of_range(std::string(__FUNCTION__)
-                              + ": stopBits must be 1 or 2");
-    }
-
-  // now, open/init the device and modbus context
-
-  if (!(m_mbContext = modbus_new_rtu(device.c_str(), baud, parity, bits,
-                                     stopBits)))
-    {
-      throw std::runtime_error(std::string(__FUNCTION__)
-                               + ": modbus_new_rtu() failed");
-    }
-
-  // set the slave address of the device we want to talk to
-
-  // addresses are only 8bits wide
-  address &= 0xff;
-  if (modbus_set_slave(m_mbContext, address))
-    {
-      throw std::runtime_error(std::string(__FUNCTION__)
-                               + ": modbus_set_slave() failed");
-    }
-
-  // set the serial mode
-  modbus_rtu_set_serial_mode(m_mbContext, MODBUS_RTU_RS232);
-
-  // now connect..
-  if (modbus_connect(m_mbContext))
-    {
-      throw std::runtime_error(std::string(__FUNCTION__)
-                               + ": modbus_connect() failed");
-    }
-
-  // will set m_isH8036 appropriately
-  testH8036();
-
-  clearData();
-
-  // turn off debugging
-  setDebug(false);
-}
-
-H803X::~H803X()
-{
-  if (m_mbContext)
-    {
-      modbus_close(m_mbContext);
-      modbus_free(m_mbContext);
-    }
-}
-
-int H803X::readHoldingRegs(HOLDING_REGS_T reg, int len, uint16_t *buf)
-{
-  int rv;
-  int retries = 5;
-
-  // Sometimes it seems the device goes to sleep, and therefore a read
-  // will timeout, so we will retry up to 5 times.
-
-  while (retries >= 0)
-    {
-      if ((rv = modbus_read_registers(m_mbContext, reg, len, buf)) < 0)
-        {
-          if (errno == ETIMEDOUT)
-            {
-              // timeout
-              retries--;
-              sleep(1);
-            }
-          else if (errno == EMBXILADD)
-            {
-              // invalid registers will return a EMBXILADD (modbus)
-              // error.  We want to detect these as a way to determine
-              // whether we are dealing with an H8035 or H8036.
-              return -1;
-            }
-          else
-            {
-              // anything else is a failure.
-              throw std::runtime_error(std::string(__FUNCTION__)
-                                       + ": modbus_read_registers() failed: "
-                                       + modbus_strerror(errno));
-            }
-        }
-      else
-        return rv;              // success
-    }
-
-  // if we're here, then all the retries were exhausted
-  throw std::runtime_error(std::string(__FUNCTION__)
-                           + ": modbus_read_registers() timed out after "
-                           + "5 retries");
-}
-
-void H803X::writeHoldingReg(HOLDING_REGS_T reg, int value)
-{
-  if (modbus_write_register(m_mbContext, reg, value) != 1)
-    {
-      throw std::runtime_error(std::string(__FUNCTION__)
-                               + ": modbus_write_register() failed: "
-                               + modbus_strerror(errno));
-    }
-}
-
-void H803X::update()
-{
-  static const int h8035NumRegs = 4; // 2 regs * 2
-  static const int h8036NumRegs = 52; // 26 regs * 2
-
-  int numRegs = (isH8036() ? h8036NumRegs : h8035NumRegs);
-
-  uint16_t buf[numRegs];
-
-  // This should only fail (return -1) if we got isH8036() wrong
-  if (readHoldingRegs(HOLDING_CONSUMPTION_KWH, numRegs, buf) < 0)
-    {
-      throw std::out_of_range(std::string(__FUNCTION__) +
-                              ": readHoldingRegs() failed: "
-                               + modbus_strerror(errno));
-    }
-
-  // And so it begins...
-
-  // H8035 / H8036
-  m_consumptionkWh              = regs2float(buf[0], buf[1]);
-  m_realPowerkW                 = regs2float(buf[2], buf[3]);
-  
-  // H8036 only
-  if (isH8036())
-    {
-      m_reactivePowerkVAR       = regs2float(buf[4], buf[5]);
-      m_apparentPowerkVA        = regs2float(buf[6], buf[7]);
-      m_powerFactor             = regs2float(buf[8], buf[9]);
-      
-      m_voltsLineToLine         = regs2float(buf[10], buf[11]);
-      m_voltsLineToNeutral      = regs2float(buf[12], buf[13]);
-      
-      m_current                 = regs2float(buf[14], buf[15]);
-      
-      m_realPowerPhaseAkW       = regs2float(buf[16], buf[17]);
-      m_realPowerPhaseBkW       = regs2float(buf[18], buf[19]);
-      m_realPowerPhaseCkW       = regs2float(buf[20], buf[21]);
-      
-      m_powerFactorPhaseA       = regs2float(buf[22], buf[23]);
-      m_powerFactorPhaseB       = regs2float(buf[24], buf[25]);
-      m_powerFactorPhaseC       = regs2float(buf[26], buf[27]);
-      
-      m_voltsPhaseAB            = regs2float(buf[28], buf[29]);
-      m_voltsPhaseBC            = regs2float(buf[30], buf[31]);
-      m_voltsPhaseAC            = regs2float(buf[32], buf[33]);
-      m_voltsPhaseAN            = regs2float(buf[34], buf[35]);
-      m_voltsPhaseBN            = regs2float(buf[36], buf[37]);
-      m_voltsPhaseCN            = regs2float(buf[38], buf[39]);
-      
-      m_currentPhaseA           = regs2float(buf[40], buf[41]);
-      m_currentPhaseB           = regs2float(buf[42], buf[43]);
-      m_currentPhaseC           = regs2float(buf[44], buf[45]);
-      
-      m_avgRealPowerkW          = regs2float(buf[46], buf[47]);
-      m_minRealPowerkW          = regs2float(buf[48], buf[49]);
-      m_maxRealPowerkW          = regs2float(buf[50], buf[51]);
-    }
-}
-
-string H803X::getSlaveID()
-{
-  uint8_t id[MODBUS_MAX_PDU_LENGTH];
-  int rv;
-
-  if ((rv = modbus_report_slave_id(m_mbContext, MODBUS_MAX_PDU_LENGTH, id)) < 0)
-    {
-      throw std::runtime_error(std::string(__FUNCTION__)
-                               + ": modbus_report_slave_id() failed: "
-                               + modbus_strerror(errno));
-
-    }
-
-  // the first byte is the number of bytes in the response, the second
-  // byte is the active indicator (00 = off, ff = on), and the rest
-  // are ascii identification (company, model, and serial number) data.
-
-  if (rv > 2)
-    {
-      string retID((char *)&id[2], rv - 2);
-      return retID;
-    }
-  else
-    return "";
-}
-
-void H803X::setSlaveAddress(int addr)
-{
-  // addresses are only 8bits wide
-  addr &= 0xff;
-
-  if (modbus_set_slave(m_mbContext, addr))
-    {
-      throw std::runtime_error(std::string(__FUNCTION__)
-                               + ": modbus_set_slave() failed: "
-                               + modbus_strerror(errno));
-    }
-
-  // retest H8036
-  testH8036();
-
-  // clear out any previously stored data
-  clearData();
-}
-
-void H803X::setDebug(bool enable)
-{
-  m_debugging = enable;
-
-  if (enable)
-    modbus_set_debug(m_mbContext, 1);
-  else
-    modbus_set_debug(m_mbContext, 0);
-}
-
-void H803X::clearData()
-{
-    // H8035
-    m_consumptionkWh = 0.0;
-    m_realPowerkW = 0.0;
-
-    // H8036
-    m_reactivePowerkVAR = 0.0;
-    m_apparentPowerkVA = 0.0;
-    m_powerFactor = 0.0;
-    m_voltsLineToLine = 0.0;
-    m_voltsLineToNeutral = 0.0;
-    m_current = 0.0;
-    m_realPowerPhaseAkW = 0.0;
-    m_realPowerPhaseBkW = 0.0;
-    m_realPowerPhaseCkW = 0.0;
-    m_powerFactorPhaseA = 0.0;
-    m_powerFactorPhaseB = 0.0;
-    m_powerFactorPhaseC = 0.0;
-    m_voltsPhaseAB = 0.0;
-    m_voltsPhaseBC = 0.0;
-    m_voltsPhaseAC = 0.0;
-    m_voltsPhaseAN = 0.0;
-    m_voltsPhaseBN = 0.0;
-    m_voltsPhaseCN = 0.0;
-    m_currentPhaseA = 0.0;
-    m_currentPhaseB = 0.0;
-    m_currentPhaseC = 0.0;
-    m_avgRealPowerkW = 0.0;
-    m_minRealPowerkW = 0.0;
-    m_maxRealPowerkW = 0.0;
-}
-
-void H803X::testH8036()
-{
-  // here we test a register read to see if we are on an H8036 device,
-  // which can provide much more information.
-
-  uint16_t regs[2];
-
-  // here, we'll read 2 registers that only exist on the H8036.  Any
-  // failure other than a illegal data access will generate an
-  // exception.  A valid request will return >0, and an illegal
-  // register read will return -1.
-  if (readHoldingRegs(HOLDING_REACTIVE_POWER_KVAR, 2, regs) == -1)
-    m_isH8036 = false;
-  else
-    m_isH8036 = true;
-}
-
-void H803X::presetConsumption(float value, MULTIPLIERS_T multiplier)
-{
-  uint32_t i = uint32_t(value * float(multiplier));
-
-  uint16_t h = uint16_t(i >> 16);
-  uint16_t l = uint16_t(i & 0xffff);
-
-  // always write the LSW first
-  writeHoldingReg(HOLDING_CONSUMPTION_KWH_INT_L, l);
-  writeHoldingReg(HOLDING_CONSUMPTION_KWH_INT_H, h);
-}
diff --git a/src/h803x/h803x.hpp b/src/h803x/h803x.hpp
deleted file mode 100644
index 8a64600..0000000
--- a/src/h803x/h803x.hpp
+++ /dev/null
@@ -1,547 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2016 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#pragma once
-
-#include <string>
-
-#include <modbus/modbus.h>
-
-namespace upm {
-
-  /**
-   * @brief H803X Energy Meter
-   * @defgroup h803x libupm-h803x
-   * @ingroup uart electric
-   */
-
-  /**
-   * @library h803x
-   * @sensor h803x
-   * @comname Veris H803X Energy Meter Module
-   * @type electric
-   * @man veris
-   * @con uart
-   * @web http://www.veris.com/Item/H8035-0100-2.aspx
-   *
-   * @brief UPM API for the Veris H803X Energy Meter
-   *
-   * This module implements support for the Veris H8035 and H8036
-   * Energy Meters.
-   *
-   * The H8036 is similar to the H8035, but provides much more data.
-   *
-   * The Enercept H8035/H8036 is an innovative three-phase networked
-   * (Modbus RTU) power transducer that combines electronics and high
-   * accuracy industrial grade CTs in a single package. The need for
-   * external electrical enclosures is eliminated, greatly reducing
-   * installation time and cost. Color-coordination between voltage
-   * leads and CTs makes phase matching easy. Additionally, these
-   * transducers automatically detect and compensate for phase
-   * reversal, eliminating the concern of CT load orientation. Up to
-   * 63 Transducers can be daisy-chained on a single RS-485 network.
-   *
-   * This module was developed using libmodbus 3.1.2, and the H8035.
-   * The H8036 has not been tested.  libmodbus 3.1.2 must be present
-   * for this module to build.
-   *
-   * It was developed using an RS232->RS485 interface.  You cannot use
-   * the built in MCU TTL UART pins for accessing this device -- you
-   * must use a full Serial RS232->RS485 or USB-RS485 interface
-   * connected via USB.
-   *
-   * @snippet h803x.cxx Interesting
-   */
-
-  class H803X {
-  public:
-
-    // MODBUS holding registers.  These offsets are for the MSW only.
-    // The LSW always follows, though they are not enumerated here.
-    // These are all 2 register (32-bit total (16b HSW + 16b LSW))
-    // quantities, in IEEE 754 floating point format.
-    typedef enum {
-      // these two registers are used only for presetConsumption()
-      HOLDING_CONSUMPTION_KWH_INT_L             = 0, // preset use only
-      HOLDING_CONSUMPTION_KWH_INT_H             = 1, // preset use only
-
-      // H8035/H8036
-      HOLDING_CONSUMPTION_KWH                   = 258, // floating point data
-
-      HOLDING_REAL_POWER_KW                     = 260,
-
-      // H8036 only
-      HOLDING_REACTIVE_POWER_KVAR               = 262,
-      HOLDING_APPARENT_POWER_KVA                = 264,
-      HOLDING_POWER_FACTOR                      = 266,
-      HOLDING_VOLTS_LINE_TO_LINE                = 268,
-      HOLDING_VOLTS_LINE_TO_NEUTRAL             = 270,
-      HOLDING_CURRENT                           = 272,
-      HOLDING_REAL_POWER_PHASE_A_KWH            = 274,
-      HOLDING_REAL_POWER_PHASE_B_KWH            = 276,
-      HOLDING_REAL_POWER_PHASE_C_KWH            = 278,
-      HOLDING_POWER_FACTOR_PHASE_A              = 280,
-      HOLDING_POWER_FACTOR_PHASE_B              = 282,
-      HOLDING_POWER_FACTOR_PHASE_C              = 284,
-      HOLDING_VOLTS_PHASE_AB                    = 286,
-      HOLDING_VOLTS_PHASE_BC                    = 288,
-      HOLDING_VOLTS_PHASE_AC                    = 290,
-      HOLDING_VOLTS_PHASE_AN                    = 292,
-      HOLDING_VOLTS_PHASE_BN                    = 294,
-      HOLDING_VOLTS_PHASE_CN                    = 296,
-      HOLDING_CURRENT_PHASE_A                   = 298,
-      HOLDING_CURRENT_PHASE_B                   = 300,
-      HOLDING_CURRENT_PHASE_C                   = 302,
-      HOLDING_AVG_REAL_POWER_KW                 = 304,
-      HOLDING_MIN_REAL_POWER_KW                 = 306,
-      HOLDING_MAX_REAL_POWER_KW                 = 308
-    } HOLDING_REGS_T;
-
-    // these enums are used by presetConsumption() to scale the value
-    // properly depending on the devices' current capacity.
-    typedef enum {
-      MULT_100A                                 = 128, // 100A devices
-      MULT_300A_400A                            = 32,
-      MULT_800A                                 = 16,
-      MULT_1600A                                = 8,
-      MULT_2400A                                = 4
-    } MULTIPLIERS_T;
-
-    /**
-     * H803X constructor
-     *
-     * @param device Path to the serial device
-     * @param address The MODBUS slave address
-     * @param baud The baudrate of the device.  Default: 9600
-     * @param bits The number of bits per byte.  Default: 8
-     * @param parity The parity of the connection, 'N' for None, 'E'
-     * for Even, 'O' for Odd.  Default: 'N'
-     * @param stopBits The number of stop bits.  Default: 2
-     */
-    H803X(std::string device, int address, int baud=9600, int bits=8,
-          char parity='N', int stopBits=2);
-
-    /**
-     * H803X Destructor
-     */
-    ~H803X();
-
-    /**
-     * Read current values from the sensor and update internal stored
-     * values.  This method must be called prior to querying any
-     * values.
-     */
-    void update();
-
-    /**
-     * Return a string corresponding the the device's MODBUS slave ID.
-     *
-     * @return string represnting the MODBUS slave ID
-     */
-    std::string getSlaveID();
-
-    /**
-     * Set a new MODBUS slave address.  This is useful if you have
-     * multiple H803X devices on a single bus.  When this method is
-     * called, the current stored data is cleared, and a new attempt
-     * is made to determine whether the target device is an H8035 or
-     * H8036.
-     *
-     * @param addr The new slave address to set
-     */
-    void setSlaveAddress(int addr);
-
-    /**
-     * Preset the kWh accumulated Consumption registers to a
-     * predefined value.  This is generally not advised, but is
-     * provided for those installations that might require it.  The
-     * multiplier depends on the current range of your device.  Be
-     * sure to select the right multiplier for your devices'
-     * supported current capacity.
-     *
-     * @param value The desired value for the consumption accumulator
-     * registers in kWh.
-     * @param multiplier The correct MULTIPLIERS_T value for your device.
-     */
-    void presetConsumption(float value, MULTIPLIERS_T multiplier);
-
-    /**
-     * Return the accumulated consumption value, in kWh. update() must
-     * have been called prior to calling this method.
-     *
-     * @return The accumulated consumption.
-     */
-    float getConsumption()
-    {
-      return m_consumptionkWh;
-    };
-
-    /**
-     * Return the real power value in kW. update() must have been
-     * called prior to calling this method.
-     *
-     * @return The real power value in kW.
-     */
-    float getRealPower()
-    {
-      return m_realPowerkW;
-    };
-
-    /**
-     * Return the reactive power value in kVAR (kilo-volt Amperes
-     * Reactive). update() must have been called prior to calling this
-     * method.
-     *
-     * @return The reactive power value in kVAR.
-     */
-    float getReactivePower()
-    {
-      return m_reactivePowerkVAR;
-    };
-
-    /**
-     * Return the apparent power value in kVA. update() must have been
-     * called prior to calling this method.
-     *
-     * @return The apparent power value in kVA.
-     */
-    float getApparentPower()
-    {
-      return m_apparentPowerkVA;
-    };
-
-    /**
-     * Return the power factor value. update() must have been called
-     * prior to calling this method.
-     *
-     * @return The power factor.
-     */
-    float getPowerFactor()
-    {
-      return m_powerFactor;
-    };
-
-    /**
-     * Return the voltage line to line value. update() must have been
-     * called prior to calling this method.
-     *
-     * @return The voltage, line to line.
-     */
-    float getVoltsLineToLine()
-    {
-      return m_voltsLineToLine;
-    };
-
-    /**
-     * Return the voltage line to neutral. update() must have been
-     * called prior to calling this method.
-     *
-     * @return The voltage, line to neutral.
-     */
-    float getVoltsLineToNeutral()
-    {
-      return m_voltsLineToNeutral;
-    };
-
-    /**
-     * Return the current value in amps. update() must have been
-     * called prior to calling this method.
-     *
-     * @return The current value in amps.
-     */
-    float getCurrent()
-    {
-      return m_current;
-    };
-
-    /**
-     * Return the real power for phase A. update() must have been
-     * called prior to calling this method.
-     *
-     * @return The real power for phase A.
-     */
-    float getRealPowerPhaseA()
-    {
-      return m_realPowerPhaseAkW;
-    };
-
-    /**
-     * Return the real power for phase B. update() must have been
-     * called prior to calling this method.
-     *
-     * @return The real power for phase B.
-     */
-    float getRealPowerPhaseB()
-    {
-      return m_realPowerPhaseBkW;
-    };
-
-    /**
-     * Return the real power for phase C. update() must have been
-     * called prior to calling this method.
-     *
-     * @return The real power for phase C.
-     */
-    float getRealPowerPhaseC()
-    {
-      return m_realPowerPhaseCkW;
-    };
-
-    /**
-     * Return the power factor for phase A. update() must have been
-     * called prior to calling this method.
-     *
-     * @return The power factor for phase A.
-     */
-    float getPowerFactorPhaseA()
-    {
-      return m_powerFactorPhaseA;
-    };
-
-    /**
-     * Return the power factor for phase B. update() must have been
-     * called prior to calling this method.
-     *
-     * @return The power factor for phase B.
-     */
-    float getPowerFactorPhaseB()
-    {
-      return m_powerFactorPhaseB;
-    };
-
-    /**
-     * Return the power factor for phase C. update() must have been
-     * called prior to calling this method.
-     *
-     * @return The power factor for phase C.
-     */
-    float getPowerFactorPhaseC()
-    {
-      return m_powerFactorPhaseC;
-    };
-
-    /**
-     * Return the voltage for phase A to B. update() must have been
-     * called prior to calling this method.
-     *
-     * @return The voltage for phase A to B.
-     */
-    float getVoltsPhaseAToB()
-    {
-      return m_voltsPhaseAB;
-    };
-
-    /**
-     * Return the voltage for phase B to C. update() must have been
-     * called prior to calling this method.
-     *
-     * @return The voltage for phase B to C.
-     */
-    float getVoltsPhaseBToC()
-    {
-      return m_voltsPhaseBC;
-    };
-
-    /**
-     * Return the voltage for phase A to B. update() must have been
-     * called prior to calling this method.
-     *
-     * @return The voltage for phase A to B.
-     */
-    float getVoltsPhaseAToC()
-    {
-      return m_voltsPhaseAC;
-    };
-
-    /**
-     * Return the voltage for phase A to neutral. update() must have
-     * been called prior to calling this method.
-     *
-     * @return The voltage for phase A to neutral.
-     */
-    float getVoltsPhaseAToNeutral()
-    {
-      return m_voltsPhaseAN;
-    };
-
-    /**
-     * Return the voltage for phase B to neutral. update() must have
-     * been called prior to calling this method.
-     *
-     * @return The voltage for phase B to neutral.
-     */
-    float getVoltsPhaseBToNeutral()
-    {
-      return m_voltsPhaseBN;
-    };
-
-    /**
-     * Return the voltage for phase C to neutral. update() must have
-     * been called prior to calling this method.
-     *
-     * @return The voltage for phase C to neutral.
-     */
-    float getVoltsPhaseCToNeutral()
-    {
-      return m_voltsPhaseCN;
-    };
-
-    /**
-     * Return the current for phase A. update() must have been called
-     * prior to calling this method.
-     *
-     * @return The current for phase A.
-     */
-    float getCurrentPhaseA()
-    {
-      return m_currentPhaseA;
-    };
-
-    /**
-     * Return the current for phase B. update() must have been called
-     * prior to calling this method.
-     *
-     * @return The current for phase B.
-     */
-    float getCurrentPhaseB()
-    {
-      return m_currentPhaseB;
-    };
-
-    /**
-     * Return the current for phase C. update() must have been called
-     * prior to calling this method.
-     *
-     * @return The current for phase C.
-     */
-    float getCurrentPhaseC()
-    {
-      return m_currentPhaseC;
-    };
-
-    /**
-     * Return the average real power. update() must have been called
-     * prior to calling this method.
-     *
-     * @return The average real power.
-     */
-    float getAvgRealPower()
-    {
-      return m_avgRealPowerkW;
-    };
-
-    /**
-     * Return the minimum real power. update() must have been called
-     * prior to calling this method.
-     *
-     * @return The minimum real power.
-     */
-    float getMinRealPower()
-    {
-      return m_minRealPowerkW;
-    };
-
-    /**
-     * Return the maximum real power. update() must have been called
-     * prior to calling this method.
-     *
-     * @return The maximum real power.
-     */
-    float getMaxRealPower()
-    {
-      return m_maxRealPowerkW;
-    };
-
-    /**
-     * Enable or disable debugging output.  This primarily enables and
-     * disables libmodbus debugging output.
-     *
-     * @param enable true to enable debugging, false otherwise
-     */
-    void setDebug(bool enable);
-
-    /**
-     * Indicate whether the connected device is an H8035 or an H8036.
-     * The H8036 provides many more data registers.
-     *
-     * @return true if we are using an H8036, false otherwise.
-     */
-    bool isH8036()
-    {
-      return m_isH8036;
-    };
-
-  protected:
-    // holding registers
-    int readHoldingRegs(HOLDING_REGS_T reg, int len, uint16_t *buf);
-    void writeHoldingReg(HOLDING_REGS_T reg, int value);
-
-    // clear out all stored data
-    void clearData();
-    
-    // MODBUS context
-    modbus_t *m_mbContext;
-
-    // test to see if the connected device is an H8036, and set
-    // m_isH8036 appropriately
-    void testH8036();
-
-    // Is this an H8036 (has extended registers)
-    bool m_isH8036;
-
-  private:
-    bool m_debugging;
-
-    // data
-
-    // H8035 / H8036
-    float m_consumptionkWh;
-    float m_realPowerkW;
-
-    // H8036 only
-    float m_reactivePowerkVAR;
-    float m_apparentPowerkVA;
-    float m_powerFactor;
-    float m_voltsLineToLine;
-    float m_voltsLineToNeutral;
-    float m_current; // in amps
-    float m_realPowerPhaseAkW;
-    float m_realPowerPhaseBkW;
-    float m_realPowerPhaseCkW;
-    float m_powerFactorPhaseA;
-    float m_powerFactorPhaseB;
-    float m_powerFactorPhaseC;
-    float m_voltsPhaseAB;
-    float m_voltsPhaseBC;
-    float m_voltsPhaseAC;
-    float m_voltsPhaseAN;
-    float m_voltsPhaseBN;
-    float m_voltsPhaseCN;
-    float m_currentPhaseA;
-    float m_currentPhaseB;
-    float m_currentPhaseC;
-    float m_avgRealPowerkW;
-    float m_minRealPowerkW;
-    float m_maxRealPowerkW;
-  };
-}
diff --git a/src/h803x/h803x.i b/src/h803x/h803x.i
deleted file mode 100644
index a2dc005..0000000
--- a/src/h803x/h803x.i
+++ /dev/null
@@ -1,14 +0,0 @@
-%include "../common_top.i"
-
-/* BEGIN Java syntax  ------------------------------------------------------- */
-#ifdef SWIGJAVA
-JAVA_JNI_LOADLIBRARY(javaupm_h803x)
-#endif
-/* END Java syntax */
-
-/* BEGIN Common SWIG syntax ------------------------------------------------- */
-%{
-#include "h803x.hpp"
-%}
-%include "h803x.hpp"
-/* END Common SWIG syntax */
diff --git a/src/h803x/h803x.json b/src/h803x/h803x.json
deleted file mode 100644
index 29cbfe8..0000000
--- a/src/h803x/h803x.json
+++ /dev/null
@@ -1,38 +0,0 @@
-{
-    "Library": "h803x",
-    "Description": "UPM API for the Veris H803X Energy Meter",
-    "Sensor Class":
-    {
-        "H803X":
-        {
-            "Name": "Veris H803X Energy Meter Module",
-            "Description": "The H8036 is similar to the H8035, but provides much more data. The Enercept H8035/H8036 is an innovative three-phase networked (Modbus RTU) power transducer that combines electronics and high accuracy industrial grade CTs in a single package. The need for external electrical enclosures is eliminated, greatly reducing installation time and cost. Color-coordination between voltage leads and CTs makes phase matching easy. Additionally, these transducers automatically detect and compensate for phase reversal, eliminating the concern of CT load orientation. Up to 63 Transducers can be daisy-chained on a single RS-485 network. This module was developed using libmodbus 3.1.2, and the H8035. The H8036 has not been tested.  libmodbus 3.1.2 must be present for this module to build. It was developed using an RS232->RS485 interface.  You cannot use the built in MCU TTL UART pins for accessing this device -- you must use a full Serial RS232->RS485 or USB-RS485 interface connected via USB.",
-            "Aliases": ["h803x"],
-            "Categories": ["energy", "electric"],
-            "Connections": ["uart"],
-            "Project Type": ["prototyping"],
-            "Manufacturers": ["veris"],
-            "Kits": [],
-            "Examples":
-            {
-                "Java": ["H803X_Example.java"],
-                "Python": ["h803x.py"],
-                "Node.js": ["h803x.js"],
-                "C++": ["h803x.cxx"],
-                "C": []
-            },
-            "Specifications":
-            {
-                "Operating Voltage": {"unit": "VAC", "low": 208, "high": 480},
-                "Operating Current": {"unit": "A", "max": 2400},
-                "Operating Temperature": {"unit": "degC", "low": 0, "high": 60}
-            },
-            "Urls" :
-            {
-                "Product Pages": ["http://www.veris.com/Item/H8035-0100-2.aspx"],
-                "Datasheets": ["http://www.veris.com/docs/Datasheets/H803x_d0117.pdf"],
-                "Schematics": []
-            }
-        }
-    }
-}
diff --git a/src/hcsr04/CMakeLists.txt b/src/hcsr04/CMakeLists.txt
deleted file mode 100644
index 48c0c2a..0000000
--- a/src/hcsr04/CMakeLists.txt
+++ /dev/null
@@ -1,8 +0,0 @@
-upm_mixed_module_init (NAME hcsr04
-    DESCRIPTION "Micropik HCSR04"
-    C_HDR hcsr04.h
-    C_SRC hcsr04.c
-    CPP_HDR hcsr04.hpp
-    CPP_SRC hcsr04.cxx
-    CPP_WRAPS_C
-    REQUIRES mraa utilities-c)
diff --git a/src/hcsr04/hcsr04.c b/src/hcsr04/hcsr04.c
deleted file mode 100644
index 69c3953..0000000
--- a/src/hcsr04/hcsr04.c
+++ /dev/null
@@ -1,127 +0,0 @@
-/*
- * Author: Yevgeniy Kiveisha <yevgeniy.kiveisha@intel.com>
- * Author: Rafael Neri <rafael.neri@gmail.com>
- * Author: Jun Kato <i@junkato.jp>
- * Contributions by: Abhishek Malik <abhishek.malik@intel.com>
- * Copyright (c) 2014-2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#include "upm_utilities.h"
-#include "hcsr04.h"
-
-hcsr04_context hcsr04_init(int triggerPin, int echoPin) {
-    // make sure MRAA is initialized
-    int mraa_rv;
-    if ((mraa_rv = mraa_init()) != MRAA_SUCCESS)
-    {
-        printf("%s: mraa_init() failed (%d).\n", __FUNCTION__, mraa_rv);
-        return NULL;
-    }
-
-    hcsr04_context dev = (hcsr04_context) malloc(sizeof(struct _hcsr04_context));
-
-    if(!dev) {
-        return NULL;
-    }
-
-    // initialize the GPIO pins
-    dev->trigPin = mraa_gpio_init(triggerPin);
-    if(!dev->trigPin) {
-        printf("Unable to initialize the trigger pin\n");
-        free(dev);
-        return NULL;
-    }
-
-    dev->echoPin = mraa_gpio_init(echoPin);
-    if(!dev->echoPin) {
-        printf("Unable to initialize the echo pin\n");
-        free(dev);
-        return NULL;
-    }
-
-    // Setting direction for the GPIO pins
-    if(mraa_gpio_dir(dev->trigPin, MRAA_GPIO_OUT) != MRAA_SUCCESS) {
-        printf("Unable to set the direction of the trigger Pin\n");
-        free(dev);
-        return NULL;
-    }
-
-    if(mraa_gpio_dir(dev->echoPin, MRAA_GPIO_IN) != MRAA_SUCCESS) {
-        printf("Unable to set the direction of the echo Pin\n");
-        free(dev);
-        return NULL;
-    }
-
-    // Setting the trigger pin to logic level 0
-    if(mraa_gpio_write(dev->trigPin, 0) != MRAA_SUCCESS) {
-        free(dev);
-        return NULL;
-    }
-
-    // initialize the interrupt counter
-    dev->interruptCounter = 0;
-
-    return dev;
-}
-
-void hcsr04_close(hcsr04_context dev) {
-    mraa_gpio_close(dev->trigPin);
-    mraa_gpio_close(dev->echoPin);
-    free(dev);
-}
-
-double hcsr04_get_distance(hcsr04_context dev, HCSR04_U unit) {
-    // set value to start cycle right after trigger
-    long cycleLength = 0, sampleTime = 0;
-    struct timeval tv;
-    int reading = 0;
-
-    dev->interruptCounter = 0;
-    gettimeofday(&tv, NULL);
-
-    // The datasheet suggests using cycles of upto 60 ms
-    // being a little libteral and using 70 ms, though a limit
-    // should not be necessary at all
-    cycleLength = (1000000 * tv.tv_sec) + tv.tv_usec + 70000;
-    mraa_gpio_write(dev->trigPin, 1);
-    upm_delay_us(10);
-    mraa_gpio_write(dev->trigPin, 0);
-
-    while(sampleTime < cycleLength) {
-        reading = mraa_gpio_read(dev->echoPin);
-        if(reading == 1 && dev->interruptCounter == 0) {
-            gettimeofday(&tv, NULL);
-            dev->startTime = (1000000 * tv.tv_sec) + tv.tv_usec;
-            dev->interruptCounter++;
-        } else if(reading == 0 && dev->interruptCounter == 1) {
-            gettimeofday(&tv, NULL);
-            dev->endTime = (1000000 * tv.tv_sec) + tv.tv_usec;
-            break;
-        } else {
-            sampleTime = (1000000 * tv.tv_sec) + tv.tv_usec;
-        }
-    }
-
-    if(unit == HCSR04_CM)
-        return ((dev->endTime - dev->startTime)/2)/29.1;
-    else
-        return ((dev->endTime - dev->startTime)/2)/74.1;
-}
diff --git a/src/hcsr04/hcsr04.cxx b/src/hcsr04/hcsr04.cxx
deleted file mode 100644
index 0f7c1ce..0000000
--- a/src/hcsr04/hcsr04.cxx
+++ /dev/null
@@ -1,51 +0,0 @@
-/*
- * Author: Yevgeniy Kiveisha <yevgeniy.kiveisha@intel.com>
- * Author: Rafael Neri <rafael.neri@gmail.com>
- * Copyright (c) 2014-2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <iostream>
-#include <string>
-#include <stdexcept>
-
-#include "hcsr04.hpp"
-
-using namespace upm;
-
-HCSR04::HCSR04 (int triggerPin, int echoPin) :
-    m_hcsr04(hcsr04_init(triggerPin, echoPin))
-{
-    if(!m_hcsr04)
-        throw std::runtime_error(std::string(__FUNCTION__) +
-                                ": hcsr04_init failed");
-}
-
-HCSR04::~HCSR04 ()
-{
-    hcsr04_close(m_hcsr04);
-}
-
-double
-HCSR04::getDistance(HCSR04_U unit)
-{
-    return hcsr04_get_distance(m_hcsr04, unit);
-}
diff --git a/src/hcsr04/hcsr04.h b/src/hcsr04/hcsr04.h
deleted file mode 100644
index 4153277..0000000
--- a/src/hcsr04/hcsr04.h
+++ /dev/null
@@ -1,84 +0,0 @@
-/*
- * Author: Yevgeniy Kiveisha <yevgeniy.kiveisha@intel.com>
- * Author: Rafael Neri <rafael.neri@gmail.com>
- * Author: Jun Kato <i@junkato.jp>
- * Contributions by: Abhishek Malik <abhishek.malik@intel.com>
- * Copyright (c) 2014-2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#pragma once
-
-#include <stdio.h>
-#include <string.h>
-#include <mraa/gpio.h>
-#include <sys/time.h>
-
-#ifdef __cplusplus
-extern "C" {
-#endif
-
-typedef enum {
-    HCSR04_CM = 0,
-    HCSR04_INCH } HCSR04_U;
-
-/**
- * @file hcsr04.h
- * @library hcsr04
- * @brief C API for the HCSR04 Ultrasonic Ranger sensor
- *
- * @include hcsr04.c
- */
-
-typedef struct _hcsr04_context {
-    mraa_gpio_context        trigPin;
-    mraa_gpio_context        echoPin;
-    int                      interruptCounter;
-    long                     startTime;
-    long                     endTime;
-} *hcsr04_context;
-
-/**
- * HCSR04 Initialization function
- *
- * @param triggerPin GPIO pin for trigger
- * @param echoPin GPIO pin used for output from sensor
- * @return hcsr04_context
- */
-hcsr04_context hcsr04_init(int triggerPin, int echoPin);
-
-/**
- * HCSR04 Close function
- *
- * @param dev hcsr04_context pointer
- */
-void hcsr04_close(hcsr04_context dev);
-
-/**
- * Function to get the distance from the HCSR04 sensor
- *
- * @param unit cm/inches
- * @return distance in specified unit
- */
-double hcsr04_get_distance(hcsr04_context dev, HCSR04_U unit);
-
-#ifdef __cplusplus
-}
-#endif
\ No newline at end of file
diff --git a/src/hcsr04/hcsr04.hpp b/src/hcsr04/hcsr04.hpp
deleted file mode 100644
index 495cddf..0000000
--- a/src/hcsr04/hcsr04.hpp
+++ /dev/null
@@ -1,78 +0,0 @@
-/*
- * Author: Yevgeniy Kiveisha <yevgeniy.kiveisha@intel.com>
- * Author: Rafael Neri <rafael.neri@gmail.com>
- * Copyright (c) 2014-2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#pragma once
-
-#include "hcsr04.h"
-
-namespace upm {
-/**
- * @brief HC-SR04 Ultrasonic Sensor
- * @defgroup hcsr04 libupm-hcsr04
- * @ingroup generic gpio sound
- */
-
-/**
- * @library hcsr04
- * @sensor hcsr04
- * @comname Ultrasonic Distance Measuring Sensor
- * @type sound
- * @man generic
- * @con gpio
- * @web https://www.sparkfun.com/products/13959
- *
- * @brief API for the HC-SR04 Ultrasonic Sensor
- *
- * This module defines the HC-SR04 interface for libhcsr04
- *
- * @image html groveultrasonic.jpg
- * @snippet hcsr04.cxx Interesting
- */
-class HCSR04 {
-    public:
-        /**
-         * Instantiates an HCSR04 object
-         *
-         * @param triggerPin Pin to trigger the sensor for distance
-         * @param echoPin Pulse response to triggering
-         */
-        HCSR04 (int triggerPin, int echoPin);
-        /**
-         * HCSR04 object destructor
-         */
-        ~HCSR04 ();
-
-        /**
-         * Gets the distance from the sensor
-         *
-         * @param unit Selects units for measurement
-         */
-        double getDistance (HCSR04_U unit);
-
-    private:
-        hcsr04_context m_hcsr04;
-        HCSR04(const HCSR04& src) { /* do not create copied constructor */ }
-        HCSR04& operator=(const HCSR04&) {return *this;}
-    };
-}
diff --git a/src/hcsr04/hcsr04.i b/src/hcsr04/hcsr04.i
deleted file mode 100644
index 62d2f34..0000000
--- a/src/hcsr04/hcsr04.i
+++ /dev/null
@@ -1,15 +0,0 @@
-%include "../common_top.i"
-
-/* BEGIN Java syntax  ------------------------------------------------------- */
-#ifdef SWIGJAVA
-JAVA_JNI_LOADLIBRARY(javaupm_hcsr04)
-#endif
-/* END Java syntax */
-
-/* BEGIN Common SWIG syntax ------------------------------------------------- */
-%{
-#include "hcsr04.hpp"
-%}
-%include "hcsr04.h"
-%include "hcsr04.hpp"
-/* END Common SWIG syntax */
diff --git a/src/hcsr04/hcsr04.json b/src/hcsr04/hcsr04.json
deleted file mode 100644
index 9792206..0000000
--- a/src/hcsr04/hcsr04.json
+++ /dev/null
@@ -1,38 +0,0 @@
-{
-    "Library": "hcsr04",
-    "Description": "HC-SR04 Ultrasonic Sensor Library",
-    "Sensor Class":
-    {
-        "HCSR04":
-        {
-            "Name": "HC-SR04 Ultrasonic Distance Measuring Sensor",
-            "Description": "This module defines the HC-SR04 interface for libhcsr04.",
-            "Aliases": ["hcsr04"],
-            "Categories": ["ultrasonic", "distance"],
-            "Connections": ["gpio"],
-            "Project Type": ["robotics", "safety", "prototyping"],
-            "Manufacturers": ["sparkfun"],
-            "Kits": [],
-            "Examples":
-            {
-                "Java": ["HCSR04_Example.java"],
-                "Python": ["hcsr04.py"],
-                "Node.js": ["hcsr04.js"],
-                "C++": ["hcsr04.cxx"],
-                "C": ["hcsr04.c"]
-            },
-            "Specifications":
-            {
-                "Operating Voltage": {"unit": "V", "typ": 5},
-                "Operating Current": {"unit": "mA", "typ": 15},
-                "Measurement Range": {"unit": "cm", "low": 2, "high": 400}
-            },
-            "Urls" :
-            {
-                "Product Pages": ["https://www.sparkfun.com/products/13959"],
-                "Datasheets": ["https://cdn.sparkfun.com/datasheets/Sensors/Proximity/HCSR04.pdf"],
-                "Schematics": []
-            }
-        }
-    }
-}
diff --git a/src/hdc1000/CMakeLists.txt b/src/hdc1000/CMakeLists.txt
deleted file mode 100644
index 93bea61..0000000
--- a/src/hdc1000/CMakeLists.txt
+++ /dev/null
@@ -1,5 +0,0 @@
-set (libname "hdc1000")
-set (libdescription "Humidity/Temperature Sensor")
-set (module_src ${libname}.cpp)
-set (module_hpp ${libname}.hpp)
-upm_module_init(mraa)
diff --git a/src/hdc1000/hdc1000.cpp b/src/hdc1000/hdc1000.cpp
deleted file mode 100644
index 48c1dce..0000000
--- a/src/hdc1000/hdc1000.cpp
+++ /dev/null
@@ -1,135 +0,0 @@
-/*
- * Author: Norbert Wesp <nwesp@phytec.de>
- * Copyright (c) 2017 Phytec Messtechnik GmbH.
- *
- * based on: RIOT-driver hdc1000 by Johann Fischer <j.fischer@phytec.de>
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <iostream>
-#include <string>
-#include <stdexcept>
-
-#include <unistd.h>
-#include <stdlib.h>
-#include <endian.h>
-
-#include "hdc1000.hpp"
-
-using namespace upm;
-
-HDC1000::HDC1000(int bus, int devAddr) : m_i2ControlCtx(bus) {
-    m_temperature = 0;
-    m_humidity = 0;
-
-    m_name = HDC1000_NAME;
-
-    m_controlAddr = devAddr;
-    m_bus = bus;
-
-    mraa::Result ret = m_i2ControlCtx.address(m_controlAddr);
-    if (ret != mraa::SUCCESS) {
-        throw std::invalid_argument(std::string(__FUNCTION__) +
-                                    ": mraa_i2c_address() failed");
-    }
-
-    if (checkID() != 0) {
-        /* sensor_id does not match! maybe wrong sensor chosen? */
-        throw std::invalid_argument(std::string(__FUNCTION__) +
-                                    ": checkID() failed");
-    }
-
-    sampleData();
-}
-
-int
-HDC1000::checkID(void)
-{
-    uint8_t tmp[2];
-    uint16_t id;
-    int re = 0;
-
-    re = m_i2ControlCtx.readBytesReg(HDC1000_DEVICE_ID_REG, tmp, 2);
-    if (re != 2) {
-        /* not enough bytes were read! */
-        return -1;
-    }
-
-    id = ((uint16_t)tmp[0] << 8) | tmp[1];
-
-    if (id != HDC1000_DEVICE_ID) {
-        return -1;
-    }
-
-    return 0;
-}
-
-void
-HDC1000::resetSensor(void)
-{
-    mraa::Result ret = m_i2ControlCtx.writeByte(0);
-    if (ret != mraa::SUCCESS) {
-        throw std::invalid_argument(std::string(__FUNCTION__) +
-                                    ": mraa_i2c_write_byte() failed");
-    }
-    usleep(SLEEP_SEC);
-}
-
-void
-HDC1000::sampleData(void)
-{
-    uint8_t itemp[4];
-    uint16_t traw, hraw;
-    int re = 0;
-
-    resetSensor();
-
-    re = m_i2ControlCtx.read(itemp, 4);
-    if (re != 4) {
-        /* not enough bytes were read! */
-        throw std::invalid_argument(std::string(__FUNCTION__) +
-                                    ": mraa_i2c_read(4) failed");
-    }
-
-    traw = ((uint16_t)itemp[0] << 8) | itemp[1];
-    m_temperature = ((((int32_t)traw * 16500) >> 16) -4000);
-
-    hraw = ((uint16_t)itemp[2] << 8) | itemp[3];
-    m_humidity = (((int32_t)hraw * 10000) >> 16);
-}
-
-float
-HDC1000::getTemperature(int bSampleData)
-{
-    if (bSampleData) {
-        sampleData();
-    }
-    return (float)(m_temperature * 0.01);
-}
-
-float
-HDC1000::getHumidity(int bSampleData)
-{
-    if (bSampleData) {
-        sampleData();
-    }
-    return (float)(m_humidity * 0.01);
-}
diff --git a/src/hdc1000/hdc1000.hpp b/src/hdc1000/hdc1000.hpp
deleted file mode 100644
index 2bcb5d5..0000000
--- a/src/hdc1000/hdc1000.hpp
+++ /dev/null
@@ -1,148 +0,0 @@
-/*
- * Author: Norbert Wesp <nwesp@phytec.de>
- * Copyright (c) 2017 Phytec Messtechnik GmbH.
- *
- * based on: RIOT-driver hdc1000 by Johann Fischer <j.fischer@phytec.de>
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#pragma once
-
-#include <string>
-#include <mraa/i2c.hpp>
-#include <math.h>
-
-#define HDC1000_NAME "hdc1000"
-#define HDC1000_i2C_ADDRESS         0x43
-#define HDC1000_MANUFACTURER_ID     0x5449  /* ID of Texas Instruments */
-#define HDC1000_DEVICE_ID           0x1000  /* ID of HDC1000 device */
-
-/* HDC1000 Register Map */
-#define HDC1000_TEMPERATURE         0x00
-#define HDC1000_HUMIDITY            0x01
-#define HDC1000_CONFIGURATION       0x02
-#define HDC1000_MANUFACTURER_ID_REG 0xFE
-#define HDC1000_DEVICE_ID_REG       0xFF
-
-/* HDC1000 configuration register bitmap */
-#define HDC1000_RST_SOFT            0x8000
-#define HDC1000_HEAT                (1 << 13)
-#define HDC1000_SEQ_MODE            (1 << 12)
-#define HDC1000_BTST_LOW            (1 << 11)
-#define HDC1000_TRES_14             (0)
-#define HDC1000_TRES_11             (1 << 10)
-#define HDC1000_HRES_14             (0)
-#define HDC1000_HRES_11             (1 << 8)
-#define HDC1000_HRES_8              (1 << 9)
-
-#define SLEEP_SEC                   (1000*1000)
-
-namespace upm {
-
-/**
- * @brief HDC1000 Temperature and Humidity Sensor
- * @defgroup hdc1000 libupm-hdc1000
- * @ingroup ti i2c temp
- */
-
-/**
- * @library hdc1000
- * @sensor hdc1000
- * @comname HDC1000 Temperature & Humidity Sensor
- * @type temp
- * @man ti
- * @web http://www.ti.com/lit/ds/symlink/hdc1000.pdf
- * @con i2c
- *
- * @brief API for the HDC1000 Temperature & Humidity Sensor
- *
- * Description in web-link above:
- * The HDC1000 is a digital humidity sensor with integrated temperature sensor
- * that provides excellent measurement accuracy at very low power. The device
- * measures humidity based on a novel capacitive sensor. The humidity and
- * temperature sensors are factory calibrated. The innovative
- * WLCSP (Wafer Level Chip Scale Package) simplifies board design with the use
- * of an ultra-compact package. The sensing element of the HDC1000 is placed on
- * the bottom part of the device, which makes the HDC1000 more robust against
- * dirt, dust, and other environmental contaminants. The HDC1000 is functional
- * within the full -40 to +125 [degC] temperature range.
- *
- * @snippet hdc1000.cxx Interesting
- */
-class HDC1000 {
-    public:
-        /**
-         * Instantiates an HDC1000 object
-         *
-         * @param bus Number of the used bus
-         * @param devAddr Address of the used I2C device
-         */
-        HDC1000 (int bus, int devAddr=HDC1000_i2C_ADDRESS);
-
-        /**
-         * Check device_id of sensor
-         *
-         * @return  0 on succes
-         *         -1 on error
-         */
-        int checkID(void);
-
-        /**
-         * Performs a soft reset of the HDC1000 device to ensure
-         * it is in a known state.
-         */
-        void resetSensor(void);
-
-        /**
-         * Initiates a temperature/pressure mesasurement and waits
-         * to complete.
-         */
-        void sampleData(void);
-
-        /**
-         * Get the current measured humidity [RH]
-         *
-         * @param bSampleData Flag to read sensor
-         * @return The humidity sensor temp in degC
-         */
-        float getHumidity(int bSampleData = false);
-
-        /**
-         * Get the humidity cell temperature [degC]
-         *
-         * @param bSampleData Flag to read sensor
-         * @return The humidity sensor temp in degC
-         */
-        float getTemperature(int bSampleData = false);
-
-    private:
-
-        std::string m_name;
-
-        int m_controlAddr;
-        int m_bus;
-        mraa::I2c m_i2ControlCtx;
-
-        int32_t m_temperature;
-        int32_t m_humidity;
-};
-
-}
diff --git a/src/hdc1000/hdc1000.json b/src/hdc1000/hdc1000.json
deleted file mode 100644
index 537238c..0000000
--- a/src/hdc1000/hdc1000.json
+++ /dev/null
@@ -1,38 +0,0 @@
-{
-    "Library": "hdc1000",
-    "Description": "API for the HDC1000 Temperature & Humidity Sensor",
-    "Sensor Class":
-    {
-        "HDC1000":
-        {
-            "Name": "HDC1000 Temperature and Humidity Sensor",
-            "Description": "The HDC1000 is a digital humidity sensor with integrated temperature sensor that provides excellent measurement accuracy at very low power. The device measures humidity based on a novel capacitive sensor. The humidity and temperature sensors are factory calibrated. The innovative WLCSP (Wafer Level Chip Scale Package) simplifies board design with the use of an ultra-compact package. The sensing element of the HDC1000 is placed on the bottom part of the device, which makes the HDC1000 more robust against dirt, dust, and other environmental contaminants. The HDC1000 is functional within the full -40 to +125 [degC] temperature range.",
-            "Aliases": ["hdc1000"],
-            "Categories": ["temperature", "humidity"],
-            "Connections": ["i2c"],
-            "Project Type": ["environmental", "", "prototyping"],
-            "Manufacturers": ["ti"],
-            "Kits": [],
-            "Examples":
-            {
-                "Java": [],
-                "Python": ["hdc1000.py"],
-                "Node.js": [],
-                "C++": ["hdc1000.cxx"],
-                "C": []
-            },
-            "Specifications":
-            {
-                "Operating Voltage": {"unit": "V", "low": 3, "high": 5},
-                "Operating Current": {"unit": "uA", "low": 0.82, "high": 1.2},
-                "Operating Temperature": {"unit": "degC", "low": -40, "high": 125}
-            },
-            "Urls" :
-            {
-                "Product Pages": ["http://www.ti.com/product/HDC1000/description"],
-                "Datasheets": ["http://www.ti.com/lit/ds/symlink/hdc1000.pdf"],
-                "Schematics": []
-            }
-        }
-    }
-}
diff --git a/src/hdxxvxta/CMakeLists.txt b/src/hdxxvxta/CMakeLists.txt
deleted file mode 100644
index 794065e..0000000
--- a/src/hdxxvxta/CMakeLists.txt
+++ /dev/null
@@ -1,5 +0,0 @@
-set (libname "hdxxvxta")
-set (libdescription "Veris HDXXVXTA Temperature/Humidity Transmitter")
-set (module_src ${libname}.cxx)
-set (module_hpp ${libname}.hpp)
-upm_module_init(mraa)
diff --git a/src/hdxxvxta/hdxxvxta.cxx b/src/hdxxvxta/hdxxvxta.cxx
deleted file mode 100644
index da46a57..0000000
--- a/src/hdxxvxta/hdxxvxta.cxx
+++ /dev/null
@@ -1,122 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2016 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <iostream>
-
-#include "hdxxvxta.hpp"
-
-using namespace upm;
-using namespace std;
-
-// conversion from celsius to fahrenheit
-
-static float c2f(float c)
-{
-  return (c * (9.0 / 5.0) + 32.0);
-}
-
-
-HDXXVXTA::HDXXVXTA(int hPin, int tPin, float aref) :
-  m_aioHum(hPin), m_aioTemp(0)
-{
-  if (tPin >= 0)
-    m_hasTemp = true;
-  else
-    m_hasTemp = false;
-
-  m_temperature = 0.0;
-  m_humidity = 0.0;
-
-  if (m_hasTemp)
-    {
-      m_aioTemp = new mraa::Aio(tPin);
-      m_aResTemp = (1 << m_aioTemp->getBit());
-    }
-  else
-    m_aResTemp = 0;
-
-  m_aResHum = (1 << m_aioHum.getBit());
-  m_aref = aref;
-
-  // set the default temperature range to the A1 series (-40C-50C),
-  // regardless of whether temperature measuring is enabled
-  setRange(RANGE_MINUS40_50);
-}
-
-HDXXVXTA::~HDXXVXTA()
-{
-  if (m_aioTemp)
-    delete m_aioTemp;
-}
-
-void HDXXVXTA::update()
-{
-  // temperature
-  int val;
-  float volts;
-
-  if (m_hasTemp)
-    {
-      val = m_aioTemp->read();
-      volts = (float(val) * (m_aref / m_aResTemp));
-
-      switch (m_range)
-        {
-        case RANGE_MINUS40_50:
-          // valid range is 50 + abs(-40) = 90
-          m_temperature = ((volts / m_aref) * 90.0) - 40.0;
-          break;
-          
-        case RANGE_0_50:
-          // valid range is 50
-          m_temperature = ((volts / m_aref) * 50.0);
-          break;
-          
-        default:
-          // shouldn't happen, but...
-          throw std::out_of_range(std::string(__FUNCTION__) +
-                                  ": internal error, invalid range value");
-          break;
-        }
-    }
-
-  // humidity
-  val = m_aioHum.read();
-  volts = (float(val) * (m_aref / m_aResHum));
-  m_humidity = ((volts / m_aref) * 100.0);
-}
-
-float HDXXVXTA::getTemperature(bool fahrenheit)
-{
-  if (fahrenheit)
-    return c2f(m_temperature);
-  else
-    return m_temperature;
-}
-
-float HDXXVXTA::getHumidity()
-{
-  return m_humidity;
-}
-
diff --git a/src/hdxxvxta/hdxxvxta.hpp b/src/hdxxvxta/hdxxvxta.hpp
deleted file mode 100644
index 6b8bc28..0000000
--- a/src/hdxxvxta/hdxxvxta.hpp
+++ /dev/null
@@ -1,170 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2016 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#pragma once
-
-#include <string>
-#include <iostream>
-
-#include <mraa/aio.hpp>
-
-// Unlikey to be changable without external circuitry (voltage divider)
-#define HDXXVXTA_DEFAULT_AREF 5.0
-
-namespace upm {
-    /**
-     * @brief Veris HDXXVXTA Humidity Transmitters
-     * @defgroup hdxxvxta libupm-hdxxvxta
-     * @ingroup veris analog temp
-     */
-
-    /**
-     * @library hdxxvxta
-     * @sensor hdxxvxta
-     * @comname Veris HDXXVXTA Temperature/humidity Transmitter
-     * @type temp
-     * @man veris
-     * @con analog
-     * @web http://www.veris.com/Item/HD2NVSTA1.aspx
-     *
-     * @brief API for the Veris HDXXVXTA Humidity Transmitter
-     *
-     * The driver was developed using the HD2NVSTA1 humidity
-     * transmitter.  The 'T' variant supports a temperature
-     * transmitter as well.  Both signals are provided by the device
-     * as analog 0-5Vdc or 0-10Vdc outputs.  The A1 variant supports a
-     * temperature range of -40C-50C, while the A2 variant supports a
-     * range of 0C-50C.  Humidity ranges for all devices in this
-     * device family range from 0% to 100% (non-condensing).
-     *
-     * This driver used the 5Vdc outputs for obvious reasons.  Your
-     * MCU must be configured for 5V operation.  Using any other
-     * analog reference voltage will require the appropriate external
-     * circuitry (such as a voltage divider) in order to interface
-     * safely with your MCU.
-     *
-     * For devices which do not support temperature, use '-1' as the
-     * temperature pin number in the object constructor.  If
-     * temperature measurement is disabled, getTemperature() will always
-     * return 0C/32F.
-     *
-     * @snippet hdxxvxta.cxx Interesting
-     */
-
-  class HDXXVXTA {
-  public:
-
-    typedef enum {
-      // *A1 series (-40C-50C)
-      RANGE_MINUS40_50                      = 1,
-      // *A2 series (0C-50C)
-      RANGE_0_50                            = 2
-    } RANGE_T;
-
-    /**
-     * HDXXVXTA object constructor
-     *
-     * @param hPin Analog pin to use for the humidity measurement
-     * @param tPin Analog pin to use for temperature.  If your device
-     * does not support temperature, use -1 as the value so that
-     * temperature will not be queried and an analog pin won't be
-     * wasted.
-     * @param aref The analog reference voltage, default 5.0
-     */
-    HDXXVXTA(int hPin, int tPin, float aref=HDXXVXTA_DEFAULT_AREF);
-
-    /**
-     * HDXXVXTA object destructor
-     */
-    ~HDXXVXTA();
-
-    /**
-     * Set the temperature range of the sensor.  HD*A1 sensors support
-     * a range of -40C-50C, while HD*A2 devices support a temperature
-     * range of 0C-50C.  The constructor sets a default of
-     * RANGE_MINUS40_50.
-     *
-     * @param range One of the RANGE_T values, default is RANGE_MINUS40_50
-     */
-    void setRange(RANGE_T range=RANGE_MINUS40_50)
-    {
-      m_range = range;
-    };
-
-    /**
-     * Read current values from the sensor and update internal stored
-     * values.  This method must be called prior to querying any
-     * values, such as temperature or humidity.
-     */
-    void update();
-
-    /**
-     * Get the current temperature.  update() must have been called
-     * prior to calling this method.  If temperature measurement was
-     * disabled (by passing -1 as the temperature pin in the
-     * constructor) then this function will always return 0C/32F.
-     *
-     * @param fahrenheit true to return the temperature in degrees
-     * fahrenheit, false to return the temperature in degrees celsius.
-     * The default is false (degrees Celsius).
-     * @return The last temperature reading in Celsius or Fahrenheit
-     */
-    float getTemperature(bool fahrenheit=false);
-
-    /**
-     * Get the current relative humidity.  update() must have been called
-     * prior to calling this method.
-     *
-     * @return The last humidity reading
-     */
-    float getHumidity();
-
-
-  protected:
-    mraa::Aio m_aioHum;
-
-    // temperature is an optional feature of the humidity transmitter
-    mraa::Aio *m_aioTemp;
-
-  private:
-    /* Disable implicit copy and assignment operators */
-    HDXXVXTA(const HDXXVXTA&) = delete;
-    HDXXVXTA &operator=(const HDXXVXTA&) = delete;
-
-    float m_aref;
-    int m_aResTemp;
-    int m_aResHum;
-
-    // does this sensor support temperature reporting?
-    bool m_hasTemp;
-
-    // in Celsius
-    float m_temperature;
-
-    float m_humidity;
-
-    RANGE_T m_range;
-  };
-}
-
-
diff --git a/src/hdxxvxta/hdxxvxta.i b/src/hdxxvxta/hdxxvxta.i
deleted file mode 100644
index 68ec236..0000000
--- a/src/hdxxvxta/hdxxvxta.i
+++ /dev/null
@@ -1,14 +0,0 @@
-%include "../common_top.i"
-
-/* BEGIN Java syntax  ------------------------------------------------------- */
-#ifdef SWIGJAVA
-JAVA_JNI_LOADLIBRARY(javaupm_hdxxvxta)
-#endif
-/* END Java syntax */
-
-/* BEGIN Common SWIG syntax ------------------------------------------------- */
-%{
-#include "hdxxvxta.hpp"
-%}
-%include "hdxxvxta.hpp"
-/* END Common SWIG syntax */
diff --git a/src/hdxxvxta/hdxxvxta.json b/src/hdxxvxta/hdxxvxta.json
deleted file mode 100644
index 7404b2c..0000000
--- a/src/hdxxvxta/hdxxvxta.json
+++ /dev/null
@@ -1,35 +0,0 @@
-{
-    "Library": "hdxxvxta",
-    "Description": "API for the Veris HDXXVXTA Humidity Transmitter",
-    "Sensor Class":
-    {
-        "HDXXVXTA":
-        {
-            "Name": "Veris HDXXVXTA Humidity Transmitter",
-            "Description": "The driver was developed using the HD2NVSTA1 humidity transmitter.  The 'T' variant supports a temperature transmitter as well.  Both signals are provided by the device as analog 0-5Vdc or 0-10Vdc outputs.  The A1 variant supports a temperature range of -40C-50C, while the A2 variant supports a range of 0C-50C.  Humidity ranges for all devices in this device family range from 0% to 100% (non-condensing). This driver used the 5Vdc outputs for obvious reasons.  Your MCU must be configured for 5V operation.  Using any other analog reference voltage will require the appropriate external circuitry (such as a voltage divider) in order to interface safely with your MCU. For devices which do not support temperature, use '-1' as the temperature pin number in the object constructor.  If temperature measurement is disabled, getTemperature() will always return 0C/32F.",
-            "Aliases": ["hdxxvxta"],
-            "Categories": ["humidity"],
-            "Connections": ["analog"],
-            "Project Type": ["environmental", "prototyping"],
-            "Manufacturers": ["veris"],
-            "Kits": [],
-            "Examples":
-            {
-                "Java": [],
-                "Python": ["hdxxvxta.py"],
-                "Node.js": ["hdxxvxta.js"],
-                "C++": ["hdxxvxta.cxx"],
-                "C": []
-            },
-            "Specifications":
-            {
-            },
-            "Urls" :
-            {
-                "Product Pages": [],
-                "Datasheets": [],
-                "Schematics": []
-            }
-        }
-    }
-}
diff --git a/src/hka5/CMakeLists.txt b/src/hka5/CMakeLists.txt
deleted file mode 100644
index acb4f1a..0000000
--- a/src/hka5/CMakeLists.txt
+++ /dev/null
@@ -1,9 +0,0 @@
-upm_mixed_module_init (NAME hka5
-    DESCRIPTION "Laser Particulate Matter (PM) Sensor"
-    C_HDR hka5.h
-    C_SRC hka5.c
-    CPP_HDR hka5.hpp
-    CPP_SRC hka5.cxx
-    FTI_SRC hka5_fti.c
-    CPP_WRAPS_C
-    REQUIRES mraa utilities-c)
diff --git a/src/hka5/hka5.c b/src/hka5/hka5.c
deleted file mode 100644
index 8d3d2a6..0000000
--- a/src/hka5/hka5.c
+++ /dev/null
@@ -1,265 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2016 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <string.h>
-#include <assert.h>
-
-#include "upm_utilities.h"
-#include "hka5.h"
-
-#define HKA5_BAUDRATE 9600 // Only baud supported
-#define HKA5_PKT_SIZE 32
-#define HKA5_PKT_START1 0x42
-#define HKA5_PKT_START2 0x4d
-
-static bool verify_cksum(uint8_t *pkt)
-{
-  uint16_t pkt_cksum = (pkt[30] << 8) | pkt[31];
-
-  int i;
-  uint16_t cksum = 0;
-  for (i=0; i<(HKA5_PKT_SIZE - 2); i++)
-    cksum += pkt[i];
-
-  if (pkt_cksum == cksum)
-    return true; // all good
-  else
-    return false; // :(
-}
-
-hka5_context hka5_init(unsigned int uart, int set_pin, int reset_pin)
-{
-  // make sure MRAA is initialized
-  int mraa_rv;
-  if ((mraa_rv = mraa_init()) != MRAA_SUCCESS)
-  {
-      printf("%s: mraa_init() failed (%d).\n", __FUNCTION__, mraa_rv);
-      return NULL;
-  }
-
-  hka5_context dev =
-    (hka5_context)malloc(sizeof(struct _hka5_context));
-
-  if (!dev)
-    return NULL;
-
-  // zero out context
-  memset((void *)dev, 0, sizeof(struct _hka5_context));
-
-  dev->uart = NULL;
-  dev->gpio_reset = NULL;
-  dev->gpio_set = NULL;
-
-  // initialize the MRAA contexts
-
-  // uart, default should be 8N1
-  if (!(dev->uart = mraa_uart_init(uart)))
-    {
-      printf("%s: mraa_uart_init() failed.\n", __FUNCTION__);
-      hka5_close(dev);
-      return NULL;
-    }
-
-  if (mraa_uart_set_baudrate(dev->uart, HKA5_BAUDRATE))
-    {
-      printf("%s: mraa_uart_set_baudrate(%d) failed.\n", __FUNCTION__,
-             HKA5_BAUDRATE);
-      hka5_close(dev);
-      return NULL;
-    }
-
-  mraa_uart_set_flowcontrol(dev->uart, false, false);
-
-  // now the set_pin, if enabled
-  if (set_pin >= 0)
-    {
-      if (!(dev->gpio_set = mraa_gpio_init(set_pin)))
-        {
-          printf("%s: mraa_gpio_init(set) failed.\n", __FUNCTION__);
-          hka5_close(dev);
-          return NULL;
-        }
-
-      mraa_gpio_dir(dev->gpio_set, MRAA_GPIO_OUT);
-
-      // wake up
-      hka5_enable(dev, true);
-    }
-
-  // now the reset_pin, if enabled
-  if (set_pin >= 0)
-    {
-      if (!(dev->gpio_reset = mraa_gpio_init(reset_pin)))
-        {
-          printf("%s: mraa_gpio_init(reset) failed.\n", __FUNCTION__);
-          hka5_close(dev);
-          return NULL;
-        }
-
-      mraa_gpio_dir(dev->gpio_reset, MRAA_GPIO_OUT);
-
-      // reset
-      hka5_reset(dev);
-    }
-  return dev;
-}
-
-void hka5_close(hka5_context dev)
-{
-  assert(dev != NULL);
-
-  // sleep
-  hka5_enable(dev, false);
-
-  if (dev->uart)
-    mraa_uart_stop(dev->uart);
-  if (dev->gpio_set)
-    mraa_gpio_close(dev->gpio_set);
-  if (dev->gpio_reset)
-    mraa_gpio_close(dev->gpio_reset);
-
-  free(dev);
-}
-
-upm_result_t hka5_enable(const hka5_context dev, bool enable)
-{
-  assert(dev != NULL);
-
-  if (!dev->gpio_set)
-    return UPM_ERROR_NO_RESOURCES;
-
-  if (enable)
-    mraa_gpio_write(dev->gpio_set, 1);
-  else
-    mraa_gpio_write(dev->gpio_set, 0);
-
-  return UPM_SUCCESS;
-}
-
-upm_result_t hka5_reset(const hka5_context dev)
-{
-  assert(dev != NULL);
-
-  if (!dev->gpio_reset)
-    return UPM_ERROR_NO_RESOURCES;
-
-  mraa_gpio_write(dev->gpio_set, 0);
-  upm_delay(1);
-  mraa_gpio_write(dev->gpio_set, 1);
-  upm_delay(1);
-
-return UPM_SUCCESS;
-}
-
-upm_result_t hka5_update(const hka5_context dev)
-{
-  assert(dev != NULL);
-
-  uint8_t pkt[HKA5_PKT_SIZE];
-  int idx = 0;
-  bool done = false;
-  char byte;
-
-  memset((void *)pkt, 0, HKA5_PKT_SIZE);
-
-  while (!done)
-    {
-      // wait up to 2 seconds for data and start
-      if (mraa_uart_data_available(dev->uart, 2000))
-        {
-          while ((mraa_uart_read(dev->uart, &byte, 1) == 1) &&
-                 idx < HKA5_PKT_SIZE)
-            {
-              // first look for a byte starting with HKA5_PKT_START1
-              if (idx == 0 && byte != HKA5_PKT_START1)
-                continue;
-
-              // look for second byte, make sure it matches
-              // HKA5_PKT_START1.  Start over if it's not found.
-              if (idx == 1 && byte != HKA5_PKT_START2)
-                {
-                  // start over
-                  idx = 0;
-                  continue;
-                }
-
-              // else we found the byte, store it and start reading
-              // the rest
-              pkt[idx++] = (uint8_t)byte;
-            }
-
-          if (idx == HKA5_PKT_SIZE)
-            {
-              done = true;
-            }
-          else
-            {
-              // error
-              printf("%s: read failed.\n", __FUNCTION__);
-              return UPM_ERROR_OPERATION_FAILED;
-            }
-        }
-      else
-        {
-          printf("%s: read timed out.\n", __FUNCTION__);
-          return UPM_ERROR_TIMED_OUT;
-        }
-    }
-
-  // we have our data
-  if (verify_cksum(pkt))
-    {
-      dev->pm1   = (pkt[4] << 8) | pkt[5];
-      dev->pm2_5 = (pkt[6] << 8) | pkt[7];
-      dev->pm10  = (pkt[8] << 8) | pkt[9];
-    }
-  else
-    {
-      printf("%s: checksum failure.\n", __FUNCTION__);
-      // could fail here, but occasional cksum failures are not unusual...
-    }
-
-  return UPM_SUCCESS;
-}
-
-unsigned int hka5_get_pm1(const hka5_context dev)
-{
-  assert(dev != NULL);
-
-  return (unsigned int)dev->pm1;
-}
-
-unsigned int hka5_get_pm2_5(const hka5_context dev)
-{
-  assert(dev != NULL);
-
-  return (unsigned int)dev->pm2_5;
-}
-
-unsigned int hka5_get_pm10(const hka5_context dev)
-{
-  assert(dev != NULL);
-
-  return (unsigned int)dev->pm10;
-}
diff --git a/src/hka5/hka5.cxx b/src/hka5/hka5.cxx
deleted file mode 100644
index cfcdd91..0000000
--- a/src/hka5/hka5.cxx
+++ /dev/null
@@ -1,80 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2016 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <iostream>
-#include <stdexcept>
-
-#include "hka5.hpp"
-
-using namespace upm;
-using namespace std;
-
-HKA5::HKA5(unsigned int uart, int set_pin, int reset_pin) :
-  m_hka5(hka5_init(uart, set_pin, reset_pin))
-{
-  if (!m_hka5)
-    throw std::runtime_error(string(__FUNCTION__)
-                             + ": hka5_init() failed");
-}
-
-HKA5::~HKA5()
-{
-  hka5_close(m_hka5);
-}
-
-void HKA5::enable(bool enable)
-{
-  if (hka5_enable(m_hka5, enable))
-    throw std::runtime_error(string(__FUNCTION__)
-                             + ": hka5_enable() failed");
-}
-
-void HKA5::reset()
-{
-  if (hka5_reset(m_hka5))
-    throw std::runtime_error(string(__FUNCTION__)
-                             + ": hka5_reset() failed");
-}
-
-void HKA5::update()
-{
-  if (hka5_update(m_hka5))
-    throw std::runtime_error(string(__FUNCTION__)
-                             + ": hka5_update() failed");
-}
-
-unsigned int HKA5::getPM1()
-{
-  return hka5_get_pm1(m_hka5);
-}
-
-unsigned int HKA5::getPM2_5()
-{
-  return hka5_get_pm2_5(m_hka5);
-}
-
-unsigned int HKA5::getPM10()
-{
-  return hka5_get_pm10(m_hka5);
-}
diff --git a/src/hka5/hka5.h b/src/hka5/hka5.h
deleted file mode 100644
index 135131e..0000000
--- a/src/hka5/hka5.h
+++ /dev/null
@@ -1,140 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2016 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#pragma once
-
-#include <stdint.h>
-#include "upm.h"
-#include "mraa/uart.h"
-#include "mraa/gpio.h"
-
-#ifdef __cplusplus
-extern "C" {
-#endif
-
-  /**
-   * @file hka5.h
-   * @library hka5
-   * @brief C API for the HKA5 Laser PM2.5 Sensor
-   *
-   * @include hka5.c
-   */
-
-  /**
-   * Device context
-   */
-  typedef struct _hka5_context {
-    mraa_uart_context        uart;
-
-    // these two are optional
-    mraa_gpio_context        gpio_set;
-    mraa_gpio_context        gpio_reset;
-
-    // PM 1.0
-    uint16_t                 pm1;
-    // PM 2.5
-    uint16_t                 pm2_5;
-    // PM 10.0
-    uint16_t                 pm10;
-  } *hka5_context;
-
-  /**
-   * HKA5 Initializer for generic UART operation
-   *
-   * @param uart Specify which uart to use.
-   * @param set_pin Specify the GPIO pin to use for Set.  -1 to not
-   * use a set pin.
-   * @param reset_pin Specify the GPIO pin to use for Reset.  -1 to
-   * not use a reset pin.
-   * @return an initialized device context on success, NULL on error.
-   */
-  hka5_context hka5_init(unsigned int uart, int set_pin, int reset_pin);
-
-  /**
-   * HKA5 sensor close function
-   */
-  void hka5_close(hka5_context dev);
-
-  /**
-   * Enable or disable the device.  When disabled, the device enters a
-   * low power mode and does not emit data.  You must have initialized
-   * and connected the Set pin for this function to work.
-   *
-   * @param dev sensor context
-   * @param enable true to enable the device, false otherwise.
-   * @return UPM result
-   */
-  upm_result_t hka5_enable(const hka5_context dev, bool enable);
-
-  /**
-   * Reset the device.  You must have initialized and connected the
-   * Reset pin for this function to work.
-   *
-   * @param dev sensor context
-   * @return UPM result
-   */
-  upm_result_t hka5_reset(const hka5_context dev);
-
-  /**
-   * Query the device and store the latest values.  You must call this
-   * function before calling any of the hka5_get_*() functions.
-   *
-   * @param dev sensor context
-   * @return UPM result
-   */
-  upm_result_t hka5_update(const hka5_context dev);
-
-  /**
-   * Return the last read PM 1.0 value.  The value is in micrograms
-   * per cubic meter (ug/m3). You must have called the hka5_update()
-   * function before calling this function.
-   *
-   * @param dev sensor context
-   * @return The value in ug/m3
-   */
-  unsigned int hka5_get_pm1(const hka5_context dev);
-
-  /**
-   * Return the last read PM 2.5 value.  The value is in micrograms
-   * per cubic meter (ug/m3). You must have called the hka5_update()
-   * function before calling this function.
-   *
-   * @param dev sensor context
-   * @return The value in ug/m3
-   */
-  unsigned int hka5_get_pm2_5(const hka5_context dev);
-
-  /**
-   * Return the last read PM 10.0 value.  The value is in micrograms
-   * per cubic meter (ug/m3). You must have called the hka5_update()
-   * function before calling this function.
-   *
-   * @param dev sensor context
-   * @return The value in ug/m3
-   */
-  unsigned int hka5_get_pm10(const hka5_context dev);
-
-#ifdef __cplusplus
-}
-#endif
diff --git a/src/hka5/hka5.hpp b/src/hka5/hka5.hpp
deleted file mode 100644
index fc92794..0000000
--- a/src/hka5/hka5.hpp
+++ /dev/null
@@ -1,138 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2016 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#pragma once
-
-#include <string>
-#include <iostream>
-
-#include <stdlib.h>
-#include <unistd.h>
-
-#include "hka5.h"
-
-namespace upm {
-  /**
-   * @brief HKA5 Laser PM2.5 Sensor
-   * @defgroup hka5 libupm-hka5
-   * @ingroup uart gpio gaseous
-   */
-
-  /**
-   * @library hka5
-   * @sensor hka5
-   * @comname Laser Particulate Matter (PM) Sensor
-   * @type gaseous
-   * @man dfrobot
-   * @con uart gpio
-   * @web https://www.dfrobot.com/wiki/index.php/DFRobot_LM35_Linear_Temperature_Sensor_(SKU:DFR0023)
-   *
-   * @brief API for theDFRobot Laser PM2.5 Sensor
-   *
-   * This driver was tested with a DFRobot Laser PM2.5 Sensor.  It
-   * connects to a UART at 9600 baud.  This is the only baud rate
-   * supported.  It optionally supports Reset and Set/Sleep gpios as
-   * well.
-   *
-   * @snippet hka5.cxx Interesting
-   */
-
-  class HKA5 {
-  public:
-
-    /**
-     * HKA5 object constructor
-     *
-     * @param uart Specify which uart to use.
-     * @param set_pin Specify the GPIO pin to use for Set.  -1 to not
-     * use a set pin.
-     * @param reset_pin Specify the GPIO pin to use for Reset.  -1 to
-     * not use a reset pin.
-     * @return an initialized device context on success, NULL on error.
-     */
-    HKA5(unsigned int uart, int set_pin, int reset_pin);
-
-    /**
-     * HKA5 object destructor
-     */
-    ~HKA5();
-
-    /**
-     * Enable or disable the device.  When disabled, the device enters a
-     * low power mode and does not emit data.  You must have initialized
-     * and connected the Set pin for this function to work.
-     *
-     * @param enable true to enable the device, false otherwise.
-     */
-    void enable(bool enable);
-
-    /**
-     * Reset the device.  You must have initialized and connected the
-     * Reset pin for this function to work.
-     */
-    void reset();
-
-    /**
-     * Query the device and store the latest values.  You must call this
-     * function before calling any of the get*() functions.
-     */
-    void update();
-
-    /**
-     * Return the last read PM 1.0 value.  The value is in micrograms
-     * per cubic meter (ug/m3).  You must have called the update()
-     * function before calling this function.
-     *
-     * @return The value in ug/m3
-     */
-    unsigned int getPM1();
-
-    /**
-     * Return the last read PM 2.5 value.  The value is in micrograms
-     * per cubic meter (ug/m3).  You must have called the update()
-     * function before calling this function.
-     *
-     * @return The value in ug/m3
-     */
-    unsigned int getPM2_5();
-
-    /**
-     * Return the last read PM 10.0 value.  The value is in micrograms
-     * per cubic meter (ug/m3).  You must have called the update()
-     * function before calling this function.
-     *
-     * @return The value in ug/m3
-     */
-    unsigned int getPM10();
-
-
-  protected:
-    // device context
-    hka5_context m_hka5;
-
-  private:
-    /* Disable implicit copy and assignment operators */
-    HKA5(const HKA5&) = delete;
-    HKA5 &operator=(const HKA5&) = delete;
-  };
-}
diff --git a/src/hka5/hka5.i b/src/hka5/hka5.i
deleted file mode 100644
index 82b03d6..0000000
--- a/src/hka5/hka5.i
+++ /dev/null
@@ -1,14 +0,0 @@
-%include "../common_top.i"
-
-/* BEGIN Java syntax  ------------------------------------------------------- */
-#ifdef SWIGJAVA
-JAVA_JNI_LOADLIBRARY(javaupm_hka5)
-#endif
-/* END Java syntax */
-
-/* BEGIN Common SWIG syntax ------------------------------------------------- */
-%{
-#include "hka5.hpp"
-%}
-%include "hka5.hpp"
-/* END Common SWIG syntax */
diff --git a/src/hka5/hka5.json b/src/hka5/hka5.json
deleted file mode 100644
index 73d065c..0000000
--- a/src/hka5/hka5.json
+++ /dev/null
@@ -1,37 +0,0 @@
-{
-    "Library": "hka5",
-    "Description": "API for the DFRobot Laser Particulate Matter (PM) Sensor",
-    "Sensor Class":
-    {
-        "HKA5":
-        {
-            "Name": "DFRobot Laser Particulate Matter (PM) Sensor",
-            "Description": "This driver was tested with a DFRobot Laser PM2.5 Sensor.  It connects to a UART at 9600 baud.  This is the only baud rate supported.  It optionally supports Reset and Set/Sleep gpios as well.",
-            "Aliases": ["hka5"],
-            "Categories": ["gaseous"],
-            "Connections": ["gpio", "uart"],
-            "Project Type": ["environmental", "prototyping"],
-            "Manufacturers": ["dfrobot"],
-            "Kits": [],
-            "Examples":
-            {
-                "Java": ["HKA5_Example.java"],
-                "Python": ["hka5.py"],
-                "Node.js": ["hka5.js"],
-                "C++": ["hka5.cxx"],
-                "C": ["hka5.c"]
-            },
-            "Specifications":
-            {
-                "Operating Voltage": {"unit": "V", "low": 3.3, "high": 5},
-                "Operating Current": {"unit": "mA", "typ": 10}
-            },
-            "Urls" :
-            {
-                "Product Pages": ["https://www.dfrobot.com/wiki/index.php/DFRobot_LM35_Linear_Temperature_Sensor_(SKU:DFR0023)"],
-                "Datasheets": ["http://image.dfrobot.com/image/data/DFR0023/DFR0023_Datasheet.pdf"],
-                "Schematics": []
-            }
-        }
-    }
-}
diff --git a/src/hka5/hka5_fti.c b/src/hka5/hka5_fti.c
deleted file mode 100644
index 6349ab5..0000000
--- a/src/hka5/hka5_fti.c
+++ /dev/null
@@ -1,67 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2016 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include "hka5.h"
-#include "upm_fti.h"
-
-/**
- * This file implements the Function Table Interface (FTI) for this sensor
- */
-
-const char upm_hka5_name[] = "HKA5";
-const char upm_hka5_description[] = "DFRobot Laser PM2.5 Sensor";
-const upm_protocol_t upm_hka5_protocol[] = {UPM_UART, UPM_GPIO, UPM_GPIO};
-const upm_sensor_t upm_hka5_category[] = {};
-
-// forward declarations
-const void* upm_hka5_get_ft(upm_sensor_t sensor_type);
-void* upm_hka5_init_name();
-void upm_hka5_close(void *dev);
-
-static const upm_sensor_ft ft =
-{
-  .upm_sensor_init_name = &upm_hka5_init_name,
-  .upm_sensor_close = &upm_hka5_close,
-};
-
-const void* upm_hka5_get_ft(upm_sensor_t sensor_type)
-{
-  switch(sensor_type)
-    {
-    case UPM_SENSOR:
-      return &ft;
-    default:
-      return NULL;
-    }
-}
-
-void* upm_hka5_init_name()
-{
-  return NULL;
-}
-
-void upm_hka5_close(void *dev)
-{
-  hka5_close((hka5_context)dev);
-}
diff --git a/src/hlg150h/CMakeLists.txt b/src/hlg150h/CMakeLists.txt
deleted file mode 100644
index ee975d4..0000000
--- a/src/hlg150h/CMakeLists.txt
+++ /dev/null
@@ -1,5 +0,0 @@
-set (libname "hlg150h")
-set (libdescription "150W Constant Voltage/current LED Driver")
-set (module_src ${libname}.cxx mraa-utils.cxx)
-set (module_hpp ${libname}.hpp)
-upm_module_init(mraa interfaces)
diff --git a/src/hlg150h/hlg150h.cxx b/src/hlg150h/hlg150h.cxx
deleted file mode 100644
index bfc8cd6..0000000
--- a/src/hlg150h/hlg150h.cxx
+++ /dev/null
@@ -1,80 +0,0 @@
-#include <iostream>
-#include <stdexcept>
-#include <unistd.h>
-#include "hlg150h.hpp"
-#include "mraa-utils.hpp"
-
-#define PWM_PERIOD 3333
-
-using namespace upm;
-
-HLG150H::HLG150H(int pinRelay, int pinPWM)
-{
-   int dutyPercent = 0;
-   status = mraa::SUCCESS;
-   this->pinRelay = pinRelay;
-   isPoweredShadow = false;
-   pwmBrightness = new mraa::Pwm(pinPWM);
-   status = pwmBrightness->enable(true);
-   status = pwmBrightness->period_us(PWM_PERIOD);
-   if (status != mraa::SUCCESS)
-      UPM_THROW("pwm config failed.");
-   dutyPercent = getBrightness();
-   isPoweredShadow = dutyPercent > 10;
-}
-
-HLG150H::~HLG150H()
-{
-   delete pwmBrightness;
-}
-
-void HLG150H::setPowerOn()
-{
-   isPoweredShadow = true;
-   MraaUtils::setGpio(pinRelay, 0);
-}
-
-void HLG150H::setPowerOff()
-{
-   isPoweredShadow = false;
-   MraaUtils::setGpio(pinRelay, 1);
-}
-
-bool HLG150H::isPowered()
-{
-   // Can't read GPIO state as setting in to input mode turns off relay
-   // Instead we return a shadow variable
-   /*
-   int level;
-   if (MraaUtils::getGpio(pinRelay, &level) == MRAA_SUCCESS)
-      return level == 1;
-   else
-      return false;
-   */
-   return isPoweredShadow;
-}
-
-
-// If duty is less than 10% light will flicker
-void HLG150H::setBrightness(int dutyPercent)
-{
-   if (dutyPercent < 10)
-      dutyPercent = 10;
-   int dutyUs = (PWM_PERIOD * dutyPercent) / 100;
-   dutyUs = PWM_PERIOD - dutyUs;
-   status = pwmBrightness->pulsewidth_us(dutyUs);
-   // std::cout << "Brightness = " << dutyPercent << "%, duty = " << dutyUs << "us" << std::endl;
-   if (status != mraa::SUCCESS)
-      UPM_THROW("setBrightness failed");
-
-}
-
-
-int HLG150H::getBrightness()
-{
-   float duty = pwmBrightness->read();
-   int dutyPercent = static_cast<int>(100.0 * (1.0 - duty) + 0.5);
-   return dutyPercent;
-}
-
-
diff --git a/src/hlg150h/hlg150h.hpp b/src/hlg150h/hlg150h.hpp
deleted file mode 100644
index 9d03a16..0000000
--- a/src/hlg150h/hlg150h.hpp
+++ /dev/null
@@ -1,83 +0,0 @@
-/*
- * Author: Henry Bruce <henry.bruce@intel.com>
- * Copyright (c) 2014 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include "interfaces/iLightController.hpp"
-// #include "mraa/gpio.hpp"
-#include "mraa/pwm.hpp"
-
-namespace upm
-{
-
-/**
- * @brief Meanwell HLG150H Lighting Power Supply Controller
- * @defgroup hlg150h libupm-hlg150h
- * @ingroup pwm light ilightcontroller
- */
-
-/**
- * @library hlg150h
- * @sensor hlg150h
- * @comname 150W Constant Voltage/current LED Driver
- * @altname HLG150H
- * @type light
- * @con pwm
- * @web https://www.meanwell-web.com/en/product-info/ac-dc-power-supply/led-driver/101-180-w-led-driver/hlg-150h/product/HLG-150H-24B
- *
- * @brief API for HLG-150H Lighting Power Supply Controller
- *
- * The Mean Well
- * [HLG-150H](http://www.meanwell.com/webapp/product/search.aspx?prod=HLG-150H)
- * 150W Single Output Switching Power Supply
- *
- * @snippet hlg150h.cxx Interesting
- */
-
-class HLG150H : public upm::ILightController
-{
-public:
-   HLG150H(int pinRelay, int pinPWM);
-   ~HLG150H();
-
-   virtual int getBrightness();
-   const char* getModuleName() { return "hlg150h"; }
-   void setPowerOn();
-   void setPowerOff();
-   bool isPowered();
-   void setBrightness(int dutyPercent);
-
-private:
-   /* Disable implicit copy and assignment operators */
-   HLG150H(const HLG150H&) = delete;
-   HLG150H &operator=(const HLG150H&) = delete;
-
-   mraa::Result status;
-   bool isPoweredShadow;
-   int pinRelay;
-   mraa::Pwm* pwmBrightness;
-};
-
-}
-
-
-
diff --git a/src/hlg150h/hlg150h.i b/src/hlg150h/hlg150h.i
deleted file mode 100644
index 84b58cb..0000000
--- a/src/hlg150h/hlg150h.i
+++ /dev/null
@@ -1,19 +0,0 @@
-%include "../common_top.i"
-
-/* BEGIN Java syntax  ------------------------------------------------------- */
-#ifdef SWIGJAVA
-%include "arrays_java.i";
-%include "../java_buffer.i"
-%typemap(javaimports) SWIGTYPE %{import upm_interfaces.*;%}
-%import "../interfaces/javaupm_iLightController.i"
-
-JAVA_JNI_LOADLIBRARY(javaupm_hlg150h)
-#endif
-/* END Java syntax */
-
-/* BEGIN Common SWIG syntax ------------------------------------------------- */
-%{
-#include "hlg150h.hpp"
-%}
-%include "hlg150h.hpp"
-/* END Common SWIG syntax */
diff --git a/src/hlg150h/hlg150h.json b/src/hlg150h/hlg150h.json
deleted file mode 100644
index fe026da..0000000
--- a/src/hlg150h/hlg150h.json
+++ /dev/null
@@ -1,42 +0,0 @@
-{
-    "Library": "hlg150h",
-    "Description": "Light Controller Library",
-    "Sensor Class":
-    {
-        "HLG150H":
-        {
-            "Name": "Lighting Power Supply Controller",
-            "Description": "HLG series single output LED power supply features universal AC input, protection for short circuit, overload, over voltage and over temperature",
-            "Aliases": ["hlg150h"],
-            "Categories": ["lightcontroller"],
-            "Connections": ["pwm"],
-            "Project Type": ["prototyping", "industrial"],
-            "Manufacturers": ["meanwell"],
-            "Examples":
-            {
-                "C++": ["hlg150h.cxx"]
-            },
-            "Specifications":
-            {
-                "Vdd": {"unit": "v", "low" : 1.7, "high": 3.6},
-                "Ioff" : {"unit": "mA", "low" : 0.0, "high": 0.0},
-                "Iavg": {"unit": "mA", "low" : 1, "high": 2},
-                "Pressure Range": {"unit": "hpA", "low" : 300, "high": 1100},
-                "Voltage Range": {"unit": "C", "low" : -40, "high": 85}
-            },
-            "Platforms":
-            {
-                "Intel Joule Module":
-                {
-                    "Notes": ["Might need pull up resistors"]
-                }
-            },
-            "Urls" :
-            {
-                "Product Pages": ["https://www.meanwell-web.com/en/product-info/ac-dc-power-supply/led-driver/101-180-w-led-driver/hlg-150h/product/HLG-150H-24B"],
-                "Datasheets": ["http://www.mouser.com/ds/2/260/r1755_3-1109742.pdf"],
-                "Schematics": ["http://www.mouser.com/ds/2/260/HLG-150H-SPEC-806071.pdf"]
-            }
-        }
-    }
-}
diff --git a/src/hlg150h/mraa-utils.cxx b/src/hlg150h/mraa-utils.cxx
deleted file mode 100644
index 2176b2a..0000000
--- a/src/hlg150h/mraa-utils.cxx
+++ /dev/null
@@ -1,49 +0,0 @@
-/*
- * Author: Henry Bruce <henry.bruce@intel.com>
- * Copyright (c) 2014 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <stdexcept>
-#include <string>
-
-#include "mraa-utils.hpp"
-#include "mraa/gpio.hpp"
-
-#define UPM_THROW(msg) throw std::runtime_error(std::string(__FUNCTION__) + ": " + (msg))
-
-void MraaUtils::setGpio(int pin, int level)
-{
-   mraa::Gpio gpio(pin);
-   gpio.dir(mraa::DIR_OUT);
-   if (gpio.write(level) != mraa::SUCCESS)
-      UPM_THROW("gpio write failed");
-}
-
-
-int MraaUtils::getGpio(int pin)
-{
-   mraa::Gpio gpio(pin);
-   gpio.dir(mraa::DIR_IN);
-   return gpio.read();
-}
-
-
diff --git a/src/hlg150h/mraa-utils.hpp b/src/hlg150h/mraa-utils.hpp
deleted file mode 100644
index f9e6acc..0000000
--- a/src/hlg150h/mraa-utils.hpp
+++ /dev/null
@@ -1,37 +0,0 @@
-/*
- * Author: Henry Bruce <henry.bruce@intel.com>
- * Copyright (c) 2014 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#pragma once
-
-#include "mraa/types.h"
-
-class __attribute__ ((visibility("hidden"))) MraaUtils
-{
-public:
-   static void setGpio(int pin, int level);
-   static int getGpio(int pin);
-};
-
-
-
diff --git a/src/hm11/CMakeLists.txt b/src/hm11/CMakeLists.txt
deleted file mode 100644
index 8f678b2..0000000
--- a/src/hm11/CMakeLists.txt
+++ /dev/null
@@ -1,5 +0,0 @@
-set (libname "hm11")
-set (libdescription "Bluetooth Low Energy Module")
-set (module_src ${libname}.cxx)
-set (module_hpp ${libname}.hpp)
-upm_module_init(mraa)
diff --git a/src/hm11/hm11.cxx b/src/hm11/hm11.cxx
deleted file mode 100644
index b03e4fc..0000000
--- a/src/hm11/hm11.cxx
+++ /dev/null
@@ -1,166 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <iostream>
-#include <string>
-#include <stdexcept>
-
-#include "hm11.hpp"
-
-using namespace upm;
-using namespace std;
-
-HM11::HM11(int uart)
-{
-  m_ttyFd = -1;
-
-  if ( !(m_uart = mraa_uart_init(uart)) )
-    {
-      throw std::invalid_argument(std::string(__FUNCTION__) +
-                                  ": mraa_uart_init() failed");
-      return;
-    }
-
-  // This requires a recent MRAA (1/2015)
-  const char *devPath = mraa_uart_get_dev_path(m_uart);
-
-  if (!devPath)
-    {
-      throw std::runtime_error(std::string(__FUNCTION__) +
-                               ": mraa_uart_get_dev_path() failed");
-      return;
-    }
-
-  // now open the tty
-  if ( (m_ttyFd = open(devPath, O_RDWR)) == -1)
-    {
-      throw std::runtime_error(std::string(__FUNCTION__) +
-                               ": open of " + 
-                               string(devPath) + " failed:" +
-                               string(strerror(errno)));
-      return;
-    }
-}
-
-HM11::~HM11()
-{
-  if (m_ttyFd != -1)
-    close(m_ttyFd);
-}
-
-bool HM11::dataAvailable(unsigned int millis)
-{
-  if (m_ttyFd == -1)
-    return false;
-
-  struct timeval timeout;
-
-  // no waiting
-  timeout.tv_sec = 0;
-  timeout.tv_usec = millis * 1000;
-
-  fd_set readfds;
-
-  FD_ZERO(&readfds);
-
-  FD_SET(m_ttyFd, &readfds);
-  
-  if (select(m_ttyFd + 1, &readfds, NULL, NULL, &timeout) > 0)
-    return true;                // data is ready
-  else
-    return false;
-}
-
-int HM11::readData(char *buffer, int len)
-{
-  if (m_ttyFd == -1)
-    return(-1);
-
-  int rv = read(m_ttyFd, buffer, len);
-
-  if (rv < 0)
-    {
-      throw std::runtime_error(std::string(__FUNCTION__) +
-                               ": read() failed: " +
-                               string(strerror(errno)));
-      return rv;
-    }
-
-  return rv;
-}
-
-int HM11::writeData(char *buffer, int len)
-{
-  if (m_ttyFd == -1)
-    return(-1);
-
-  // first, flush any pending but unread input
-
-  tcflush(m_ttyFd, TCIFLUSH);
-
-  int rv = write(m_ttyFd, buffer, len);
-
-  if (rv < 0)
-    {
-      throw std::runtime_error(std::string(__FUNCTION__) +
-                               ": write() failed: " +
-                               string(strerror(errno)));
-      return rv;
-    }
-
-  tcdrain(m_ttyFd);
-
-  return rv;
-}
-
-bool HM11::setupTty(speed_t baud)
-{
-  if (m_ttyFd == -1)
-    return(false);
-  
-  struct termios termio;
-
-  // get current modes
-  tcgetattr(m_ttyFd, &termio);
-
-  // setup for a 'raw' mode.  81N, no echo or special character
-  // handling, such as flow control.
-  cfmakeraw(&termio);
-
-  // set our baud rates
-  cfsetispeed(&termio, baud);
-  cfsetospeed(&termio, baud);
-
-  // make it so
-  if (tcsetattr(m_ttyFd, TCSAFLUSH, &termio) < 0)
-    {
-      throw std::runtime_error(std::string(__FUNCTION__) +
-                               ": tcsetattr() failed: " +
-                               string(strerror(errno)));
-      return false;
-    }
-
-  return true;
-}
-
diff --git a/src/hm11/hm11.hpp b/src/hm11/hm11.hpp
deleted file mode 100644
index 0e8359f..0000000
--- a/src/hm11/hm11.hpp
+++ /dev/null
@@ -1,144 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Thanks to Adafruit for supplying a google translated version of the
- * Chinese datasheet and some clues in their code.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#pragma once
-
-#include <string>
-#include <iostream>
-
-#include <stdint.h>
-#include <stdlib.h>
-#include <unistd.h>
-#include <string.h>
-#include <fcntl.h>
-#include <errno.h>
-#include <termios.h>
-#include <sys/time.h>
-#include <sys/select.h>
-#include <sys/types.h>
-#include <sys/stat.h>
-
-#include <mraa/uart.h>
-
-#define HM11_DEFAULT_UART 0
-
-namespace upm {
-    /**
-     * @brief HM-11 Bluetooth 4.0 Low Energy Module
-     * @defgroup hm11 libupm-hm11
-     * @ingroup seeed uart wifi
-     */
-
-    /**
-     * @library hm11
-     * @sensor hm11
-     * @comname Bluetooth Low Energy Module
-     * @altname Grove BLE
-     * @altid HM-10, HM-12
-     * @type wifi
-     * @man seeed
-     * @con uart
-     * @web http://wiki.seeed.cc/Bluetooth_V4.0_HM_11_BLE_Module/
-     *
-     * @brief API for the HM-11 4.0 Bluetooth Low Energy Module
-     *
-     * The driver was tested with the Grove BLE module.  It's an HM-11
-     * BLE 4.0 module based on a TI CC2541 chip.  It operates using a
-     * standard 'AT' command set.  See the datasheet for a full list
-     * of available commands and their possible responses:
-     *
-     * http://www.seeedstudio.com/wiki/images/c/cd/Bluetooth4_en.pdf
-     *
-     * It is connected via a UART at 9,600 baud.
-     *
-     * @image html hm11.jpg
-     * @snippet hm11.cxx Interesting
-     */
-
-  class HM11 {
-  public:
-
-    /**
-     * HM11 object constructor
-     *
-     * @param uart Default UART to use (0 or 1)
-     */
-    HM11(int uart);
-
-    /**
-     * HM11 object destructor
-     */
-    ~HM11();
-
-    /**
-     * Checks to see if there is data available for reading
-     *
-     * @param millis Number of milliseconds to wait; 0 means no waiting
-     * @return True if there is data available for reading
-     */
-    bool dataAvailable(unsigned int millis);
-
-    /**
-     * Reads any available data into a user-supplied buffer. Note: the
-     * call blocks until data is available for reading. Use
-     * dataAvailable() to determine whether there is data available
-     * beforehand, to avoid blocking.
-     *
-     * @param buffer Buffer to hold the data read
-     * @param len Length of the buffer
-     * @return Number of bytes read
-     */
-    int readData(char *buffer, int len);
-
-    /**
-     * Writes the data in the buffer to the device
-     *
-     * @param buffer Buffer to hold the data read
-     * @param len Length of the buffer
-     * @return Number of bytes written
-     */
-    int writeData(char *buffer, int len);
-
-    /**
-     * Sets up proper tty I/O modes and the baud rate. For this device, the default
-     * baud rate is 9,600 (B9600).
-     *
-     * @param baud Desired baud rate.
-     * @return True if successful
-     */
-    bool setupTty(speed_t baud=B9600);
-
-
-  protected:
-    int ttyFd() { return m_ttyFd; };
-
-  private:
-    mraa_uart_context m_uart;
-    int m_ttyFd;
-  };
-}
-
-
diff --git a/src/hm11/hm11.i b/src/hm11/hm11.i
deleted file mode 100644
index a6f6c16..0000000
--- a/src/hm11/hm11.i
+++ /dev/null
@@ -1,23 +0,0 @@
-%include "../common_top.i"
-
-/* BEGIN Java syntax  ------------------------------------------------------- */
-#ifdef SWIGJAVA
-%include "../java_buffer.i"
-
-JAVA_JNI_LOADLIBRARY(javaupm_hm11)
-#endif
-/* END Java syntax */
-
-/* BEGIN Common SWIG syntax ------------------------------------------------- */
-%include "carrays.i"
-
-%{
-#include "hm11.hpp"
-speed_t int_B9600 = B9600;
-%}
-%include "hm11.hpp"
-
-%array_class(char, charArray);
-
-speed_t int_B9600 = B9600;
-/* END Common SWIG syntax */
diff --git a/src/hm11/hm11.json b/src/hm11/hm11.json
deleted file mode 100644
index 991c5bb..0000000
--- a/src/hm11/hm11.json
+++ /dev/null
@@ -1,39 +0,0 @@
-{
-    "Library": "hm11",
-    "Description": "HM-11 Bluetooth 4.0 Low Energy Module Library",
-    "Sensor Class":
-    {
-        "HM11":
-        {
-            "Name": "Bluetooth Low Energy Module",
-            "Description": "The driver was tested with the Grove BLE module.  It's an HM-11 BLE 4.0 module based on a TI CC2541 chip.  It operates using a standard 'AT' command set.  See the datasheet for a full list of available commands and their possible responses: http://www.seeedstudio.com/wiki/images/c/cd/Bluetooth4_en.pdf It is connected via a UART at 9,600 baud.",
-            "Aliases": ["hm11"],
-            "Categories": ["bluetooth"],
-            "Connections": ["uart"],
-            "Project Type": ["wireless", "wearables", "prototyping"],
-            "Manufacturers": ["seeed"],
-            "Kits": [],
-            "Image": "hm11.jpg",
-            "Examples":
-            {
-                "Java": ["HM11_Example.java"],
-                "Python": ["hm11.py"],
-                "Node.js": ["hm11.js"],
-                "C++": ["hm11.cxx"],
-                "C": []
-            },
-            "Specifications":
-            {
-                "Operating Voltage": {"unit": "V", "low": 2.0, "typ": 3.3, "high": 3.6},
-                "Peak Operating Current": {"unit": "mA", "typ": 15},
-                "Operating Temperature": {"unit": "degC", "low": -40, "high": 65}
-            },
-            "Urls" :
-            {
-                "Product Pages": ["https://www.seeedstudio.com/Bluetooth-V4.0-HM-11-BLE-Module-p-1803.html"],
-                "Datasheets": ["http://wiki.seeed.cc/Bluetooth_V4.0_HM_11_BLE_Module/"],
-                "Schematics": []
-            }
-        }
-    }
-}
diff --git a/src/hmc5883l/CMakeLists.txt b/src/hmc5883l/CMakeLists.txt
deleted file mode 100644
index 85a5aef..0000000
--- a/src/hmc5883l/CMakeLists.txt
+++ /dev/null
@@ -1,11 +0,0 @@
-upm_mixed_module_init (NAME hmc5883l
-    DESCRIPTION "3-axis Digital Compass"
-    C_HDR hmc5883l.h
-    C_SRC hmc5883l.c
-    CPP_HDR hmc5883l.hpp
-    CPP_SRC hmc5883l.cxx
-    CPP_WRAPS_C
-    FTI_SRC hmc5883l_fti.c
-    REQUIRES mraa)
-
-target_link_libraries(${libnamec} m)
diff --git a/src/hmc5883l/hmc5883l.c b/src/hmc5883l/hmc5883l.c
deleted file mode 100644
index 50599dd..0000000
--- a/src/hmc5883l/hmc5883l.c
+++ /dev/null
@@ -1,246 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2017 Intel Corporation.
- *
- * Ported based on original C++ code by:
- * Author: Brendan Le Foll <brendan.le.foll@intel.com>
- * Contributions: Mihai Tudor Panu <mihai.tudor.panu@intel.com>
- * Copyright (c) 2014 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <string.h>
-#include <stdio.h>
-#include <assert.h>
-
-#include "math.h"
-#include "hmc5883l.h"
-
-#define MAX_BUFFER_LENGTH 6
-#define HMC5883L_I2C_ADDR 0x1E
-
-// configuration registers
-#define HMC5883L_CONF_REG_A 0x00
-#define HMC5883L_CONF_REG_B 0x01
-
-// mode register
-#define HMC5883L_MODE_REG 0x02
-
-// data register
-#define HMC5883L_X_MSB_REG 0
-#define HMC5883L_X_LSB_REG 1
-#define HMC5883L_Z_MSB_REG 2
-#define HMC5883L_Z_LSB_REG 3
-#define HMC5883L_Y_MSB_REG 4
-#define HMC5883L_Y_LSB_REG 5
-#define DATA_REG_SIZE 6
-
-// status register
-#define HMC5883L_STATUS_REG 0x09
-
-// ID registers
-#define HMC5883L_ID_A_REG 0x0A
-#define HMC5883L_ID_B_REG 0x0B
-#define HMC5883L_ID_C_REG 0x0C
-
-// mode
-#define HMC5883L_CONT_MODE 0x00
-// start of data registers (MSB/LSB for X, Z, and Y axis)
-#define HMC5883L_DATA_REG 0x03
-
-// scales
-#define GA_0_88_REG 0x00 << 5
-#define GA_1_3_REG 0x01 << 5
-#define GA_1_9_REG 0x02 << 5
-#define GA_2_5_REG 0x03 << 5
-#define GA_4_0_REG 0x04 << 5
-#define GA_4_7_REG 0x05 << 5
-#define GA_5_6_REG 0x06 << 5
-#define GA_8_1_REG 0x07 << 5
-
-// scale factors
-#define SCALE_0_73_MG 0.73
-#define SCALE_0_92_MG 0.92
-#define SCALE_1_22_MG 1.22
-#define SCALE_1_52_MG 1.52
-#define SCALE_2_27_MG 2.27
-#define SCALE_2_56_MG 2.56
-#define SCALE_3_03_MG 3.03
-#define SCALE_4_35_MG 4.35
-
-hmc5883l_context hmc5883l_init(int bus)
-{
-    // make sure MRAA is initialized
-    int mraa_rv;
-    if ((mraa_rv = mraa_init()) != MRAA_SUCCESS)
-    {
-        printf("%s: mraa_init() failed (%d).\n", __FUNCTION__, mraa_rv);
-        return NULL;
-    }
-
-    hmc5883l_context dev =
-        (hmc5883l_context)malloc(sizeof(struct _hmc5883l_context));
-
-    if (!dev)
-        return NULL;
-
-    // zero out context
-    memset((void *)dev, 0, sizeof(struct _hmc5883l_context));
-
-    if (!(dev->i2c = mraa_i2c_init(bus)))
-    {
-        printf("%s: mraa_i2c_init() failed.\n", __FUNCTION__);
-        hmc5883l_close(dev);
-        return NULL;
-    }
-
-    // apparently only one address supported...
-    if (mraa_i2c_address(dev->i2c, HMC5883L_I2C_ADDR))
-    {
-        printf("%s: mraa_i2c_address() failed.\n", __FUNCTION__);
-        hmc5883l_close(dev);
-        return NULL;
-    }
-
-    // I guess we only support a single configuration...
-    uint8_t buf[2];
-
-    buf[0] = HMC5883L_CONF_REG_B;
-    buf[1] = GA_1_3_REG; // should be 1.2 according to DS
-    if (mraa_i2c_write(dev->i2c, buf, 2))
-    {
-        printf("%s: mraa_i2c_write(HMC5883L_CONF_REG_B) failed.\n",
-               __FUNCTION__);
-        hmc5883l_close(dev);
-        return NULL;
-    }
-
-    // ... and we only support continuous mode.
-    buf[0] = HMC5883L_MODE_REG;
-    buf[1] = HMC5883L_CONT_MODE;
-    if (mraa_i2c_write(dev->i2c, buf, 2))
-    {
-        printf("%s: mraa_i2c_write(HMC5883L_MODE_REG) failed.\n",
-               __FUNCTION__);
-        hmc5883l_close(dev);
-        return NULL;
-    }
-
-    // do an initial update
-    if (hmc5883l_update(dev))
-    {
-        printf("%s: hmc5883l_update() failed.\n", __FUNCTION__);
-        hmc5883l_close(dev);
-        return NULL;
-    }
-
-    return dev;
-}
-
-void hmc5883l_close(hmc5883l_context dev)
-{
-    assert(dev != NULL);
-
-    if (dev->i2c)
-        mraa_i2c_stop(dev->i2c);
-
-    free(dev);
-}
-
-upm_result_t hmc5883l_update(const hmc5883l_context dev)
-{
-    assert(dev != NULL);
-
-    // set device reg address
-    if (mraa_i2c_write_byte(dev->i2c, HMC5883L_DATA_REG))
-    {
-        printf("%s: mraa_i2c_write_byte(HMC5883L_DATA_REG) failed.\n",
-               __FUNCTION__);
-        return UPM_ERROR_OPERATION_FAILED;
-    }
-
-    uint8_t buf[DATA_REG_SIZE];
-
-    // now read the data (6 bytes)
-    int rb;
-    if ((rb = mraa_i2c_read(dev->i2c, buf, DATA_REG_SIZE)) != DATA_REG_SIZE)
-    {
-        printf("%s: mraa_i2c_read() failed.  Got %d bytes, expected %d.\n",
-               __FUNCTION__, rb, DATA_REG_SIZE);
-        return UPM_ERROR_OPERATION_FAILED;
-    }
-
-    // The device stores the data in X, Z, Y order, however, we
-    // store them in X, Y, Z order.
-
-    // x
-    dev->coords[0] = (buf[HMC5883L_X_MSB_REG] << 8 )
-        | buf[HMC5883L_X_LSB_REG];
-    // z
-    dev->coords[2] = (buf[HMC5883L_Z_MSB_REG] << 8 )
-        | buf[HMC5883L_Z_LSB_REG];
-    // y
-    dev->coords[1] = (buf[HMC5883L_Y_MSB_REG] << 8 )
-        | buf[HMC5883L_Y_LSB_REG];
-
-    return UPM_SUCCESS;
-}
-
-float hmc5883l_direction(const hmc5883l_context dev)
-{
-    assert(dev != NULL);
-
-    // we seem to only support a single scale :(
-    return atan2(dev->coords[1] * SCALE_0_92_MG,
-                 dev->coords[0] * SCALE_0_92_MG) + dev->declination;
-}
-
-float hmc5883l_heading(const hmc5883l_context dev)
-{
-    assert(dev != NULL);
-
-    float dir = hmc5883l_direction(dev) * 180/M_PI;
-    if (dir < 0)
-        dir += 360.0;
-
-    return dir;
-}
-
-const int16_t *hmc5883l_coordinates(const hmc5883l_context dev)
-{
-    assert(dev != NULL);
-
-    return dev->coords;
-}
-
-void hmc5883l_set_declination(const hmc5883l_context dev, float dec)
-{
-    assert(dev != NULL);
-
-    dev->declination = dec;
-}
-
-float hmc5883l_get_declination(const hmc5883l_context dev)
-{
-    assert(dev != NULL);
-
-    return dev->declination;
-}
diff --git a/src/hmc5883l/hmc5883l.cxx b/src/hmc5883l/hmc5883l.cxx
deleted file mode 100644
index 5b90ac4..0000000
--- a/src/hmc5883l/hmc5883l.cxx
+++ /dev/null
@@ -1,81 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2017 Intel Corporation.
- *
- * Ported based on original C++ code by:
- * Author: Brendan Le Foll <brendan.le.foll@intel.com>
- * Contributions: Mihai Tudor Panu <mihai.tudor.panu@intel.com>
- * Copyright (c) 2014 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <string>
-#include <stdexcept>
-
-#include "hmc5883l.hpp"
-
-
-using namespace upm;
-using namespace std;
-
-Hmc5883l::Hmc5883l(int bus) :
-    m_hmc5883l(hmc5883l_init(bus))
-{
-    if (!m_hmc5883l)
-        throw std::runtime_error(string(__FUNCTION__)
-                                 + ": hmc5883l_init() failed");
-}
-
-upm_result_t Hmc5883l::update(void)
-{
-    if (hmc5883l_update(m_hmc5883l))
-        throw std::runtime_error(string(__FUNCTION__)
-                                 + ": hmc5883l_update() failed");
-
-    // kind of pointless, but want to maintain some compatibility with
-    // original code.
-    return UPM_SUCCESS;
-}
-
-float Hmc5883l::direction(void)
-{
-    return hmc5883l_direction(m_hmc5883l);
-}
-
-float Hmc5883l::heading(void)
-{
-    return hmc5883l_heading(m_hmc5883l);
-}
-
-const int16_t *Hmc5883l::coordinates(void)
-{
-    return hmc5883l_coordinates(m_hmc5883l);
-}
-
-void Hmc5883l::set_declination(float dec)
-{
-    return hmc5883l_set_declination(m_hmc5883l, dec);
-}
-
-float Hmc5883l::get_declination()
-{
-    return hmc5883l_get_declination(m_hmc5883l);
-}
diff --git a/src/hmc5883l/hmc5883l.h b/src/hmc5883l/hmc5883l.h
deleted file mode 100644
index 2edb07f..0000000
--- a/src/hmc5883l/hmc5883l.h
+++ /dev/null
@@ -1,132 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2017 Intel Corporation.
- *
- * Ported based on original C++ code by:
- * Author: Brendan Le Foll <brendan.le.foll@intel.com>
- * Contributions: Mihai Tudor Panu <mihai.tudor.panu@intel.com>
- * Copyright (c) 2014 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#pragma once
-
-#include <stdint.h>
-#include <stdlib.h>
-#include <unistd.h>
-
-#include <upm.h>
-#include <mraa/i2c.h>
-
-#ifdef __cplusplus
-extern "C" {
-#endif
-
-    /**
-     * @file hmc5883l.h
-     * @library hmc5883l
-     * @brief HMC5883L 3-Axis Digital Compass
-     *
-     */
-
-    /**
-     * Device context
-     */
-    typedef struct _hmc5883l_context {
-        mraa_i2c_context i2c;
-
-        int16_t coords[3];
-        float   declination;
-    } *hmc5883l_context;
-
-
-    /**
-     * Initialize an Hmc5883l device
-     *
-     * @param bus Number of the used I2C bus
-     * @return Device context, or NULL on error
-     */
-    hmc5883l_context hmc5883l_init(int bus);
-
-    /**
-     * Close the device
-     *
-     * @param Device context
-     */
-    void hmc5883l_close(hmc5883l_context dev);
-
-    /**
-     * Updates the values by reading from I2C
-     *
-     * @param Device context
-     * @return UPM result
-     */
-    upm_result_t hmc5883l_update(const hmc5883l_context dev);
-
-    /*
-     * Returns the direction.  hmc5883l_update() must have been called
-     * prior to calling this function.
-     *
-     * @param Device context
-     * @return Direction
-     */
-    float hmc5883l_direction(const hmc5883l_context dev);
-
-    /*
-     * Returns the heading.  hmc5883l_update() must have been called
-     * prior to calling this function.
-     *
-     * @param Device context
-     * @return Heading
-     */
-    float hmc5883l_heading(const hmc5883l_context dev);
-
-    /**
-     * Returns a pointer to an int[3] that contains the coordinates as
-     * integers.  hmc5883l_update() must have been called prior to calling
-     * this function.
-     *
-     * @param Device context
-     * @return *int to an int[3] (X, Y, Z)
-     */
-    const int16_t *hmc5883l_coordinates(const hmc5883l_context dev);
-
-    /**
-     * Sets the magnetic declination for better accuracy.
-     * hmc5883l_update() must have been called prior to calling this
-     * function.
-     *
-     * @param Device context
-     * @param dec The magnetic declination
-     */
-    void hmc5883l_set_declination(const hmc5883l_context dev, float dec);
-
-    /**
-     * Gets the current magnetic declination value.  hmc5883l_update()
-     * must have been called prior to calling this function.
-     *
-     * @param Device context
-     * @return Magnetic declination as a floating-point value
-     */
-    float hmc5883l_get_declination(const hmc5883l_context dev);
-
-#ifdef __cplusplus
-}
-#endif
diff --git a/src/hmc5883l/hmc5883l.hpp b/src/hmc5883l/hmc5883l.hpp
deleted file mode 100644
index 2b995d0..0000000
--- a/src/hmc5883l/hmc5883l.hpp
+++ /dev/null
@@ -1,114 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2017 Intel Corporation.
- *
- * Ported based on original C++ code by:
- * Author: Brendan Le Foll <brendan.le.foll@intel.com>
- * Contributions: Mihai Tudor Panu <mihai.tudor.panu@intel.com>
- * Copyright (c) 2014 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#pragma once
-
-#include "hmc5883l.h"
-
-namespace upm {
-
-/**
- * @brief HMC5883L Magnetometer
- * @defgroup hmc5883l libupm-hmc5883l
- * @ingroup seeed i2c compass robok
- */
-
-/**
- * @library hmc5883l
- * @sensor hmc5883l
- * @comname 3-axis Digital Compass
- * @altname Grove 3-Axis Digital Compass
- * @type compass
- * @man seeed
- * @con i2c
- * @web http://wiki.seeed.cc/Grove-3-Axis_Compass_V1.0/
- * @kit robok
- *
- * @brief API for the HMC5883L 3-Axis Digital Compass
- *
- * Honeywell [HMC5883L]
- * (http://www.adafruit.com/datasheets/HMC5883L_3-Axis_Digital_Compass_IC.pdf)
- * is a 3-axis digital compass. Communication with HMC5883L is simple and
- * all done through an I2C interface. Different breakout boards are available.
- * Typically, a 3V supply is all that is needed to power the sensor.
- *
- * @image html hmc5883l.jpeg
- * @snippet hmc5883l.cxx Interesting
- */
-class Hmc5883l {
-    public:
-        /**
-            * Creates an Hmc5883l object. The I2C address cannot be
-            * changed, and is always 0x1e (7-bit).
-            *
-            * @param bus I2C bus number
-            */
-        Hmc5883l(int bus);
-
-        /*
-            * Returns the direction
-            */
-        float direction();
-
-        /*
-            * Returns the heading
-            */
-        float heading();
-
-        /**
-            * Returns a pointer to an int[3] that contains the coordinates as ints
-            *
-            * @return *int to an int[3]
-            */
-        const int16_t* coordinates();
-
-        /**
-            * Updates the values by reading from I2C
-            *
-            * @return 0 if successful
-            */
-        upm_result_t update();
-
-        /**
-            * Sets the magnetic declination for better calibration
-            */
-        void set_declination(float dec);
-
-        /**
-            * Gets the current magnetic declination value
-            *
-            * @return Magnetic declination as a floating-point value
-            */
-        float get_declination();
-
-    protected:
-        hmc5883l_context m_hmc5883l;
-
-    private:
-};
-}
diff --git a/src/hmc5883l/hmc5883l.i b/src/hmc5883l/hmc5883l.i
deleted file mode 100644
index 7ded65a..0000000
--- a/src/hmc5883l/hmc5883l.i
+++ /dev/null
@@ -1,49 +0,0 @@
-%include "../common_top.i"
-
-/* BEGIN Java syntax  ------------------------------------------------------- */
-#ifdef SWIGJAVA
-%typemap(jni) int16_t* "jshortArray"
-%typemap(jstype) int16_t* "short[]"
-%typemap(jtype) int16_t* "short[]"
-
-%typemap(javaout) int16_t* {
-    return $jnicall;
-}
-
-%typemap(out) int16_t *coordinates {
-    $result = JCALL1(NewShortArray, jenv, 3);
-    JCALL4(SetShortArrayRegion, jenv, $result, 0, 3, (jshort*)$1);
-}
-
-JAVA_JNI_LOADLIBRARY(javaupm_hmc5883l)
-#endif
-/* END Java syntax */
-
-/* BEGIN Javascript syntax  ------------------------------------------------- */
-#ifdef SWIGJAVASCRIPT
-%include "../carrays_int16_t.i"
-
-// Adding this typemap because SWIG is converting int16 into a short by default
-// This forces SWIG to convert it correctly
-%typemap(out) int16_t* {
-  $result = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_int16Array, 0 |  0 );
-}
-#endif
-/* END Javascript syntax */
-
-/* BEGIN Python syntax  ----------------------------------------------------- */
-#ifdef SWIGPYTHON
-%include "../carrays_int16_t.i"
-
-%typemap(out) int16_t* {
-  $result = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_int16Array, 0 |  0 );
-}
-#endif
-/* END Python syntax */
-
-/* BEGIN Common SWIG syntax ------------------------------------------------- */
-%{
-#include "hmc5883l.hpp"
-%}
-%include "hmc5883l.hpp"
-/* END Common SWIG syntax */
diff --git a/src/hmc5883l/hmc5883l.json b/src/hmc5883l/hmc5883l.json
deleted file mode 100644
index 0d06b11..0000000
--- a/src/hmc5883l/hmc5883l.json
+++ /dev/null
@@ -1,39 +0,0 @@
-{
-    "Library": "hmc5883l",
-    "Description": "HMC5883L Magnetometer Library",
-    "Sensor Class":
-    {
-        "Hmc5883l":
-        {
-            "Name": "Grove 3-Axis Digital Compass",
-            "Description": "Honeywell [HMC5883L] (http://www.adafruit.com/datasheets/HMC5883L_3-Axis_Digital_Compass_IC.pdf) is a 3-axis digital compass. Communication with HMC5883L is simple and all done through an I2C interface. Different breakout boards are available. Typically, a 3V supply is all that is needed to power the sensor.",
-            "Aliases": ["hmc5883l"],
-            "Categories": ["compass", "magnetometer"],
-            "Connections": ["i2c"],
-            "Project Type": ["IMU", "prototyping"],
-            "Manufacturers": ["seeed", "honeywell"],
-            "Kits": ["robok"],
-            "Examples":
-            {
-                "Java": ["Hmc5883l_Example.java"],
-                "Python": ["hmc5883l.py"],
-                "Node.js": ["hmc5883l.js"],
-                "C++": ["hmc5883l.cxx"],
-                "C": ["hmc5883l.c"]
-            },
-            "Specifications":
-            {
-                "Operating Voltage": {"unit": "V", "low": 3.3, "high": 5},
-                "Operating Current": {"unit": "uA", "low": 2.5, "high": 640},
-                "Output Rate": {"unit": "Hz", "max": 116}
-
-            },
-            "Urls" :
-            {
-                "Product Pages": ["https://www.seeedstudio.com/Grove-3-Axis-Digital-Compass-p-759.html"],
-                "Datasheets": ["http://wiki.seeed.cc/Grove-3-Axis_Compass_V1.0/", "https://raw.githubusercontent.com/SeeedDocument/Grove-3-Axis_Compass_V1.0/master/res/HMC5883.pdf"],
-                "Schematics": []
-            }
-        }
-    }
-}
diff --git a/src/hmc5883l/hmc5883l_fti.c b/src/hmc5883l/hmc5883l_fti.c
deleted file mode 100644
index 99db31a..0000000
--- a/src/hmc5883l/hmc5883l_fti.c
+++ /dev/null
@@ -1,87 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2017 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include "hmc5883l.h"
-#include "upm_fti.h"
-
-/**
- * This file implements the Function Table Interface (FTI) for this sensor
- */
-
-const char upm_hmc5883l_name[] = "HMC5883L";
-const char upm_hmc5883l_description[] = "HMC5883L Compass";
-const upm_protocol_t upm_hmc5883l_protocol[] = {UPM_I2C};
-const upm_sensor_t upm_hmc5883l_category[] = {UPM_COMPASS};
-
-// forward declarations
-const void* upm_hmc5883l_get_ft(upm_sensor_t sensor_type);
-void* upm_hmc5883l_init_name();
-void upm_hmc5883l_close(void *dev);
-upm_result_t upm_hmc5883l_get_heading(void *dev, float *value);
-
-static const upm_sensor_ft ft =
-{
-  .upm_sensor_init_name = upm_hmc5883l_init_name,
-  .upm_sensor_close = upm_hmc5883l_close,
-};
-
-static const upm_compass_ft cft =
-{
-  .upm_compass_get_value = upm_hmc5883l_get_heading,
-};
-
-const void* upm_hmc5883l_get_ft(upm_sensor_t sensor_type)
-{
-  switch(sensor_type)
-    {
-    case UPM_SENSOR:
-      return &ft;
-    case UPM_COMPASS:
-      return &cft;
-    default:
-      return NULL;
-    }
-}
-
-void* upm_hmc5883l_init_name()
-{
-  return NULL;
-}
-
-void upm_hmc5883l_close(void *dev)
-{
-  hmc5883l_close((hmc5883l_context)dev);
-}
-
-upm_result_t upm_hmc5883l_get_heading(void *dev, float *value)
-{
-  upm_result_t rv;
-
-  if ((rv = hmc5883l_update((hmc5883l_context)dev)))
-    return rv;
-
-  *value = hmc5883l_heading((hmc5883l_context)dev);
-
-  return UPM_SUCCESS;
-}
diff --git a/src/hmtrp/CMakeLists.txt b/src/hmtrp/CMakeLists.txt
deleted file mode 100644
index c7b8bf8..0000000
--- a/src/hmtrp/CMakeLists.txt
+++ /dev/null
@@ -1,5 +0,0 @@
-set (libname "hmtrp")
-set (libdescription "Serial RF Pro Module")
-set (module_src ${libname}.cxx)
-set (module_hpp ${libname}.hpp)
-upm_module_init(mraa)
diff --git a/src/hmtrp/hmtrp.cxx b/src/hmtrp/hmtrp.cxx
deleted file mode 100644
index b2e95df..0000000
--- a/src/hmtrp/hmtrp.cxx
+++ /dev/null
@@ -1,503 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <iostream>
-#include <string>
-#include <stdexcept>
-
-#include "hmtrp.hpp"
-
-using namespace upm;
-using namespace std;
-
-static const int defaultDelay = 100;     // max wait time for read
-
-// protocol start code
-const uint8_t HMTRP_START1 = 0xaa;
-const uint8_t HMTRP_START2 = 0xfa;
-
-HMTRP::HMTRP(int uart)
-{
-  m_ttyFd = -1;
-
-  if ( !(m_uart = mraa_uart_init(uart)) )
-    {
-      throw std::invalid_argument(std::string(__FUNCTION__) +
-                                  ": mraa_uart_init() failed");
-      return;
-    }
-
-  // This requires a recent MRAA (1/2015)
-  const char *devPath = mraa_uart_get_dev_path(m_uart);
-
-  if (!devPath)
-    {
-      throw std::runtime_error(std::string(__FUNCTION__) +
-                               ": mraa_uart_get_dev_path() failed");
-      return;
-    }
-
-  // now open the tty
-  if ( (m_ttyFd = open(devPath, O_RDWR)) == -1)
-    {
-      throw std::runtime_error(std::string(__FUNCTION__) +
-                               ": open of " + 
-                               string(devPath) + " failed: " +
-                               string(strerror(errno)));
-      return;
-    }
-}
-
-HMTRP::~HMTRP()
-{
-  if (m_ttyFd != -1)
-    close(m_ttyFd);
-}
-
-bool HMTRP::dataAvailable(unsigned int millis)
-{
-  if (m_ttyFd == -1)
-    return false;
-
-  struct timeval timeout;
-
-  timeout.tv_sec = 0;
-  timeout.tv_usec = millis * 1000;
-
-  fd_set readfds;
-
-  FD_ZERO(&readfds);
-
-  FD_SET(m_ttyFd, &readfds);
-  
-  if (select(m_ttyFd + 1, &readfds, NULL, NULL, &timeout) > 0)
-    return true;                // data is ready
-  else
-    return false;
-}
-
-int HMTRP::readData(char *buffer, int len, int millis)
-{
-  if (m_ttyFd == -1)
-    return(-1);
-
-  // if specified, wait to see if input shows up, otherwise block
-  if (millis >= 0)
-    {
-      if (!dataAvailable(millis))
-        return 0;               // timed out
-    }
-
-  int rv = read(m_ttyFd, buffer, len);
-
-  if (rv < 0)
-    {
-      throw std::runtime_error(std::string(__FUNCTION__) +
-                               ": read() failed: " +
-                               string(strerror(errno)));
-      return rv;
-    }
-
-  return rv;
-}
-
-int HMTRP::writeData(char *buffer, int len)
-{
-  if (m_ttyFd == -1)
-    return(-1);
-
-  int rv = write(m_ttyFd, buffer, len);
-
-  if (rv < 0)
-    {
-      throw std::runtime_error(std::string(__FUNCTION__) +
-                               ": write() failed: " +
-                               string(strerror(errno)));
-      return rv;
-    }
-
-  tcdrain(m_ttyFd);
-
-  return rv;
-}
-
-bool HMTRP::setupTty(speed_t baud)
-{
-  if (m_ttyFd == -1)
-    return(false);
-  
-  struct termios termio;
-
-  // get current modes
-  tcgetattr(m_ttyFd, &termio);
-
-  // setup for a 'raw' mode.  81N, no echo or special character
-  // handling, such as flow control.
-  cfmakeraw(&termio);
-
-  // set our baud rates
-  cfsetispeed(&termio, baud);
-  cfsetospeed(&termio, baud);
-
-  // make it so
-  if (tcsetattr(m_ttyFd, TCSAFLUSH, &termio) < 0)
-    {
-      throw std::runtime_error(std::string(__FUNCTION__) +
-                               ": tcsetattr() failed: " +
-                               string(strerror(errno)));
-      return false;
-    }
-
-  return true;
-}
-
-bool HMTRP::checkOK()
-{
-  char buf[4];
-
-  int rv = readData(buf, 4, defaultDelay);
-  
-  if (rv != 4)
-    {
-      cerr << __FUNCTION__ << ": failed to receive OK response, rv = " 
-           << rv << ", expected 4" << endl;
-      return false;
-    }
-
-  // looking for "OK\r\n"
-  if (buf[0] == 'O' && buf[1] == 'K' &&
-      buf[2] == '\r' && buf[3] == '\n')
-    return true;
-  else
-    return false;
-}
-
-bool HMTRP::reset()
-{
-  char pkt[3];
-
-  pkt[0] = HMTRP_START1;
-  pkt[1] = HMTRP_START2;
-  pkt[2] = RESET;
-
-  writeData(pkt, 3);
-
-  return checkOK();
-}
-
-bool HMTRP::getConfig(uint32_t *freq, uint32_t *dataRate, 
-                      uint16_t *rxBandwidth, uint8_t *modulation, 
-                      uint8_t *txPower, uint32_t *uartBaud)
-{
-  char pkt[3];
-  pkt[0] = HMTRP_START1;
-  pkt[1] = HMTRP_START2;
-  pkt[2] = GET_CONFIG;
-
-  writeData(pkt, 3);
-  usleep(100000);
-
-  // now read back a 16 byte response
-  char buf[16];
-  int rv = readData(buf, 16, defaultDelay);
-
-  if (rv != 16)
-    {
-      cerr << __FUNCTION__ << ": failed to receive correct response: rv = " 
-           << rv << ", expected 16" << endl;
-      return false;
-    }
-
-  // now decode
-  if (freq)
-    {
-      *freq = ( ((buf[0] & 0xff) << 24) |
-                ((buf[1] & 0xff) << 16) |
-                ((buf[2] & 0xff) << 8)  |
-                 (buf[3] & 0xff) );
-    }
-
-  if (dataRate)
-    {
-      *dataRate = ( ((buf[4] & 0xff) << 24) |
-                    ((buf[5] & 0xff) << 16) |
-                    ((buf[6] & 0xff) << 8)  |
-                     (buf[7] & 0xff) );
-    }
-
-  if (rxBandwidth)
-    {
-      *rxBandwidth = ( ((buf[8] & 0xff) << 8) |
-                        (buf[9] & 0xff) );
-    }
-
-  if (modulation)
-    {
-      *modulation = buf[10] & 0xff;
-    }
-
-  if (txPower)
-    {
-      *txPower = buf[11] & 0xff;
-    }
-
-  if (uartBaud)
-    {
-      *uartBaud = ( ((buf[12] & 0xff) << 24) |
-                    ((buf[13] & 0xff) << 16) |
-                    ((buf[14] & 0xff) << 8)  |
-                     (buf[15] & 0xff) );
-    } 
-
-  return true;
-}
-
-bool HMTRP::setFrequency(uint32_t freq)
-{
-  char pkt[7];
-
-  pkt[0] = HMTRP_START1;
-  pkt[1] = HMTRP_START2;
-  pkt[2] = SET_FREQUENCY;
-
-  pkt[3] = ( ((freq & 0xff000000) >> 24) & 0xff );
-  pkt[4] = ( ((freq & 0x00ff0000) >> 16) & 0xff );
-  pkt[5] = ( ((freq & 0x0000ff00) >> 8)  & 0xff );
-  pkt[6] = ( (freq & 0x000000ff) & 0xff );
-
-  writeData(pkt, 7);
-
-  return checkOK();
-}
-
-bool HMTRP::setRFDataRate(uint32_t rate)
-{
-  //  Valid values are between 1200-115200
-
-  if (rate < 1200 || rate > 115200)
-    {
-      throw std::out_of_range(std::string(__FUNCTION__) +
-                              ": Valid rate values are between 1200-115200");
-      return false;
-    }
-
-  char pkt[7];
-
-  pkt[0] = HMTRP_START1;
-  pkt[1] = HMTRP_START2;
-  pkt[2] = SET_RF_DATARATE;
-
-  pkt[3] = ( ((rate & 0xff000000) >> 24) & 0xff );
-  pkt[4] = ( ((rate & 0x00ff0000) >> 16) & 0xff );
-  pkt[5] = ( ((rate & 0x0000ff00) >> 8)  & 0xff );
-  pkt[6] = ( (rate & 0x000000ff) & 0xff );
-
-  writeData(pkt, 7);
-
-  return checkOK();
-}
-
-bool HMTRP::setRXBandwidth(uint16_t rxBand)
-{
-  //  Valid values are between 30-620 (in Khz)
-
-  if (rxBand < 30 || rxBand > 620)
-    {
-      throw std::out_of_range(std::string(__FUNCTION__) +
-                              ": Valid rxBand values are between 30-620");
-      return false;
-    }
-        
-  char pkt[5];
-
-  pkt[0] = HMTRP_START1;
-  pkt[1] = HMTRP_START2;
-  pkt[2] = SET_RX_BW;
-
-  pkt[3] = ( ((rxBand & 0xff00) >> 8) & 0xff );
-  pkt[4] = ( rxBand & 0xff );
-
-  writeData(pkt, 5);
-
-  return checkOK();
-}
-
-bool HMTRP::setFrequencyModulation(uint8_t modulation)
-{
-  //  Valid values are between 10-160 (in Khz)
-
-  if (modulation < 10 || modulation > 160)
-    {
-      throw std::out_of_range(std::string(__FUNCTION__) +
-                              ": Valid modulation values are between 10-160");
-      return false;
-    }
-        
-  char pkt[4];
-
-  pkt[0] = HMTRP_START1;
-  pkt[1] = HMTRP_START2;
-  pkt[2] = SET_FREQ_MODULATION;
-
-  pkt[3] = modulation;
-
-  writeData(pkt, 4);
-
-  return checkOK();
-}
-
-bool HMTRP::setTransmitPower(uint8_t power)
-{
-  //  Valid values are between 0-7
-
-  if (power > 7)
-    {
-      throw std::out_of_range(std::string(__FUNCTION__) +
-                              ": Valid power values are between 0-7");
-      return false;
-    }
-        
-  char pkt[4];
-
-  pkt[0] = HMTRP_START1;
-  pkt[1] = HMTRP_START2;
-  pkt[2] = SET_TX_POWER;
-
-  pkt[3] = power;
-
-  writeData(pkt, 4);
-
-  return checkOK();
-}
-
-bool HMTRP::setUARTSpeed(uint32_t speed)
-{
-  //  Valid values are between 1200-115200
-
-  if (speed < 1200 || speed > 115200)
-    {
-      throw std::out_of_range(std::string(__FUNCTION__) +
-                              ": Valid speed values are between 1200-115200");
-      return false;
-    }
-
-  char pkt[7];
-
-  pkt[0] = HMTRP_START1;
-  pkt[1] = HMTRP_START2;
-  pkt[2] = SET_UART_SPEED;
-
-  pkt[3] = ( ((speed & 0xff000000) >> 24) & 0xff );
-  pkt[4] = ( ((speed & 0x00ff0000) >> 16) & 0xff );
-  pkt[5] = ( ((speed & 0x0000ff00) >> 8)  & 0xff );
-  pkt[6] = ( (speed & 0x000000ff) & 0xff );
-
-  writeData(pkt, 7);
-
-  return checkOK();
-}
-
-
-bool HMTRP::getRFSignalStrength(uint8_t *strength)
-{
-  if (!strength)
-    return false;
-
-  *strength = 0;
-
-  char pkt[3];
-  pkt[0] = HMTRP_START1;
-  pkt[1] = HMTRP_START2;
-  pkt[2] = GET_RF_SIGNAL_STR;
-
-  writeData(pkt, 3);
-  usleep(100000);
-
-  // now read back a 1 byte response
-  char buf;
-  int rv = readData(&buf, 1, defaultDelay);
-
-  if (rv != 1)
-    {
-      cerr << __FUNCTION__ << ": failed to receive correct response: rv = " 
-           << rv << ", expected 1" << endl;
-      return false;
-    }
-
-  // now decode
-  *strength = (uint8_t)buf;
-
-  return true;
-}
-
-uint8_t HMTRP::getRFSignalStrength()
-{
-  uint8_t strength = 0;
-  if (!getRFSignalStrength(&strength))
-    throw std::runtime_error(std::string(__PRETTY_FUNCTION__) +
-                                ": readData() failed");
-  return strength;
-}
-
-bool HMTRP::getModSignalStrength(uint8_t *strength)
-{
-  if (!strength)
-    return false;
-
-  *strength = 0;
-
-  char pkt[3];
-  pkt[0] = HMTRP_START1;
-  pkt[1] = HMTRP_START2;
-  pkt[2] = GET_MOD_SIGNAL_STR;
-
-  writeData(pkt, 3);
-  usleep(100000);
-
-  // now read back a 1 byte response
-  char buf;
-  int rv = readData(&buf, 1, defaultDelay);
-
-  if (rv != 1)
-    {
-      cerr << __FUNCTION__ << ": failed to receive correct response: rv = " 
-           << rv << ", expected 1" << endl;
-      return false;
-    }
-
-  // now decode
-  *strength = (uint8_t)buf;
-
-  return true;
-}
-
-uint8_t HMTRP::getModSignalStrength()
-{
-  uint8_t strength = 0;
-  if (!getModSignalStrength(&strength))
-    throw std::runtime_error(std::string(__PRETTY_FUNCTION__) +
-                                ": readData() failed");
-  return strength;
-}
-
diff --git a/src/hmtrp/hmtrp.hpp b/src/hmtrp/hmtrp.hpp
deleted file mode 100644
index f5c958b..0000000
--- a/src/hmtrp/hmtrp.hpp
+++ /dev/null
@@ -1,270 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#pragma once
-
-#include <string>
-#include <iostream>
-
-#include <stdint.h>
-#include <stdlib.h>
-#include <unistd.h>
-#include <string.h>
-#include <fcntl.h>
-#include <errno.h>
-#include <termios.h>
-#include <sys/time.h>
-#include <sys/select.h>
-#include <sys/types.h>
-#include <sys/stat.h>
-
-#include <mraa/uart.h>
-
-#define HMTRP_DEFAULT_UART 0
-
-namespace upm {
-/**
- * @brief HMTRP Serial RF Pro
- * @defgroup hmtrp libupm-hmtrp
- * @ingroup seeed uart wifi
- */
-
-/**
- * @library hmtrp
- * @sensor hmtrp
- * @comname Serial RF Pro Module
- * @altname HMTRP-433 HMTRP-470 HMTRP-868 HMTRP-915
- * @type wifi
- * @man seeed
- * @con uart
- * @web http://wiki.seeed.cc/Grove-Serial_RF_Pro/
- *
- * @brief API for the HM-TRP Serial RF Pro transceiver
- *
- * UPM support for the HM-TRP Serial RF Pro transceiver. This was tested
- * specifically with the Grove Serial RF Pro transceiver. In theory,
- * this class should work with the following devices:
- *
- * HM-TRP-433: 414000000-454000000Hz
- * HM-TRP-470: 450000000-490000000Hz
- * HM-TRP-868: 849000000-889000000Hz
- * HM-TRP-915: 895000000-935000000Hz 
- *
- * The only difference is the transmit and receive frequencies
- * supported.
- *
- * By default, the device simply sends and receives any data
- * presented on its UART interface. It can be put into a
- * configuration mode by grounding the CONFIG pin on the transceiver.
- *
- * @image html hmtrp.jpg
- * @snippet hmtrp.cxx Interesting
- */
-  class HMTRP {
-  public:
-
-    // HMTRP opcodes
-    typedef enum { RESET               = 0xf0,
-                   GET_CONFIG          = 0xe1,
-                   SET_FREQUENCY       = 0xd2,
-                   SET_RF_DATARATE     = 0xc3, // 1200-115200 (baud)
-                   SET_RX_BW           = 0xb4, // 30-620 (Khz)
-                   SET_FREQ_MODULATION = 0xa5, // 10-160 (KHz)
-                   SET_TX_POWER        = 0x96, // 0-7
-                   SET_UART_SPEED      = 0x1e, // recommended not to change
-                   GET_RF_SIGNAL_STR   = 0xa7,
-                   GET_MOD_SIGNAL_STR  = 0x78
-    } HMTRP_OPCODE_T;
-    
-    /**
-     * HMTRP Serial RF Pro transceiver constructor
-     *
-     * @param uart Default UART to use (0 or 1)
-     */
-    HMTRP(int uart=HMTRP_DEFAULT_UART);
-
-    /**
-     * HMTRP destructor
-     */
-    ~HMTRP();
-
-    /**
-     * Checks to see if there is data available for reading
-     *
-     * @param millis Number of milliseconds to wait; 0 means no waiting (default).
-     * @return True if there is data available for reading
-     */
-    bool dataAvailable(unsigned int millis=0);
-
-    /**
-     * Reads any available data in a user-supplied buffer
-     *
-     * @param buffer Buffer to hold the data read
-     * @param len Length of the buffer
-     * @param millis Maximum time in milliseconds to wait for input. -1 means 
-     * waiting forever (default).
-     * @return Number of bytes read; 0 if timed out and millis is >= 0
-     */
-    int readData(char *buffer, int len, int millis=-1);
-
-    /**
-     * Writes the data in the buffer to the device
-     *
-     * @param buffer Buffer to hold the data read
-     * @param len Length of the buffer
-     * @return Number of bytes written
-     */
-    int writeData(char *buffer, int len);
-
-    /**
-     * Sets up proper tty I/O modes and the baud rate. The default
-     * baud rate is 9,600 (B9600).
-     *
-     * @param baud Desired baud rate.  
-     * @return True if successful
-     */
-    bool setupTty(speed_t baud=B9600);
-
-    /**
-     * Looks for and verifies an OK response. This looks like "OK\r\n"
-     *
-     * @return True if OK received
-     */
-    bool checkOK();
-    
-    /**
-     * Resets the device to default parameters, except for the UART baud rate
-     *
-     * @return True if successful
-     */
-    bool reset();
-
-    /**
-     * Queries the radio to determine its configuration
-     *
-     * @param freq Operating frequency
-     * @param dataRate TX/RX bit rate
-     * @param rxBandwidth Receiving bandwidth in Khz
-     * @param modulation Modulation frequency in Khz
-     * @param txPower Transmission power (1-7)
-     * @param uartBaud UART baud rate
-     * @return True if successful
-     */
-    bool getConfig(uint32_t *freq, uint32_t *dataRate, uint16_t *rxBandwidth,
-                   uint8_t *modulation, uint8_t *txPower, uint32_t *uartBaud);
-
-    /**
-     * Sets the frequency. Note: this is limited depending on which
-     * HM-TRP device you are using. Consult the datasheet.
-     *
-     * @param freq Operating frequency
-     * @return True if successful
-     */
-    bool setFrequency(uint32_t freq);
-
-    /**
-     * Sets the RF data transmission rate. Valid values are between
-     * 1,200 and 115,200.
-     *
-     * @param rate Radio transmission rate in baud (1,200-115,200)
-     * @return True if successful
-     */
-    bool setRFDataRate(uint32_t rate);
-
-    /**
-     * Sets the RX bandwidth. Valid values are between 30 and 620 (in Khz)
-     *
-     * @param rxBand RX bandwidth in Khz (30-620)
-     * @return True if successful
-     */
-    bool setRXBandwidth(uint16_t rxBand);
-
-    /**
-     * Sets the frequency modulation. Valid values are between 10 and 160 (in Khz)
-     *
-     * @param modulation Frequency modulation to use, in Khz (10-160)
-     * @return True if successful
-     */
-    bool setFrequencyModulation(uint8_t modulation);
-
-    /**
-     * Sets the transmit power level. Valid values are between 0 and 7,
-     * 7 being the maximum power.
-     *
-     * @param power Power level to use during transmission. Valid values
-     * are between 0 and 7.
-     * @return True if successful
-     */
-    bool setTransmitPower(uint8_t power);
-
-    /**
-     * Sets the configured baud rate of the UART. It is strongly
-     * recommended you do not change this, or you may lose the
-     * ability to communicate with the transceiver. Valid values are 1,200-115,200.
-     *
-     * @param speed Desired baud rate to configure the device to use
-     * Valid values are between 1,200 and 115,200.
-     * @return True if successful
-     */
-    bool setUARTSpeed(uint32_t speed);
-
-    /**
-     * Gets the RF signal strength
-     *
-     * @param strength Returned strength
-     * @return True if successful
-     */
-    bool getRFSignalStrength(uint8_t *strength);
-
-    /**
-     * Gets the RF signal strength
-     *
-     * @return Signal strength
-     * @throws std::runtime_error if reading from the sensor failed
-     */
-    uint8_t getRFSignalStrength();
-
-    /**
-     * Gets the modulation signal strength.
-     *
-     * @param strength Returned strength
-     * @return True if successful
-     */
-    bool getModSignalStrength(uint8_t *strength);
-
-    /**
-     * Gets the modulation signal strength.
-     *
-     * @return Signal strength
-     * @throws std::runtime_error if reading from the sensor failed
-     */
-    uint8_t getModSignalStrength();
-
-
-  private:
-    mraa_uart_context m_uart;
-    int m_ttyFd;
-  };
-}
-
-
diff --git a/src/hmtrp/hmtrp.i b/src/hmtrp/hmtrp.i
deleted file mode 100644
index a9e778e..0000000
--- a/src/hmtrp/hmtrp.i
+++ /dev/null
@@ -1,55 +0,0 @@
-%include "../common_top.i"
-
-/* BEGIN Java syntax  ------------------------------------------------------- */
-#ifdef SWIGJAVA
-%include "../java_buffer.i"
-%include "../java_exceptions.i"
-
-%apply uint32_t *OUTPUT { uint32_t *freq, uint32_t *dataRate };
-%apply uint16_t *OUTPUT { uint16_t *rxBandwidth };
-%apply uint8_t *OUTPUT { uint8_t *modulation, uint8_t *txPower };
-%apply uint32_t *OUTPUT { uint32_t *uartBaud };
-%apply uint8_t *OUTPUT { uint8_t *strength };
-
-%ignore getRFSignalStrength(uint8_t *strength);
-READDATA_EXCEPTION(getRFSignalStrength())
-
-%ignore getModSignalStrength(uint8_t *strength);
-READDATA_EXCEPTION(getModSignalStrength())
-
-JAVA_JNI_LOADLIBRARY(javaupm_hmtrp)
-#endif
-/* END Java syntax */
-
-/* BEGIN Javascript syntax  ------------------------------------------------- */
-#ifdef SWIGJAVASCRIPT
-%include "../carrays_uint8_t.i"
-%include "../carrays_uint16_t.i"
-%include "../carrays_uint32_t.i"
-
-%array_class(char, charArray);
-#endif
-/* END Javascript syntax */
-
-/* BEGIN Python syntax  ----------------------------------------------------- */
-#ifdef SWIGPYTHON
-%include "../carrays_uint8_t.i"
-%include "../carrays_uint16_t.i"
-%include "../carrays_uint32_t.i"
-
-%rename("getModSignalStrengthNoParam")  getModSignalStrength();
-%rename("getRFSignalStrengthNoParam") getRFSignalStrength();
-
-%array_class(char, charArray);
-#endif
-/* END Python syntax */
-
-/* BEGIN Common SWIG syntax ------------------------------------------------- */
-%{
-#include "hmtrp.hpp"
-speed_t int_B9600 = B9600;
-%}
-%include "hmtrp.hpp"
-
-speed_t int_B9600 = B9600;
-/* END Common SWIG syntax */
diff --git a/src/hmtrp/hmtrp.json b/src/hmtrp/hmtrp.json
deleted file mode 100644
index 5813b44..0000000
--- a/src/hmtrp/hmtrp.json
+++ /dev/null
@@ -1,40 +0,0 @@
-{
-    "Library": "hmtrp",
-    "Description": "API for the HM-TRP Serial RF Pro Transceiver",
-    "Sensor Class":
-    {
-        "HMTRP":
-        {
-            "Name": "Serial RF Pro Module",
-            "Description": "UPM support for the HM-TRP Serial RF Pro transceiver. This was tested specifically with the Grove Serial RF Pro transceiver. In theory, this class should work with the following devices: HM-TRP-433: 414000000-454000000Hz HM-TRP-470: 450000000-490000000Hz HM-TRP-868: 849000000-889000000Hz HM-TRP-915: 895000000-935000000Hz  The only difference is the transmit and receive frequencies supported. By default, the device simply sends and receives any data presented on its UART interface. It can be put into a configuration mode by grounding the CONFIG pin on the transceiver.",
-            "Aliases": ["hmtrp"],
-            "Categories": ["wireless"],
-            "Connections": ["uart"],
-            "Project Type": ["wireless", "prototyping"],
-            "Manufacturers": ["seeed"],
-            "Kits": [],
-            "Image": "hmtrp.jpg",
-            "Examples":
-            {
-                "Java": ["HMTRP_Example.java"],
-                "Python": ["hmtrp.py"],
-                "Node.js": ["hmtrp.js"],
-                "C++": ["hmtrp.cxx"],
-                "C": []
-            },
-            "Specifications":
-            {
-                "Operating Voltage": {"unit": "V", "low": 4.75, "typ": 5.0, "high": 5.25},
-                "Sleep Current": {"unit": "uA", "typ": 1},
-                "Transmission Distance": {"unit": "Km", "max": 1},
-                "Operating Temperature": {"unit": "degC", "low": -40, "high": 85}
-            },
-            "Urls" :
-            {
-                "Product Pages": ["https://www.seeedstudio.com/Grove-Serial-RF-Pro-p-794.html"],
-                "Datasheets": ["http://wiki.seeed.cc/Grove-Serial_RF_Pro/", "https://github.com/SeeedDocument/Grove-Serial_RF_Pro/raw/master/res/HM-TRP-RS232_enV1.0_20120604.pdf"],
-                "Schematics": []
-            }
-        }
-    }
-}
diff --git a/src/hp20x/CMakeLists.txt b/src/hp20x/CMakeLists.txt
deleted file mode 100644
index 899d03b..0000000
--- a/src/hp20x/CMakeLists.txt
+++ /dev/null
@@ -1,5 +0,0 @@
-set (libname "hp20x")
-set (libdescription "High-accuracy Barometer")
-set (module_src ${libname}.cxx)
-set (module_hpp ${libname}.hpp)
-upm_module_init(mraa)
diff --git a/src/hp20x/hp20x.cxx b/src/hp20x/hp20x.cxx
deleted file mode 100644
index 3cbe0fe..0000000
--- a/src/hp20x/hp20x.cxx
+++ /dev/null
@@ -1,287 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <unistd.h>
-#include <math.h>
-#include <iostream>
-#include <string>
-#include <stdexcept>
-
-#include "hp20x.hpp"
-
-using namespace upm;
-using namespace std;
-
-
-HP20X::HP20X(int bus, uint8_t address):
-  m_i2c(bus)
-{
-  m_addr = address;
-
-  mraa::Result rv;
-  if ( (rv = m_i2c.address(m_addr)) != mraa::SUCCESS)
-    {
-      throw std::invalid_argument(std::string(__FUNCTION__) +
-                                  ": I2c.address() failed");
-      return;
-    }
-}
-
-HP20X::~HP20X()
-{
-}
-
-bool HP20X::init(DSR_BITS_T dsr)
-{
-  // wait for the device to report ready
-  waitforDeviceReady();
-
-  m_dsr = dsr;
-
-  // enable compensation?  Datasheet says yes, but a register readback
-  // says no.  Data does seem stable, so....
-  compensationEnable(true);
-
-  return true;
-}
-
-bool HP20X::isReady()
-{
-  uint8_t intsrc = readReg(REG_INT_SRC);
-  
-  if (intsrc & INT_SRC_DEV_RDY)
-    return true;
-
-  return false;
-}
-
-bool HP20X::waitforDeviceReady()
-{
-  const int maxRetries = 20;
-
-  int retries = 0;
-
-  while (retries < maxRetries)
-    {
-      if (isReady())
-        return true;
-
-      usleep(20000);
-      retries++;
-    }
-  
-  throw std::runtime_error(std::string(__FUNCTION__) +
-                           ": timeout waiting for device to become ready");
-
-  return false;
-}
-
-bool HP20X::writeCmd(uint8_t cmd)
-{
-  mraa::Result rv;
-  if ((rv = m_i2c.writeByte(cmd)) != mraa::SUCCESS)
-    {
-      throw std::runtime_error(std::string(__FUNCTION__) +
-                               ": I2c.writeByte() failed");
-      return false;
-    } 
-
-  return true;
-}
-
-bool HP20X::writeReg(HP20X_REG_T reg, uint8_t data)
-{
-  waitforDeviceReady();
-
-  uint8_t r = CMD_WRITE_REG | reg;
-
-  mraa::Result rv;
-  if ((rv = m_i2c.writeReg(r, data)) != mraa::SUCCESS)
-    {
-      throw std::runtime_error(std::string(__FUNCTION__) +
-                               ": I2c.writeReg() failed");
-      return false;
-    }
- 
-  return true;
-}
-
-uint8_t HP20X::readReg(HP20X_REG_T reg)
-{
-  uint8_t r = CMD_READ_REG | reg;
-
-  return m_i2c.readReg(r);
-}
-
-int HP20X::readData()
-{
-  uint8_t buf[3] = {0};
-
-  if (!m_i2c.read(buf, 3))
-    {
-      throw std::runtime_error(std::string(__FUNCTION__) +
-                               ": I2c.read() failed");
-      return 0;
-    }
-
-  // handle 24bit sign extension
-  int minus = 1;
-  if (buf[0] & 0x80)
-    {
-      // negative
-      buf[0] &= 0x3f;
-      minus = -1;
-    }
-
-  return ( minus * ((buf[0] << 16) | (buf[1] << 8) | buf[2]) );
-}
-
-float HP20X::getTemperature()
-{
-  // wait for the device to report ready
-  waitforDeviceReady();
-
-  // start conversion, T only
-  uint8_t cmd = CMD_ADC_CVT | (CHNL_T << CHNL_SHIFT) | (m_dsr << DSR_SHIFT);
-  writeCmd(cmd);
-
-  // wait for the device to report ready
-  waitforDeviceReady();
-
-  // now read the temperature
-  writeCmd(CMD_READ_T);
-
-  return ((float)readData() / 100.0);
-}
-
-float HP20X::getPressure()
-{
-  // wait for the device to report ready
-  waitforDeviceReady();
-
-  // start conversion, PT only
-  uint8_t cmd = CMD_ADC_CVT | (CHNL_PT << CHNL_SHIFT) | (m_dsr << DSR_SHIFT);
-  writeCmd(cmd);
-
-  // wait for the device to report ready
-  waitforDeviceReady();
-
-  // now read the pressure
-  writeCmd(CMD_READ_P);
-
-  return ((float)readData() / 100.0);
-}
-
-float HP20X::getAltitude()
-{
-  // wait for the device to report ready
-  waitforDeviceReady();
-
-  // start conversion, PT only
-  uint8_t cmd = CMD_ADC_CVT | (CHNL_PT << CHNL_SHIFT) | (m_dsr << DSR_SHIFT);
-  writeCmd(cmd);
-
-  // wait for the device to report ready
-  waitforDeviceReady();
-
-  // now read the pressure
-  writeCmd(CMD_READ_A);
-
-  return ((float)readData() / 100.0);
-}
-
-void HP20X::compensationEnable(bool enable)
-{
-  if (enable)
-    writeReg(REG_PARA, PARA_CMPS_EN);
-  else
-    writeReg(REG_PARA, 0);
-}
-
-bool HP20X::setInterruptEnable(uint8_t bits)
-{
-  return writeReg(REG_INT_EN, bits);
-}
-
-bool HP20X::setInterruptConfig(uint8_t bits)
-{
-  return writeReg(REG_INT_CFG, bits);
-}
-
-uint8_t HP20X::getInterruptSource()
-{
-  return readReg(REG_INT_SRC);
-}
-
-void HP20X::setDSR(DSR_BITS_T dsr)
-{
-  m_dsr = dsr;
-}
-
-void HP20X::recalibrateInternal()
-{
-  waitforDeviceReady();
-  writeCmd(CMD_ANA_CAL);
-}
-
-void HP20X::softReset()
-{
-  waitforDeviceReady();
-  writeCmd(CMD_SOFT_RST);
-  waitforDeviceReady();
-}
-
-void HP20X::setAltitudeOffset(int16_t off)
-{
-  writeReg(REG_ALT_OFF_LSB, (off & 0xff));
-  writeReg(REG_ALT_OFF_MSB, ((off >> 8) & 0xff));
-}
-
-void HP20X::setPAThreshholds(int16_t low, int16_t med, int16_t high)
-{
-  // low
-  writeReg(REG_PA_L_TH_LSB, (low & 0xff));
-  writeReg(REG_PA_L_TH_MSB, ((low >> 8) & 0xff));
-
-  // medium
-  writeReg(REG_PA_M_TH_LSB, (med & 0xff));
-  writeReg(REG_PA_M_TH_MSB, ((med >> 8) & 0xff));
-
-  // high
-  writeReg(REG_PA_H_TH_LSB, (high & 0xff));
-  writeReg(REG_PA_H_TH_MSB, ((high >> 8) & 0xff));
-}
-
-void HP20X::setTemperatureThreshholds(int8_t low, int8_t med, int8_t high)
-{
-  // low
-  writeReg(REG_T_L_TH, low);
-
-  // medium
-  writeReg(REG_T_M_TH, med);
-
-  // high
-  writeReg(REG_T_H_TH, high);
-}
-
diff --git a/src/hp20x/hp20x.hpp b/src/hp20x/hp20x.hpp
deleted file mode 100644
index 7e23e35..0000000
--- a/src/hp20x/hp20x.hpp
+++ /dev/null
@@ -1,385 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#pragma once
-
-#include <string>
-#include <mraa/common.hpp>
-#include <mraa/i2c.hpp>
-
-#define HP20X_I2C_BUS 0
-#define HP20X_DEFAULT_I2C_ADDR 0x76
-
-namespace upm {
-  
-  /**
-   * @brief HP20X I2C Barometer (High-Accuracy)
-   * @defgroup hp20x libupm-hp20x
-   * @ingroup seeed i2c pressure
-   */
-
-  /**
-   * @library hp20x
-   * @sensor hp20x
-   * @comname High-accuracy Barometer
-   * @altname HP20X Barometer (High-Accuracy)
-   * @type pressure
-   * @man seeed
-   * @web http://www.seeedstudio.com/depot/Grove-Barometer-HighAccuracy-p-1865.html
-   * @con i2c
-   *
-   * @brief API for the HP20X-based Grove Barometer (High-Accuracy)
-   *
-   * This is a high-accuracy barometer providing pressure, altitude,
-   * and temperature data. It can be calibrated for a given altitude
-   * offset, and a wide range of interrupt generating capabilities are
-   * supported. As usual, see the HP20X datasheet for more details.
-   *
-   * This module was developed using a Grove Barometer (High-Accuracy)
-   * based on an HP206C chip.
-   *
-   * @image html hp20x.jpg
-   * @snippet hp20x.cxx Interesting
-   */
-  class HP20X {
-  public:
-
-    /**
-     * HP20X commands
-     */
-    typedef enum {
-      CMD_SOFT_RST              = 0x06,
-
-      CMD_ADC_CVT               = 0x40, // mask - ANDed with DSR and CHNL bits
-
-      CMD_READ_PT               = 0x10, // read pressure/temp
-      CMD_READ_AT               = 0x11, // read alt/temp
-
-      CMD_READ_P                = 0x30, // read pressure only
-      CMD_READ_A                = 0x31, // read alt only
-      CMD_READ_T                = 0x32, // read temp only
-
-      CMD_ANA_CAL               = 0x28, // recalibrate internal analog blocks
-
-      CMD_READ_REG              = 0x80, // mask - ANDed with reg addr
-      CMD_WRITE_REG             = 0xc0  // mask - ANDed with reg addr
-    } HP20X_CMD_T;
-
-    /**
-     * CHNL bits
-     */
-    typedef enum {
-      CHNL_PT                   = 0x00, // pressure and temperature
-      CHNL_T                    = 0x02, // temperature
-
-      CHNL_SHIFT                = 0 // don't use, indicates position in REG
-    } CHNL_BITS_T;
-    
-    /**
-     * DSR bits
-     */
-    typedef enum {
-      DSR_4096                  = 0x00, // decimation rate of digital filter
-      DSR_2048                  = 0x01,
-      DSR_1024                  = 0x02,
-      DSR_512                   = 0x03,
-      DSR_256                   = 0x04,
-      DSR_128                   = 0x05,
-
-      DSR_SHIFT                 = 2 // don't use, indicates position in REG
-    } DSR_BITS_T;
-    
-
-    /**
-     * HP20X registers
-     */
-    typedef enum {
-      REG_ALT_OFF_LSB           = 0x00,
-      REG_ALT_OFF_MSB           = 0x01,
-
-      REG_PA_H_TH_LSB           = 0x02, // Pres/Alt high threshold
-      REG_PA_H_TH_MSB           = 0x03,
-
-      REG_PA_M_TH_LSB           = 0x04, // Pres/Alt medium threshold
-      REG_PA_M_TH_MSB           = 0x05,
-
-      REG_PA_L_TH_LSB           = 0x06, // Pres/Alt low threshold
-      REG_PA_L_TH_MSB           = 0x07,
-
-      REG_T_H_TH                = 0x08, // temperature high threshold
-      REG_T_M_TH                = 0x09,
-      REG_T_L_TH                = 0x0a,
-
-      REG_INT_EN                = 0x0b, // interrupt enables
-      REG_INT_CFG               = 0x0c, // interrupt configuration
-      REG_INT_SRC               = 0x0d, // interrupt sources
-
-      REG_PARA                  = 0x0e  // parameters config
-    } HP20X_REG_T;
-    
-    /**
-     * INT_EN bits
-     */
-    typedef enum {
-      INT_EN_T_WIN_EN           = 0x01,
-      INT_EN_PA_WIN_EN          = 0x02,
-
-      INT_EN_T_TRAV_EN          = 0x04,
-      INT_EN_PA_TRAV_EN         = 0x08,
-
-      INT_EN_T_RDY_EN           = 0x10,
-      INT_EN_PA_RDY_EN          = 0x20
-      // 0x40, 0x80 reserved
-    } INT_EN_BITS_T;
-
-    /**
-     * INT_CFG bits
-     */
-    typedef enum {
-      INT_CFG_T_WIN_CFG          = 0x01,
-      INT_CFG_PA_WIN_CFG         = 0x02,
-
-      INT_CFG_T_TRAV_CFG         = 0x04,
-      INT_CFG_PA_TRAV_CFG        = 0x08,
-
-      INT_CFG_T_RDY_CFG          = 0x10,
-      INT_CFG_PA_RDY_CFG         = 0x20,
-
-      INT_CFG_PA_MODE            = 0x40
-      // 0x80 reserved
-    } INT_CFG_BITS_T;
-
-    /**
-     * INT_SRC bits
-     */
-    typedef enum {
-      INT_SRC_T_WIN              = 0x01,
-      INT_SRC_PA_WIN             = 0x02,
-
-      INT_SRC_T_TRAV             = 0x04,
-      INT_SRC_PA_TRAV            = 0x08,
-
-      INT_SRC_T_RDY              = 0x10,
-      INT_SRC_PA_RDY             = 0x20,
-
-      INT_SRC_DEV_RDY            = 0x40, // device is ready
-
-      INT_SRC_TH_ERR             = 0x80 // threshold error
-    } INT_SRC_BITS_T;
-
-    /**
-     * PARA bits
-     */
-    typedef enum {
-      // 0x01-0x40 reserved
-      PARA_CMPS_EN               = 0x80 // compensation enable
-    } PARA_BITS_T;
-
-    /**
-     * HP20X constructor
-     *
-     * @param bus I2C bus to use
-     * @param address Address for this device
-     */
-    HP20X(int bus=HP20X_I2C_BUS, uint8_t address=HP20X_DEFAULT_I2C_ADDR);
-
-    /**
-     * HP20X destructor
-     */
-    ~HP20X();
-    
-    /**
-     * Sets up initial values and starts operation
-     *
-     * @param dsr Data sampling rate; one of the DSR_BITS_T values
-     * @return True if successful
-     */
-    bool init(DSR_BITS_T dsr=DSR_4096);
-
-    /**
-     * Sends a command to the device
-     *
-     * @param cmd Command to send; usually, one of the HP20X_CMD_T values
-     * @return True if successful
-     */
-    bool writeCmd(uint8_t cmd);
-
-    /**
-     * Writes a value to a register
-     *
-     * @param reg Register to write to; one of the HP20X_REG_T values
-     * @param data Value to write
-     * @return True if successful
-     */
-    bool writeReg(HP20X_REG_T reg, uint8_t data);
-
-    /**
-     * Reads a register and returns its value
-     *
-     * @param reg Register to read; one of the HP20X_REG_T values
-     * @return Value of a specified register
-     */
-    uint8_t readReg(HP20X_REG_T reg);
-
-    /**
-     * Reads 3 bytes of data in response to a conversion request, and
-     * converts it to an integer
-     *
-     * @return Value read back (temperature, pressure, etc.)
-     */
-    int readData();
-
-    /**
-     * Checks to see if the DR_RDY bit is set, indicating the device
-     * can accept commands
-     *
-     * @return True if the device is ready, false otherwise
-     */
-    bool isReady();
-
-    /**
-     * Checks to see if the device is ready, and sleeps/retries if not.
-     * Returns once the device indicates it's ready.
-     *
-     * @return True if the device is ready; false if retries are exhausted
-     */
-    bool waitforDeviceReady();
-
-    /**
-     * Returns the temperature in Celsius
-     *
-     * @return Temperature
-     */
-    float getTemperature();
-
-    /**
-     * Returns the pressure in millibars
-     *
-     * @return Pressure
-     */
-    float getPressure();
-
-    /**
-     * Returns the computed altitude in meters
-     *
-     * @return Altitude
-     */
-    float getAltitude();
-
-    /**
-     * Enables or disables the on-chip compensator. This allows the
-     * chip to filter and clean up the output data.
-     *
-     * @param enable True to enable, false otherwise
-     */
-    void compensationEnable(bool enable);
-
-    /**
-     * Sets up the interrupt enable register. This register defines
-     * which events can cause a hardware interrupt pin to be pulled high
-     * (active).
-     *
-     * @param bits One or more of the INT_EN_BITS_T bits
-     * @return True if successful, false otherwise
-     */
-    bool setInterruptEnable(uint8_t bits);
-
-    /**
-     * Sets up the interrupt configuration register. This register
-     * defines which events can cause an interrupt to be indicated.
-     *
-     * @param bits One or more of the INT_EN_BITS_T bits
-     * @return True if successful, false otherwise
-     */
-    bool setInterruptConfig(uint8_t bits);
-
-    /**
-     * Gets the interrupt source register. This register indicates
-     * which interrupts have been triggered. In addition, it
-     * indicates when certain operations have been completed.
-     *
-     * @return One of more of the INT_SRC_BITS_T values
-     */
-    uint8_t getInterruptSource();
-
-    /**
-     * Sets the data sampling rate. Higher rates are more precise, but
-     * take more time per measurement.
-     *
-     * @param dsr One of the DSR_BITS_T values
-     */
-    void setDSR(DSR_BITS_T dsr);
-
-
-    /**
-     * Starts an internal recalibration of analog blocks. This is
-     * faster than a soft reset.
-     */
-    void recalibrateInternal();
-
-    /**
-     * Executes a soft reset. All register values are reset to power-on
-     * defaults. This function returns when the reset is
-     * complete and the device reports it is ready.
-     */
-    void softReset();
-
-    /**
-     * Sets the altitude offset for your region. See the datasheet for
-     * more details. Setting this correctly for your region is
-     * required for accurate altitude data.
-     *
-     * @param off Offset
-     */
-    void setAltitudeOffset(int16_t off);
-
-    /**
-     * Sets pressure/altitude thresholds for interrupt generation
-     *
-     * @param low Low threshold to generate an interrupt
-     * @param med Medium threshold to generate an interrupt
-     * @param high High threshold to generate an interrupt
-     */
-    void setPAThreshholds(int16_t low, int16_t med, int16_t high);
-
-    /**
-     * Sets temperature thresholds for interrupt generation
-     *
-     * @param low Low threshold to generate an interrupt
-     * @param med Medium threshold to generate an interrupt
-     * @param high High threshold to generate an interrupt
-     */
-    void setTemperatureThreshholds(int8_t low, int8_t med, int8_t high);
-
-
-  protected:
-    mraa::I2c m_i2c;
-
-  private:
-    uint8_t m_addr;
-    uint8_t m_dsr;
-
-  };
-}
-
-
diff --git a/src/hp20x/hp20x.json b/src/hp20x/hp20x.json
deleted file mode 100644
index eb490b4..0000000
--- a/src/hp20x/hp20x.json
+++ /dev/null
@@ -1,40 +0,0 @@
-{
-    "Library": "hp20x",
-    "Description": "API for the HP20X-based Grove Barometer (High-Accuracy)",
-    "Sensor Class":
-    {
-        "HP20X":
-        {
-            "Name": "HP20X Barometer (High-Accuracy)",
-            "Description": "This is a high-accuracy barometer providing pressure, altitude, and temperature data. It can be calibrated for a given altitude offset, and a wide range of interrupt generating capabilities are supported. As usual, see the HP20X datasheet for more details. This module was developed using a Grove Barometer (High-Accuracy) based on an HP206C chip.",
-            "Aliases": ["hp20x"],
-            "Categories": ["pressure"],
-            "Connections": ["i2c"],
-            "Project Type": ["environmental", "prototyping"],
-            "Manufacturers": ["seeed"],
-            "Kits": [],
-            "Image": "hp20x.jpg",
-            "Examples":
-            {
-                "Java": ["HP20x_Example.java"],
-                "Python": ["hp20x.py"],
-                "Node.js": ["hp20x.js"],
-                "C++": ["hp20x.cxx"],
-                "C": []
-            },
-            "Specifications":
-            {
-                "Operating Voltage": {"unit": "V", "low": 3.3, "high": 5.5},
-                "Operating Current": {"unit": "mA", "low": 0.635, "high": 1.1},
-                "Measurement Range": {"unit": "hPa", "low": 300, "high": 1200}
-
-            },
-            "Urls" :
-            {
-                "Product Pages": ["https://www.seeedstudio.com/Grove-Barometer-HighAccuracy-p-1865.html"],
-                "Datasheets": ["http://www.seeedstudio.com/wiki/File:HP206C_Datasheet.pdf"],
-                "Schematics": []
-            }
-        }
-    }
-}
diff --git a/src/ht9170/CMakeLists.txt b/src/ht9170/CMakeLists.txt
deleted file mode 100644
index 08aeab2..0000000
--- a/src/ht9170/CMakeLists.txt
+++ /dev/null
@@ -1,5 +0,0 @@
-set (libname "ht9170")
-set (libdescription "Dual Tone Multi Frequency (DTMF) Decoder")
-set (module_src ${libname}.cxx)
-set (module_hpp ${libname}.hpp)
-upm_module_init(mraa)
diff --git a/src/ht9170/ht9170.cxx b/src/ht9170/ht9170.cxx
deleted file mode 100644
index 109e104..0000000
--- a/src/ht9170/ht9170.cxx
+++ /dev/null
@@ -1,124 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <iostream>
-#include <string>
-#include <stdexcept>
-
-#include "ht9170.hpp"
-
-using namespace upm;
-using namespace std;
-
-HT9170::HT9170(int dr, int o1, int o2, int o3, int o4)
-{
-  // init the gpio's we will need
-  if ( !(m_dr = mraa_gpio_init(dr)) )
-    {
-      throw std::invalid_argument(std::string(__FUNCTION__) +
-                                  ": mraa_gpio_init(dr) failed, invalid pin?");
-      return;
-    }
-  mraa_gpio_dir(m_dr, MRAA_GPIO_IN);
-
-  if ( !(m_o1 = mraa_gpio_init(o1)) )
-    {
-      throw std::invalid_argument(std::string(__FUNCTION__) +
-                                  ": mraa_gpio_init(o1) failed, invalid pin?");
-      return;
-    }
-  mraa_gpio_dir(m_o1, MRAA_GPIO_IN);
-
-  if ( !(m_o2 = mraa_gpio_init(o2)) )
-    {
-      throw std::invalid_argument(std::string(__FUNCTION__) +
-                                  ": mraa_gpio_init(o2) failed, invalid pin?");
-      return;
-    }
-  mraa_gpio_dir(m_o2, MRAA_GPIO_IN);
-
-  if ( !(m_o3 = mraa_gpio_init(o3)) )
-    {
-      throw std::invalid_argument(std::string(__FUNCTION__) +
-                                  ": mraa_gpio_init(o3) failed, invalid pin?");
-      return;
-    }
-  mraa_gpio_dir(m_o3, MRAA_GPIO_IN);
-
-  if ( !(m_o4 = mraa_gpio_init(o4)) )
-    {
-      throw std::invalid_argument(std::string(__FUNCTION__) +
-                                  ": mraa_gpio_init(o4) failed, invalid pin?");
-      return;
-    }
-  mraa_gpio_dir(m_o4, MRAA_GPIO_IN);
-}
-
-HT9170::~HT9170()
-{
-  mraa_gpio_close(m_dr);
-  mraa_gpio_close(m_o1);
-  mraa_gpio_close(m_o2);
-  mraa_gpio_close(m_o3);
-  mraa_gpio_close(m_o4);
-}
-
-bool HT9170::digitReady()
-{
-  return (mraa_gpio_read(m_dr) ? true : false);
-}
-
-char HT9170::decodeDigit()
-{
-  // This lookup table is derived from the decode table on page 7 of
-  // the HT9170B/HT9170D datasheet.
-
-  static const char decode[16] = {
-    'D',     // 0
-    '1',     // 1
-    '2',     // 2
-    '3',     // 3
-    '4',     // 4
-    '5',     // 5
-    '6',     // 6
-    '7',     // 7
-    '8',     // 8
-    '9',     // 9
-    '0',     // 10
-    '*',     // 11
-    '#',     // 12
-    'A',     // 13
-    'B',     // 14
-    'C'      // 15
-  };
-
-  uint8_t bits = 0;
-
-  bits = mraa_gpio_read(m_o1);
-  bits |= (mraa_gpio_read(m_o2) << 1);
-  bits |= (mraa_gpio_read(m_o3) << 2);
-  bits |= (mraa_gpio_read(m_o4) << 3);
-
-  return decode[bits];
-}
diff --git a/src/ht9170/ht9170.hpp b/src/ht9170/ht9170.hpp
deleted file mode 100644
index 747c1b9..0000000
--- a/src/ht9170/ht9170.hpp
+++ /dev/null
@@ -1,97 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#pragma once
-
-#include <stdint.h>
-
-#include <mraa/gpio.h>
-
-namespace upm {
-  /**
-   * @brief HT9170 DTMF Decoder
-   * @defgroup ht9170 libupm-ht9170
-   * @ingroup seeed gpio other
-   */
-
-  /**
-   * @library ht9170
-   * @sensor ht9170
-   * @comname Dual Tone Multi Frequency (DTMF) Decoder
-   * @altname HT9170B, HT9170D
-   * @type other
-   * @man seeed 
-   * @web http://www.seeedstudio.com/depot/DTMFDual-Tone-Multi-Frequency-Shield-p-1839.html
-   * @con gpio
-   *
-   * @brief API for the HT9170 DTMF Decoder
-   *
-   * This driver was developed using the DTMF (Dual-Tone
-   * Multi-Frequency) Shield by Seeed Studio*. It can decode DTMF signals presented at
-   * its audio input. It does not generate DTMF signals.
-   *
-   * @image html ht9170.jpg
-   * @snippet ht9170.cxx Interesting
-   */
-  class HT9170 {
-  public:
-
-    /**
-     * HT9170 constructor
-     *
-     * @param dr Data ready pin
-     * @param o1 Digital pin for data output 1
-     * @param o2 Digital pin for data output 2
-     * @param o3 Digital pin for data output 3
-     * @param o4 Digital pin for data output 4
-     */
-    HT9170(int dr, int o1, int o2, int o3, int o4);
-
-    /**
-     * HT9170 destructor
-     */
-    ~HT9170();
-
-    /**
-     * Checks to see if a DTMF number is ready to be read
-     *
-     * @return True if there is a digit available to decode
-     */
-    bool digitReady();
-
-    /**
-     * Decodes a digit and returns it
-     *
-     */
-    char decodeDigit();
-
-  private:
-    mraa_gpio_context m_dr;
-    mraa_gpio_context m_o1;
-    mraa_gpio_context m_o2;
-    mraa_gpio_context m_o3;
-    mraa_gpio_context m_o4;
-  };
-}
-
-
diff --git a/src/ht9170/ht9170.json b/src/ht9170/ht9170.json
deleted file mode 100644
index 5d6e978..0000000
--- a/src/ht9170/ht9170.json
+++ /dev/null
@@ -1,39 +0,0 @@
-{
-    "Library": "ht9170",
-    "Description": "API for the HT9170 DTMF Decoder",
-    "Sensor Class":
-    {
-        "HT9170":
-        {
-            "Name": "Dual Tone Multi Frequency (DTMF) Decoder",
-            "Description": "This driver was developed using the DTMF (Dual-Tone Multi-Frequency) Shield by Seeed Studio*. It can decode DTMF signals presented at its audio input. It does not generate DTMF signals.",
-            "Aliases": ["ht9170"],
-            "Categories": ["telephony"],
-            "Connections": ["gpio"],
-            "Project Type": ["telephone", "prototyping"],
-            "Manufacturers": ["seeed"],
-            "Kits": [],
-            "Image": "ht9170.jpg",
-            "Examples":
-            {
-                "Java": [],
-                "Python": ["ht9170.py"],
-                "Node.js": ["ht9170.js"],
-                "C++": ["ht9170.cxx"],
-                "C": []
-            },
-            "Specifications":
-            {
-                "Operating Voltage": {"unit": "V", "typ": 5},
-                "Operating Current": {"unit": "mA", "typ": 3}
-
-            },
-            "Urls" :
-            {
-                "Product Pages": ["https://www.seeedstudio.com/DTMFDual-Tone-Multi-Frequency-Shield-p-1839.html"],
-                "Datasheets": ["http://www.holtek.com/pdf/comm/9170v111.pdf"],
-                "Schematics": ["http://www.dossant.com/projects/wp-content/uploads/2013/01/dtmf_mod3_schematic.pdf"]
-            }
-        }
-    }
-}
diff --git a/src/htu21d/CMakeLists.txt b/src/htu21d/CMakeLists.txt
deleted file mode 100644
index 3502478..0000000
--- a/src/htu21d/CMakeLists.txt
+++ /dev/null
@@ -1,5 +0,0 @@
-set (libname "htu21d")
-set (libdescription "Digital Relative Humidity Sensor with Temperature")
-set (module_src ${libname}.cpp)
-set (module_hpp ${libname}.hpp)
-upm_module_init(mraa)
diff --git a/src/htu21d/htu21d.cpp b/src/htu21d/htu21d.cpp
deleted file mode 100644
index 9328d7f..0000000
--- a/src/htu21d/htu21d.cpp
+++ /dev/null
@@ -1,278 +0,0 @@
-/*
- * Author: William Penner <william.penner@intel.com>
- * Copyright (c) 2014 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining a copy
- * of this software and associated documentation files (the "Software"), to deal
- * in the Software without restriction, including without limitation the rights
- * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
- * copies of the Software, and to permit persons to whom the Software is
- * furnished to do so, subject to the following conditions:
- *
- * The above copyright notice and this permission notice shall be included in
- * all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
- * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
- * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
- * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
- * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
- * THE SOFTWARE.
- */
-
-#include <iostream>
-#include <string>
-#include <stdexcept>
-
-#include <unistd.h>
-#include <stdlib.h>
-#include <endian.h>
-
-#include "htu21d.hpp"
-
-using namespace upm;
-
-HTU21D::HTU21D(int bus, int devAddr) : m_i2ControlCtx(bus) {
-    m_temperature = 0;
-    m_humidity    = 0;
-
-    m_name = HTU21D_NAME;
-
-    m_controlAddr = devAddr;
-    m_bus = bus;
-
-    mraa::Result ret = m_i2ControlCtx.address(m_controlAddr);
-    if (ret != mraa::SUCCESS) {
-        throw std::invalid_argument(std::string(__FUNCTION__) +
-                                    ": mraa_i2c_address() failed");
-    }
-    resetSensor();
-}
-
-void
-HTU21D::resetSensor(void)
-{
-    uint8_t data = HTU21D_SOFT_RESET;
-    m_i2ControlCtx.write (&data, 1);
-    usleep(20000);
-}
-
-/*
- * Convert register value to degC * 1000
- */
-int32_t
-HTU21D::convertTemp(int32_t regval)
-{
-    return ((21965 * (regval & 0xFFFC)) >> 13) - 46850;
-}
-
-/*
- * Convert register value to %RH * 1000
- */
-int32_t
-HTU21D::convertRH(int32_t regval)
-{
-    return ((15625 * (regval & 0xFFFC)) >> 13) - 6000;
-}
-
-int
-HTU21D::sampleData(void)
-{
-    uint32_t itemp;
-
-    itemp = be16toh(i2cReadReg_16(HTU21D_READ_TEMP_HOLD));
-    m_temperature = convertTemp(itemp);
-
-    itemp = be16toh(i2cReadReg_16(HTU21D_READ_HUMIDITY_HOLD));
-    m_humidity = convertRH(itemp);
-
-    return itemp == 0xFFFF;
-}
-
-float
-HTU21D::getTemperature(int bSampleData)
-{
-    if (bSampleData) {
-        sampleData();
-    }
-    return (float)m_temperature / 1000;
-}
-
-float
-HTU21D::getHumidity(int bSampleData)
-{
-    if (bSampleData) {
-        sampleData();
-    }
-    return (float)m_humidity / 1000;
-}
-
-/*
- * Use the compensation equation from the datasheet to correct the
- * current reading
- * RHcomp = RHactualT + (25 - Tactual) * CoeffTemp
- * RHcomp is in units of %RH * 1000
- */
-float
-HTU21D::getCompRH(int bSampleData)
-{
-	if (bSampleData) {
-		sampleData();
-	}
-	return (float)(m_humidity + (25000 - m_temperature) * 3 / 20) / 1000;
-}
-
-int
-HTU21D::setHeater(int bEnable)
-{
-	uint8_t userreg;
-
-	userreg = i2cReadReg_8(HTU21D_READ_USER_REG);
-	if (bEnable)
-		userreg |= HTU21D_HEATER_ENABLE;
-	else
-		userreg &= ~HTU21D_HEATER_ENABLE;
-	if (i2cWriteReg(HTU21D_WRITE_USER_REG, userreg) < 0)
-		return -1;
-
-	return 0;
-}
-
-/*
- * Use the equation from the datasheet to calculate the partial pressure
- * and then calculate the dew point temperature in degree C.  Typical
- * use would be after reading the temp and humidity the partial
- * pressure can be caculated using the previously read values.
- */
-
-float
-HTU21D::getDewPoint(int bSampleData)
-{
-    if (bSampleData) {
-        sampleData();
-    }
-
-    float fA  = 8.1332;
-    float fB  = 1762.39;
-    float fC  = 235.66;
-    float fT  = getTemperature(false);
-    float fRH = getHumidity(false);
-    float fPP = powf(10, fA - (fB / (fT + fC)));
-    float fDP = -(fB / (log10(fRH * fPP / 100) - fA) + fC);
-
-    return (fDP);
-}
-
-/*
- * Function to optimize reading of values from the device.
- * This function will always initiate a read from the sensor
- * and return the values and dew point calculated value
- */
-
-int
-HTU21D::getHumidityData(float* pfHum, float* pfHumTemp, float* pfDewPt)
-{
-    getHumidity(true);
-    float fTemp  = getTemperature(false);
-    float fDewPt = getDewPoint(false);
-    float fCHum  = getCompRH(false);
-
-    if (pfHum)
-        *pfHum     = fCHum;
-    if (pfHumTemp)
-        *pfHumTemp = fTemp;
-    if (pfDewPt)
-        *pfDewPt   = fDewPt;
-
-    return 0;
-}
-
-/*
- * Test function: when reading the HTU21D many times rapidly should
- * result in a temperature increase.  This test will verify that the
- * value is changing from read to read
- */
-
-int
-HTU21D::testSensor(void)
-{
-    int i;
-    int iError = 0;
-    float fTemp, fHum;
-    float fTempMax, fTempMin;
-    float fHumMax = 0.0, fHumMin = 0.0;
-    float fTempFirst;
-
-    fprintf(stdout, "Executing Sensor Test\n" );
-
-    fHum  = getHumidity(true);
-    fTemp = getTemperature(false);
-    fTempFirst = fTempMax = fTempMin = fTemp;
-
-    // Turn on the heater to make a sensor change
-    setHeater(true);
-
-    // Then sample the sensor a few times
-    for (i=0; i < 10; i++) {
-        fHum  = getHumidity(true);
-        fTemp = getTemperature(false);
-        if (fHum  < fHumMin)  fHumMin  = fHum;
-        if (fHum  > fHumMax)  fHumMax  = fHum;
-        if (fTemp < fTempMin) fTempMin = fTemp;
-        if (fTemp > fTempMax) fTempMax = fTemp;
-        usleep(50000);
-    }
-
-    // Turn off the heater
-    setHeater(false);
-
-    // Now check the results
-    if ((fTemp - fTempFirst) <= 0) {
-        fprintf(stdout, "  Temperature should have increased, but didn't\n" );
-        iError++;
-    }
-    if (fHumMin == fHumMax) {
-        fprintf(stdout, "  Humidity reading was unchanged - warning\n" );
-        iError++;
-    }
-    if (fTempMin == fTempMax) {
-        fprintf(stdout, "  Temperature reading was unchanged - warning\n" );
-        iError++;
-    }
-    if (iError == 0) {
-        fprintf(stdout, "  Device appears functional\n" );
-    }
-
-    fprintf(stdout, "  Test complete\n" );
-
-    return iError;
-}
-
-/*
- * Functions to read and write data to the i2c device
- */
-
-mraa::Result
-HTU21D::i2cWriteReg (uint8_t reg, uint8_t value) {
-    mraa::Result error = mraa::SUCCESS;
-
-    uint8_t data[2] = { reg, value };
-    error = m_i2ControlCtx.write (data, 2);
-    if ( error != mraa::SUCCESS)
-      throw std::invalid_argument(std::string(__FUNCTION__) +
-                                  ": mraa_i2c_write() failed");
-
-    return error;
-}
-
-uint16_t
-HTU21D::i2cReadReg_16 (int reg) {
-    return m_i2ControlCtx.readWordReg(reg);
-}
-
-uint8_t
-HTU21D::i2cReadReg_8 (int reg) {
-    return m_i2ControlCtx.readReg(reg);
-}
-
diff --git a/src/htu21d/htu21d.hpp b/src/htu21d/htu21d.hpp
deleted file mode 100644
index e4e603c..0000000
--- a/src/htu21d/htu21d.hpp
+++ /dev/null
@@ -1,220 +0,0 @@
-/*
- * Author: William Penner <william.penner@intel.com>
- * Copyright (c) 2014-2017 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining a copy
- * of this software and associated documentation files (the "Software"), to deal
- * in the Software without restriction, including without limitation the rights
- * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
- * copies of the Software, and to permit persons to whom the Software is
- * furnished to do so, subject to the following conditions:
- *
- * The above copyright notice and this permission notice shall be included in
- * all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
- * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
- * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
- * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
- * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
- * THE SOFTWARE.
- */
-
-#pragma once
-
-#include <string>
-#include <mraa/i2c.hpp>
-#include <math.h>
-
-#define HTU21D_NAME "htu21d"
-#define HTU21D_I2C_ADDRESS 0x40
-
-/* HTU21D Commands */
-#define HTU21D_READ_TEMP_HOLD     0xE3
-#define HTU21D_READ_HUMIDITY_HOLD 0xE5
-#define HTU21D_WRITE_USER_REG     0xE6
-#define HTU21D_READ_USER_REG      0xE7
-#define HTU21D_SOFT_RESET         0xFE
-
-/* User Register Bit Definition */
-#define HTU21D_DISABLE_OTP        0x02
-#define HTU21D_HEATER_ENABLE      0x04
-#define HTU21D_END_OF_BATTERY     0x40
-#define HTU21D_RESO_RH12_T14      0x00
-#define HTU21D_RESO_RH8_T12       0x01
-#define HTU21D_RESO_RH10_T13      0x80
-#define HTU21D_RESO_RH11_T11      0x81
-
-namespace upm {
-
-/**
- * @brief HTU21D Humidity Sensor
- * @defgroup htu21d libupm-htu21d
- * @ingroup seeed adafruit sparkfun i2c temp
- */
-
-/**
- * @library htu21d
- * @sensor htu21d
- * @comname Digital Relative Humidity Sensor with Temperature
- * @type temp
- * @man seeed adafruit sparkfun
- * @web http://www.meas-spec.com/downloads/HTU21D.pdf
- * @con i2c
- *
- * @brief API for the HTU21D Temperature & Humidity Sensor
- *
- * HTU21D by Measurement Specialties is a digital humidity sensor with
- * temperature output.
- * RH reports between 0 and 100%, and the temperature range is
- * -40 to +125 degC. Note: getCompRH is the preferred
- * function below (passing true to cause a measurement cycle). If
- * actual values used for the compensated ready are necessary, use
- * the getHumidity(false) and getTemperature(false) functions following
- * the getCompRH call.
- * Also note the sensor should not perform more than a couple of
- * measurements per second to limit the heating of the sensor.
- *
- * @image html htu21d.jpeg
- * @snippet htu21d.cxx Interesting
- */
-class HTU21D {
-    public:
-        /**
-         * Instantiates an HTU21D object
-         *
-         * @param bus Number of the used bus
-         * @param devAddr Address of the used I2C device
-         */
-        HTU21D (int bus, int devAddr=HTU21D_I2C_ADDRESS);
-
-        /**
-         * Initiates a temperature/pressure mesasurement and waits
-         * to complete. The humidity and temperature registers can be read
-         * after this call.
-         */
-        int sampleData(void);
-
-        /**
-         * Gets the current measured humidity [%RH]
-         *
-         * @param bSampleData Flag to sample sensor (default false)
-         * @return Relative humidity in %RH
-         */
-        float getHumidity(int bSampleData = false);
-
-        /**
-         * Gets the humidity cell temperature [degC]
-         *
-         * @param bSampleData Flag to sample sensor (default false)
-         * @return Temperature in degC
-         */
-        float getTemperature(int bSampleData = false);
-
-        /**
-         * Using the current humidity and temperature, the function
-         * calculates the compensated RH using the equation from
-         * the datasheet.
-         *
-         * @param bSampleData Flag to sample sensor (default false)
-         * @return Compensated relative humidity in %RH
-         */
-        float getCompRH(int bSampleData = false);
-
-        /**
-         * Using the current humidity and temperature the function
-         * will calculate the dew point in degreeC based on equation
-         * from the datasheet.
-         *
-         * @param bSampleData Flag to sample sensor (default false)
-         * @return Dew point in degC
-         */
-        float getDewPoint(int bSampleData = false);
-
-        /**
-         * Function will attempt to get the best measurement for humidity
-         * using the heater in cases where humidity is high to keep the
-         * sesnsor dry.  The heater setting is returned
-         *
-         * @param fHum pointer to float for relative humidity %RH
-         * @param fHumTemp pointer to float for temperature degC
-         * @param fDewPt pointer to float for calculated dew point degC
-         * @return 0 if success or 1 if sensor is not functioning
-         */
-        int getHumidityData(float* fHum, float* fHumTemp, float* fDewPt);
-
-        /**
-         * Sets the heater state. The heater is used to test
-         * the sensor functionality since the temperature should increase
-         * 0.5 to 1.5 degC, and the humidity should decrease. The
-         * testSensor() function below uses the heater.
-         *
-         * @param bEnable Sets to non-zero to turn the heater on
-         * @return 0 on success
-         */
-         int setHeater(int bEnable = false);
-
-        /**
-         * Performs a soft reset of the MPL3115A2 device to ensure
-         * it is in a known state. This function can be used to reset
-         * the min/max temperature and pressure values.
-         */
-        void resetSensor(void);
-
-        /**
-         * Tests the device and verifies it
-         * is operating correctly.
-         *
-         * @return 0 on success or error code
-         */
-        int testSensor(void);
-
-        /**
-         * Writes to a one-byte register
-         *
-         * @param reg Address of the register
-         * @param value Byte to be written
-         */
-        mraa::Result i2cWriteReg (uint8_t reg, uint8_t value);
-
-        /**
-         * Reads a two-byte register.
-         * Note: byte ordering is hardware specific.
-         *
-         * @param reg Address of the register
-         * @return Value returned from register
-         */
-        uint16_t i2cReadReg_16 (int reg);
-
-        /**
-         * Reads a one-byte register
-         *
-         * @param reg Address of the register
-         * @return Value returned from register
-         */
-        uint8_t i2cReadReg_8 (int reg);
-
-    private:
-
-        /**
-         * Converts the temperature register to degC * 1000
-         */
-        int32_t convertTemp(int32_t regval);
-
-        /**
-         * Converts the RH register to %RH * 1000
-         */
-        int32_t convertRH(int32_t regval);
-
-        std::string m_name;
-
-        int m_controlAddr;
-        int m_bus;
-        mraa::I2c m_i2ControlCtx;
-
-        int32_t m_temperature;
-        int32_t m_humidity;
-};
-
-}
diff --git a/src/htu21d/htu21d.i b/src/htu21d/htu21d.i
deleted file mode 100644
index 064cb23..0000000
--- a/src/htu21d/htu21d.i
+++ /dev/null
@@ -1,16 +0,0 @@
-%include "../common_top.i"
-
-/* BEGIN Java syntax  ------------------------------------------------------- */
-#ifdef SWIGJAVA
-%ignore getHumidityData(float*, float*, float*);
-
-JAVA_JNI_LOADLIBRARY(javaupm_htu21d)
-#endif
-/* END Java syntax */
-
-/* BEGIN Common SWIG syntax ------------------------------------------------- */
-%{
-#include "htu21d.hpp"
-%}
-%include "htu21d.hpp"
-/* END Common SWIG syntax */
diff --git a/src/htu21d/htu21d.json b/src/htu21d/htu21d.json
deleted file mode 100644
index 4ad92c1..0000000
--- a/src/htu21d/htu21d.json
+++ /dev/null
@@ -1,32 +0,0 @@
-{
-    "Library": "htu21d",
-    "Description": "API for the HTU21D Temperature & Humidity Sensor",
-    "Sensor Class":
-    {
-        "HTU21D":
-        {
-            "Name": "Digital Relative Humidity Sensor with Temperature",
-            "Description": "HTU21D by Measurement Specialties is a digital humidity sensor with temperature output. RH reports between 0 and 100%, and the temperature range is -40 to +125 degC. Note: getCompRH is the preferred function below (passing true to cause a measurement cycle). If actual values used for the compensated ready are necessary, use the getHumidity(false) and getTemperature(false) functions following the getCompRH call. Also note the sensor should not perform more than a couple of measurements per second to limit the heating of the sensor.",
-            "Aliases": ["htu21d"],
-            "Categories": ["temperature", "humidity"],
-            "Connections": ["i2c"],
-            "Project Type": ["environmental", "prototyping"],
-            "Manufacturers": ["seeed", "adafruit", "sparkfun"],
-            "Kits": [],
-            "Examples":
-            {
-                "Java": ["HTU21D_Example.java"],
-                "Python": ["htu21d.py"],
-                "Node.js": ["htu21d.js"],
-                "C++": ["htu21d.cxx"],
-                "C": []
-            },
-            "Urls" :
-            {
-                "Product Pages": [],
-                "Datasheets": [],
-                "Schematics": []
-            }
-        }
-    }
-}
diff --git a/src/hwxpxx/CMakeLists.txt b/src/hwxpxx/CMakeLists.txt
deleted file mode 100644
index d6b3dc1..0000000
--- a/src/hwxpxx/CMakeLists.txt
+++ /dev/null
@@ -1,10 +0,0 @@
-if (MODBUS_FOUND)
-  set (libname "hwxpxx")
-  set (libdescription "Module for the Veris HWXPXX (HWXPHTX)")
-  set (module_src ${libname}.cxx)
-  set (module_hpp ${libname}.hpp)
-
-  set (reqlibname "libmodbus")
-  upm_module_init(${MODBUS_LIBRARIES})
-  target_include_directories(${libname} PUBLIC ${MODBUS_INCLUDE_DIRS})
-endif ()
diff --git a/src/hwxpxx/hwxpxx.cxx b/src/hwxpxx/hwxpxx.cxx
deleted file mode 100644
index 3362cfa..0000000
--- a/src/hwxpxx/hwxpxx.cxx
+++ /dev/null
@@ -1,379 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2016 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <unistd.h>
-#include <iostream>
-#include <stdexcept>
-#include <string>
-
-#include "hwxpxx.hpp"
-
-using namespace upm;
-using namespace std;
-
-// conversion from fahrenheit to celsius and back
-
-static float f2c(float f)
-{
-  return ((f - 32.0) / (9.0 / 5.0));
-}
-
-static float c2f(float c)
-{
-  return (c * (9.0 / 5.0) + 32.0);
-}
-
-HWXPXX::HWXPXX(std::string device, int address, int baud, int bits, char parity,
-               int stopBits) :
-  m_mbContext(0)
-{
-  // check some of the parameters
-  if (!(bits == 7 || bits == 8))
-    {
-      throw std::out_of_range(std::string(__FUNCTION__) +
-                              ": bits must be 7 or 8");
-    }
-
-  if (!(parity == 'N' || parity == 'E' || parity == 'O'))
-    {
-      throw std::out_of_range(std::string(__FUNCTION__) +
-                              ": parity must be 'N', 'O', or 'E'");
-    }
-
-  if (!(stopBits == 1 || stopBits == 2))
-    {
-      throw std::out_of_range(std::string(__FUNCTION__) +
-                              ": stopBits must be 1 or 2");
-    }
-
-  m_temperature = 0.0;
-  m_humidity = 0.0;
-  m_slider = 0;
-
-  // now, open/init the device and modbus context
-
-  if (!(m_mbContext = modbus_new_rtu(device.c_str(), baud, parity, bits,
-                                     stopBits)))
-    {
-      throw std::runtime_error(std::string(__FUNCTION__) +
-                               ": modbus_new_rtu() failed");
-    }
-
-  // set the slave address of the device we want to talk to
-
-  // addresses are only 8bits wide
-  address &= 0xff;
-  if (modbus_set_slave(m_mbContext, address))
-    {
-      throw std::runtime_error(std::string(__FUNCTION__) +
-                               ": modbus_set_slave() failed");
-    }
-
-  // set the serial mode
-  modbus_rtu_set_serial_mode(m_mbContext, MODBUS_RTU_RS232);
-
-  // now connect..
-  if (modbus_connect(m_mbContext))
-    {
-      throw std::runtime_error(std::string(__FUNCTION__) +
-                               ": modbus_connect() failed");
-    }
-
-  // read the 2 coils to determine temperature scale and current status
-  // of (optional) override switch
-  uint8_t coils[2];
-  readCoils(COIL_TEMP_SCALE, 2, coils);
-
-  // temp scale
-  if (coils[0])
-    m_isCelsius = false;
-  else
-    m_isCelsius = true;
-
-  // current override switch status
-  m_override = ((coils[1]) ? true : false);
-
-  // turn off debugging
-  setDebug(false);
-}
-
-HWXPXX::~HWXPXX()
-{
-  if (m_mbContext)
-    {
-      modbus_close(m_mbContext);
-      modbus_free(m_mbContext);
-    }
-}
-
-int HWXPXX::readInputRegs(INPUT_REGS_T reg, int len, uint16_t *buf)
-{
-  int rv;
-
-  if ((rv = modbus_read_input_registers(m_mbContext, reg, len, buf)) < 0)
-    {
-      throw std::runtime_error(std::string(__FUNCTION__) +
-                               ": modbus_read_input_registers() failed");
-    }
-
-  return rv;
-}
-
-uint16_t HWXPXX::readInputReg(INPUT_REGS_T reg)
-{
-  uint16_t val;
-
-  if (readInputRegs(reg, 1, &val) != 1)
-    {
-      throw std::runtime_error(std::string(__FUNCTION__) +
-                               ": readInputRegs() returned bad data");
-    }
-
-  return val;
-}
-
-int HWXPXX::readHoldingRegs(HOLDING_REGS_T reg, int len, uint16_t *buf)
-{
-  int rv;
-
-  if ((rv = modbus_read_registers(m_mbContext, reg, len, buf)) < 0)
-    {
-      throw std::runtime_error(std::string(__FUNCTION__) +
-                               ": modbus_read_registers() failed");
-    }
-
-  return rv;
-}
-
-uint16_t HWXPXX::readHoldingReg(HOLDING_REGS_T reg)
-{
-  uint16_t val;
-
-  if (readHoldingRegs(reg, 1, &val) != 1)
-    {
-      throw std::runtime_error(std::string(__FUNCTION__) +
-                               ": readInputRegs() returned bad data");
-    }
-
-  return val;
-}
-
-void HWXPXX::writeHoldingReg(HOLDING_REGS_T reg, int value)
-{
-  if (modbus_write_register(m_mbContext, reg, value) != 1)
-    {
-      throw std::runtime_error(std::string(__FUNCTION__) +
-                               ": modbus_write_register() failed");
-    }
-}
-
-int HWXPXX::readCoils(COIL_REGS_T reg, int numBits, uint8_t *buf)
-{
-  int rv;
-
-  if ((rv = modbus_read_bits(m_mbContext, reg, numBits, buf)) < 0)
-    {
-      throw std::runtime_error(std::string(__FUNCTION__) +
-                               ": modbus_read_bits() failed");
-    }
-
-  return rv;
-}
-
-bool HWXPXX::readCoil(COIL_REGS_T reg)
-{
-  uint8_t buf;
-
-  if (readCoils(reg, 1, &buf) != 1)
-    {
-      throw std::runtime_error(std::string(__FUNCTION__) +
-                               ": readCoils() returned bad data");
-    }
-
-  return ((buf) ? true : false);
-}
-
-void HWXPXX::writeCoil(COIL_REGS_T reg, bool val)
-{
-  int value = (val) ? TRUE : FALSE;
-
-  if (modbus_write_bit(m_mbContext, reg, value) != 1)
-    {
-      throw std::runtime_error(std::string(__FUNCTION__) +
-                               ": modbus_write_bit() failed");
-    }
-}
-
-void HWXPXX::update()
-{
-  static const int dataLen = 3;
-  uint16_t data[dataLen];
-
-  // we read 3 input registers starting at humidity
-  if (readInputRegs(INPUT_HUMIDITY, dataLen, data) != dataLen)
-    {
-      throw std::runtime_error(std::string(__FUNCTION__) +
-                               ": readInputRegs() failed to read 3 registers");
-    }
-
-  // humidity
-  m_humidity = float((int16_t)data[0]) / 10.0;
-
-  // temperature, we always store as C
-  float tmpF = float((int16_t)data[1]) / 10.0;
-
-  if (m_isCelsius)
-    m_temperature = tmpF;
-  else
-    m_temperature = f2c(tmpF);
-
-  // optional slider level
-  m_slider = int(data[2]);
-
-  // optional override switch status
-  m_override = readCoil(COIL_OVERRIDE);
-}
-
-float HWXPXX::getTemperature(bool fahrenheit)
-{
-  if (fahrenheit)
-    return c2f(m_temperature);
-  else
-    return m_temperature;
-}
-
-float HWXPXX::getHumidity()
-{
-  return m_humidity;
-}
-
-int HWXPXX::getSlider()
-{
-  return m_slider;
-}
-
-bool HWXPXX::getOverrideSwitchStatus()
-{
-  return m_override;
-}
-
-int HWXPXX::getTemperatureOffset()
-{
-  return int((int16_t)readHoldingReg(HOLDING_TEMP_OFFSET));
-}
-
-int HWXPXX::getHumidityOffset()
-{
-  return int((int16_t)readHoldingReg(HOLDING_HUM_OFFSET));
-}
-
-void HWXPXX::setTemperatureOffset(int offset)
-{
-  if (offset < -50 || offset > 50)
-    {
-      throw std::out_of_range(std::string(__FUNCTION__) +
-                              ": offset must be between -50 to 50");
-    }
-
-  writeHoldingReg(HOLDING_TEMP_OFFSET, offset);
-}
-
-void HWXPXX::setHumidityOffset(int offset)
-{
-  if (offset < -100 || offset > 100)
-    {
-      throw std::out_of_range(std::string(__FUNCTION__) +
-                              ": offset must be between -100 to 100");
-    }
-
-  writeHoldingReg(HOLDING_HUM_OFFSET, offset);
-}
-
-void HWXPXX::clearOverrideSwitch()
-{
-  writeCoil(COIL_OVERRIDE, false);
-}
-
-void HWXPXX::setTemperatureScale(bool fahrenheit)
-{
-  writeCoil(COIL_TEMP_SCALE, fahrenheit);
-
-  // now re-read and set m_isCelsius properly
-  if (readCoil(COIL_TEMP_SCALE))
-    m_isCelsius = false;
-  else
-    m_isCelsius = true;
-}
-
-string HWXPXX::getSlaveID()
-{
-  uint8_t id[MODBUS_MAX_PDU_LENGTH];
-  int rv;
-
-  if ((rv = modbus_report_slave_id(m_mbContext, MODBUS_MAX_PDU_LENGTH, id)) < 0)
-    {
-      throw std::runtime_error(std::string(__FUNCTION__) +
-                               ": modbus_report_slave_id() failed");
-    }
-
-  // the first byte is the number of bytes in the response, the second
-  // byte is the active indicator (00 = off, ff = on), and the rest
-  // are ascii identification (company, model, and serial number) data.
-
-  if (rv > 2)
-    {
-      string retID((char *)&id[2], rv - 2);
-      return retID;
-    }
-  else
-    return "";
-}
-
-void HWXPXX::setSlaveAddress(int addr)
-{
-  // addresses are only 8bits wide
-  addr &= 0xff;
-
-  if (modbus_set_slave(m_mbContext, addr))
-    {
-      throw std::runtime_error(std::string(__FUNCTION__) +
-                               ": modbus_set_slave() failed");
-    }
-
-  // now re-read and set m_isCelsius properly
-  if (readCoil(COIL_TEMP_SCALE))
-    m_isCelsius = false;
-  else
-    m_isCelsius = true;
-}
-
-void HWXPXX::setDebug(bool enable)
-{
-  m_debugging = enable;
-
-  if (enable)
-    modbus_set_debug(m_mbContext, 1);
-  else
-    modbus_set_debug(m_mbContext, 0);
-}
diff --git a/src/hwxpxx/hwxpxx.hpp b/src/hwxpxx/hwxpxx.hpp
deleted file mode 100644
index 568fbc1..0000000
--- a/src/hwxpxx/hwxpxx.hpp
+++ /dev/null
@@ -1,283 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2016 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#pragma once
-
-#include <string>
-
-#include <modbus/modbus.h>
-
-namespace upm {
-
-  /**
-   * @brief HWXPXX Hardware Protocol Humidity and Temperature Sensor
-   * @defgroup hwxpxx libupm-hwxpxx
-   * @ingroup uart temp
-   */
-
-  /**
-   * @library hwxpxx
-   * @sensor hwxpxx
-   * @comname Veris HWXPXX Hardware Protocol Humidity and Temperature Sensor
-   * @type temp
-   * @man veris
-   * @con uart
-   * @web http://cpengineerscorp.net/veris-industries-hwxphtx.html
-   *
-   * @brief UPM API for the Veris HWXPXX Hardware Protocol Humidity and Temperature Sensor
-   *
-   * This module implements support for the Veris HWXPHTX Hardware
-   * Protocol Humidity and Temperature Sensor family.  It uses MODBUS
-   * over an RS485 interface.  You must have libmodbus v3.1.2 (or
-   * greater) installed to compile and use this driver.
-   *
-   * This module was developed using libmodbus 3.1.2, and the HWXPHTX.
-   * This sensor supports humidity, and optionally, temperature,
-   * slider switch, and override switch reporting.  The HWXPHTX used to
-   * develop this driver did not include the optional slider or
-   * override switches, however support for them is provided.
-   *
-   * It was developed using an RS232->RS485 inteface.  You cannot use
-   * the built in MCU TTL UART pins for accessing this device -- you
-   * must use a full serial RS232->RS485 interface connected via USB.
-   *
-   * @snippet hwxpxx.cxx Interesting
-   */
-
-  class HWXPXX {
-  public:
-    // MODBUS input registers
-    typedef enum {
-      INPUT_HUMIDITY                        = 0x0000,
-      // optional temp sensor
-      INPUT_TEMPERATURE                     = 0x0001,
-      // optional slider input
-      INPUT_SLIDER                          = 0x0002
-    } INPUT_REGS_T;
-
-    // MODBUS coil registers
-    typedef enum {
-      // device reports in C or F?
-      COIL_TEMP_SCALE                       = 0x0000,
-
-      // optional override button status
-      COIL_OVERRIDE                         = 0x0001
-    } COIL_REGS_T;
-
-    // MODBUS holding registers
-    typedef enum {
-      HOLDING_TEMP_OFFSET                   = 0x0000,
-      HOLDING_HUM_OFFSET                    = 0x0001
-    } HOLDING_REGS_T;
-
-    /**
-     * HWXPXX constructor
-     *
-     * @param device Path to the serial device
-     * @param address The MODBUS slave address
-     * @param baud The baudrate of the device.  Default: 19200
-     * @param bits The number of bits per byte.  Default: 8
-     * @param parity The parity of the connection, 'N' for None, 'E'
-     * for Even, 'O' for Odd.  Default: 'N'
-     * @param stopBits The number of stop bits.  Default: 2
-     */
-    HWXPXX(std::string device, int address, int baud=19200, int bits=8,
-          char parity='N', int stopBits=2);
-
-    /**
-     * HWXPXX Destructor
-     */
-    ~HWXPXX();
-
-    /**
-     * Read current values from the sensor and update internal stored
-     * values.  This method must be called prior to querying any
-     * values, such as temperature, humidity, override switch status,
-     * or slider switch status.
-     */
-    void update();
-
-    /**
-     * Get the current temperature.  update() must have been called
-     * prior to calling this method.  If this option was not
-     * installed, this method will always return 0C/0F, depending on
-     * the scale the device is operating in natively.
-     *
-     * @param fahrenheit true to return the temperature in degrees
-     * fahrenheit, false to return the temperature in degrees celsius.
-     * The default is false (degrees Celsius).
-     * @return The last temperature reading in Celsius or Fahrenheit
-     */
-    float getTemperature(bool fahrenheit=false);
-
-    /**
-     * Get the current relative humidity.  update() must have been called
-     * prior to calling this method.
-     *
-     * @return The last humidity reading
-     */
-    float getHumidity();
-
-    /**
-     * Get the current slider switch position.  update() must have
-     * been called prior to calling this method.  This returns a value
-     * between 0-100 corresponding to the position of the slider
-     * switch.  If this option is not installed, this method will
-     * always return 0.
-     *
-     * @return The last slider switch reading
-     */
-    int getSlider();
-
-    /**
-     * Get the current override switch status.  update() must have
-     * been called prior to calling this method.  This returns true if
-     * the override switch was pressed.  Use clearOverrideSwitch() to
-     * reset this value to false.  If this option is not installed,
-     * then this method will always return false.  It is not possible
-     * to programatically set this value to true - that can only be
-     * done by physically pressing the override switch.
-     *
-     * @return The last overide switch status reading
-     */
-    bool getOverrideSwitchStatus();
-
-    /**
-     * Clear the override switch status (set it to false).  If this
-     * option is not installed, then this method will have no effect
-     * (the overide switch status will always be false).
-     *
-     */
-    void clearOverrideSwitch();
-
-    /**
-     * Return the current temperature offset stored on the device.
-     * This is a value between -50 and +50, specified in tenths of a
-     * degree in whatever scale (Celsius or Fahrenheit) is in use.
-     * This offset is applied to the returned temperature reading by the
-     * device.
-     *
-     * @return The current temperature offset in tenths of a degree
-     */
-    int getTemperatureOffset();
-
-    /**
-     * Return the current humidity offset stored on the device.  This
-     * is a value between -100 and +100, specified in tenths of a
-     * percent.  This offset is applied to the returned humidity
-     * reading by the device.
-     *
-     * @return The current humidity offset in tenths of a percent
-     */
-    int getHumidityOffset();
-
-    /**
-     * Set the stored temperature offset on the device.  This is a
-     * value between -50 and +50, specified in tenths of a degree in
-     * what ever scale (Celsius or Fahrenheit) is in use.  This offset
-     * is applied to the returned temperature reading by the device.
-     *
-     * @param offset Offset in tenths of a degree with a range of -50 to +50
-     */
-    void setTemperatureOffset(int offset);
-
-    /**
-     * Set the stored humidity offset on the device.  This is a value
-     * between -100 and +100, specified in tenths of a percent.  This
-     * offset is applied to the returned humidity reading by the
-     * device.
-     *
-     * @param offset Offset in tenths of a percent with a range of -100 to +100
-     */
-    void setHumidityOffset(int offset);
-
-    /**
-     * Set the temperature scale used by the device.  This driver
-     * detects this setting automatically and adjusts itself
-     * accordingly, so this is generally never needed.  It is used to
-     * set the native reporting scale of the temperature either in
-     * degrees Celsius or Fahrenheit.  Its setting will not affect
-     * the operation of getTemperature().
-     *
-     * @param fahrenheit true to set Fahrenheit, false to set Celsius
-     */
-    void setTemperatureScale(bool fahrenheit);
-
-    /**
-     * Return a string corresponding the the device's MODBUS slave ID.
-     * This includes information such as the manufacturer, device
-     * model number and serial number.
-     *
-     * @return string represnting the MODBUS slave ID
-     */
-    std::string getSlaveID();
-
-    /**
-     * Set a new MODBUS slave address.  This is useful if you have
-     * multiple HWXPXX devices on a single bus.  When this method is
-     * called, the current temperature scale is re-read so that
-     * further update() calls can work correctly.
-     *
-     * @param addr The new slave address to set
-     */
-    void setSlaveAddress(int addr);
-
-    /**
-     * Enable or disable debugging output.  This primarily enables and
-     * disables libmodbus debugging output.
-     *
-     * @param enable true to enable debugging, false otherwise
-     */
-    void setDebug(bool enable);
-
-  protected:
-    // input registers
-    int readInputRegs(INPUT_REGS_T reg, int len, uint16_t *buf);
-    uint16_t readInputReg(INPUT_REGS_T reg);
-
-    // coils
-    int readCoils(COIL_REGS_T reg, int numBits, uint8_t *buf);
-    bool readCoil(COIL_REGS_T reg);
-    void writeCoil(COIL_REGS_T reg, bool val);
-
-    // holding registers
-    int readHoldingRegs(HOLDING_REGS_T reg, int len, uint16_t *buf);
-    uint16_t readHoldingReg(HOLDING_REGS_T reg);
-    void writeHoldingReg(HOLDING_REGS_T reg, int value);
-
-    // MODBUS context
-    modbus_t *m_mbContext;
-
-    // is the device reporting in C or F?
-    bool m_isCelsius;
-
-  private:
-    bool m_debugging;
-
-    // data
-    float m_temperature;
-    float m_humidity; // relative
-    int m_slider; // optional slider value
-    bool m_override; // status of override switch
-  };
-}
diff --git a/src/hwxpxx/hwxpxx.i b/src/hwxpxx/hwxpxx.i
deleted file mode 100644
index c8eff42..0000000
--- a/src/hwxpxx/hwxpxx.i
+++ /dev/null
@@ -1,14 +0,0 @@
-%include "../common_top.i"
-
-/* BEGIN Java syntax  ------------------------------------------------------- */
-#ifdef SWIGJAVA
-JAVA_JNI_LOADLIBRARY(javaupm_hwxpxx)
-#endif
-/* END Java syntax */
-
-/* BEGIN Common SWIG syntax ------------------------------------------------- */
-%{
-#include "hwxpxx.hpp"
-%}
-%include "hwxpxx.hpp"
-/* END Common SWIG syntax */
diff --git a/src/hwxpxx/hwxpxx.json b/src/hwxpxx/hwxpxx.json
deleted file mode 100644
index 26b3d92..0000000
--- a/src/hwxpxx/hwxpxx.json
+++ /dev/null
@@ -1,40 +0,0 @@
-{
-    "Library": "hwxpxx",
-    "Description": "UPM API for the Veris HWXPXX Hardware Protocol Humidity and Temperature Sensor",
-    "Sensor Class":
-    {
-        "HWXPXX":
-        {
-            "Name": "Veris HWXPXX Hardware Protocol Humidity and Temperature Sensor",
-            "Description": "This module implements support for the Veris HWXPHTX Hardware Protocol Humidity and Temperature Sensor family.  It uses MODBUS over an RS485 interface.  You must have libmodbus v3.1.2 (or greater) installed to compile and use this driver. This module was developed using libmodbus 3.1.2, and the HWXPHTX. This sensor supports humidity, and optionally, temperature, slider switch, and override switch reporting.  The HWXPHTX used to develop this driver did not include the optional slider or override switches, however support for them is provided. It was developed using an RS232->RS485 inteface.  You cannot use the built in MCU TTL UART pins for accessing this device -- you must use a full serial RS232->RS485 interface connected via USB.",
-            "Aliases": ["hwxpxx"],
-            "Categories": ["temperature"],
-            "Connections": ["uart"],
-            "Project Type": ["environmental", "prototyping"],
-            "Manufacturers": ["veris"],
-            "Kits": [],
-            "Examples":
-            {
-                "Java": [],
-                "Python": ["hwxpxx.py"],
-                "Node.js": ["hwxpxx.js"],
-                "C++": ["hwxpxx.cxx"],
-                "C": []
-            },
-            "Specifications":
-            {
-                "Operating Voltage (DC)": {"unit": "V", "low": 12, "high": 30},
-                "Operating Voltage (AC)": {"unit": "VAC", "typ": 24},
-                "Operating Current": {"unit": "mA", "max": 100},
-                "Operating Range (RH)": {"unit": "%RH", "low": 0, "high": 100},
-                "Operating Range (Temp)": {"unit": "degC", "low": 10, "high": 35}
-            },
-            "Urls" :
-            {
-                "Product Pages": ["http://www.veris.com/Item/HWXPHTX.aspx"],
-                "Datasheets": ["http://www.veris.com/docs/Datasheets/HWProtocol_d0117.pdf"],
-                "Schematics": []
-            }
-        }
-    }
-}
diff --git a/src/hx711/CMakeLists.txt b/src/hx711/CMakeLists.txt
deleted file mode 100644
index abb2a29..0000000
--- a/src/hx711/CMakeLists.txt
+++ /dev/null
@@ -1,5 +0,0 @@
-set (libname "hx711")
-set (libdescription "24-bit Analog-to-digital Converter")
-set (module_src ${libname}.cxx)
-set (module_hpp ${libname}.hpp)
-upm_module_init(mraa)
diff --git a/src/hx711/hx711.cxx b/src/hx711/hx711.cxx
deleted file mode 100644
index fe66088..0000000
--- a/src/hx711/hx711.cxx
+++ /dev/null
@@ -1,144 +0,0 @@
-/*
- * Author: Rafael da Mata Neri <rafael.neri@gmail.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining a copy of
- * this software and associated documentation files (the "Software"), to deal in
- * the Software without restriction, including without limitation the rights to
- * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
- * the Software, and to permit persons to whom the Software is furnished to do so,
- * subject to the following conditions:
- *
- * The above copyright notice and this permission notice shall be included in all
- * copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#include <iostream>
-#include <fstream>
-#include <unistd.h>
-#include <stdlib.h>
-#include <string.h>
-#include <stdexcept>
-#include "hx711.hpp"
-
-using namespace upm;
-using namespace std;
-
-HX711::HX711(int data, int sck, uint8_t gain) {
-    mraa_result_t error = MRAA_SUCCESS;
-
-    this->m_dataPinCtx = mraa_gpio_init(data);
-    if (this->m_dataPinCtx == NULL) {
-        throw std::invalid_argument(std::string(__FUNCTION__) + 
-                                    ": Couldn't initialize DATA pin.");
-    }
-
-    this->m_sckPinCtx = mraa_gpio_init(sck);
-    if (this->m_sckPinCtx == NULL) {
-        throw std::invalid_argument(std::string(__FUNCTION__) + 
-                                    ": Couldn't initialize CLOCK pin.");
-    }
-
-    error = mraa_gpio_dir (this->m_dataPinCtx, MRAA_GPIO_IN);
-    if (error != MRAA_SUCCESS) {
-        throw std::invalid_argument(std::string(__FUNCTION__) + 
-                                    ": Couldn't set direction for DATA pin.");
-    }
-
-    error = mraa_gpio_dir (this->m_sckPinCtx, MRAA_GPIO_OUT);
-    if (error != MRAA_SUCCESS) {
-        throw std::invalid_argument(std::string(__FUNCTION__) + 
-                                    ": Couldn't set direction for CLOCK pin.");
-    }
-
-    this->setGain(gain);
-}
-
-HX711::~HX711() {
-    mraa_result_t error = MRAA_SUCCESS;
-
-    error = mraa_gpio_close (this->m_dataPinCtx);
-    if (error != MRAA_SUCCESS) {
-        mraa_result_print(error);
-    }
-
-    error = mraa_gpio_close (this->m_sckPinCtx);
-    if (error != MRAA_SUCCESS) {
-        mraa_result_print(error);
-    }
-}
-
-unsigned long HX711::read() {
-    unsigned long Count = 0;
-
-    while (mraa_gpio_read(this->m_dataPinCtx));
-
-    for (int i=0; i<GAIN; i++)
-    {
-        mraa_gpio_write(this->m_sckPinCtx, 1);
-        Count = Count << 1;
-        mraa_gpio_write(this->m_sckPinCtx, 0);
-        if(mraa_gpio_read(this->m_dataPinCtx))
-        {
-            Count++;
-        }
-    }
-
-    mraa_gpio_write(this->m_sckPinCtx, 1);
-    Count = Count ^ 0x800000;
-    mraa_gpio_write(this->m_sckPinCtx, 0);
-
-    return (Count);
-}
-
-void HX711::setGain(uint8_t gain){
-    switch (gain) {
-        case 128:       // channel A, gain factor 128
-            GAIN = 24;
-            break;
-        case 64:        // channel A, gain factor 64
-            GAIN = 26;
-            break;
-        case 32:        // channel B, gain factor 32
-            GAIN = 25;
-            break;
-    }
-
-    mraa_gpio_write(this->m_sckPinCtx, 0);
-    read();
-}
-
-unsigned long HX711::readAverage(uint8_t times){
-    unsigned long sum = 0;
-    for (uint8_t i = 0; i < times; i++) {
-        sum += read();
-    }
-    return sum / times;
-}
-
-double HX711::getValue(uint8_t times){
-    return readAverage(times) - OFFSET;
-}
-
-float HX711::getUnits(uint8_t times){
-    return getValue(times) / SCALE;
-}
-
-void HX711::tare(uint8_t times){
-    double sum = readAverage(times);
-    setOffset(sum);
-}
-
-void HX711::setScale(float scale){
-    SCALE = scale;
-}
-
-void HX711::setOffset(long offset){
-    OFFSET = offset;
-}
diff --git a/src/hx711/hx711.hpp b/src/hx711/hx711.hpp
deleted file mode 100644
index 29157ef..0000000
--- a/src/hx711/hx711.hpp
+++ /dev/null
@@ -1,138 +0,0 @@
-/*
- * Author: Rafael da Mata Neri <rafael.neri@gmail.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining a copy of
- * this software and associated documentation files (the "Software"), to deal in
- * the Software without restriction, including without limitation the rights to
- * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
- * the Software, and to permit persons to whom the Software is furnished to do so,
- * subject to the following conditions:
- *
- * The above copyright notice and this permission notice shall be included in all
- * copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#pragma once
-
-#include <unistd.h>
-#include <stdlib.h>
-#include <stdint.h>
-#include <string.h>
-#include <mraa/gpio.h>
-
-namespace upm {
-     /**
-      * @brief HX711 24-bit ADC
-      * @defgroup hx711 libupm-hx711
-      * @ingroup generic gpio electric
-      */
-
-     /**
-      * @library hx711
-      * @sensor hx711
-      * @comname 24-bit Analog-to-digital Converter
-      * @type electric
-      * @man generic
-      * @web http://www.dfrobot.com/image/data/SEN0160/hx711_english.pdf
-      * @con gpio
-      *
-      * @brief API for the HX711 Analog-to-Digital Converter
-      *
-      * HX711 is a precision 24-bit analog-to-digital converter (ADC)
-      * designed for weight scales and industrial control applications to
-      * interface directly with a bridge sensor. This module was tested on
-      * the Intel(R) Galileo Gen 2 board.
-      *
-      * @image html hx711.jpeg
-      * @snippet hx711.cxx Interesting
-      */
-      class HX711 {
-      public:
-            /**
-            * HX711 constructor
-            *
-            * @param data Defines the data pin
-            * @param sck Defines the clock pin
-            * @param gain Defines the gain factor
-            * Valid values are 128 or 64 for channel A; channel B works with a 32-gain factor only
-            */
-            HX711(int data, int sck, uint8_t gain = 128);
-
-            /**
-            * HX711 destructor
-            */
-            ~HX711();
-
-            /**
-            * Waits for the chip to be ready and returns a reading
-            *
-            * @return Raw ADC reading
-            */
-            unsigned long read();
-
-            /**
-            * Sets the gain factor; takes effect only after a call to read()
-            * channel A can be set for a 128 or 64 gain; channel B has a fixed 32-gain
-            * factor depending on the parameter; the channel is also set to either A or B
-            * @param gain Defines the gain factor
-            */
-            void setGain(uint8_t gain = 128);
-
-            /**
-            * Returns an average reading
-            * @param times Defines how many reading to do
-            * @return Average reading
-            */
-            unsigned long readAverage(uint8_t times = 10);
-
-            /**
-            * Returns (readAverage() - OFFSET)
-            * @param times Defines how many readings to do
-            * @return Current value without the tare weight
-            */
-            double getValue(uint8_t times = 10);
-
-            /**
-            * Returns getValue() divided by SCALE
-            * @param times Defines how many readings to do
-            * @return Raw value divided by a value obtained via calibration
-            */
-            float getUnits(uint8_t times = 1);
-
-            /**
-            * Sets the OFFSET value for the tare weight
-            * @param times Defines how many times to read the tare value
-            */
-            void tare(uint8_t times = 10);
-
-            /**
-            * Sets the SCALE value
-            * This value is used to convert the raw data to human-readable data (measurement units)
-            * @param scale Value obtained via calibration
-            */
-            void setScale(float scale = 1.f);
-       private:
-            mraa_gpio_context m_sckPinCtx; // Power Down and Serial Clock Input Pin
-            mraa_gpio_context m_dataPinCtx; // Serial Data Output Pin
-
-            uint8_t GAIN; // amplification factor
-            unsigned long OFFSET; // used for tare weight
-            float SCALE; // used to return weight in grams, kg, ounces, whatever
-
-
-            /**
-            * Sets the OFFSET value
-            * This value is subtracted from the actual reading (tare weight)
-            * @param scale Value obtained via calibration
-            */
-            void setOffset(long offset = 0);
-     };
-
-}
diff --git a/src/hx711/hx711.i b/src/hx711/hx711.i
deleted file mode 100644
index 8cefe4e..0000000
--- a/src/hx711/hx711.i
+++ /dev/null
@@ -1,14 +0,0 @@
-%include "../common_top.i"
-
-/* BEGIN Java syntax  ------------------------------------------------------- */
-#ifdef SWIGJAVA
-JAVA_JNI_LOADLIBRARY(javaupm_hx711)
-#endif
-/* END Java syntax */
-
-/* BEGIN Common SWIG syntax ------------------------------------------------- */
-%{
-#include "hx711.hpp"
-%}
-%include "hx711.hpp"
-/* END Common SWIG syntax */
diff --git a/src/hx711/hx711.json b/src/hx711/hx711.json
deleted file mode 100644
index f13b29e..0000000
--- a/src/hx711/hx711.json
+++ /dev/null
@@ -1,37 +0,0 @@
-{
-    "Library": "hx711",
-    "Description": "API for the HX711 Analog-to-Digital Converter",
-    "Sensor Class":
-    {
-        "HX711":
-        {
-            "Name": "24-bit Analog-to-digital Converter",
-            "Description": "HX711 is a precision 24-bit analog-to-digital converter (ADC) designed for weight scales and industrial control applications to interface directly with a bridge sensor. This module was tested on the Intel(R) Galileo Gen 2 board.",
-            "Aliases": ["hx711"],
-            "Categories": ["adc"],
-            "Connections": ["gpio"],
-            "Project Type": ["prototyping"],
-            "Manufacturers": ["generic"],
-            "Kits": [],
-            "Examples":
-            {
-                "Java": [],
-                "Python": [],
-                "Node.js": ["hx711.js"],
-                "C++": ["hx711.cxx"],
-                "C": []
-            },
-            "Specifications":
-            {
-                "Operating Voltage": {"unit": "V", "low": 2.7, "high": 5.5},
-                "Operating Current": {"unit": "mA", "max": 1.4}
-            },
-            "Urls" :
-            {
-                "Product Pages": [],
-                "Datasheets": ["http://image.dfrobot.com/image/data/SEN0160/hx711_english.pdf"],
-                "Schematics": []
-            }
-        }
-    }
-}
diff --git a/src/ili9341/CMakeLists.txt b/src/ili9341/CMakeLists.txt
deleted file mode 100644
index 7f8f7d1..0000000
--- a/src/ili9341/CMakeLists.txt
+++ /dev/null
@@ -1,5 +0,0 @@
-set (libname "ili9341")
-set (libdescription "SPI Based LCD")
-set (module_src ili9341_gfx.cxx ili9341.cxx)
-set (module_hpp ili9341_gfx.hpp ili9341.hpp)
-upm_module_init(mraa)
diff --git a/src/ili9341/ili9341.cxx b/src/ili9341/ili9341.cxx
deleted file mode 100644
index 3ebbd5b..0000000
--- a/src/ili9341/ili9341.cxx
+++ /dev/null
@@ -1,487 +0,0 @@
-/*
- * Author: Shawn Hymel
- * Copyright (c) 2015 SparkFun Electronics
- *
- * Credits to Adafruit.
- * Based on Adafruit ST7735 library, see original license in license.txt file.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <iostream>
-#include <string>
-#include <stdexcept>
-#include <unistd.h>
-#include <stdlib.h>
-#include <stdio.h>
-#include <string.h>
-
-#include "ili9341.hpp"
-
-using namespace upm;
-
-ILI9341::ILI9341(int csLCD, int csSD, int dc, int rst) :
-    GFX(ILI9341_TFTWIDTH, ILI9341_TFTHEIGHT), m_csLCDPinCtx(csLCD), 
-    m_csSDPinCtx(csSD), m_dcPinCtx(dc), m_rstPinCtx(rst), m_spi(0) {
-    
-    initModule();
-    configModule();
-}
-
-void ILI9341::initModule() {
-    mraa::Result error = mraa::SUCCESS;
-    
-    error = m_csLCDPinCtx.dir(mraa::DIR_OUT);
-    if (error != mraa::SUCCESS) {
-        mraa::printError(error);
-    }
-    
-    error = m_csSDPinCtx.dir(mraa::DIR_OUT);
-    if (error != mraa::SUCCESS) {
-        mraa::printError(error);
-    }
-    
-    error = m_dcPinCtx.dir(mraa::DIR_OUT);
-    if (error != mraa::SUCCESS) {
-        mraa::printError(error);
-    }
-    
-    error = m_rstPinCtx.dir(mraa::DIR_OUT);
-    if (error != mraa::SUCCESS) {
-        mraa::printError(error);
-    }
-    
-    error = m_spi.frequency(SPI_FREQ);
-    if (error != mraa::SUCCESS) {
-        mraa::printError (error);
-    }
-    
-    lcdCSOff();
-}
-
-void ILI9341::setRotation(uint8_t r) {
-
-    writecommand(ILI9341_MADCTL);
-    r = r % 4; // can't be higher than 3
-    switch(r) {
-    case 0:
-        writedata(MADCTL_MX | MADCTL_BGR);
-        _width  = ILI9341_TFTWIDTH;
-        _height = ILI9341_TFTHEIGHT;
-        break;
-    case 1:
-        writedata(MADCTL_MV | MADCTL_BGR);
-        _width  = ILI9341_TFTHEIGHT;
-        _height = ILI9341_TFTWIDTH;
-        break;
-    case 2:
-        writedata(MADCTL_MY | MADCTL_BGR);
-        _width  = ILI9341_TFTWIDTH;
-        _height = ILI9341_TFTHEIGHT;
-        break;
-    case 3:
-        writedata(MADCTL_MX | MADCTL_MY | MADCTL_MV | MADCTL_BGR);
-        _width  = ILI9341_TFTHEIGHT;
-        _height = ILI9341_TFTWIDTH;
-        break;
-    }
-}
-
-void ILI9341::configModule() {
-    
-    // Toggle RST low to reset
-    rstHigh();
-    usleep(5000);
-    rstLow();
-    usleep(20000);
-    rstHigh();
-    usleep(150000);
-
-    // Send initialization commands
-    writecommand(0xEF);
-    writedata(0x03);
-    writedata(0x80);
-    writedata(0x02);
-
-    writecommand(0xCF);  
-    writedata(0x00); 
-    writedata(0XC1); 
-    writedata(0X30); 
-
-    writecommand(0xED);  
-    writedata(0x64); 
-    writedata(0x03); 
-    writedata(0X12); 
-    writedata(0X81); 
-
-    writecommand(0xE8);  
-    writedata(0x85); 
-    writedata(0x00); 
-    writedata(0x78); 
-
-    writecommand(0xCB);  
-    writedata(0x39); 
-    writedata(0x2C); 
-    writedata(0x00); 
-    writedata(0x34); 
-    writedata(0x02); 
-
-    writecommand(0xF7);  
-    writedata(0x20); 
-
-    writecommand(0xEA);  
-    writedata(0x00); 
-    writedata(0x00); 
-
-    writecommand(ILI9341_PWCTR1);    //Power control 
-    writedata(0x23);   //VRH[5:0] 
-
-    writecommand(ILI9341_PWCTR2);    //Power control 
-    writedata(0x10);   //SAP[2:0];BT[3:0] 
-
-    writecommand(ILI9341_VMCTR1);    //VCM control 
-    writedata(0x3e);
-    writedata(0x28); 
-
-    writecommand(ILI9341_VMCTR2);    //VCM control2 
-    writedata(0x86);  //--
-
-    writecommand(ILI9341_MADCTL);    // Memory Access Control 
-    writedata(0x48);
-
-    writecommand(ILI9341_PIXFMT);    
-    writedata(0x55); 
-
-    writecommand(ILI9341_FRMCTR1);    
-    writedata(0x00);  
-    writedata(0x18); 
-
-    writecommand(ILI9341_DFUNCTR);    // Display Function Control 
-    writedata(0x08); 
-    writedata(0x82);
-    writedata(0x27);  
-
-    writecommand(0xF2);    // 3Gamma Function Disable 
-    writedata(0x00); 
-
-    writecommand(ILI9341_GAMMASET);    //Gamma curve selected 
-    writedata(0x01); 
-
-    writecommand(ILI9341_GMCTRP1);    //Set Gamma 
-    writedata(0x0F); 
-    writedata(0x31); 
-    writedata(0x2B); 
-    writedata(0x0C); 
-    writedata(0x0E); 
-    writedata(0x08); 
-    writedata(0x4E); 
-    writedata(0xF1); 
-    writedata(0x37); 
-    writedata(0x07); 
-    writedata(0x10); 
-    writedata(0x03); 
-    writedata(0x0E); 
-    writedata(0x09); 
-    writedata(0x00); 
-
-    writecommand(ILI9341_GMCTRN1);    //Set Gamma 
-    writedata(0x00); 
-    writedata(0x0E); 
-    writedata(0x14); 
-    writedata(0x03); 
-    writedata(0x11); 
-    writedata(0x07); 
-    writedata(0x31); 
-    writedata(0xC1); 
-    writedata(0x48); 
-    writedata(0x08); 
-    writedata(0x0F); 
-    writedata(0x0C); 
-    writedata(0x31); 
-    writedata(0x36); 
-    writedata(0x0F);
-    
-    writecommand(ILI9341_SLPOUT);
-    usleep(120000);
-    writecommand(ILI9341_DISPON);
-}
-
-void ILI9341::setAddrWindow(uint16_t x0, 
-                            uint16_t y0, 
-                            uint16_t x1, 
-                            uint16_t y1) {
-    
-    writecommand(ILI9341_CASET); // Column addr set
-    writedata(x0 >> 8);
-    writedata(x0 & 0xFF);     // XSTART 
-    writedata(x1 >> 8);
-    writedata(x1 & 0xFF);     // XEND
-    
-    writecommand(ILI9341_PASET); // Row addr set
-    writedata(y0>>8);
-    writedata(y0);     // YSTART
-    writedata(y1>>8);
-    writedata(y1);     // YEND
-
-    writecommand(ILI9341_RAMWR); // write to RAM
-}
-
-void ILI9341::drawPixel(int16_t x, int16_t y, uint16_t color) {
-    
-    if((x < 0) ||(x >= _width) || (y < 0) || (y >= _height)) {
-        return;
-    }
-    
-    setAddrWindow(x, y, x + 1, y + 1);
-    
-    writedata(color >> 8);
-    writedata(color);
-}
-
-void ILI9341::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
-
-    // Rudimentary clipping
-    if((x >= _width) || (y >= _height)) {
-        return;
-    }
-    
-    if((y+h-1) >= _height) {
-        h = _height-y;
-    }
-
-    setAddrWindow(x, y, x, y+h-1);
-
-    uint8_t hi = color >> 8;
-    uint8_t lo = color;
-    
-    lcdCSOn();
-    dcHigh();
-
-    while (h--) {
-        m_spi.writeByte(hi);
-        m_spi.writeByte(lo);
-    }
-
-    lcdCSOff();
-}
-
-void ILI9341::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
-
-    // Rudimentary clipping
-    if((x >= _width) || (y >= _height)) {
-        return;
-    }
-
-    if((x+w-1) >= _width) {
-        w = _width - x;
-    }
-
-    setAddrWindow(x, y, x+w-1, y);
-
-    uint8_t hi = color >> 8;
-    uint8_t lo = color;
-
-    lcdCSOn();
-    dcHigh();
-
-    while (w--) {
-        m_spi.writeByte(hi);
-        m_spi.writeByte(lo);
-    }
-
-    lcdCSOff();
-}
-
-void ILI9341::fillRect(int16_t x, 
-                       int16_t y, 
-                       int16_t w, 
-                       int16_t h,
-                       uint16_t color) {
-                       
-    // rudimentary clipping (drawChar w/big text requires this)
-    if((x >= _width) || (y >= _height)) return;
-    if((x + w - 1) >= _width)  w = _width  - x;
-    if((y + h - 1) >= _height) h = _height - y;
-
-    setAddrWindow(x, y, x+w-1, y+h-1);
-
-    uint8_t hi = color >> 8;
-    uint8_t lo = color;
-  
-    lcdCSOn();
-    dcHigh();
-
-    for(y = h; y > 0; y--) {
-        for(x = w; x > 0; x--) {
-            m_spi.writeByte(hi);
-            m_spi.writeByte(lo);
-        }
-    }
-
-    lcdCSOff();
-}
-
-void ILI9341::fillScreen(uint16_t color) {
-    fillRect(0, 0,  _width, _height, color);
-}
-
-void ILI9341::invertDisplay(bool i) {
-    writecommand(i ? ILI9341_INVON : ILI9341_INVOFF);
-}
-
-uint16_t ILI9341::color565(uint8_t r, uint8_t g, uint8_t b) {
-    return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | (b >> 3);
-}
-
-void ILI9341::executeCMDList(const uint8_t *addr) {
-    uint8_t numCommands, numArgs;
-    uint16_t ms;
-        
-    numCommands = *(addr++);        // Number of commands to follow
-    while (numCommands--) {         // For each command...
-        writecommand(*(addr++));    // Read, issue command
-        numArgs = *(addr++);        // Number of args to follow
-        ms = numArgs & DELAY;       // If hibit set, delay follows args
-        numArgs &= ~DELAY;          // Mask out delay bit
-        while (numArgs--) {         // For each argument...
-            writedata(*(addr++));   // Read, issue argument
-        }
-        
-        if (ms) {
-            ms = *(addr++);         // Read post-command delay time (ms)
-            if (ms == 255) {
-                ms = 500;           // If 255, delay for 500 ms
-            }
-            usleep(ms * 1000);
-        }
-    }
-}
-
-void ILI9341::writecommand(uint8_t c) {
-    lcdCSOn();
-    dcLow();
-    m_spi.writeByte(c);
-    lcdCSOff();
-}
-
-void ILI9341::writedata(uint8_t d) {
-    lcdCSOn();
-    dcHigh();
-    m_spi.writeByte(d);
-    lcdCSOff();
-}
-
-mraa::Result ILI9341::lcdCSOn() {
-    mraa::Result error = mraa::SUCCESS;
-
-    error = m_csLCDPinCtx.write(LOW);
-    if (error != mraa::SUCCESS) {
-        mraa::printError (error);
-    }
-
-    error = m_csSDPinCtx.write(HIGH);
-    if (error != mraa::SUCCESS) {
-        mraa::printError (error);
-    }
-
-    return error;
-}
-
-mraa::Result ILI9341::lcdCSOff() {
-    mraa::Result error = mraa::SUCCESS;
-
-    error = m_csLCDPinCtx.write(HIGH);
-    if (error != mraa::SUCCESS) {
-        mraa::printError (error);
-    }
-
-    return error;
-}
-
-mraa::Result ILI9341::sdCSOn() {
-    mraa::Result error = mraa::SUCCESS;
-
-    error = m_csSDPinCtx.write(LOW);
-    if (error != mraa::SUCCESS) {
-        mraa::printError (error);
-    }
-
-    error = m_csLCDPinCtx.write(HIGH);
-    if (error != mraa::SUCCESS) {
-        mraa::printError (error);
-    }
-
-    return error;
-}
-
-mraa::Result ILI9341::sdCSOff() {
-    mraa::Result error = mraa::SUCCESS;
-
-    error = m_csSDPinCtx.write(HIGH);
-    if (error != mraa::SUCCESS) {
-        mraa::printError (error);
-    }
-
-    return error;
-}
-
-mraa::Result ILI9341::dcHigh() {
-    mraa::Result error = mraa::SUCCESS;
-
-    error = m_dcPinCtx.write(HIGH);
-    if (error != mraa::SUCCESS) {
-        mraa::printError(error);
-    }
-
-    return error;
-}
-
-mraa::Result ILI9341::dcLow() {
-    mraa::Result error = mraa::SUCCESS;
-
-    error = m_dcPinCtx.write(LOW);
-    if (error != mraa::SUCCESS) {
-        mraa::printError(error);
-    }
-
-    return error;
-}
-
-mraa::Result ILI9341::rstHigh() {
-    mraa::Result error = mraa::SUCCESS;
-    
-    error = m_rstPinCtx.write(HIGH);
-    if (error != mraa::SUCCESS) {
-        mraa::printError(error);
-    }
-    
-    return error;
-}
-
-mraa::Result ILI9341::rstLow() {
-    mraa::Result error = mraa::SUCCESS;
-
-    error = m_rstPinCtx.write(LOW);
-    if (error != mraa::SUCCESS) {
-        mraa::printError(error);
-    }
-
-    return error;
-}
\ No newline at end of file
diff --git a/src/ili9341/ili9341.hpp b/src/ili9341/ili9341.hpp
deleted file mode 100644
index 08caf44..0000000
--- a/src/ili9341/ili9341.hpp
+++ /dev/null
@@ -1,343 +0,0 @@
-/*
- * Author: Shawn Hymel
- * Copyright (c) 2015 SparkFun Electronics
- *
- * Credits to Adafruit.
- * Based on Adafruit ILI9341 library, see original license in license.txt file.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#pragma once
-
-// Includes
-#include <string>
-#include <mraa/common.hpp>
-#include <mraa/gpio.hpp>
-#include <mraa/spi.hpp>
-#include "ili9341_gfx.hpp"
-
-// Defines
-#define ILI9341_TFTWIDTH    240
-#define ILI9341_TFTHEIGHT   320
-
-#define SPI_FREQ            15000000
-
-#define ILI9341_NOP         0x00
-#define ILI9341_SWRESET     0x01
-#define ILI9341_RDDID       0x04
-#define ILI9341_RDDST       0x09
-
-#define ILI9341_SLPIN       0x10
-#define ILI9341_SLPOUT      0x11
-#define ILI9341_PTLON       0x12
-#define ILI9341_NORON       0x13
-
-#define ILI9341_RDMODE      0x0A
-#define ILI9341_RDMADCTL    0x0B
-#define ILI9341_RDPIXFMT    0x0C
-#define ILI9341_RDIMGFMT    0x0D
-#define ILI9341_RDSELFDIAG  0x0F
-
-#define ILI9341_INVOFF      0x20
-#define ILI9341_INVON       0x21
-#define ILI9341_GAMMASET    0x26
-#define ILI9341_DISPOFF     0x28
-#define ILI9341_DISPON      0x29
-
-#define ILI9341_CASET       0x2A
-#define ILI9341_PASET       0x2B
-#define ILI9341_RAMWR       0x2C
-#define ILI9341_RAMRD       0x2E
-
-#define ILI9341_PTLAR       0x30
-#define ILI9341_MADCTL      0x36
-#define ILI9341_PIXFMT      0x3A
-
-#define ILI9341_FRMCTR1     0xB1
-#define ILI9341_FRMCTR2     0xB2
-#define ILI9341_FRMCTR3     0xB3
-#define ILI9341_INVCTR      0xB4
-#define ILI9341_DFUNCTR     0xB6
-
-#define ILI9341_PWCTR1      0xC0
-#define ILI9341_PWCTR2      0xC1
-#define ILI9341_PWCTR3      0xC2
-#define ILI9341_PWCTR4      0xC3
-#define ILI9341_PWCTR5      0xC4
-#define ILI9341_VMCTR1      0xC5
-#define ILI9341_VMCTR2      0xC7
-
-#define ILI9341_RDID1       0xDA
-#define ILI9341_RDID2       0xDB
-#define ILI9341_RDID3       0xDC
-#define ILI9341_RDID4       0xDD
-
-#define ILI9341_GMCTRP1     0xE0
-#define ILI9341_GMCTRN1     0xE1
-
-#define MADCTL_MY  0x80
-#define MADCTL_MX  0x40
-#define MADCTL_MV  0x20
-#define MADCTL_ML  0x10
-#define MADCTL_RGB 0x00
-#define MADCTL_BGR 0x08
-#define MADCTL_MH  0x04
-
-#define HIGH                1
-#define LOW                 0
-
-#define DELAY               0x80
-
-// Color definitions
-#define ILI9341_BLACK       0x0000      /*   0,   0,   0 */
-#define ILI9341_NAVY        0x000F      /*   0,   0, 128 */
-#define ILI9341_DARKGREEN   0x03E0      /*   0, 128,   0 */
-#define ILI9341_DARKCYAN    0x03EF      /*   0, 128, 128 */
-#define ILI9341_MAROON      0x7800      /* 128,   0,   0 */
-#define ILI9341_PURPLE      0x780F      /* 128,   0, 128 */
-#define ILI9341_OLIVE       0x7BE0      /* 128, 128,   0 */
-#define ILI9341_LIGHTGREY   0xC618      /* 192, 192, 192 */
-#define ILI9341_DARKGREY    0x7BEF      /* 128, 128, 128 */
-#define ILI9341_BLUE        0x001F      /*   0,   0, 255 */
-#define ILI9341_GREEN       0x07E0      /*   0, 255,   0 */
-#define ILI9341_CYAN        0x07FF      /*   0, 255, 255 */
-#define ILI9341_RED         0xF800      /* 255,   0,   0 */
-#define ILI9341_MAGENTA     0xF81F      /* 255,   0, 255 */
-#define ILI9341_YELLOW      0xFFE0      /* 255, 255,   0 */
-#define ILI9341_WHITE       0xFFFF      /* 255, 255, 255 */
-#define ILI9341_ORANGE      0xFD20      /* 255, 165,   0 */
-#define ILI9341_GREENYELLOW 0xAFE5      /* 173, 255,  47 */
-#define ILI9341_PINK        0xF81F
-
-namespace upm {
-    /**
-     * @brief ILI9341 LCD Display
-     * @defgroup ili9341 libupm-ili9341
-     * @ingroup adafruit spi display
-     */
-    /**
-     * @library ili9341
-     * @sensor ili9341
-     * @comname SPI Based LCD
-     * @type display
-     * @man adafruit
-     * @web http://www.adafruit.com/product/2090
-     * @con spi
-     *
-     * @brief API for the ILI9342 LCD
-     *
-     * This module defines the interface for the ILI9341 display library
-     *
-     * @image html ili9341.jpg
-     * @snippet ili9341.cxx Interesting
-     */
-    class ILI9341 : public GFX {
-        public:
-            /**
-             * Instantiates an ILI9341 object
-             *
-             * @param csLCD LCD chip select pin
-             * @param csSD SD card select pin
-             * @param dc Data/command pin
-             * @param rst Reset pin
-             */
-            ILI9341(int csLCD, int csSD, int dc, int rst);
-
-            /**
-             * Returns the name of the component
-             */
-            std::string name() {
-                return m_name;
-            }
-
-            /**
-             * Initializes GPIOs used to talk to the LCD
-             */
-            void initModule();
-
-            /**
-             * Configures the LCD driver chip via SPI
-             */
-            void configModule();
-
-            /**
-             * Sets the window size inside the screen where pixel data is
-             * written. Concrete implementation from GFX interface.
-             *
-             * @param x0 First coordinate
-             * @param y0 First coordinate
-             * @param x1 Second coordinate
-             * @param y1 Second coordinate
-             */
-            void setAddrWindow(uint16_t x0,
-                               uint16_t y0,
-                               uint16_t x1,
-                               uint16_t y1);
-
-            /**
-             * Sends a pixel color (RGB) to the driver chip. Concrete
-             * implementation from GFX interface.
-             *
-             * @param x Axis on the horizontal scale
-             * @param y Axis on the vertical scale
-             * @param color RGB (16-bit) color (R[0-4], G[5-10], B[11-15]
-             */
-            void drawPixel(int16_t x, int16_t y, uint16_t color);
-
-            /**
-             * Draws a vertical line using minimal SPI writes.
-             *
-             * @param x Axis on the horizontal scale to begin line
-             * @param y Axis on the vertical scale to begin line
-             * @param h Height of line in pixels
-             * @param color RGB (16-bit) color (R[0-4], G[5-10], B[11-15]
-             */
-            void drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color);
-
-            /**
-             * Draws a horizontal line using  minimal SPI writes.
-             *
-             * @param x Axis on the horizontal scale to begin line
-             * @param y Axis on the vertical scale to begin line
-             * @param w Width of line in pixels
-             * @param color RGB (16-bit) color (R[0-4], G[5-10], B[11-15]
-             */
-            void drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color);
-
-            /**
-             * Draw a filled rectangle.
-             *
-             * @param x Axis on the horizontal scale of upper-left corner
-             * @param y Axis on the vertical scale of upper-left corner
-             * @param w Width of rectangle in pixels
-             * @param h Height of rectangle in pixels
-             * @param color RGB (16-bit) color (R[0-4], G[5-10], B[11-15]
-             */
-            void fillRect(int16_t x,
-                          int16_t y,
-                          int16_t w,
-                          int16_t h,
-                          uint16_t color);
-
-            /**
-             * Fill the screen with a single color.
-             *
-             * @param color RGB (16-bit) color (R[0-4], G[5-10], B[11-15]
-             */
-            void fillScreen(uint16_t color);
-
-            /**
-             * Sets the screen to one of four 90 deg rotations.
-             *
-             * @param r Rotation setting: 0, 1, 2, 3
-             */
-            void setRotation(uint8_t r);
-
-            /**
-             * Invert colors on the display.
-             *
-             * @param i True or false to invert colors
-             */
-            void invertDisplay(bool i);
-
-            /**
-             * Pass 8-bit R, G, B values and get back 16-bit packed color.
-             *
-             * @param r Red color 0-31
-             * @param g Green color 0-63
-             * @param b blue color 0-31
-             * @return 16-bit packed color (RGB) value
-             */
-            uint16_t color565(uint8_t r, uint8_t g, uint8_t b);
-
-            /**
-             * Executes a set of commands and data.
-             *
-             * @param addr Pointer to the start of the commands/data section
-             */
-            void executeCMDList(const uint8_t *addr);
-
-            /**
-             * Sends a command to the display driver via SPI.
-             *
-             * @param c Command to be written
-             */
-            void writecommand(uint8_t c);
-
-            /**
-             * Sends data to the display driver via SPI
-             *
-             * @param d Data to be written
-             */
-            void writedata(uint8_t d);
-
-            /**
-             * Set LCD chip select to LOW
-             */
-            mraa::Result lcdCSOn();
-
-            /**
-             * Set LCD chip select to HIGH
-             */
-            mraa::Result lcdCSOff();
-
-            /**
-             * Set SD card chip select to LOW
-             */
-            mraa::Result sdCSOn();
-
-            /**
-             * Set SD card chip select to HIGH
-             */
-            mraa::Result sdCSOff();
-
-            /**
-             * Set data/command line to HIGH
-             */
-            mraa::Result dcHigh();
-
-            /**
-             * Set data/command line to LOW
-             */
-            mraa::Result dcLow();
-
-            /**
-             * Set reset line to HIGH
-             */
-            mraa::Result rstHigh();
-
-            /**
-             * Set reset line to LOW
-             */
-            mraa::Result rstLow();
-
-        private:
-            mraa::Gpio  m_csLCDPinCtx;
-            mraa::Gpio  m_csSDPinCtx;
-            mraa::Gpio  m_dcPinCtx;
-            mraa::Gpio  m_rstPinCtx;
-
-            mraa::Spi   m_spi;
-
-            std::string m_name;
-    };
-}
-
diff --git a/src/ili9341/ili9341.i b/src/ili9341/ili9341.i
deleted file mode 100644
index b258534..0000000
--- a/src/ili9341/ili9341.i
+++ /dev/null
@@ -1,18 +0,0 @@
-%include "../common_top.i"
-
-/* BEGIN Java syntax  ------------------------------------------------------- */
-#ifdef SWIGJAVA
-%apply uint8_t *INPUT { uint8_t *addr }
-
-JAVA_JNI_LOADLIBRARY(javaupm_ili9341)
-#endif
-/* END Java syntax */
-
-/* BEGIN Common SWIG syntax ------------------------------------------------- */
-%{
-#include "ili9341_gfx.hpp"
-#include "ili9341.hpp"
-%}
-%include "ili9341_gfx.hpp"
-%include "ili9341.hpp"
-/* END Common SWIG syntax */
diff --git a/src/ili9341/ili9341.json b/src/ili9341/ili9341.json
deleted file mode 100644
index d0e25d5..0000000
--- a/src/ili9341/ili9341.json
+++ /dev/null
@@ -1,38 +0,0 @@
-{
-    "Library": "ili9341",
-    "Description": "API for the ILI9342 LCD",
-    "Sensor Class":
-    {
-        "ILI9341":
-        {
-            "Name": "SPI Based LCD",
-            "Description": "This module defines the interface for the ILI9341 display library.",
-            "Aliases": ["ili9341"],
-            "Categories": ["display"],
-            "Connections": ["spi"],
-            "Project Type": ["graphics", "prototyping"],
-            "Manufacturers": ["adafruit"],
-            "Kits": [],
-            "Image": "ili9341.jpg",
-            "Examples":
-            {
-                "Java": [],
-                "Python": ["ili9341.py"],
-                "Node.js": ["ili9341.js"],
-                "C++": ["ili9341.cxx"],
-                "C": []
-            },
-            "Specifications":
-            {
-                "Operating Voltage": {"unit": "V", "low": 3, "high": 5}
-
-            },
-            "Urls" :
-            {
-                "Product Pages": ["https://www.adafruit.com/product/2090"],
-                "Datasheets": ["http://www.adafruit.com/datasheets/ILI9341.pdf"],
-                "Schematics": ["https://cdn-learn.adafruit.com/assets/assets/000/015/463/medium800/adafruit_products_schem.png?1395173896"]
-            }
-        }
-    }
-}
diff --git a/src/ili9341/ili9341_gfx.cxx b/src/ili9341/ili9341_gfx.cxx
deleted file mode 100644
index ada25e9..0000000
--- a/src/ili9341/ili9341_gfx.cxx
+++ /dev/null
@@ -1,750 +0,0 @@
-/**
- * Author: Shawn Hymel
- * Copyright (c) 2016 SparkFun Electronics
- *
- * Based on GFX interface by Yevgeniy Kiveisha and Adafruit Industries.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include "ili9341_gfx.hpp"
-#include "mraa.hpp"
-
-using namespace upm;
-
-GFX::GFX(int16_t w, int16_t h) : WIDTH(w), HEIGHT(h) {
-    _width = WIDTH;
-    _height = HEIGHT;
-    rotation = 0;
-    
-    cursor_x = 0;
-    cursor_y = 0;
-    textsize = 1;
-    textcolor = 0xFFFF;
-    textbgcolor = 0xFFFF;
-    wrap = true;
-    _cp437 = false;
-}
-
-void GFX::drawLine(int16_t x0, 
-                   int16_t y0, 
-                   int16_t x1, 
-                   int16_t y1, 
-                   uint16_t color) {
-                   
-    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
-    if (steep) {
-        adagfxswap(x0, y0);
-        adagfxswap(x1, y1);
-    }
-
-    if (x0 > x1) {
-        adagfxswap(x0, x1);
-        adagfxswap(y0, y1);
-    }
-
-    int16_t dx, dy;
-    dx = x1 - x0;
-    dy = abs(y1 - y0);
-
-    int16_t err = dx / 2;
-    int16_t ystep;
-
-    if (y0 < y1) {
-        ystep = 1;
-    } else {
-        ystep = -1;
-    }
-
-    for (; x0<=x1; x0++) {
-        if (steep) {
-            drawPixel(y0, x0, color);
-        } else {
-            drawPixel(x0, y0, color);
-        }
-        err -= dy;
-        if (err < 0) {
-            y0 += ystep;
-          err += dx;
-        }
-    }
-}
-
-void GFX::drawFastVLine(int16_t x, 
-                        int16_t y, 
-                        int16_t h, 
-                        uint16_t color) {
-    drawLine(x, y, x, y+h-1, color);
-}
-
-void GFX::drawFastHLine(int16_t x, 
-                        int16_t y, 
-                        int16_t w, 
-                        uint16_t color) {
-    drawLine(x, y, x+w-1, y, color);
-}
-
-void GFX::drawRect(int16_t x, 
-                   int16_t y, 
-                   int16_t w, 
-                   int16_t h, 
-                   uint16_t color) {
-    drawFastHLine(x, y, w, color);
-    drawFastHLine(x, y+h-1, w, color);
-    drawFastVLine(x, y, h, color);
-    drawFastVLine(x+w-1, y, h, color);
-}
-
-void GFX::fillRect(int16_t x, 
-                   int16_t y, 
-                   int16_t w, 
-                   int16_t h, 
-                   uint16_t color) {
-    for (int16_t i=x; i<x+w; i++) {
-        drawFastVLine(i, y, h, color);
-    }
-}
-
-void GFX::fillScreen(uint16_t color) {
-    fillRect(0, 0, _width, _height, color);
-}
-
-void GFX::invertDisplay(bool i) {
-    // Do nothing, must be subclassed if supported by hardware
-}
-
-void GFX::drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color) {
-    int16_t f = 1 - r;
-    int16_t ddF_x = 1;
-    int16_t ddF_y = -2 * r;
-    int16_t x = 0;
-    int16_t y = r;
-
-    drawPixel(x0  , y0+r, color);
-    drawPixel(x0  , y0-r, color);
-    drawPixel(x0+r, y0  , color);
-    drawPixel(x0-r, y0  , color);
-
-    while (x<y) {
-        if (f >= 0) {
-            y--;
-            ddF_y += 2;
-            f += ddF_y;
-        }
-        x++;
-        ddF_x += 2;
-        f += ddF_x;
-
-        drawPixel(x0 + x, y0 + y, color);
-        drawPixel(x0 - x, y0 + y, color);
-        drawPixel(x0 + x, y0 - y, color);
-        drawPixel(x0 - x, y0 - y, color);
-        drawPixel(x0 + y, y0 + x, color);
-        drawPixel(x0 - y, y0 + x, color);
-        drawPixel(x0 + y, y0 - x, color);
-        drawPixel(x0 - y, y0 - x, color);
-    }
-}
-
-void GFX::drawCircleHelper(int16_t x0, 
-                           int16_t y0, 
-                           int16_t r, 
-                           uint8_t cornername,
-                           uint16_t color) {
-    int16_t f     = 1 - r;
-    int16_t ddF_x = 1;
-    int16_t ddF_y = -2 * r;
-    int16_t x     = 0;
-    int16_t y     = r;
-
-    while (x<y) {
-        if (f >= 0) {
-            y--;
-            ddF_y += 2;
-            f     += ddF_y;
-        }
-        x++;
-        ddF_x += 2;
-        f     += ddF_x;
-        if (cornername & 0x4) {
-            drawPixel(x0 + x, y0 + y, color);
-            drawPixel(x0 + y, y0 + x, color);
-        }
-        if (cornername & 0x2) {
-            drawPixel(x0 + x, y0 - y, color);
-            drawPixel(x0 + y, y0 - x, color);
-        }
-        if (cornername & 0x8) {
-            drawPixel(x0 - y, y0 + x, color);
-            drawPixel(x0 - x, y0 + y, color);
-        }
-        if (cornername & 0x1) {
-            drawPixel(x0 - y, y0 - x, color);
-            drawPixel(x0 - x, y0 - y, color);
-        }
-    }
-}
-
-void GFX::fillCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color) {
-    drawFastVLine(x0, y0-r, 2*r+1, color);
-    fillCircleHelper(x0, y0, r, 3, 0, color);
-}
-
-void GFX::fillCircleHelper(int16_t x0, 
-                           int16_t y0, 
-                           int16_t r, 
-                           uint8_t cornername,
-                           int16_t delta,
-                           uint16_t color) {
-    int16_t f     = 1 - r;
-    int16_t ddF_x = 1;
-    int16_t ddF_y = -2 * r;
-    int16_t x     = 0;
-    int16_t y     = r;
-
-    while (x<y) {
-        if (f >= 0) {
-            y--;
-            ddF_y += 2;
-            f     += ddF_y;
-        }
-        x++;
-        ddF_x += 2;
-        f     += ddF_x;
-
-        if (cornername & 0x1) {
-            drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
-            drawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
-        }
-        if (cornername & 0x2) {
-            drawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
-            drawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
-        }
-    }
-}
-
-void GFX::drawTriangle(int16_t x0, 
-                       int16_t y0,
-                       int16_t x1, 
-                       int16_t y1, 
-                       int16_t x2, 
-                       int16_t y2, 
-                       uint16_t color) {
-  drawLine(x0, y0, x1, y1, color);
-  drawLine(x1, y1, x2, y2, color);
-  drawLine(x2, y2, x0, y0, color);
-}
-
-void GFX::fillTriangle(int16_t x0, 
-                       int16_t y0,
-                       int16_t x1, 
-                       int16_t y1,
-                       int16_t x2, 
-                       int16_t y2, 
-                       uint16_t color) {
-
-  int16_t a, b, y, last;
-
-  // Sort coordinates by Y order (y2 >= y1 >= y0)
-  if (y0 > y1) {
-    adagfxswap(y0, y1); adagfxswap(x0, x1);
-  }
-  if (y1 > y2) {
-    adagfxswap(y2, y1); adagfxswap(x2, x1);
-  }
-  if (y0 > y1) {
-    adagfxswap(y0, y1); adagfxswap(x0, x1);
-  }
-
-  if(y0 == y2) { // Handle awkward all-on-same-line case as its own thing
-    a = b = x0;
-    if(x1 < a)      a = x1;
-    else if(x1 > b) b = x1;
-    if(x2 < a)      a = x2;
-    else if(x2 > b) b = x2;
-    drawFastHLine(a, y0, b-a+1, color);
-    return;
-  }
-
-  int16_t
-    dx01 = x1 - x0,
-    dy01 = y1 - y0,
-    dx02 = x2 - x0,
-    dy02 = y2 - y0,
-    dx12 = x2 - x1,
-    dy12 = y2 - y1;
-  int32_t
-    sa   = 0,
-    sb   = 0;
-
-  // For upper part of triangle, find scanline crossings for segments
-  // 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1
-  // is included here (and second loop will be skipped, avoiding a /0
-  // error there), otherwise scanline y1 is skipped here and handled
-  // in the second loop...which also avoids a /0 error here if y0=y1
-  // (flat-topped triangle).
-  if(y1 == y2) last = y1;   // Include y1 scanline
-  else         last = y1-1; // Skip it
-
-  for(y=y0; y<=last; y++) {
-    a   = x0 + sa / dy01;
-    b   = x0 + sb / dy02;
-    sa += dx01;
-    sb += dx02;
-    /* longhand:
-    a = x0 + (x1 - x0) * (y - y0) / (y1 - y0);
-    b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
-    */
-    if(a > b) adagfxswap(a,b);
-    drawFastHLine(a, y, b-a+1, color);
-  }
-
-  // For lower part of triangle, find scanline crossings for segments
-  // 0-2 and 1-2.  This loop is skipped if y1=y2.
-  sa = dx12 * (y - y1);
-  sb = dx02 * (y - y0);
-  for(; y<=y2; y++) {
-    a   = x1 + sa / dy12;
-    b   = x0 + sb / dy02;
-    sa += dx12;
-    sb += dx02;
-    /* longhand:
-    a = x1 + (x2 - x1) * (y - y1) / (y2 - y1);
-    b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
-    */
-    if(a > b) adagfxswap(a,b);
-    drawFastHLine(a, y, b-a+1, color);
-  }
-}
-
-// Draw a rounded rectangle
-void GFX::drawRoundRect(int16_t x, 
-                        int16_t y, 
-                        int16_t w,
-                        int16_t h, 
-                        int16_t r, 
-                        uint16_t color) {
-                        
-  // smarter version
-  drawFastHLine(x+r  , y    , w-2*r, color); // Top
-  drawFastHLine(x+r  , y+h-1, w-2*r, color); // Bottom
-  drawFastVLine(x    , y+r  , h-2*r, color); // Left
-  drawFastVLine(x+w-1, y+r  , h-2*r, color); // Right
-  // draw four corners
-  drawCircleHelper(x+r    , y+r    , r, 1, color);
-  drawCircleHelper(x+w-r-1, y+r    , r, 2, color);
-  drawCircleHelper(x+w-r-1, y+h-r-1, r, 4, color);
-  drawCircleHelper(x+r    , y+h-r-1, r, 8, color);
-}
-
-void GFX::fillRoundRect(int16_t x, 
-                        int16_t y, 
-                        int16_t w,
-                        int16_t h, 
-                        int16_t r, 
-                        uint16_t color) {
-                        
-  // smarter version
-  fillRect(x+r, y, w-2*r, h, color);
-
-  // draw four corners
-  fillCircleHelper(x+w-r-1, y+r, r, 1, h-2*r-1, color);
-  fillCircleHelper(x+r    , y+r, r, 2, h-2*r-1, color);
-}
-
-void GFX::drawChar(int16_t x, 
-                  int16_t y, 
-                  unsigned char c,
-                  uint16_t color, 
-                  uint16_t bg, 
-                  uint8_t size) {
-
-    if((x >= _width)            || // Clip right
-       (y >= _height)           || // Clip bottom
-       ((x + 6 * size - 1) < 0) || // Clip left
-       ((y + 8 * size - 1) < 0))   // Clip top
-        return;
-
-    if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
-
-    for(int8_t i=0; i<6; i++ ) {
-        uint8_t line;
-        if(i < 5) line = font[(c * 5) + i];
-        else      line = 0x0;
-        for(int8_t j=0; j<8; j++, line >>= 1) {
-            if(line & 0x1) {
-                if(size == 1) drawPixel(x+i, y+j, color);
-                else          fillRect(x+(i*size), y+(j*size), size, size, color);
-            } else if(bg != color) {
-                if(size == 1) drawPixel(x+i, y+j, bg);
-                else          fillRect(x+i*size, y+j*size, size, size, bg);
-            }
-        }
-    }
-}
-
-int16_t GFX::getCursorX(void) const {
-    return cursor_x;
-}
-
-int16_t GFX::getCursorY(void) const {
-    return cursor_y;
-}
-
-void GFX::setCursor(int16_t x, int16_t y) {
-    cursor_x = x;
-    cursor_y = y;
-}
-
-void GFX::setTextColor(uint16_t c) {
-    // For 'transparent' background, we'll set the bg
-    // to the same as fg instead of using a flag
-    textcolor = textbgcolor = c;
-}
-
-void GFX::setTextColor(uint16_t c, uint16_t bg) {
-    textcolor = c;
-    textbgcolor = bg;
-}
-
-void GFX::setTextSize(uint8_t s) {
-    textsize = (s > 0) ? s : 1;
-}
-
-void GFX::setTextWrap(bool w) {
-    wrap = w;
-}
-
-uint8_t GFX::getRotation(void) const {
-    return rotation;
-}
-
-void GFX::setRotation(uint8_t r) {
-    rotation = (r & 3);
-    switch(rotation) {
-        case 0:
-        case 2:
-            _width  = WIDTH;
-            _height = HEIGHT;
-            break;
-        case 1:
-        case 3:
-            _width  = HEIGHT;
-            _height = WIDTH;
-            break;
-    }
-}
-
-void GFX::cp437(bool x) {
-    _cp437 = x;
-}
-
-void GFX::write(uint8_t c) {
-    
-    if(c == '\n') {
-        cursor_y += textsize*8;
-        cursor_x  = 0;
-    } else if(c == '\r') {
-        // skip em
-    } else {
-    
-        // Heading off edge?
-        if(wrap && ((cursor_x + textsize * 6) >= _width)) {
-            cursor_x  = 0;            // Reset x to zero
-            cursor_y += textsize * 8; // Advance y one line
-        }
-        drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
-        cursor_x += textsize * 6;
-    }
-}
-
-void GFX::print(std::string msg) {
-    int len = msg.length();
-    for (int idx = 0; idx < len; idx++) {
-        write(msg[idx]);
-    }
-}
-
-int16_t GFX::width(void) const {
-    return _width;
-}
-
-int16_t GFX::height(void) const {
-    return _height;
-}
-
-const unsigned char GFX::font[] = {    
-    0x00, 0x00, 0x00, 0x00, 0x00,
-    0x3E, 0x5B, 0x4F, 0x5B, 0x3E,
-    0x3E, 0x6B, 0x4F, 0x6B, 0x3E,
-    0x1C, 0x3E, 0x7C, 0x3E, 0x1C,
-    0x18, 0x3C, 0x7E, 0x3C, 0x18,
-    0x1C, 0x57, 0x7D, 0x57, 0x1C,
-    0x1C, 0x5E, 0x7F, 0x5E, 0x1C,
-    0x00, 0x18, 0x3C, 0x18, 0x00,
-    0xFF, 0xE7, 0xC3, 0xE7, 0xFF,
-    0x00, 0x18, 0x24, 0x18, 0x00,
-    0xFF, 0xE7, 0xDB, 0xE7, 0xFF,
-    0x30, 0x48, 0x3A, 0x06, 0x0E,
-    0x26, 0x29, 0x79, 0x29, 0x26,
-    0x40, 0x7F, 0x05, 0x05, 0x07,
-    0x40, 0x7F, 0x05, 0x25, 0x3F,
-    0x5A, 0x3C, 0xE7, 0x3C, 0x5A,
-    0x7F, 0x3E, 0x1C, 0x1C, 0x08,
-    0x08, 0x1C, 0x1C, 0x3E, 0x7F,
-    0x14, 0x22, 0x7F, 0x22, 0x14,
-    0x5F, 0x5F, 0x00, 0x5F, 0x5F,
-    0x06, 0x09, 0x7F, 0x01, 0x7F,
-    0x00, 0x66, 0x89, 0x95, 0x6A,
-    0x60, 0x60, 0x60, 0x60, 0x60,
-    0x94, 0xA2, 0xFF, 0xA2, 0x94,
-    0x08, 0x04, 0x7E, 0x04, 0x08,
-    0x10, 0x20, 0x7E, 0x20, 0x10,
-    0x08, 0x08, 0x2A, 0x1C, 0x08,
-    0x08, 0x1C, 0x2A, 0x08, 0x08,
-    0x1E, 0x10, 0x10, 0x10, 0x10,
-    0x0C, 0x1E, 0x0C, 0x1E, 0x0C,
-    0x30, 0x38, 0x3E, 0x38, 0x30,
-    0x06, 0x0E, 0x3E, 0x0E, 0x06,
-    0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x5F, 0x00, 0x00,
-    0x00, 0x07, 0x00, 0x07, 0x00,
-    0x14, 0x7F, 0x14, 0x7F, 0x14,
-    0x24, 0x2A, 0x7F, 0x2A, 0x12,
-    0x23, 0x13, 0x08, 0x64, 0x62,
-    0x36, 0x49, 0x56, 0x20, 0x50,
-    0x00, 0x08, 0x07, 0x03, 0x00,
-    0x00, 0x1C, 0x22, 0x41, 0x00,
-    0x00, 0x41, 0x22, 0x1C, 0x00,
-    0x2A, 0x1C, 0x7F, 0x1C, 0x2A,
-    0x08, 0x08, 0x3E, 0x08, 0x08,
-    0x00, 0x80, 0x70, 0x30, 0x00,
-    0x08, 0x08, 0x08, 0x08, 0x08,
-    0x00, 0x00, 0x60, 0x60, 0x00,
-    0x20, 0x10, 0x08, 0x04, 0x02,
-    0x3E, 0x51, 0x49, 0x45, 0x3E,
-    0x00, 0x42, 0x7F, 0x40, 0x00,
-    0x72, 0x49, 0x49, 0x49, 0x46,
-    0x21, 0x41, 0x49, 0x4D, 0x33,
-    0x18, 0x14, 0x12, 0x7F, 0x10,
-    0x27, 0x45, 0x45, 0x45, 0x39,
-    0x3C, 0x4A, 0x49, 0x49, 0x31,
-    0x41, 0x21, 0x11, 0x09, 0x07,
-    0x36, 0x49, 0x49, 0x49, 0x36,
-    0x46, 0x49, 0x49, 0x29, 0x1E,
-    0x00, 0x00, 0x14, 0x00, 0x00,
-    0x00, 0x40, 0x34, 0x00, 0x00,
-    0x00, 0x08, 0x14, 0x22, 0x41,
-    0x14, 0x14, 0x14, 0x14, 0x14,
-    0x00, 0x41, 0x22, 0x14, 0x08,
-    0x02, 0x01, 0x59, 0x09, 0x06,
-    0x3E, 0x41, 0x5D, 0x59, 0x4E,
-    0x7C, 0x12, 0x11, 0x12, 0x7C,
-    0x7F, 0x49, 0x49, 0x49, 0x36,
-    0x3E, 0x41, 0x41, 0x41, 0x22,
-    0x7F, 0x41, 0x41, 0x41, 0x3E,
-    0x7F, 0x49, 0x49, 0x49, 0x41,
-    0x7F, 0x09, 0x09, 0x09, 0x01,
-    0x3E, 0x41, 0x41, 0x51, 0x73,
-    0x7F, 0x08, 0x08, 0x08, 0x7F,
-    0x00, 0x41, 0x7F, 0x41, 0x00,
-    0x20, 0x40, 0x41, 0x3F, 0x01,
-    0x7F, 0x08, 0x14, 0x22, 0x41,
-    0x7F, 0x40, 0x40, 0x40, 0x40,
-    0x7F, 0x02, 0x1C, 0x02, 0x7F,
-    0x7F, 0x04, 0x08, 0x10, 0x7F,
-    0x3E, 0x41, 0x41, 0x41, 0x3E,
-    0x7F, 0x09, 0x09, 0x09, 0x06,
-    0x3E, 0x41, 0x51, 0x21, 0x5E,
-    0x7F, 0x09, 0x19, 0x29, 0x46,
-    0x26, 0x49, 0x49, 0x49, 0x32,
-    0x03, 0x01, 0x7F, 0x01, 0x03,
-    0x3F, 0x40, 0x40, 0x40, 0x3F,
-    0x1F, 0x20, 0x40, 0x20, 0x1F,
-    0x3F, 0x40, 0x38, 0x40, 0x3F,
-    0x63, 0x14, 0x08, 0x14, 0x63,
-    0x03, 0x04, 0x78, 0x04, 0x03,
-    0x61, 0x59, 0x49, 0x4D, 0x43,
-    0x00, 0x7F, 0x41, 0x41, 0x41,
-    0x02, 0x04, 0x08, 0x10, 0x20,
-    0x00, 0x41, 0x41, 0x41, 0x7F,
-    0x04, 0x02, 0x01, 0x02, 0x04,
-    0x40, 0x40, 0x40, 0x40, 0x40,
-    0x00, 0x03, 0x07, 0x08, 0x00,
-    0x20, 0x54, 0x54, 0x78, 0x40,
-    0x7F, 0x28, 0x44, 0x44, 0x38,
-    0x38, 0x44, 0x44, 0x44, 0x28,
-    0x38, 0x44, 0x44, 0x28, 0x7F,
-    0x38, 0x54, 0x54, 0x54, 0x18,
-    0x00, 0x08, 0x7E, 0x09, 0x02,
-    0x18, 0xA4, 0xA4, 0x9C, 0x78,
-    0x7F, 0x08, 0x04, 0x04, 0x78,
-    0x00, 0x44, 0x7D, 0x40, 0x00,
-    0x20, 0x40, 0x40, 0x3D, 0x00,
-    0x7F, 0x10, 0x28, 0x44, 0x00,
-    0x00, 0x41, 0x7F, 0x40, 0x00,
-    0x7C, 0x04, 0x78, 0x04, 0x78,
-    0x7C, 0x08, 0x04, 0x04, 0x78,
-    0x38, 0x44, 0x44, 0x44, 0x38,
-    0xFC, 0x18, 0x24, 0x24, 0x18,
-    0x18, 0x24, 0x24, 0x18, 0xFC,
-    0x7C, 0x08, 0x04, 0x04, 0x08,
-    0x48, 0x54, 0x54, 0x54, 0x24,
-    0x04, 0x04, 0x3F, 0x44, 0x24,
-    0x3C, 0x40, 0x40, 0x20, 0x7C,
-    0x1C, 0x20, 0x40, 0x20, 0x1C,
-    0x3C, 0x40, 0x30, 0x40, 0x3C,
-    0x44, 0x28, 0x10, 0x28, 0x44,
-    0x4C, 0x90, 0x90, 0x90, 0x7C,
-    0x44, 0x64, 0x54, 0x4C, 0x44,
-    0x00, 0x08, 0x36, 0x41, 0x00,
-    0x00, 0x00, 0x77, 0x00, 0x00,
-    0x00, 0x41, 0x36, 0x08, 0x00,
-    0x02, 0x01, 0x02, 0x04, 0x02,
-    0x3C, 0x26, 0x23, 0x26, 0x3C,
-    0x1E, 0xA1, 0xA1, 0x61, 0x12,
-    0x3A, 0x40, 0x40, 0x20, 0x7A,
-    0x38, 0x54, 0x54, 0x55, 0x59,
-    0x21, 0x55, 0x55, 0x79, 0x41,
-    0x22, 0x54, 0x54, 0x78, 0x42, // a-umlaut
-    0x21, 0x55, 0x54, 0x78, 0x40,
-    0x20, 0x54, 0x55, 0x79, 0x40,
-    0x0C, 0x1E, 0x52, 0x72, 0x12,
-    0x39, 0x55, 0x55, 0x55, 0x59,
-    0x39, 0x54, 0x54, 0x54, 0x59,
-    0x39, 0x55, 0x54, 0x54, 0x58,
-    0x00, 0x00, 0x45, 0x7C, 0x41,
-    0x00, 0x02, 0x45, 0x7D, 0x42,
-    0x00, 0x01, 0x45, 0x7C, 0x40,
-    0x7D, 0x12, 0x11, 0x12, 0x7D, // A-umlaut
-    0xF0, 0x28, 0x25, 0x28, 0xF0,
-    0x7C, 0x54, 0x55, 0x45, 0x00,
-    0x20, 0x54, 0x54, 0x7C, 0x54,
-    0x7C, 0x0A, 0x09, 0x7F, 0x49,
-    0x32, 0x49, 0x49, 0x49, 0x32,
-    0x3A, 0x44, 0x44, 0x44, 0x3A, // o-umlaut
-    0x32, 0x4A, 0x48, 0x48, 0x30,
-    0x3A, 0x41, 0x41, 0x21, 0x7A,
-    0x3A, 0x42, 0x40, 0x20, 0x78,
-    0x00, 0x9D, 0xA0, 0xA0, 0x7D,
-    0x3D, 0x42, 0x42, 0x42, 0x3D, // O-umlaut
-    0x3D, 0x40, 0x40, 0x40, 0x3D,
-    0x3C, 0x24, 0xFF, 0x24, 0x24,
-    0x48, 0x7E, 0x49, 0x43, 0x66,
-    0x2B, 0x2F, 0xFC, 0x2F, 0x2B,
-    0xFF, 0x09, 0x29, 0xF6, 0x20,
-    0xC0, 0x88, 0x7E, 0x09, 0x03,
-    0x20, 0x54, 0x54, 0x79, 0x41,
-    0x00, 0x00, 0x44, 0x7D, 0x41,
-    0x30, 0x48, 0x48, 0x4A, 0x32,
-    0x38, 0x40, 0x40, 0x22, 0x7A,
-    0x00, 0x7A, 0x0A, 0x0A, 0x72,
-    0x7D, 0x0D, 0x19, 0x31, 0x7D,
-    0x26, 0x29, 0x29, 0x2F, 0x28,
-    0x26, 0x29, 0x29, 0x29, 0x26,
-    0x30, 0x48, 0x4D, 0x40, 0x20,
-    0x38, 0x08, 0x08, 0x08, 0x08,
-    0x08, 0x08, 0x08, 0x08, 0x38,
-    0x2F, 0x10, 0xC8, 0xAC, 0xBA,
-    0x2F, 0x10, 0x28, 0x34, 0xFA,
-    0x00, 0x00, 0x7B, 0x00, 0x00,
-    0x08, 0x14, 0x2A, 0x14, 0x22,
-    0x22, 0x14, 0x2A, 0x14, 0x08,
-    0x55, 0x00, 0x55, 0x00, 0x55, // #176 (25% block) missing in old code
-    0xAA, 0x55, 0xAA, 0x55, 0xAA, // 50% block
-    0xFF, 0x55, 0xFF, 0x55, 0xFF, // 75% block
-    0x00, 0x00, 0x00, 0xFF, 0x00,
-    0x10, 0x10, 0x10, 0xFF, 0x00,
-    0x14, 0x14, 0x14, 0xFF, 0x00,
-    0x10, 0x10, 0xFF, 0x00, 0xFF,
-    0x10, 0x10, 0xF0, 0x10, 0xF0,
-    0x14, 0x14, 0x14, 0xFC, 0x00,
-    0x14, 0x14, 0xF7, 0x00, 0xFF,
-    0x00, 0x00, 0xFF, 0x00, 0xFF,
-    0x14, 0x14, 0xF4, 0x04, 0xFC,
-    0x14, 0x14, 0x17, 0x10, 0x1F,
-    0x10, 0x10, 0x1F, 0x10, 0x1F,
-    0x14, 0x14, 0x14, 0x1F, 0x00,
-    0x10, 0x10, 0x10, 0xF0, 0x00,
-    0x00, 0x00, 0x00, 0x1F, 0x10,
-    0x10, 0x10, 0x10, 0x1F, 0x10,
-    0x10, 0x10, 0x10, 0xF0, 0x10,
-    0x00, 0x00, 0x00, 0xFF, 0x10,
-    0x10, 0x10, 0x10, 0x10, 0x10,
-    0x10, 0x10, 0x10, 0xFF, 0x10,
-    0x00, 0x00, 0x00, 0xFF, 0x14,
-    0x00, 0x00, 0xFF, 0x00, 0xFF,
-    0x00, 0x00, 0x1F, 0x10, 0x17,
-    0x00, 0x00, 0xFC, 0x04, 0xF4,
-    0x14, 0x14, 0x17, 0x10, 0x17,
-    0x14, 0x14, 0xF4, 0x04, 0xF4,
-    0x00, 0x00, 0xFF, 0x00, 0xF7,
-    0x14, 0x14, 0x14, 0x14, 0x14,
-    0x14, 0x14, 0xF7, 0x00, 0xF7,
-    0x14, 0x14, 0x14, 0x17, 0x14,
-    0x10, 0x10, 0x1F, 0x10, 0x1F,
-    0x14, 0x14, 0x14, 0xF4, 0x14,
-    0x10, 0x10, 0xF0, 0x10, 0xF0,
-    0x00, 0x00, 0x1F, 0x10, 0x1F,
-    0x00, 0x00, 0x00, 0x1F, 0x14,
-    0x00, 0x00, 0x00, 0xFC, 0x14,
-    0x00, 0x00, 0xF0, 0x10, 0xF0,
-    0x10, 0x10, 0xFF, 0x10, 0xFF,
-    0x14, 0x14, 0x14, 0xFF, 0x14,
-    0x10, 0x10, 0x10, 0x1F, 0x00,
-    0x00, 0x00, 0x00, 0xF0, 0x10,
-    0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
-    0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
-    0xFF, 0xFF, 0xFF, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0xFF, 0xFF,
-    0x0F, 0x0F, 0x0F, 0x0F, 0x0F,
-    0x38, 0x44, 0x44, 0x38, 0x44,
-    0xFC, 0x4A, 0x4A, 0x4A, 0x34, // sharp-s or beta
-    0x7E, 0x02, 0x02, 0x06, 0x06,
-    0x02, 0x7E, 0x02, 0x7E, 0x02,
-    0x63, 0x55, 0x49, 0x41, 0x63,
-    0x38, 0x44, 0x44, 0x3C, 0x04,
-    0x40, 0x7E, 0x20, 0x1E, 0x20,
-    0x06, 0x02, 0x7E, 0x02, 0x02,
-    0x99, 0xA5, 0xE7, 0xA5, 0x99,
-    0x1C, 0x2A, 0x49, 0x2A, 0x1C,
-    0x4C, 0x72, 0x01, 0x72, 0x4C,
-    0x30, 0x4A, 0x4D, 0x4D, 0x30,
-    0x30, 0x48, 0x78, 0x48, 0x30,
-    0xBC, 0x62, 0x5A, 0x46, 0x3D,
-    0x3E, 0x49, 0x49, 0x49, 0x00,
-    0x7E, 0x01, 0x01, 0x01, 0x7E,
-    0x2A, 0x2A, 0x2A, 0x2A, 0x2A,
-    0x44, 0x44, 0x5F, 0x44, 0x44,
-    0x40, 0x51, 0x4A, 0x44, 0x40,
-    0x40, 0x44, 0x4A, 0x51, 0x40,
-    0x00, 0x00, 0xFF, 0x01, 0x03,
-    0xE0, 0x80, 0xFF, 0x00, 0x00,
-    0x08, 0x08, 0x6B, 0x6B, 0x08,
-    0x36, 0x12, 0x36, 0x24, 0x36,
-    0x06, 0x0F, 0x09, 0x0F, 0x06,
-    0x00, 0x00, 0x18, 0x18, 0x00,
-    0x00, 0x00, 0x10, 0x10, 0x00,
-    0x30, 0x40, 0xFF, 0x01, 0x01,
-    0x00, 0x1F, 0x01, 0x01, 0x1E,
-    0x00, 0x19, 0x1D, 0x17, 0x12,
-    0x00, 0x3C, 0x3C, 0x3C, 0x3C,
-    0x00, 0x00, 0x00, 0x00, 0x00  // #255 NBSP
-};
diff --git a/src/ili9341/ili9341_gfx.hpp b/src/ili9341/ili9341_gfx.hpp
deleted file mode 100644
index 9f8df52..0000000
--- a/src/ili9341/ili9341_gfx.hpp
+++ /dev/null
@@ -1,412 +0,0 @@
-/**
- * Author: Shawn Hymel
- * Copyright (c) 2016 SparkFun Electronics
- *
- * Based on GFX interface by Yevgeniy Kiveisha and Adafruit Industries.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#pragma once
-
-#include <cstdint>
-#include <string>
-
-#define adagfxswap(a, b) { int16_t t = a; a = b; b = t; }
-
-namespace upm 
-{
-    /**
-     * @brief GFX helper class
-     */
-    class GFX {
-        public:
-        
-            /**
-             * Creates a GFX object
-             *
-             * @param w Screen width
-             * @param h Screen height
-             */
-            GFX(int16_t w, int16_t h);
-
-            /**
-             * Empyt virtual destructor
-             */
-            virtual ~GFX() {};
-             
-            /**
-             * Sends a pixel color (RGB) to the driver chip. This must be
-             * defined by the subclass (pure virtual function).
-             *
-             * @param x Axis on the horizontal scale
-             * @param y Axis on the vertical scale
-             * @param color RGB (16-bit) color (R[0-4], G[5-10], B[11-15]
-             */
-            virtual void drawPixel(int16_t x, int16_t y, uint16_t color) = 0;
-            
-            /**
-             * Draw a line.
-             *
-             * @param x0 Start of line x coordinate
-             * @param y0 Start of line y coordinate
-             * @param x1 End of line x coordinate
-             * @param y1 End of line y coordinate
-             * @param color RGB (16-bit) color (R[0-4], G[5-10], B[11-15]
-             */            
-            virtual void drawLine(int16_t x0, 
-                                  int16_t y0, 
-                                  int16_t x1, 
-                                  int16_t y1, 
-                                  uint16_t color);
-            
-            /**
-             * Draws a vertical line using minimal SPI writes.
-             *
-             * @param x Axis on the horizontal scale to begin line
-             * @param y Axis on the vertical scale to begin line
-             * @param h Height of line in pixels
-             * @param color RGB (16-bit) color (R[0-4], G[5-10], B[11-15]
-             */
-            virtual void drawFastVLine(int16_t x, 
-                                       int16_t y, 
-                                       int16_t h, 
-                                       uint16_t color);
-            
-            /**
-             * Draws a horizontal line using  minimal SPI writes.
-             *
-             * @param x Axis on the horizontal scale to begin line
-             * @param y Axis on the vertical scale to begin line
-             * @param w Width of line in pixels
-             * @param color RGB (16-bit) color (R[0-4], G[5-10], B[11-15]
-             */
-            virtual void drawFastHLine(int16_t x, 
-                                       int16_t y, 
-                                       int16_t w, 
-                                       uint16_t color);
-    
-            /**
-             * Draws a rectangle (not filled).
-             *
-             * @param x Position of upper left corner on horizontal axis
-             * @param y Position of upper left corner on vertical axis
-             * @param w Width of rectangle
-             * @param h Height of rectangle
-             * @color RGB (16-bit) color (R[0-4], G[5-10], B[11-15]
-             */
-            virtual void drawRect(int16_t x, 
-                                  int16_t y, 
-                                  int16_t w, 
-                                  int16_t h, 
-                                  uint16_t color);
-                                 
-            /**
-             * Draw a filled rectangle.
-             *
-             * @param x Axis on the horizontal scale of upper-left corner
-             * @param y Axis on the vertical scale of upper-left corner
-             * @param w Width of rectangle in pixels
-             * @param h Height of rectangle in pixels
-             * @param color RGB (16-bit) color (R[0-4], G[5-10], B[11-15]
-             */ 
-            virtual void fillRect(int16_t x, 
-                                  int16_t y, 
-                                  int16_t w, 
-                                  int16_t h, 
-                                  uint16_t color);
-    
-            /**
-             * Fill the screen with a single color.
-             *
-             * @param color RGB (16-bit) color (R[0-4], G[5-10], B[11-15]
-             */
-            virtual void fillScreen(uint16_t color);
-    
-            /**
-             * Invert colors on the display.
-             *
-             * @param i True or false to invert colors
-             */
-            virtual void invertDisplay(bool i);
-            
-            /**
-             * Draw a circle outline.
-             *
-             * @param x0 Center point of circle on x-axis
-             * @param y0 Center point of circle on y-axis
-             * @param r Radius of circle
-             * @param color RGB (16-bit) color (R[0-4], G[5-10], B[11-15]
-             */
-            void drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color);
-            
-            /**
-             * Used to draw rounded corners.
-             *
-             * @param x0 Center point of circle on x-axis
-             * @param y0 Center point of circle on y-axis
-             * @param r Radius of circle
-             * @param cornername Mask of corner number (1, 2, 4, 8)
-             * @param color RGB (16-bit) color (R[0-4], G[5-10], B[11-15]
-             */
-            void drawCircleHelper(int16_t x0, 
-                                  int16_t y0, 
-                                  int16_t r, 
-                                  uint8_t cornername,
-                                  uint16_t color);
-
-            /**
-             * Draws a filled circle.
-             *
-             * @param x0 Center point of circle on x-axis
-             * @param y0 Center point of circle on y-axis
-             * @param r Radius of circle
-             * @param color RGB (16-bit) color (R[0-4], G[5-10], B[11-15]
-             */    
-            void fillCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color);
-    
-            /**
-             * Used to draw a filled circle and rounded rectangles.
-             *
-             * @param x0 Center point of circle on x-axis
-             * @param y0 Center point of circle on y-axis
-             * @param r Radius of circle
-             * @param cornername Mask of corner number (1, 2, 4, 8)
-             * @param delta Line offset
-             * @param color RGB (16-bit) color (R[0-4], G[5-10], B[11-15]
-             */
-            void fillCircleHelper(int16_t x0, 
-                                  int16_t y0, 
-                                  int16_t r, 
-                                  uint8_t cornername,
-                                  int16_t delta,
-                                  uint16_t color);
-                                  
-            /**
-             * Draw a triangle.
-             *
-             * @param x0 First point coordinate on x-axis
-             * @param y0 First point coordinate on y-axis
-             * @param x1 Second point coordinate on x-axis
-             * @param y1 Second point coordinate on y-axis
-             * @param x2 Third point coordinate on x-axis
-             * @param y2 Third point coordinate on y-axis
-             * @param color RGB (16-bit) color (R[0-4], G[5-10], B[11-15]
-             */
-            void drawTriangle(int16_t x0, 
-                              int16_t y0, 
-                              int16_t x1, 
-                              int16_t y1,
-                              int16_t x2, 
-                              int16_t y2, 
-                              uint16_t color);
-                              
-            /**
-             * Draw a filled triangle.
-             *
-             * @param x0 First point coordinate on x-axis
-             * @param y0 First point coordinate on y-axis
-             * @param x1 Second point coordinate on x-axis
-             * @param y1 Second point coordinate on y-axis
-             * @param x2 Third point coordinate on x-axis
-             * @param y2 Third point coordinate on y-axis
-             * @param color RGB (16-bit) color (R[0-4], G[5-10], B[11-15]
-             */
-            void fillTriangle(int16_t x0,
-                              int16_t y0,
-                              int16_t x1,
-                              int16_t y1,
-                              int16_t x2,
-                              int16_t y2,
-                              uint16_t color);
-
-            /**
-             * Draw a rectangle with rounded corners
-             *
-             * @param x0 X-axis coordinate of top-left corner
-             * @param y0 Y-axis coordinate of top-left corner
-             * @param w Width of rectangle
-             * @param h height of rectangle
-             * @param radius Radius of rounded corners
-             * @param color RGB (16-bit) color (R[0-4], G[5-10], B[11-15]
-             */
-            void drawRoundRect(int16_t x0, 
-                               int16_t y0, 
-                               int16_t w, 
-                               int16_t h,
-                               int16_t radius, 
-                               uint16_t color);
-                               
-            /**
-             * Draw a filled rectangle with rounded corners
-             *
-             * @param x0 X-axis coordinate of top-left corner
-             * @param y0 Y-axis coordinate of top-left corner
-             * @param w Width of rectangle
-             * @param h height of rectangle
-             * @param radius Radius of rounded corners
-             * @param color RGB (16-bit) color (R[0-4], G[5-10], B[11-15]
-             */
-            void fillRoundRect(int16_t x0, 
-                               int16_t y0, 
-                               int16_t w, 
-                               int16_t h,
-                               int16_t radius, 
-                               uint16_t color);
-                               
-            /**
-             * Draw a character at the specified point.
-             *
-             * @param x X-axis coordinate of the top-left corner
-             * @param y Y-axis coordinate of the top-left corner
-             * @param c Character to draw
-             * @param color RGB (16-bit) color (R[0-4], G[5-10], B[11-15]
-             * @param bg Background color (16-bit RGB)
-             * @param size Font size
-             */
-            void drawChar(int16_t x, 
-                          int16_t y, 
-                          unsigned char c, 
-                          uint16_t color,
-                          uint16_t bg, 
-                          uint8_t size);
-            
-            /**
-             * Get the x-axis coordinate of the upper-left corner of the cursor.
-             *
-             * @return X-axis coordinate of the cursor
-             */
-            int16_t getCursorX(void) const;
-            
-            /**
-             * Get the y-axis coordinate of the upper-left corner of the cursor.
-             *
-             * @return Y-axis coordinate of the cursor
-             */
-            int16_t getCursorY(void) const;
-             
-            /**
-             * Set the cursor for writing text.
-             *
-             * @param x X-axis coordinate of the top-left corner of the cursor
-             * @param y Y-axis coordinate of the top-left corner of the cursor
-             */
-            void setCursor(int16_t x, int16_t y);
-             
-            /**
-             * Set the color for text.
-             *
-             * @param c RGB (16-bit) color (R[0-4], G[5-10], B[11-15]
-             */
-            void setTextColor(uint16_t c);
-            
-            /**
-             * Set the color for text and text background (highlight).
-             *
-             * @param c Text color (RGB, 16-bit)
-             * @param bg Background text color (RGB, 16-bit)
-             */
-            void setTextColor(uint16_t c, uint16_t bg);
-            
-            /**
-             * Set the size of the text.
-             *
-             * @param s Font size (multiples of 8 pixel text height)
-             */ 
-            void setTextSize(uint8_t s);
-            
-            /**
-             * Enable or disable text wrapping.
-             *
-             * @param w True to wrap text. False to truncate.
-             */
-            void setTextWrap(bool w);
-            
-            /**
-             * Get the current rotation configuration of the screen.
-             *
-             * @return current rotation 0-3
-             */
-            uint8_t getRotation(void) const;
-            
-            /**
-             * Sets the rotation of the screen. Can be overridden with another
-             * screen-specific definition.
-             *
-             * @param r Rotation 0-3
-             */
-            void setRotation(uint8_t r);
-                        
-            /**
-             * Enable (or disable) Code Page 437-compatible charset.
-             *
-             * @param x True to enable CP437 charset. False to disable.
-             */
-            void cp437(bool x);
-            
-            /**
-             * Write a character at the current cursor position. Definition
-             * can be overridden with board-specific code.
-             *
-             * @param c Character to draw
-             */
-            virtual void write(uint8_t c);
-            
-            /**
-             * Prints a string to the screen.
-             *
-             * @param msg Message to print
-             */
-            void print(std::string msg);
-            
-            /**
-             * Get the current width of the screen.
-             *
-             * @return the width in pixels
-             */
-            int16_t width(void) const;
-            
-            /**
-             * Get the current height of the screen.
-             *
-             * @return the height in pixels
-             */
-            int16_t height(void) const;
-            
-        protected:
-        
-            const int16_t WIDTH;
-            const int16_t HEIGHT;
-            
-            int16_t _width;
-            int16_t _height;
-            
-            uint8_t rotation;
-            
-            uint16_t textcolor;
-            uint16_t textbgcolor;
-            int16_t cursor_x;
-            int16_t cursor_y;
-            uint8_t textsize;
-            bool wrap;
-            bool _cp437;
-            static const unsigned char font[];
-    };
-}     
diff --git a/src/ili9341/license.txt b/src/ili9341/license.txt
deleted file mode 100644
index 7492e93..0000000
--- a/src/ili9341/license.txt
+++ /dev/null
@@ -1,24 +0,0 @@
-Software License Agreement (BSD License)
-
-Copyright (c) 2012 Adafruit Industries.  All rights reserved.
-
-Redistribution and use in source and binary forms, with or without
-modification, are permitted provided that the following conditions are met:
-
-- Redistributions of source code must retain the above copyright notice,
-  this list of conditions and the following disclaimer.
-- Redistributions in binary form must reproduce the above copyright notice,
-  this list of conditions and the following disclaimer in the documentation
-  and/or other materials provided with the distribution.
-
-THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
-AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
-IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
-ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
-LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
-CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
-SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
-INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
-CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
-ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
-POSSIBILITY OF SUCH DAMAGE.
diff --git a/src/ims/CMakeLists.txt b/src/ims/CMakeLists.txt
deleted file mode 100644
index 816b478..0000000
--- a/src/ims/CMakeLists.txt
+++ /dev/null
@@ -1,9 +0,0 @@
-upm_mixed_module_init (NAME ims
-    DESCRIPTION "I2C Moisture Sensor"
-    C_HDR ims.h ims_defs.h
-    C_SRC ims.c
-    CPP_HDR ims.hpp
-    CPP_SRC ims.cxx
-    FTI_SRC ims_fti.c
-    CPP_WRAPS_C
-    REQUIRES mraa utilities-c)
diff --git a/src/ims/ims.c b/src/ims/ims.c
deleted file mode 100644
index 15cc649..0000000
--- a/src/ims/ims.c
+++ /dev/null
@@ -1,230 +0,0 @@
-/*
- * Author: Noel Eck <noel.eck@intel.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <stdlib.h>
-#include <syslog.h>
-
-#include "ims.h"
-#include "upm_utilities.h"
-
-static upm_result_t i2c_init(ims_context* dev, int16_t i2c_bus, int16_t i2c_address)
-{
-    /* Attempt to stop the i2c device context if previously initialized */
-    if (dev->_i2c_context != NULL)
-        mraa_i2c_stop(dev->_i2c_context);
-
-    /* Init i2c */
-    dev->_i2c_context = mraa_i2c_init(i2c_bus);
-    if(dev->_i2c_context == NULL)
-    {
-        syslog(LOG_ERR, "%s: mraa_i2c_init() failed\n", __FUNCTION__);
-        return UPM_ERROR_OPERATION_FAILED;
-    }
-
-    /* Set the i2c slave address for this device */
-    if (mraa_i2c_address(dev->_i2c_context, i2c_address) != MRAA_SUCCESS)
-    {
-        syslog(LOG_ERR, "%s: mraa_i2c_address() failed\n", __FUNCTION__);
-        return UPM_ERROR_OPERATION_FAILED;
-    }
-
-    /* This device must run at 100kHz */
-    if (mraa_i2c_frequency(dev->_i2c_context, MRAA_I2C_STD))
-    {
-        syslog(LOG_ERR, "%s: mraa_i2c_frequency() failed.  %s\n",
-                __FUNCTION__,
-                "This device requires I2C standard mode (100 kb/s)");
-        return UPM_ERROR_OPERATION_FAILED;
-    }
-    /* Save the new bus */
-    dev->_i2c_bus = i2c_bus;
-
-    return UPM_SUCCESS;
-}
-
-ims_context* ims_init(int16_t i2c_bus, int16_t i2c_address)
-{
-    /* Allocate space for the sensor structure */
-    ims_context* dev = (ims_context*) calloc(1, sizeof(ims_context));
-    if(dev == NULL)
-    {
-        syslog(LOG_CRIT, "%s: malloc() failed\n", __FUNCTION__);
-        return NULL;
-    }
-
-    /* Initialize mraa */
-    mraa_result_t result = mraa_init();
-    if (result != MRAA_SUCCESS)
-    {
-        syslog(LOG_ERR, "%s: mraa_init() failed (%d)\n", __FUNCTION__, result);
-        free(dev);
-        return NULL;
-    }
-
-    /* Setup the I2C bus */
-    if (i2c_init(dev, i2c_bus, i2c_address) != UPM_SUCCESS)
-    {
-        free(dev);
-        return NULL;
-    }
-
-    return dev;
-}
-
-void ims_close(ims_context* dev)
-{
-    if (dev == NULL) return;
-
-    /* Cleanup the I2C context */
-    mraa_i2c_stop(dev->_i2c_context);
-    free(dev);
-}
-
-upm_result_t ims_read(const ims_context* dev, IMS_RD_COMMAND cmd, uint16_t* rd_data)
-{
-    int32_t val = 0;
-    uint8_t readbuf[2] = {0, 0};
-    switch (cmd)
-    {
-        /* One byte reads */
-        case IMS_GET_ADDRESS:
-        case IMS_GET_VERSION:
-        case IMS_GET_BUSY:
-            val = mraa_i2c_read_bytes_data(dev->_i2c_context, cmd, readbuf, 1);
-            *rd_data = readbuf[0];
-            break;
-        /* Two byte reads */
-        case IMS_GET_CAPACITANCE:
-        case IMS_GET_LIGHT:
-        case IMS_GET_TEMPERATURE:
-            val = mraa_i2c_read_bytes_data(dev->_i2c_context, cmd, readbuf, 2);
-            *rd_data = readbuf[1];
-            *rd_data += ((uint16_t)readbuf[0] << 8) & 0xFF00;
-            break;
-        default:
-            syslog(LOG_ERR, "%s: Invalid read command: 0x%02x\n", __FUNCTION__, cmd);
-            return UPM_ERROR_INVALID_PARAMETER;
-    }
-
-    /* val will be < 0 on failing case */
-    if (val < 0)
-    {
-        syslog(LOG_ERR, "%s: mraa_i2c_read_byte/word_data() failed\n", __FUNCTION__);
-        return UPM_ERROR_NO_DATA;
-    }
-
-    return UPM_SUCCESS;
-}
-
-upm_result_t ims_write(const ims_context* dev, IMS_WR_COMMAND cmd, uint8_t wr_data)
-{
-    mraa_result_t mr;
-    switch (cmd)
-    {
-        /* One byte write */
-        case IMS_SET_ADDRESS:
-            mr = mraa_i2c_write_byte_data(dev->_i2c_context, wr_data, cmd);
-            break;
-        /* Zero byte write */
-        case IMS_MEASURE_LIGHT:
-        case IMS_RESET:
-        case IMS_SLEEP:
-            mr = mraa_i2c_write(dev->_i2c_context, (const uint8_t *)&cmd, 1);
-            break;
-        default:
-            syslog(LOG_ERR, "%s: Invalid read command: 0x%02x\n", __FUNCTION__, cmd);
-            return UPM_ERROR_INVALID_PARAMETER;
-    }
-
-    if (mr != MRAA_SUCCESS) return UPM_ERROR_OPERATION_FAILED;
-
-    return UPM_SUCCESS;
-}
-
-upm_result_t ims_get_version(const ims_context* dev, uint16_t* rd_data)
-{
-    return ims_read(dev, IMS_GET_VERSION, rd_data);
-}
-
-upm_result_t ims_get_moisture(const ims_context* dev, uint16_t* rd_data)
-{
-    return ims_read(dev, IMS_GET_CAPACITANCE, rd_data);
-}
-
-upm_result_t ims_get_light(const ims_context* dev, uint16_t* rd_data)
-{
-    /* Initiate a light measurement */
-    upm_result_t res = ims_write(dev, IMS_MEASURE_LIGHT, 0);
-    if (res != UPM_SUCCESS) return res;
-
-    /* Technical data for the IMS specifies a 3 second wait.  Check the BUSY
-     * command every 100 ms for 3 seconds.  The sensor will return quickly in
-     * bright light and much slower in less light. */
-    int retry = 30;
-    *rd_data = 1;
-    while ((retry-- > 0) && (*rd_data != 0))
-    {
-        // Always delay at least 100 ms
-        upm_delay_ms(100);
-        res = ims_read(dev, IMS_GET_BUSY, rd_data);
-        if (res != UPM_SUCCESS) return res;
-    }
-
-    /* If the sensor is STILL not ready, go ahead and perform the read.
-     * From testing, this appears to happen only in complete darkness,
-     * at which point the sensor get light read returns 0xffff anyway.*/
-
-    return ims_read(dev, IMS_GET_LIGHT, rd_data);
-}
-
-upm_result_t ims_get_temperature(const ims_context* dev, uint16_t* rd_data)
-{
-    return ims_read(dev, IMS_GET_TEMPERATURE, rd_data);
-}
-
-upm_result_t ims_reset(const ims_context* dev)
-{
-    return ims_write(dev, IMS_RESET, 0);
-}
-
-upm_result_t ims_reset_i2c_address(ims_context* dev, uint8_t address_new)
-{
-    /* Set the new address */
-    upm_result_t res = ims_write(dev, IMS_SET_ADDRESS, address_new);
-    if (res != UPM_SUCCESS) return res;
-
-    /* Reset the device to load the new I2C address */
-    res = ims_reset(dev);
-    if (res != UPM_SUCCESS) return res;
-
-    /* Re-init the I2C bus */
-    res = i2c_init(dev, dev->_i2c_bus, address_new);
-
-    return res;
-}
-
-upm_result_t ims_sleep(const ims_context* dev)
-{
-    return ims_write(dev, IMS_SLEEP, 0);
-}
diff --git a/src/ims/ims.cxx b/src/ims/ims.cxx
deleted file mode 100644
index 58c1f86..0000000
--- a/src/ims/ims.cxx
+++ /dev/null
@@ -1,111 +0,0 @@
-/*
- * Author: Noel Eck <noel.eck@intel.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <stdexcept>
-#include <string>
-
-#include "ims.hpp"
-
-using namespace upm;
-
-IMS::IMS(int16_t i2c_bus, int16_t i2c_address) :
-    _dev(ims_init(i2c_bus, i2c_address))
-{
-    if (_dev == NULL)
-        throw std::runtime_error(std::string(__FUNCTION__) +
-                ": failed to initialize sensor, check syslog");
-}
-
-uint16_t IMS::get_version()
-{
-    uint16_t retval;
-    if (ims_get_version(_dev, &retval) != UPM_SUCCESS)
-        throw std::runtime_error(std::string(__FUNCTION__) +
-                ": ims_get_version command failed");
-    return retval;
-}
-
-uint16_t IMS::get_moisture()
-{
-    uint16_t retval;
-    if (ims_get_moisture(_dev, &retval) != UPM_SUCCESS)
-        throw std::runtime_error(std::string(__FUNCTION__) +
-                ": ims_get_moisture command failed");
-    return retval;
-}
-
-uint16_t IMS::get_light()
-{
-    uint16_t retval;
-    if (ims_get_light(_dev, &retval) != UPM_SUCCESS)
-        throw std::runtime_error(std::string(__FUNCTION__) +
-                ": ims_get_light command failed");
-    return retval;
-}
-
-float IMS::get_temperature()
-{
-    uint16_t retval;
-    if (ims_get_temperature(_dev, &retval) != UPM_SUCCESS)
-        throw std::runtime_error(std::string(__FUNCTION__) +
-                ": ims_get_temperature command failed");
-    return static_cast<float>(retval)/10.0;
-}
-
-void IMS::reset_i2c_address(uint8_t address_new)
-{
-    if (ims_reset_i2c_address(_dev, address_new) != UPM_SUCCESS)
-        throw std::runtime_error(std::string(__FUNCTION__) +
-                ": reset_i2c_address command failed");
-}
-
-void IMS::reset()
-{
-    if ( ims_write(_dev, IMS_RESET, 1) != UPM_SUCCESS )
-        throw std::runtime_error(std::string(__FUNCTION__) +
-                ": ims_write command failed");
-}
-
-uint16_t IMS::read(IMS_RD_COMMAND cmd)
-{
-    uint16_t retval;
-    if (ims_read(_dev, cmd, &retval) != UPM_SUCCESS)
-        throw std::runtime_error(std::string(__FUNCTION__) +
-                ": ims_read command failed");
-    return retval;
-}
-
-void IMS::write(IMS_WR_COMMAND cmd, uint8_t value)
-{
-    if ( ims_write(_dev, cmd, value) != UPM_SUCCESS )
-        throw std::runtime_error(std::string(__FUNCTION__) +
-                ": ims_write command failed");
-}
-
-void IMS::sleep()
-{
-    if ( ims_sleep(_dev) != UPM_SUCCESS )
-        throw std::runtime_error(std::string(__FUNCTION__) +
-                ": ims_sleep command failed");
-}
diff --git a/src/ims/ims.h b/src/ims/ims.h
deleted file mode 100644
index 5a3348c..0000000
--- a/src/ims/ims.h
+++ /dev/null
@@ -1,152 +0,0 @@
-/*
- * Author: Noel Eck <noel.eck@intel.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#pragma once
-
-#include <errno.h>
-#include <stdint.h>
-
-#include "mraa/i2c.h"
-#include "upm.h"
-
-#include "ims_defs.h"
-
-#ifdef __cplusplus
-extern "C" {
-#endif
-
-/**
- * @file ims.h
- * @library ims
- * @brief C API for the Catnip Electronics I2C moisture sensor.  This sensor
- * must run at 100 kHz.
- *
- * @include ims.c
- */
-
-/**
- * device context
- */
-typedef struct {
-    /* mraa i2c context */
-    mraa_i2c_context _i2c_context;
-    /* Save the I2C bus (used when changing the device address) */
-    int16_t _i2c_bus;
-} ims_context;
-
-/**
- * Initialize sensor
- * @param i2c_bus Target I2C bus
- * @param i2c_address Target I2C address (default is 0x20)
- * @return sensor context pointer
- */
-ims_context* ims_init(int16_t i2c_bus, int16_t i2c_address);
-
-/**
- * Sensor close method.
- * Cleans up any memory held by this device
- * @param sensor context pointer
- */
-void ims_close(ims_context* dev);
-
-/**
- * Read I2C Moisture Sensor registers
- * @param dev Sensor context pointer
- * @param cmd Read command
- * @param rd_data Data returned from sensor (1 or 2 bytes depending on cmd)
- * @return Function result code
- */
-upm_result_t ims_read(const ims_context* dev, IMS_RD_COMMAND cmd, uint16_t* rd_data);
-
-/**
- * Write I2C Moisture Sensor registers
- * @param dev Sensor context pointer
- * @param cmd Write command
- * @param wr_data Target data to write (only used for IMS_SET_ADDRESS)
- * @return Function result code
- */
-upm_result_t ims_write(const ims_context* dev, IMS_WR_COMMAND cmd, uint8_t wr_data);
-
-/**
- * Get sensor version
- * @param dev Sensor context pointer
- * @param rd_data Sensor version
- * @return Function result code
- */
-upm_result_t ims_get_version(const ims_context* dev, uint16_t* rd_data);
-
-/**
- * Get moisture reading from sensor
- * @param dev Sensor context pointer
- * @param rd_data Unitless, relative capacitance value (used to determine moisture)
- * @return Function result code
- */
-upm_result_t ims_get_moisture(const ims_context* dev, uint16_t* rd_data);
-
-/**
- * Get light reading from LED on device.  The technical data for the I2C
- * moisture sensor specifies a 3 second wait.  Loop for 3 seconds checking
- * the GET_BUSY register.  IF the sensor is NOT ready after 3 seconds,
- * assume there is NO light and return a max uint16_t (dark) value.
- * @param dev Sensor context pointer
- * @param rd_data Unitless, relative value for brightness
- *        dark (0xFFFF) ---> light (0x0000)
- * @return Function result code
- */
-upm_result_t ims_get_light(const ims_context* dev, uint16_t* rd_data);
-
-/**
- * Get temperature reading from device
- * @param dev Sensor context pointer
- * @param rd_data Temperature in degrees Celsius * 10
- *        ie, 256 = 25.6 C
- * @return Function result code
- */
-upm_result_t ims_get_temperature(const ims_context* dev, uint16_t* rd_data);
-
-/**
- * Reset sensor
- * @param dev Sensor context pointer
- * @return Function result code
- */
-upm_result_t ims_reset(const ims_context* dev);
-
-/**
- * Set I2C address AND reset sensor
- * @param dev Sensor context pointer
- * @param address_new New I2C for device
- * @return Function result code
- */
-upm_result_t ims_reset_i2c_address(ims_context* dev, uint8_t address_new);
-
-/**
- * Put device into low-power mode.  Device wakes on any I2C command.
- * @param dev Sensor context pointer
- * @return Function result code
- */
-upm_result_t ims_sleep(const ims_context* dev);
-
-#ifdef __cplusplus
-}
-#endif
diff --git a/src/ims/ims.hpp b/src/ims/ims.hpp
deleted file mode 100644
index 91be9a0..0000000
--- a/src/ims/ims.hpp
+++ /dev/null
@@ -1,147 +0,0 @@
-/*
- * Author: Noel Eck <noel.eck@intel.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#pragma once
-
-#include "ims.h"
-
-namespace upm {
-/**
- * @brief Catnip Electronics I2C Moisture Sensor
- * @defgroup ims libupm-ims
- * @ingroup catnip i2c liquid light temp
- */
-
-/**
- * @library ims
- * @sensor ims
- * @comname I2C Moisture Sensor
- * @type liquid light temp
- * @man catnip
- * @web https://www.tindie.com/products/miceuz/i2c-soil-moisture-sensor/
- * @con i2c
- *
- * @brief API for the Catnip Electronics I2C moisture sensor
- *
- * I2C sensor which can be used to read:
- *    moisture
- *    light
- *    temperature
- *
- *    This sensor must run at 100 kHz
- *
- * @image html ims.png
- * @snippet ims.cxx Interesting
- */
-
-class IMS {
-    public:
-        /**
-         * I2C Moisture Sensor constructor
-         *
-         * Initialize I2C Moisture Sensor
-         * @param i2c_bus Target I2C bus
-         * @param i2c_address Target I2C address (default is 0x20)
-         * @return sensor context pointer
-         * @throws std::runtime_error if sensor initializate fails
-         */
-        IMS(int16_t i2c_bus, int16_t i2c_address = IMS_ADDRESS_DEFAULT);
-
-        /**
-         * IMS destructor
-         */
-        virtual ~IMS() {};
-
-        /**
-         * Write I2C Moisture Sensor registers
-         * @param cmd Write command
-         * @param wr_data Target data to write (only used for IMS_SET_ADDRESS)
-         * @throws std::runtime_error if I2C write command fails
-         */
-        void write(IMS_WR_COMMAND cmd, uint8_t wr_data);
-
-        /**
-         * Read I2C Moisture Sensor registers
-         * @param cmd Read command
-         * @return Data returned from sensor (1 or 2 bytes depending on CMD)
-         * @throws std::runtime_error if I2C read command fails
-         */
-        uint16_t read(IMS_RD_COMMAND cmd);
-
-        /**
-         * Get sensor version
-         * @return Sensor version
-         * @throws std::runtime_error if I2C read command fails
-         */
-        uint16_t get_version();
-
-        /**
-         * Get moisture reading from sensor
-         * @return Unitless, relative capacitance value (moisture)
-         * @throws std::runtime_error if I2C read command fails
-         */
-        uint16_t get_moisture();
-
-        /**
-         * Get light reading from LED on device.  The technical data for the I2C
-         * moisture sensor specifies a 3 second wait.  Loop for 3 seconds
-         * checking the GET_BUSY register.  IF the sensor is NOT ready after 3
-         * seconds, assume there is NO light and return a max uint16_t (dark)
-         * value.
-         * @return rd_data Unitless, relative value for brightness
-         *        dark (0xFFFF) ---> light (0x0000)
-         * @throws std::runtime_error if I2C write/read command fails
-         */
-        uint16_t get_light();
-
-        /**
-         * Get temperature reading from device
-         * @return rd_data Temperature in degrees Celsius
-         * @throws std::runtime_error if I2C read command fails
-         */
-        float get_temperature();
-
-        /**
-         * Reset sensor
-         * @throws std::runtime_error if I2C write command fails
-         */
-        void reset();
-
-        /**
-         * Set I2C address AND reset sensor
-         * @param address_new New I2C for device
-         * @throws std::runtime_error if I2C write command fails
-         */
-        void reset_i2c_address(uint8_t address_new);
-
-        /**
-         * Put device into low-power mode.  Device wakes on any I2C command.
-         * @throws std::runtime_error if I2C write command fails
-         */
-        void sleep();
-    private:
-        /* device context struct */
-        ims_context* _dev;
-};
-}
diff --git a/src/ims/ims.i b/src/ims/ims.i
deleted file mode 100644
index 2ccc2fa..0000000
--- a/src/ims/ims.i
+++ /dev/null
@@ -1,16 +0,0 @@
-%include "../common_top.i"
-
-/* BEGIN Java syntax  ------------------------------------------------------- */
-#ifdef SWIGJAVA
-JAVA_JNI_LOADLIBRARY(javaupm_ims)
-#endif
-/* END Java syntax */
-
-/* BEGIN Common SWIG syntax ------------------------------------------------- */
-%{
-#include "ims_defs.h"
-#include "ims.hpp"
-%}
-%include "ims_defs.h"
-%include "ims.hpp"
-/* END Common SWIG syntax */
diff --git a/src/ims/ims.json b/src/ims/ims.json
deleted file mode 100644
index 68fc04e..0000000
--- a/src/ims/ims.json
+++ /dev/null
@@ -1,39 +0,0 @@
-{
-    "Library": "ims",
-    "Description": "API for the Catnip Electronics I2C Moisture Sensor",
-    "Sensor Class":
-    {
-        "IMS":
-        {
-            "Name": "I2C Moisture Sensor",
-            "Description": "I2C Sensor which can be used to read moisture, light, and temperature which must run at 100kHz.",
-            "Aliases": ["ims"],
-            "Categories": ["moisture"],
-            "Connections": ["i2c"],
-            "Project Type": ["environmental", "prototyping"],
-            "Manufacturers": ["catnip"],
-            "Kits": [],
-            "Examples":
-            {
-                "Java": ["IMS_Example.java"],
-                "Python": ["ims.py"],
-                "Node.js": ["ims.js"],
-                "C++": ["ims.cxx"],
-                "C": ["ims.c"]
-            },
-            "Specifications":
-            {
-                "Operating Voltage": {"unit": "V", "low": 3.3, "high": 5},
-                "Operating Current": {"unit": "mA", "low": 0.7, "high": 14},
-                "Operating Temperature": {"unit": "degC", "low": 0, "high": 85}
-
-            },
-            "Urls" :
-            {
-                "Product Pages": ["https://www.tindie.com/products/miceuz/i2c-soil-moisture-sensor/"],
-                "Datasheets": [],
-                "Schematics": []
-            }
-        }
-    }
-}
diff --git a/src/ims/ims_defs.h b/src/ims/ims_defs.h
deleted file mode 100644
index 0eb3358..0000000
--- a/src/ims/ims_defs.h
+++ /dev/null
@@ -1,64 +0,0 @@
-/*
- * Author: Noel Eck <noel.eck@intel.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#pragma once
-
-#ifdef __cplusplus
-extern "C" {
-#endif
-
-#define IMS_ADDRESS_DEFAULT 0x20
-
- /* @brief Moisture sensor I2C READ commands */
-typedef enum _IMS_RD_COMMAND {
-        /* Read capacitance (moisture) register */
-        IMS_GET_CAPACITANCE = 0x00, /*    (r) 2 */
-        /* Read I2C address register */
-        IMS_GET_ADDRESS     = 0x02, /*    (r) 1 */
-        /* Read light register (requires write to IMS_MEASURE_LIGHT) */
-        IMS_GET_LIGHT       = 0x04, /*    (r) 2 */
-        /* Read temperature register */
-        IMS_GET_TEMPERATURE = 0x05, /*    (r) 2 */
-        /* Read version register */
-        IMS_GET_VERSION     = 0x07, /*    (r) 1 */
-        /* Read busy register (0 = ready, 1 = sampling) */
-        IMS_GET_BUSY        = 0x09, /*    (r) 1 */
-} IMS_RD_COMMAND;
-
- /* @brief Moisture sensor I2C WRITE commands */
-typedef enum {
-        /* Write I2C address register (latched w/IMS_RESET) */
-        IMS_SET_ADDRESS     = 0x01, /*    (w) 1 */
-        /* Initiate light measurement */
-        IMS_MEASURE_LIGHT   = 0x03, /*    (w) 0 */
-        /* Reset device */
-        IMS_RESET           = 0x06, /*    (w) 0 */
-        /* Sleep microcontroller, wake on any I2C request */
-        IMS_SLEEP           = 0x08, /*    (w) 0 */
-} IMS_WR_COMMAND;
-
-
-#ifdef __cplusplus
-}
-#endif
diff --git a/src/ims/ims_fti.c b/src/ims/ims_fti.c
deleted file mode 100644
index 418891c..0000000
--- a/src/ims/ims_fti.c
+++ /dev/null
@@ -1,146 +0,0 @@
-/*
- * Author: Noel Eck <noel.eck@intel.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <string.h>
-#include <stdlib.h>
-
-#include "ims.h"
-#include "upm_fti.h"
-#include "fti/upm_sensor.h"
-
-/** 
- * This file implements the Function Table Interface (FTI) for this sensor
- */
-
-const char upm_ims_name[] = "IMS";
-const char upm_ims_description[] = "Catnip Electronics I2C moisture sensor";
-const upm_protocol_t upm_ims_protocol[] = {UPM_I2C};
-const upm_sensor_t upm_ims_category[] = {UPM_LIGHT, UPM_TEMPERATURE, UPM_MOISTURE};
-
-// forward declarations
-const void* upm_ims_get_ft(upm_sensor_t sensor_type);
-void* upm_ims_init_str(const char* protocol, const char* params);
-void upm_ims_close(void* dev);
-const upm_sensor_descriptor_t upm_ims_get_descriptor();
-upm_result_t upm_ims_get_light(const void* dev, float *value);
-upm_result_t upm_ims_get_temperature(void* dev, float *value, upm_temperature_u unit);
-upm_result_t upm_ims_get_moisture(void* dev, int *value);
-
-/* This sensor implementes 2 function tables */
-/* 1. Generic base function table */
-static const upm_sensor_ft ft_gen =
-{
-    .upm_sensor_init_name = &upm_ims_init_str,
-    .upm_sensor_close = &upm_ims_close,
-    .upm_sensor_get_descriptor = &upm_ims_get_descriptor
-};
-
-/* 2. Light function table */
-static const upm_light_ft ft_light =
-{
-    .upm_light_set_offset = NULL,
-    .upm_light_set_scale = NULL,
-    .upm_light_get_value = &upm_ims_get_light
-};
-
-/* 3. Light function table */
-static const upm_temperature_ft ft_temperature =
-{
-    .upm_temperature_set_offset = NULL,
-    .upm_temperature_set_scale = NULL,
-    .upm_temperature_get_value = &upm_ims_get_temperature
-};
-
-/* 4. Light function table */
-static const upm_moisture_ft ft_moisture =
-{
-    .upm_moisture_sensor_get_moisture = &upm_ims_get_moisture
-};
-
-const void* upm_ims_get_ft(upm_sensor_t sensor_type)
-{
-    switch(sensor_type)
-    {
-        case UPM_SENSOR:
-            return &ft_gen;
-        case UPM_LIGHT:
-            return &ft_light;
-        case UPM_TEMPERATURE:
-            return &ft_temperature;
-        case UPM_MOISTURE:
-            return &ft_moisture;
-        default:
-            return NULL;
-    }
-}
-
-void* upm_ims_init_str(const char* protocol, const char* params)
-{
-    fprintf(stderr,
-            "String initialization - not implemented, using i2c bus 0, addr: 0x20: %s\n", __FILENAME__);
-    return ims_init(0, 0x20);
-}
-
-void upm_ims_close(void* dev)
-{
-    ims_close(dev);
-}
-
-const upm_sensor_descriptor_t upm_ims_get_descriptor()
-{
-    /* Fill in the descriptor */
-    upm_sensor_descriptor_t usd;
-    usd.name = upm_ims_name;
-    usd.description = upm_ims_description;
-    usd.protocol_size = 1;
-    usd.protocol = upm_ims_protocol;
-    usd.category_size = 3;
-    usd.category = upm_ims_category;
-
-    return usd;
-}
-
-upm_result_t upm_ims_get_light(const void* dev, float *value)
-{
-    uint16_t data;
-    upm_result_t result = ims_get_light((ims_context*)dev, &data);
-    *value = data;
-    return result;
-}
-
-upm_result_t upm_ims_get_temperature(void* dev, float *value, upm_temperature_u unit)
-{
-    uint16_t data;
-    upm_result_t result = ims_get_temperature((ims_context*)dev, &data);
-    *value = data;
-    return result;
-}
-
-upm_result_t upm_ims_get_moisture(void* dev, int *value)
-{
-    uint16_t data;
-    upm_result_t result = ims_get_moisture((ims_context*)dev, &data);
-    *value = data;
-    return result;
-}
diff --git a/src/ina132/CMakeLists.txt b/src/ina132/CMakeLists.txt
deleted file mode 100644
index 01d7c2a..0000000
--- a/src/ina132/CMakeLists.txt
+++ /dev/null
@@ -1,5 +0,0 @@
-set (libname "ina132")
-set (libdescription "Differential Amplifier")
-set (module_src ${libname}.cxx)
-set (module_hpp ${libname}.hpp)
-upm_module_init(mraa)
diff --git a/src/ina132/ina132.cxx b/src/ina132/ina132.cxx
deleted file mode 100644
index 11ed525..0000000
--- a/src/ina132/ina132.cxx
+++ /dev/null
@@ -1,65 +0,0 @@
-/*
- * Author: Zion Orent <zorent@ics.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <iostream>
-#include <string>
-#include <stdexcept>
-#include <unistd.h>
-
-#include "ina132.hpp"
-
-using namespace upm;
-using namespace std;
-
-INA132::INA132(int pin)
-{
-    if ( !(m_aio = mraa_aio_init(pin)) )
-    {
-      throw std::invalid_argument(std::string(__FUNCTION__) +
-                                  ": mraa_aio_init() failed, invalid pin?");
-      return;
-    }
-}
-
-INA132::~INA132()
-{
-  mraa_aio_close(m_aio);
-}
-
-float INA132::value()
-{
-	int val, i;
-	float v, vo;
-	float sum=0;
-	for(i=0;i<10;i++)
-	{
-		val = mraa_aio_read(m_aio);
-                if (val == -1) return -1;
-		v = val*5.00/1023;
-		sum += v;
-		usleep(10000);
-	}
-	vo = sum/10;
-	return vo;
-}
diff --git a/src/ina132/ina132.hpp b/src/ina132/ina132.hpp
deleted file mode 100644
index eead4c6..0000000
--- a/src/ina132/ina132.hpp
+++ /dev/null
@@ -1,81 +0,0 @@
-/*
- * Author: Zion Orent <zorent@ics.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#pragma once
-
-#include <string>
-#include <mraa/aio.h>
-
-namespace upm {
-  /**
-   * @brief INA132 Differential Amplifier Sensor
-   * @defgroup ina132 libupm-ina132
-   * @ingroup seeed analog electric
-   */
-  /**
-   * @library ina132
-   * @sensor ina132
-   * @comname Differential Amplifier
-   * @altname INA132
-   * @type electric
-   * @man seeed
-   * @con analog
-   * @web http://wiki.seeed.cc/Grove-Differential_Amplifier_v1.2/
-   *
-   * @brief API for the INA132 Differential Amplifier Sensor
-   *
-   * The INA132 Differential Amplifier Sensor is designed
-   * for precise differential-input amplification.
-   *
-   * This sensor was tested amplifying the signal
-   * from a Weight Sensor (Load Cell) 0-500g
-   *
-   * @image html ina132.jpg
-   * @snippet ina132.cxx Interesting
-   */
-  class INA132 {
-  public:
-    /**
-     * INA132 constructor
-     *
-     * @param pin Analog pin to use
-     */
-    INA132(int pin);
-    /**
-     * INA132 destructor
-     */
-    ~INA132();
-
-    /**
-     * Measures precise differential-input amplification from the sensor
-     *
-     * @return Precise differential-input amplification
-     */
-    float value();
-
-  private:
-    mraa_aio_context m_aio;
-  };
-}
-
-
diff --git a/src/ina132/ina132.json b/src/ina132/ina132.json
deleted file mode 100644
index 4d18dc2..0000000
--- a/src/ina132/ina132.json
+++ /dev/null
@@ -1,38 +0,0 @@
-{
-    "Library": "ina132",
-    "Description": "API for the INA132 Differential Amplifier Sensor",
-    "Sensor Class":
-    {
-        "INA132":
-        {
-            "Name": "Grove Differential Amplifier",
-            "Description": "The INA132 Differential Amplifier Sensor is designed for precise differential-input amplification. This sensor was tested amplifying the signal from a Weight Sensor (Load Cell) 0-500g",
-            "Aliases": ["ina132"],
-            "Categories": ["electric"],
-            "Connections": ["analog"],
-            "Project Type": ["prototyping"],
-            "Manufacturers": ["seeed"],
-            "Kits": [],
-            "Image": "ina132.jpg",
-            "Examples":
-            {
-                "Java": [],
-                "Python": ["ina132.py"],
-                "Node.js": ["ina132.js"],
-                "C++": ["ina132.cxx"],
-                "C": []
-            },
-            "Specifications":
-            {
-                "Operating Voltage": {"unit": "V", "low": 2.7, "high": 5.5}
-
-            },
-            "Urls" :
-            {
-                "Product Pages": ["https://www.seeedstudio.com/Grove-Differential-Amplifier-p-1284.html"],
-                "Datasheets": ["http://wiki.seeed.cc/Grove-Differential_Amplifier_v1.2", "https://raw.githubusercontent.com/SeeedDocument/Grove-Differential_Amplifier_v1.2/master/res/Ina132.pdf"],
-                "Schematics": []
-            }
-        }
-    }
-}
diff --git a/src/isd1820/CMakeLists.txt b/src/isd1820/CMakeLists.txt
deleted file mode 100644
index c3ec768..0000000
--- a/src/isd1820/CMakeLists.txt
+++ /dev/null
@@ -1,5 +0,0 @@
-set (libname "isd1820")
-set (libdescription "Voice Recording and Playback Module")
-set (module_src ${libname}.cxx)
-set (module_hpp ${libname}.hpp)
-upm_module_init(mraa)
diff --git a/src/isd1820/isd1820.cxx b/src/isd1820/isd1820.cxx
deleted file mode 100644
index 9cfbfad..0000000
--- a/src/isd1820/isd1820.cxx
+++ /dev/null
@@ -1,91 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <iostream>
-#include <string>
-#include <stdexcept>
-
-#include "isd1820.hpp"
-
-using namespace upm;
-using namespace std;
-
-ISD1820::ISD1820(int playPin, int recPin)
-{
-  if ( !(m_gpioPlay = mraa_gpio_init(playPin)) )
-    {
-      throw std::invalid_argument(std::string(__FUNCTION__) +
-                                  ": mraa_gpio_init(playPin) failed, invalid pin?");
-      return;
-    }
-
-  mraa_gpio_dir(m_gpioPlay, MRAA_GPIO_OUT);
-
-  if ( !(m_gpioRec = mraa_gpio_init(recPin)) )
-    {
-      throw std::invalid_argument(std::string(__FUNCTION__) +
-                                  ": mraa_gpio_init(recPin) failed, invalid pin?");
-      return;
-    }
-
-  mraa_gpio_dir(m_gpioRec, MRAA_GPIO_OUT);
-
-  // make sure we are not recording or playing
-  play(false);
-  record(false);
-}
-
-ISD1820::~ISD1820()
-{
-  mraa_gpio_close(m_gpioPlay);
-  mraa_gpio_close(m_gpioRec);
-}
-
-void ISD1820::play(bool enable)
-{
-  if (enable)
-    {
-      // make sure we are not recording
-      record(false);
-      mraa_gpio_write(m_gpioPlay, 1);
-    }
-  else
-    {
-      mraa_gpio_write(m_gpioPlay, 0);
-    }
-}
-
-void ISD1820::record(bool enable)
-{
-  if (enable)
-    {
-      // make sure we are not playing
-      play(false);
-      mraa_gpio_write(m_gpioRec, 1);
-    }
-  else
-    {
-      mraa_gpio_write(m_gpioRec, 0);
-    }
-}
diff --git a/src/isd1820/isd1820.hpp b/src/isd1820/isd1820.hpp
deleted file mode 100644
index 7ad2fc0..0000000
--- a/src/isd1820/isd1820.hpp
+++ /dev/null
@@ -1,92 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#pragma once
-
-#include <iostream>
-
-#include <mraa/gpio.h>
-
-namespace upm {
-    /**
-     * @brief ISD1820 Voice Recorder Module
-     * @defgroup isd1820 libupm-isd1820
-     * @ingroup seeed gpio sound
-     */
-
-    /**
-     * @library isd1820
-     * @sensor isd1820
-     * @comname Voice Recording and Playback Module
-     * @altname ISD1820 Recorder
-     * @type sound
-     * @man seeed
-     * @con gpio
-     * @web http://wiki.seeed.cc/Grove_Recorder/
-     *
-     * @brief API support for the ISD1820-based Grove Voice Recorder
-     *
-     * This class implements support for the Grove Voice Recorder. There
-     * are two digital pins: one that enables recording, and the other
-     * that plays back what was previously recorded.
-     *
-     * @image html isd1820.jpg
-     * @snippet isd1820.cxx Interesting
-     */
-  class ISD1820 {
-  public:
-
-    /**
-     * ISD1820 constructor
-     *
-     * @param recPin Pin to use for recording
-     * @param playPin Pin to use for playback
-     */
-    ISD1820(int playPin, int recPin);
-
-    /**
-     * ISD1820 destructor
-     */
-    ~ISD1820();
-
-    /**
-     * Starts or stops playback
-     *
-     * @param enable Starts playback if true, stops if false
-     */
-    void play(bool enable);
-
-    /**
-     * Starts or stops recording
-     *
-     * @param enable Starts recording if true, stops if false
-     */
-    void record(bool enable);
-
-  private:
-    mraa_gpio_context m_gpioRec;
-    mraa_gpio_context m_gpioPlay;
-  };
-}
-
-
diff --git a/src/isd1820/isd1820.json b/src/isd1820/isd1820.json
deleted file mode 100644
index 1d4c4cc..0000000
--- a/src/isd1820/isd1820.json
+++ /dev/null
@@ -1,33 +0,0 @@
-{
-    "Library": "isd1820",
-    "Description": "API support for the ISD1820-based Grove Voice Recorder",
-    "Sensor Class":
-    {
-        "ISD1820":
-        {
-            "Name": "Grove Voice Recording and Playback Module",
-            "Description": "This class implements support for the Grove Voice Recorder. There are two digital pins: one that enables recording, and the other that plays back what was previously recorded.",
-            "Aliases": ["isd1820"],
-            "Categories": ["audio"],
-            "Connections": ["gpio"],
-            "Project Type": ["audio", "prototyping"],
-            "Manufacturers": ["seeed"],
-            "Kits": [],
-            "Image": "isd1820.jpg",
-            "Examples":
-            {
-                "Java": [],
-                "Python": ["isd1820.py"],
-                "Node.js": ["isd1820.js"],
-                "C++": ["isd1820.cxx"],
-                "C": []
-            },
-            "Urls" :
-            {
-                "Product Pages": ["https://www.seeedstudio.com/Grove-Recorder-p-1825.html"],
-                "Datasheets": ["http://wiki.seeed.cc/Grove_Recorder/", "https://github.com/SeeedDocument/Grove_Recorder/raw/master/res/ISD1820P.pdf"],
-                "Schematics": []
-            }
-        }
-    }
-}
diff --git a/src/itg3200/CMakeLists.txt b/src/itg3200/CMakeLists.txt
deleted file mode 100644
index c92d51c..0000000
--- a/src/itg3200/CMakeLists.txt
+++ /dev/null
@@ -1,5 +0,0 @@
-set (libname "itg3200")
-set (libdescription "3-axis Digital Gyroscope")
-set (module_src ${libname}.cxx)
-set (module_hpp ${libname}.hpp)
-upm_module_init(mraa)
diff --git a/src/itg3200/itg3200.cxx b/src/itg3200/itg3200.cxx
deleted file mode 100644
index 3533c02..0000000
--- a/src/itg3200/itg3200.cxx
+++ /dev/null
@@ -1,147 +0,0 @@
-/*
- * Author: Mihai Tudor Panu <mihai.tudor.panu@intel.com>
- * Copyright (c) 2014 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <iostream>
-#include <string>
-#include <stdexcept>
-#include <unistd.h>
-#include "math.h"
-#include "itg3200.hpp"
-
-#define READ_BUFFER_LENGTH 8
-
-//address and id
-#define ITG3200_I2C_ADDR 0x68
-#define ITG3200_ID 0x00
-
-//configuration registers
-#define ITG3200_SMPLRT_DIV 0x15
-#define ITG3200_DLPF_FS 0x16
-
-//interrupt registers
-#define ITG3200_INT_CFG 0x17
-#define ITG3200_INT_STATUS 0x1A
-
-//data registers (read only)
-#define ITG3200_TEMP_H 0x1B
-#define ITG3200_TEMP_L 0x1C
-#define ITG3200_XOUT_H 0x1D
-#define ITG3200_XOUT_L 0x1E
-#define ITG3200_YOUT_H 0x1F
-#define ITG3200_YOUT_L 0x20
-#define ITG3200_ZOUT_H 0x21
-#define ITG3200_ZOUT_L 0x22
-#define DATA_REG_SIZE 8
-
-//power management
-#define ITG3200_PWR_MGM 0x3E
-
-//useful values
-#define ITG3200_RESET 0x80
-#define ITG3200_SLEEP 0x40
-#define ITG3200_WAKEUP 0x00
-
-using namespace upm;
-
-Itg3200::Itg3200(int bus) : m_i2c(bus)
-{
-    m_i2c.address(ITG3200_I2C_ADDR);
-    m_buffer[0] = ITG3200_PWR_MGM;
-    m_buffer[1] = ITG3200_RESET;
-    m_i2c.write(m_buffer, 2);
-
-    Itg3200::calibrate();
-    Itg3200::update();
-}
-
-void
-Itg3200::calibrate(void)
-{
-    int reads = 600;
-    int delay = 4000; // 4 milliseconds
-    int skip = 5; // initial samples to skip
-    int temp[3] = {0};
-
-    for(int i = 0; i < reads; i++){
-
-        Itg3200::update();
-        if (i >= skip){
-            for (int j = 0; j < 3; j++){
-                temp[j] += m_rotation[j];
-            }
-        }
-        usleep(delay);
-    }
-
-    for(int i = 0; i < 3; i++){
-        m_offsets[i] = (-1) * temp[i] / (reads - skip);
-    }
-}
-
-float
-Itg3200::getTemperature()
-{
-    return 35.0 + (m_temperature + 13200.0) / 280.0;
-}
-
-float*
-Itg3200::getRotation()
-{
-    for(int i = 0; i < 3; i++){
-        m_angle[i] = m_rotation[i]/14.375;
-    }
-    return &m_angle[0];
-}
-
-int16_t*
-Itg3200::getRawValues()
-{
-    return &m_rotation[0];
-}
-
-int16_t
-Itg3200::getRawTemp()
-{
-    return m_temperature;
-}
-
-mraa::Result
-Itg3200::update(void)
-{
-    m_i2c.writeByte(ITG3200_TEMP_H);
-
-    m_i2c.read(m_buffer, DATA_REG_SIZE);
-
-    //temp
-    //
-    m_temperature = (m_buffer[0] << 8 ) | m_buffer[1];
-    // x
-    m_rotation[0] = ((m_buffer[2] << 8 ) | m_buffer[3]) + m_offsets[0];
-    // y
-    m_rotation[1] = ((m_buffer[4] << 8 ) | m_buffer[5]) + m_offsets[1];
-    // z
-    m_rotation[2] = ((m_buffer[6] << 8 ) | m_buffer[7]) + m_offsets[2];
-
-    return mraa::SUCCESS;
-}
diff --git a/src/itg3200/itg3200.hpp b/src/itg3200/itg3200.hpp
deleted file mode 100644
index a5468d4..0000000
--- a/src/itg3200/itg3200.hpp
+++ /dev/null
@@ -1,118 +0,0 @@
-/*
- * Author: Mihai Tudor Panu <mihai.tudor.panu@intel.com>
- * Copyright (c) 2014 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#pragma once
-
-#include <mraa/i2c.hpp>
-
-#define READ_BUFFER_LENGTH 8
-
-namespace upm {
-
-/**
- * @brief ITG3200 Gyroscope
- * @defgroup itg3200 libupm-itg3200
- * @ingroup seeed i2c compass
- */
-
-/**
- * @library itg3200
- * @sensor itg3200
- * @comname 3-axis Digital Gyroscope
- * @altname Grove 3-Axis Digital Gyroscope
- * @type compass
- * @man seeed
- * @con i2c
- * @web http://wiki.seeed.cc/Grove-3-Axis_Digital_Gyro/
- *
- * @brief API for the ITG-3200 3-Axis Digital Gyroscope
- *
- * InvenSense* ITG-3200 is a 3-axis digital gyroscope.
- * (https://www.sparkfun.com/datasheets/Sensors/Gyro/PS-ITG-3200-00-01.4.pdf)
- * This sensor has been tested and can run at either 3.3V or 5V on Intel(R) Galileo.<br>
- * <strong>However</strong>, it is incompatible with and not detected on the I2C bus
- * by Intel(R) Edison using the Arduino* breakout board.
- *
- * @image html itg3200.jpeg
- * @snippet itg3200.cxx Interesting
- */
-class Itg3200 {
-public:
-    /**
-     * Creates an Itg3200 object
-     *
-     * @param bus Number of the used I2C bus
-     */
-    Itg3200(int bus);
-
-    /**
-     * Calibrates the sensor to 0 on all axes. The sensor needs to be resting for accurate calibration.
-     * It takes about 3 seconds and is also called by the constructor on object creation.
-     *
-     */
-    void calibrate();
-
-    /**
-     * Returns the temperature reading, in Celsius, from the integrated temperature sensor
-     *
-     * @return float Temperature in Celsius
-     */
-    float getTemperature();
-
-    /**
-     * Returns a pointer to a float[3] that contains computed rotational speeds (angular velocities)
-     *
-     * @return float* to a float[3]
-     */
-    float* getRotation();
-
-    /**
-     * Returns a pointer to an int[3] that contains raw register values for X, Y, and Z
-     *
-     * @return int* to an int[3]
-     */
-    int16_t* getRawValues();
-
-    /**
-     * Returns an int that contains the raw register value for the temperature
-     *
-     * @return int Raw temperature
-     */
-    int16_t getRawTemp();
-
-    /**
-     * Updates the rotational values and temperature by reading from the I2C bus
-     *
-     * @return 0 if successful
-     */
-    mraa::Result update();
-private:
-    float m_angle[3];
-    int16_t m_rotation[3];
-    int16_t m_offsets[3];
-    int16_t m_temperature;
-    uint8_t m_buffer[READ_BUFFER_LENGTH];
-    mraa::I2c m_i2c;
-};
-
-}
diff --git a/src/itg3200/itg3200.i b/src/itg3200/itg3200.i
deleted file mode 100644
index 1e5d7d1..0000000
--- a/src/itg3200/itg3200.i
+++ /dev/null
@@ -1,72 +0,0 @@
-%include "../common_top.i"
-
-/* BEGIN Java syntax  ------------------------------------------------------- */
-#ifdef SWIGJAVA
-%typemap(jni) float* "jfloatArray"
-%typemap(jstype) float* "float[]"
-%typemap(jtype) float* "float[]"
-
-%typemap(javaout) float* {
-    return $jnicall;
-}
-
-%typemap(out) float *getRotation {
-    $result = JCALL1(NewFloatArray, jenv, 3);
-    JCALL4(SetFloatArrayRegion, jenv, $result, 0, 3, $1);
-}
-
-%typemap(jni) int16_t* "jshortArray"
-%typemap(jstype) int16_t* "short[]"
-%typemap(jtype) int16_t* "short[]"
-
-%typemap(javaout) int16_t* {
-    return $jnicall;
-}
-
-%typemap(out) int16_t *getRawValues {
-    $result = JCALL1(NewShortArray, jenv, 3);
-    JCALL4(SetShortArrayRegion, jenv, $result, 0, 3, (jshort*)$1);
-}
-
-JAVA_JNI_LOADLIBRARY(javaupm_itg3200)
-#endif
-/* END Java syntax */
-
-/* BEGIN Javascript syntax  ------------------------------------------------- */
-#ifdef SWIGJAVASCRIPT
-%include "../carrays_int16_t.i"
-%include "../carrays_float.i"
-
-%typemap(out) int16_t * {
-    $result = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_int16Array, 0 | 0 );
-}
-
-%typemap(out) float * {
-    $result = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_floatArray, 0 | 0 );
-}
-
-%include <carrays.i>
-#endif
-/* END Javascript syntax */
-
-/* BEGIN Python syntax  ----------------------------------------------------- */
-#ifdef SWIGPYTHON
-%include "../carrays_int16_t.i"
-%include "../carrays_float.i"
-
-%typemap(out) int16_t * {
-    $result = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_int16Array, 0 | 0 );
-}
-
-%typemap(out) float * {
-    $result = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_floatArray, 0 | 0 );
-}
-#endif
-/* END Python syntax */
-
-/* BEGIN Common SWIG syntax ------------------------------------------------- */
-%{
-#include "itg3200.hpp"
-%}
-%include "itg3200.hpp"
-/* END Common SWIG syntax */
diff --git a/src/itg3200/itg3200.json b/src/itg3200/itg3200.json
deleted file mode 100644
index 803b31f..0000000
--- a/src/itg3200/itg3200.json
+++ /dev/null
@@ -1,39 +0,0 @@
-{
-    "Library": "itg3200",
-    "Description": "API for the ITG-3200 3-Axis Digital Gyroscope",
-    "Sensor Class":
-    {
-        "Itg3200":
-        {
-            "Name": "Grove 3-Axis Digital Gyroscope",
-            "Description": "InvenSense* ITG-3200 is a 3-axis digital gyroscope. (https://www.sparkfun.com/datasheets/Sensors/Gyro/PS-ITG-3200-00-01.4.pdf) This sensor has been tested and can run at either 3.3V or 5V on Intel(R) Galileo.<br> <strong>However</strong>, it is incompatible with and not detected on the I2C bus by Intel(R) Edison using the Arduino* breakout board.",
-            "Aliases": ["itg3200"],
-            "Categories": ["gyroscope"],
-            "Connections": ["i2c"],
-            "Project Type": ["IMU", "prototyping"],
-            "Manufacturers": ["seeed"],
-            "Kits": [],
-            "Examples":
-            {
-                "Java": ["Itg3200_Example.java"],
-                "Python": ["itg3200.py"],
-                "Node.js": ["itg3200.js"],
-                "C++": ["itg3200.cxx"],
-                "C": []
-            },
-            "Specifications":
-            {
-                "Operating Voltage": {"unit": "V", "low": 3.3, "high": 5},
-                "Operating Current": {"unit": "mA", "typ": 6.5},
-                "Standby Current": {"unit": "uA", "typ": 5}
-
-            },
-            "Urls" :
-            {
-                "Product Pages": ["https://www.seeedstudio.com/Grove-3-Axis-Digital-Gyro-p-750.html"],
-                "Datasheets": ["http://wiki.seeed.cc/Grove-3-Axis_Digital_Gyro/", "https://raw.githubusercontent.com/SeeedDocument/Grove-3-Axis_Digital_Gyro/master/res/ITG-3200.pdf"],
-                "Schematics": []
-            }
-        }
-    }
-}
-- 
2.7.4

