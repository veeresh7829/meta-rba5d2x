From c85b1b4d98af1fb5f826ccf9cba8e2e353c1be12 Mon Sep 17 00:00:00 2001
From: Ganesh K <ganesh.k@phytec.in>
Date: Mon, 24 Jun 2019 14:55:45 +0530
Subject: [PATCH 2/2] deleted python examples in upm

---
 examples/python/a110x.py                  |  54 ---------
 examples/python/abp.py                    |  54 ---------
 examples/python/ad8232.py                 |  57 ---------
 examples/python/adafruitms1438-stepper.py |  89 --------------
 examples/python/adafruitms1438.py         |  84 -------------
 examples/python/adc121c021.py             |  58 ---------
 examples/python/ads1015.py                |  84 -------------
 examples/python/ads1115.py                |  87 --------------
 examples/python/adxl335.py                |  81 -------------
 examples/python/adxl345.py                |  46 -------
 examples/python/adxrs610.py               |  60 ---------
 examples/python/aeotecdsb09104.py         |  74 ------------
 examples/python/aeotecdw2e.py             |  83 -------------
 examples/python/aeotecsdg2.py             | 101 ----------------
 examples/python/aeotecss6.py              |  92 --------------
 examples/python/ak8975.py                 |  64 ----------
 examples/python/apa102.py                 |  50 --------
 examples/python/apds9002.py               |  53 --------
 examples/python/at42qt1070.py             |  80 ------------
 examples/python/bh1749.py                 |  60 ---------
 examples/python/bh1750.py                 |  55 ---------
 examples/python/bh1792.py                 |  58 ---------
 examples/python/biss0001.py               |  55 ---------
 examples/python/bma220.py                 |  60 ---------
 examples/python/bma250e.py                |  67 -----------
 examples/python/bmc150.py                 |  70 -----------
 examples/python/bme280.py                 |  65 ----------
 examples/python/bmg160.py                 |  67 -----------
 examples/python/bmi055.py                 |  70 -----------
 examples/python/bmi160.py                 |  71 -----------
 examples/python/bmm150.py                 |  65 ----------
 examples/python/bmp280.py                 |  63 ----------
 examples/python/bmpx8x.py                 |  68 -----------
 examples/python/bmx055.py                 |  76 ------------
 examples/python/bno055.py                 | 113 -----------------
 examples/python/button.py                 |  41 -------
 examples/python/buzzer.py                 |  51 --------
 examples/python/cjq4435.py                |  49 --------
 examples/python/collision.py              |  60 ---------
 examples/python/curieimu.py               |  61 ----------
 examples/python/cwlsxxa.py                |  66 ----------
 examples/python/dfrec.py                  |  61 ----------
 examples/python/dfrorp.py                 |  73 -----------
 examples/python/dfrph.py                  |  61 ----------
 examples/python/ds1307.py                 |  64 ----------
 examples/python/ds18b20.py                |  70 -----------
 examples/python/ds2413.py                 |  62 ----------
 examples/python/e50hx.py                  | 100 ---------------
 examples/python/eboled.py                 |  43 -------
 examples/python/ecezo.py                  |  66 ----------
 examples/python/ehr.py                    |  70 -----------
 examples/python/eldriver.py               |  60 ---------
 examples/python/electromagnet.py          |  63 ----------
 examples/python/emg.py                    |  55 ---------
 examples/python/enc03r.py                 |  66 ----------
 examples/python/es08a.py                  |  52 --------
 examples/python/gp2y0a.py                 |  65 ----------
 examples/python/gprs.py                   |  89 --------------
 examples/python/grovebutton.py            |  41 -------
 examples/python/grovecircularled.py       |  55 ---------
 examples/python/grovecollision.py         |  60 ---------
 examples/python/groveehr.py               |  70 -----------
 examples/python/groveeldriver.py          |  60 ---------
 examples/python/groveelectromagnet.py     |  63 ----------
 examples/python/groveemg.py               |  55 ---------
 examples/python/grovegprs.py              |  89 --------------
 examples/python/grovegsr.py               |  56 ---------
 examples/python/groveled.py               |  47 --------
 examples/python/groveledbar.py            |  67 -----------
 examples/python/grovelight.py             |  43 -------
 examples/python/grovelinefinder.py        |  54 ---------
 examples/python/grovemd-stepper.py        |  55 ---------
 examples/python/grovemd.py                |  51 --------
 examples/python/grovemoisture.py          |  64 ----------
 examples/python/groveo2.py                |  54 ---------
 examples/python/groverelay.py             |  50 --------
 examples/python/groverotary.py            |  50 --------
 examples/python/grovescam.py              |  66 ----------
 examples/python/groveslide.py             |  44 -------
 examples/python/grovespeaker.py           |  38 ------
 examples/python/grovetemp.py              |  47 --------
 examples/python/grovevdiv.py              |  57 ---------
 examples/python/grovewater.py             |  54 ---------
 examples/python/grovewfs.py               |  67 -----------
 examples/python/gsr.py                    |  56 ---------
 examples/python/guvas12d.py               |  57 ---------
 examples/python/h3lis331dl.py             |  79 ------------
 examples/python/h803x.py                  | 111 -----------------
 examples/python/hcsr04.py                 |  52 --------
 examples/python/hdc1000.py                |  57 ---------
 examples/python/hdxxvxta.py               |  64 ----------
 examples/python/hka5.py                   |  67 -----------
 examples/python/hm11.py                   | 110 -----------------
 examples/python/hmc5883l.py               |  49 --------
 examples/python/hmtrp.py                  | 144 ----------------------
 examples/python/hp20x.py                  |  58 ---------
 examples/python/ht9170.py                 |  58 ---------
 examples/python/htu21d.py                 |  44 -------
 examples/python/hwxpxx.py                 |  84 -------------
 examples/python/ili9341.py                |  79 ------------
 examples/python/ims.py                    |  44 -------
 examples/python/ina132.py                 |  53 --------
 examples/python/isd1820.py                |  74 ------------
 examples/python/itg3200.py                |  48 --------
 examples/python/jhd1313m1-lcd.py          |  42 -------
 examples/python/joystick12.py             |  55 ---------
 examples/python/kx122.py                  |  64 ----------
 examples/python/kxtj3.py                  |  61 ----------
 examples/python/l298-stepper.py           |  69 -----------
 examples/python/l298.py                   |  67 -----------
 examples/python/lcdks.py                  |  63 ----------
 examples/python/ldt0028.py                |  72 -----------
 examples/python/le910.py                  | 157 ------------------------
 examples/python/led.py                    |  44 -------
 examples/python/light.py                  |  43 -------
 examples/python/linefinder.py             |  54 ---------
 examples/python/lis2ds12.py               |  68 -----------
 examples/python/lis3dh.py                 |  72 -----------
 examples/python/lm35.py                   |  54 ---------
 examples/python/loudness.py               |  55 ---------
 examples/python/lsm303agr.py              |  71 -----------
 examples/python/lsm303d.py                |  71 -----------
 examples/python/lsm303dlh.py              |  90 --------------
 examples/python/lsm6ds3h.py               |  74 ------------
 examples/python/lsm6dsl.py                |  74 ------------
 examples/python/lsm9ds0.py                |  76 ------------
 examples/python/m24lr64e.py               |  53 --------
 examples/python/mag3110.py                |  62 ----------
 examples/python/make_oled_pic.py          |  78 ------------
 examples/python/max30100.py               |  71 -----------
 examples/python/maxsonarez.py             |  64 ----------
 examples/python/mb704x.py                 |  56 ---------
 examples/python/mcp2515-txrx.py           |  99 ---------------
 examples/python/mcp2515.py                |  79 ------------
 examples/python/md-stepper.py             |  55 ---------
 examples/python/md.py                     |  51 --------
 examples/python/mg811.py                  |  56 ---------
 examples/python/mhz16.py                  |  73 -----------
 examples/python/mic.py                    |  53 --------
 examples/python/mma7361.py                |  74 ------------
 examples/python/mma7660.py                |  73 -----------
 examples/python/mma8x5x.py                |  62 ----------
 examples/python/moisture.py               |  64 ----------
 examples/python/mpr121.py                 |  75 ------------
 examples/python/mpu60x0.py                |  70 -----------
 examples/python/mpu9150.py                |  75 ------------
 examples/python/mpu9250.py                |  75 ------------
 examples/python/mq2.py                    |  65 ----------
 examples/python/mq3.py                    |  65 ----------
 examples/python/mq303a.py                 |  78 ------------
 examples/python/mq4.py                    |  65 ----------
 examples/python/mq5.py                    |  65 ----------
 examples/python/mq6.py                    |  65 ----------
 examples/python/mq7.py                    |  65 ----------
 examples/python/mq8.py                    |  65 ----------
 examples/python/mq9.py                    |  65 ----------
 examples/python/ms5803.py                 |  58 ---------
 examples/python/nlgpio16.py               |  56 ---------
 examples/python/nmea_gps.py               |  54 ---------
 examples/python/nmea_gps_i2c.py           |  55 ---------
 examples/python/nunchuck.py               |  70 -----------
 examples/python/o2.py                     |  54 ---------
 examples/python/oled_ssd1308.py           | 100 ---------------
 examples/python/oled_ssd1327.py           | 194 ------------------------------
 examples/python/otp538u.py                |  61 ----------
 examples/python/ozwdump.py                | 104 ----------------
 examples/python/p9813.py                  |  48 --------
 examples/python/pn532-writeurl.py         | 109 -----------------
 examples/python/pn532.py                  |  88 --------------
 examples/python/ppd42ns.py                |  59 ---------
 examples/python/relay.py                  |  50 --------
 examples/python/rfr359f.py                |  55 ---------
 examples/python/rgbringcoder.py           |  94 ---------------
 examples/python/rhusb.py                  |  74 ------------
 examples/python/rn2903-p2p-rx.py          | 108 -----------------
 examples/python/rn2903-p2p-tx.py          | 114 ------------------
 examples/python/rn2903.py                 | 129 --------------------
 examples/python/rotary.py                 |  50 --------
 examples/python/rotaryencoder.py          |  52 --------
 examples/python/rpr220.py                 |  59 ---------
 examples/python/rsc.py                    |  60 ---------
 examples/python/scam.py                   |  66 ----------
 examples/python/sensortemplate.py         |  40 ------
 examples/python/sht1x.py                  |  58 ---------
 examples/python/si114x.py                 |  69 -----------
 examples/python/slide.py                  |  44 -------
 examples/python/sm130.py                  |  68 -----------
 examples/python/speaker.py                |  38 ------
 examples/python/speaker_pwm.py            |  44 -------
 examples/python/stepmotor.py              |  68 -----------
 examples/python/sx1276-fsk.py             |  94 ---------------
 examples/python/sx1276-lora.py            |  93 --------------
 examples/python/sx6119.py                 |  55 ---------
 examples/python/t3311.py                  |  95 ---------------
 examples/python/t8100.py                  | 102 ----------------
 examples/python/ta12200.py                |  57 ---------
 examples/python/tb7300.py                 | 101 ----------------
 examples/python/tcs3414cs.py              |  58 ---------
 examples/python/tcs37727.py               |  63 ----------
 examples/python/teams.py                  |  70 -----------
 examples/python/temperature.py            |  47 --------
 examples/python/tex00.py                  |  70 -----------
 examples/python/tm1637.py                 |  60 ---------
 examples/python/tmp006.py                 |  60 ---------
 examples/python/tp401.py                  |  59 ---------
 examples/python/tsl2561.py                |  51 --------
 examples/python/ttp223.py                 |  45 -------
 examples/python/tzemt400.py               |  87 --------------
 examples/python/uln200xa.py               |  69 -----------
 examples/python/urm37-uart.py             |  55 ---------
 examples/python/urm37.py                  |  55 ---------
 examples/python/vcap.py                   |  71 -----------
 examples/python/vdiv.py                   |  57 ---------
 examples/python/veml6070.py               |  52 --------
 examples/python/water.py                  |  54 ---------
 examples/python/waterlevel.py             |  57 ---------
 examples/python/wfs.py                    |  68 -----------
 examples/python/wheelencoder.py           |  55 ---------
 examples/python/wt5001.py                 | 107 ----------------
 examples/python/xbee.py                   | 119 ------------------
 examples/python/yg1006.py                 |  55 ---------
 examples/python/zfm20-register.py         | 132 --------------------
 examples/python/zfm20.py                  |  93 --------------
 223 files changed, 15055 deletions(-)
 delete mode 100755 examples/python/a110x.py
 delete mode 100755 examples/python/abp.py
 delete mode 100755 examples/python/ad8232.py
 delete mode 100755 examples/python/adafruitms1438-stepper.py
 delete mode 100755 examples/python/adafruitms1438.py
 delete mode 100755 examples/python/adc121c021.py
 delete mode 100755 examples/python/ads1015.py
 delete mode 100755 examples/python/ads1115.py
 delete mode 100755 examples/python/adxl335.py
 delete mode 100755 examples/python/adxl345.py
 delete mode 100755 examples/python/adxrs610.py
 delete mode 100755 examples/python/aeotecdsb09104.py
 delete mode 100755 examples/python/aeotecdw2e.py
 delete mode 100755 examples/python/aeotecsdg2.py
 delete mode 100755 examples/python/aeotecss6.py
 delete mode 100755 examples/python/ak8975.py
 delete mode 100755 examples/python/apa102.py
 delete mode 100755 examples/python/apds9002.py
 delete mode 100755 examples/python/at42qt1070.py
 delete mode 100755 examples/python/bh1749.py
 delete mode 100755 examples/python/bh1750.py
 delete mode 100755 examples/python/bh1792.py
 delete mode 100755 examples/python/biss0001.py
 delete mode 100755 examples/python/bma220.py
 delete mode 100755 examples/python/bma250e.py
 delete mode 100755 examples/python/bmc150.py
 delete mode 100755 examples/python/bme280.py
 delete mode 100755 examples/python/bmg160.py
 delete mode 100755 examples/python/bmi055.py
 delete mode 100755 examples/python/bmi160.py
 delete mode 100755 examples/python/bmm150.py
 delete mode 100755 examples/python/bmp280.py
 delete mode 100755 examples/python/bmpx8x.py
 delete mode 100755 examples/python/bmx055.py
 delete mode 100755 examples/python/bno055.py
 delete mode 100755 examples/python/button.py
 delete mode 100755 examples/python/buzzer.py
 delete mode 100755 examples/python/cjq4435.py
 delete mode 100755 examples/python/collision.py
 delete mode 100755 examples/python/curieimu.py
 delete mode 100755 examples/python/cwlsxxa.py
 delete mode 100755 examples/python/dfrec.py
 delete mode 100755 examples/python/dfrorp.py
 delete mode 100755 examples/python/dfrph.py
 delete mode 100755 examples/python/ds1307.py
 delete mode 100755 examples/python/ds18b20.py
 delete mode 100755 examples/python/ds2413.py
 delete mode 100755 examples/python/e50hx.py
 delete mode 100755 examples/python/eboled.py
 delete mode 100755 examples/python/ecezo.py
 delete mode 100755 examples/python/ehr.py
 delete mode 100755 examples/python/eldriver.py
 delete mode 100755 examples/python/electromagnet.py
 delete mode 100755 examples/python/emg.py
 delete mode 100755 examples/python/enc03r.py
 delete mode 100755 examples/python/es08a.py
 delete mode 100755 examples/python/gp2y0a.py
 delete mode 100755 examples/python/gprs.py
 delete mode 100755 examples/python/grovebutton.py
 delete mode 100755 examples/python/grovecircularled.py
 delete mode 100755 examples/python/grovecollision.py
 delete mode 100755 examples/python/groveehr.py
 delete mode 100755 examples/python/groveeldriver.py
 delete mode 100755 examples/python/groveelectromagnet.py
 delete mode 100755 examples/python/groveemg.py
 delete mode 100755 examples/python/grovegprs.py
 delete mode 100755 examples/python/grovegsr.py
 delete mode 100755 examples/python/groveled.py
 delete mode 100755 examples/python/groveledbar.py
 delete mode 100755 examples/python/grovelight.py
 delete mode 100755 examples/python/grovelinefinder.py
 delete mode 100755 examples/python/grovemd-stepper.py
 delete mode 100755 examples/python/grovemd.py
 delete mode 100755 examples/python/grovemoisture.py
 delete mode 100755 examples/python/groveo2.py
 delete mode 100755 examples/python/groverelay.py
 delete mode 100755 examples/python/groverotary.py
 delete mode 100755 examples/python/grovescam.py
 delete mode 100755 examples/python/groveslide.py
 delete mode 100755 examples/python/grovespeaker.py
 delete mode 100755 examples/python/grovetemp.py
 delete mode 100755 examples/python/grovevdiv.py
 delete mode 100755 examples/python/grovewater.py
 delete mode 100755 examples/python/grovewfs.py
 delete mode 100755 examples/python/gsr.py
 delete mode 100755 examples/python/guvas12d.py
 delete mode 100755 examples/python/h3lis331dl.py
 delete mode 100755 examples/python/h803x.py
 delete mode 100755 examples/python/hcsr04.py
 delete mode 100755 examples/python/hdc1000.py
 delete mode 100755 examples/python/hdxxvxta.py
 delete mode 100755 examples/python/hka5.py
 delete mode 100755 examples/python/hm11.py
 delete mode 100755 examples/python/hmc5883l.py
 delete mode 100755 examples/python/hmtrp.py
 delete mode 100755 examples/python/hp20x.py
 delete mode 100755 examples/python/ht9170.py
 delete mode 100755 examples/python/htu21d.py
 delete mode 100755 examples/python/hwxpxx.py
 delete mode 100755 examples/python/ili9341.py
 delete mode 100755 examples/python/ims.py
 delete mode 100755 examples/python/ina132.py
 delete mode 100755 examples/python/isd1820.py
 delete mode 100755 examples/python/itg3200.py
 delete mode 100755 examples/python/jhd1313m1-lcd.py
 delete mode 100755 examples/python/joystick12.py
 delete mode 100755 examples/python/kx122.py
 delete mode 100755 examples/python/kxtj3.py
 delete mode 100755 examples/python/l298-stepper.py
 delete mode 100755 examples/python/l298.py
 delete mode 100755 examples/python/lcdks.py
 delete mode 100755 examples/python/ldt0028.py
 delete mode 100755 examples/python/le910.py
 delete mode 100755 examples/python/led.py
 delete mode 100755 examples/python/light.py
 delete mode 100755 examples/python/linefinder.py
 delete mode 100755 examples/python/lis2ds12.py
 delete mode 100755 examples/python/lis3dh.py
 delete mode 100755 examples/python/lm35.py
 delete mode 100755 examples/python/loudness.py
 delete mode 100755 examples/python/lsm303agr.py
 delete mode 100755 examples/python/lsm303d.py
 delete mode 100755 examples/python/lsm303dlh.py
 delete mode 100755 examples/python/lsm6ds3h.py
 delete mode 100755 examples/python/lsm6dsl.py
 delete mode 100755 examples/python/lsm9ds0.py
 delete mode 100755 examples/python/m24lr64e.py
 delete mode 100755 examples/python/mag3110.py
 delete mode 100755 examples/python/make_oled_pic.py
 delete mode 100755 examples/python/max30100.py
 delete mode 100755 examples/python/maxsonarez.py
 delete mode 100755 examples/python/mb704x.py
 delete mode 100755 examples/python/mcp2515-txrx.py
 delete mode 100755 examples/python/mcp2515.py
 delete mode 100755 examples/python/md-stepper.py
 delete mode 100755 examples/python/md.py
 delete mode 100755 examples/python/mg811.py
 delete mode 100755 examples/python/mhz16.py
 delete mode 100755 examples/python/mic.py
 delete mode 100755 examples/python/mma7361.py
 delete mode 100755 examples/python/mma7660.py
 delete mode 100755 examples/python/mma8x5x.py
 delete mode 100755 examples/python/moisture.py
 delete mode 100755 examples/python/mpr121.py
 delete mode 100755 examples/python/mpu60x0.py
 delete mode 100755 examples/python/mpu9150.py
 delete mode 100755 examples/python/mpu9250.py
 delete mode 100755 examples/python/mq2.py
 delete mode 100755 examples/python/mq3.py
 delete mode 100755 examples/python/mq303a.py
 delete mode 100755 examples/python/mq4.py
 delete mode 100755 examples/python/mq5.py
 delete mode 100755 examples/python/mq6.py
 delete mode 100755 examples/python/mq7.py
 delete mode 100755 examples/python/mq8.py
 delete mode 100755 examples/python/mq9.py
 delete mode 100755 examples/python/ms5803.py
 delete mode 100755 examples/python/nlgpio16.py
 delete mode 100755 examples/python/nmea_gps.py
 delete mode 100755 examples/python/nmea_gps_i2c.py
 delete mode 100755 examples/python/nunchuck.py
 delete mode 100755 examples/python/o2.py
 delete mode 100755 examples/python/oled_ssd1308.py
 delete mode 100755 examples/python/oled_ssd1327.py
 delete mode 100755 examples/python/otp538u.py
 delete mode 100755 examples/python/ozwdump.py
 delete mode 100755 examples/python/p9813.py
 delete mode 100755 examples/python/pn532-writeurl.py
 delete mode 100755 examples/python/pn532.py
 delete mode 100755 examples/python/ppd42ns.py
 delete mode 100755 examples/python/relay.py
 delete mode 100755 examples/python/rfr359f.py
 delete mode 100755 examples/python/rgbringcoder.py
 delete mode 100755 examples/python/rhusb.py
 delete mode 100755 examples/python/rn2903-p2p-rx.py
 delete mode 100755 examples/python/rn2903-p2p-tx.py
 delete mode 100755 examples/python/rn2903.py
 delete mode 100755 examples/python/rotary.py
 delete mode 100755 examples/python/rotaryencoder.py
 delete mode 100755 examples/python/rpr220.py
 delete mode 100755 examples/python/rsc.py
 delete mode 100755 examples/python/scam.py
 delete mode 100755 examples/python/sensortemplate.py
 delete mode 100755 examples/python/sht1x.py
 delete mode 100755 examples/python/si114x.py
 delete mode 100755 examples/python/slide.py
 delete mode 100755 examples/python/sm130.py
 delete mode 100755 examples/python/speaker.py
 delete mode 100755 examples/python/speaker_pwm.py
 delete mode 100755 examples/python/stepmotor.py
 delete mode 100755 examples/python/sx1276-fsk.py
 delete mode 100755 examples/python/sx1276-lora.py
 delete mode 100755 examples/python/sx6119.py
 delete mode 100755 examples/python/t3311.py
 delete mode 100755 examples/python/t8100.py
 delete mode 100755 examples/python/ta12200.py
 delete mode 100755 examples/python/tb7300.py
 delete mode 100755 examples/python/tcs3414cs.py
 delete mode 100755 examples/python/tcs37727.py
 delete mode 100755 examples/python/teams.py
 delete mode 100755 examples/python/temperature.py
 delete mode 100755 examples/python/tex00.py
 delete mode 100755 examples/python/tm1637.py
 delete mode 100755 examples/python/tmp006.py
 delete mode 100755 examples/python/tp401.py
 delete mode 100755 examples/python/tsl2561.py
 delete mode 100755 examples/python/ttp223.py
 delete mode 100755 examples/python/tzemt400.py
 delete mode 100755 examples/python/uln200xa.py
 delete mode 100755 examples/python/urm37-uart.py
 delete mode 100755 examples/python/urm37.py
 delete mode 100755 examples/python/vcap.py
 delete mode 100755 examples/python/vdiv.py
 delete mode 100755 examples/python/veml6070.py
 delete mode 100755 examples/python/water.py
 delete mode 100755 examples/python/waterlevel.py
 delete mode 100755 examples/python/wfs.py
 delete mode 100755 examples/python/wheelencoder.py
 delete mode 100755 examples/python/wt5001.py
 delete mode 100755 examples/python/xbee.py
 delete mode 100755 examples/python/yg1006.py
 delete mode 100755 examples/python/zfm20-register.py
 delete mode 100755 examples/python/zfm20.py

diff --git a/examples/python/a110x.py b/examples/python/a110x.py
deleted file mode 100755
index 38937b5..0000000
--- a/examples/python/a110x.py
+++ /dev/null
@@ -1,54 +0,0 @@
-#!/usr/bin/env python
-# Author: Zion Orent <zorent@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_a110x as upmA110x
-
-def main():
-    # Instantiate a Hall Effect magnet sensor on digital pin D2
-    myHallEffectSensor = upmA110x.A110X(2)
-
-    ## Exit handlers ##
-    # This function stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit, including functions from myHallEffectSensor
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    while(1):
-        if (myHallEffectSensor.magnetDetected()):
-            print("Magnet (south polarity) detected.")
-        else:
-            print("No magnet detected.")
-        time.sleep(1)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/abp.py b/examples/python/abp.py
deleted file mode 100755
index 8b93101..0000000
--- a/examples/python/abp.py
+++ /dev/null
@@ -1,54 +0,0 @@
-#!/usr/bin/env python
-# Author: Abhishek Malik <abhishek.malik@intel.com>
-# Copyright (c) 2017 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_abp as abp
-
-def main():
-    # Instantiate a Honeywell ABP Pressure sensor on the I2C bus 0
-    abp_sensor = abp.ABP(0, 0x28);
-
-    ## Exit handlers ##
-    # This function stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit, including functions from abpdrrt005pg2a5
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    # Read the value every second and detect the pressure
-    while(1):
-        abp_sensor.update()
-        print("Pressure: {0}".format(abp_sensor.getPressure()))
-        print("Temperature: {0}".format(abp_sensor.getTemperature()))
-        time.sleep(1)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/ad8232.py b/examples/python/ad8232.py
deleted file mode 100755
index d8fd03a..0000000
--- a/examples/python/ad8232.py
+++ /dev/null
@@ -1,57 +0,0 @@
-#!/usr/bin/env python
-# Author: Jon Trulson <jtrulson@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_ad8232 as upmAD8232
-
-def main():
-    # Instantiate a AD8232 sensor on digital pins 10 (LO+), 11 (LO-)
-    # and an analog pin, 0 (OUTPUT)
-    myAD8232 = upmAD8232.AD8232(10, 11, 0)
-
-    ## Exit handlers ##
-    # This function stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit, including functions from myAD8232
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    # Output the raw numbers from the ADC, for plotting elsewhere.
-    # A return of 0 indicates a Lead Off (LO) condition.
-    # In theory, this data could be fed to software like Processing
-    # (https://www.processing.org/) to plot the data just like an
-    # EKG you would see in a hospital.
-    while(1):
-        print(myAD8232.value())
-        time.sleep(.001)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/adafruitms1438-stepper.py b/examples/python/adafruitms1438-stepper.py
deleted file mode 100755
index 543c535..0000000
--- a/examples/python/adafruitms1438-stepper.py
+++ /dev/null
@@ -1,89 +0,0 @@
-#!/usr/bin/env python
-# Author: Zion Orent <zorent@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_adafruitms1438 as upmAdafruitms1438
-
-def main():
-    # Import header values
-    I2CBus = upmAdafruitms1438.ADAFRUITMS1438_I2C_BUS
-    I2CAddr = upmAdafruitms1438.ADAFRUITMS1438_DEFAULT_I2C_ADDR
-
-    M12Motor = upmAdafruitms1438.AdafruitMS1438.STEPMOTOR_M12
-    MotorDirCW = upmAdafruitms1438.AdafruitMS1438.DIR_CW
-    MotorDirCCW = upmAdafruitms1438.AdafruitMS1438.DIR_CCW
-
-    # Instantiate an Adafruit MS 1438 on I2C bus 0
-    myMotorShield = upmAdafruitms1438.AdafruitMS1438(I2CBus, I2CAddr)
-
-    ## Exit handlers ##
-    # This stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit,
-    # including functions from myMotorShield
-    def exitHandler():
-        myMotorShield.disableStepper(M12Motor)
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    # Setup for use with a stepper motor connected to the M1 & M2 ports
-
-    # set a PWM period of 50Hz
-
-    # disable first, to be safe
-    myMotorShield.disableStepper(M12Motor)
-
-    # configure for a NEMA-17, 200 steps per revolution
-    myMotorShield.stepConfig(M12Motor, 200)
-
-    # set speed at 10 RPM's
-    myMotorShield.setStepperSpeed(M12Motor, 10);
-    myMotorShield.setStepperDirection(M12Motor, MotorDirCW)
-
-    # enable
-    print("Enabling...")
-    myMotorShield.enableStepper(M12Motor)
-
-    print("Rotating 1 full revolution at 10 RPM speed.")
-    myMotorShield.stepperSteps(M12Motor, 200)
-
-    print("Sleeping for 2 seconds...")
-    time.sleep(2)
-    print("Rotating 1/2 revolution in opposite direction at 10 RPM speed.")
-
-    myMotorShield.setStepperDirection(M12Motor, MotorDirCCW)
-    myMotorShield.stepperSteps(M12Motor, 100)
-
-    print("Disabling...")
-
-    # exitHandler runs automatically
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/adafruitms1438.py b/examples/python/adafruitms1438.py
deleted file mode 100755
index 800e056..0000000
--- a/examples/python/adafruitms1438.py
+++ /dev/null
@@ -1,84 +0,0 @@
-#!/usr/bin/env python
-# Author: Zion Orent <zorent@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_adafruitms1438 as upmAdafruitms1438
-
-def main():
-    # Import header values
-    I2CBus = upmAdafruitms1438.ADAFRUITMS1438_I2C_BUS
-    I2CAddr = upmAdafruitms1438.ADAFRUITMS1438_DEFAULT_I2C_ADDR
-
-    M3Motor = upmAdafruitms1438.AdafruitMS1438.MOTOR_M3
-    MotorDirCW = upmAdafruitms1438.AdafruitMS1438.DIR_CW
-    MotorDirCCW = upmAdafruitms1438.AdafruitMS1438.DIR_CCW
-
-    # Instantiate an Adafruit MS 1438 on I2C bus 0
-    myMotorShield = upmAdafruitms1438.AdafruitMS1438(I2CBus, I2CAddr)
-
-    ## Exit handlers ##
-    # This stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit,
-    # including functions from myMotorShield
-    def exitHandler():
-        myMotorShield.disableMotor(M3Motor)
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    # Setup for use with a DC motor connected to the M3 port
-
-    # set a PWM period of 50Hz
-    myMotorShield.setPWMPeriod(50)
-
-    # disable first, to be safe
-    myMotorShield.disableMotor(M3Motor)
-
-    # set speed at 50%
-    myMotorShield.setMotorSpeed(M3Motor, 50)
-    myMotorShield.setMotorDirection(M3Motor, MotorDirCW)
-
-    print ("Spin M3 at half speed for 3 seconds, "
-    "then reverse for 3 seconds.")
-    myMotorShield.enableMotor(M3Motor)
-
-    time.sleep(3)
-
-    print("Reversing M3")
-    myMotorShield.setMotorDirection(M3Motor, MotorDirCCW)
-
-    time.sleep(3)
-
-    print("Stopping M3")
-
-    # exitHandler runs automatically
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/adc121c021.py b/examples/python/adc121c021.py
deleted file mode 100755
index 6076440..0000000
--- a/examples/python/adc121c021.py
+++ /dev/null
@@ -1,58 +0,0 @@
-#!/usr/bin/env python
-# Author: Zion Orent <zorent@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_adc121c021 as upmAdc121c021
-
-def main():
-    # Instantiate an ADC121C021 on I2C bus 0
-    busID = upmAdc121c021.ADC121C021_I2C_BUS
-    I2CAddr = upmAdc121c021.ADC121C021_DEFAULT_I2C_ADDR
-
-    myAnalogDigitalConv = upmAdc121c021.ADC121C021(busID, I2CAddr)
-
-    ## Exit handlers ##
-    # This stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This lets you run code on exit,
-    # including functions from myAnalogDigitalConv
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    # get the data every 50 milliseconds
-    while(1):
-        val = myAnalogDigitalConv.value()
-        voltsVal = myAnalogDigitalConv.valueToVolts(val)
-        print("ADC value: %s Volts = %s" % (val, voltsVal))
-        time.sleep(.05)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/ads1015.py b/examples/python/ads1015.py
deleted file mode 100755
index 2b49fa3..0000000
--- a/examples/python/ads1015.py
+++ /dev/null
@@ -1,84 +0,0 @@
-#!/usr/bin/env python
-# Author: Mihai Tudor Panu <mihai.tudor.panu@intel.com>
-# Copyright (c) 2016 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-
-# This example demonstrates how to use one the ADS1015 ADC on the Grove Joule
-# Shield or the Sparkfun ADC Block for Edison with devices that output a small
-# differential voltage (e.g. geophones, piezoelectric bands or pads,
-# thermocouples).
-
-from __future__ import print_function
-from threading import Timer
-from time import sleep
-from upm import pyupm_ads1x15 as upm
-
-def stop():
-    global running
-    running = False
-
-def main():
-    global running
-    running = True
-    fileName = './ads1015.data' # Output filename
-    id = 0 # Sample number
-
-    # Initialize and configure the ADS1015
-    ads1015 = upm.ADS1015(0, 0x48)
-
-    # Put the ADC into differential mode for pins A0 and A1
-    ads1015.getSample(upm.ADS1X15.DIFF_0_1)
-
-    # Set the gain based on expected VIN range to -/+ 2.048 V
-    # Can be adjusted based on application to as low as -/+ 0.256 V, see API
-    # documentation for details
-    ads1015.setGain(upm.ADS1X15.GAIN_TWO)
-
-    # Set the sample rate to 3300 samples per second (max) and turn on continuous
-    # sampling
-    ads1015.setSPS(upm.ADS1015.SPS_3300)
-    ads1015.setContinuous(True)
-
-    # Open the output file
-    try:
-        f = open(fileName, 'w')
-    except OSError as e:
-        print('Cannot open output file:', e)
-        return
-
-    # Setup a timer to stop logging after 10 seconds
-    t = Timer(10, stop)
-    t.start()
-
-    # Read sensor and write to file every 1 ms
-    while running:
-        f.write(str(id) + ' %.7f' % ads1015.getLastSample() + '\n')
-        id += 1
-        sleep(0.001)
-
-    # Close and exit
-    f.close()
-    print('Wrote', id, 'samples to file:', fileName)
-    return
-
-if __name__ == '__main__':
-    main()
-
diff --git a/examples/python/ads1115.py b/examples/python/ads1115.py
deleted file mode 100755
index c4fb151..0000000
--- a/examples/python/ads1115.py
+++ /dev/null
@@ -1,87 +0,0 @@
-#!/usr/bin/env python
-# Author: Mihai Tudor Panu <mihai.tudor.panu@intel.com>
-# Copyright (c) 2016 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-
-# This example demonstrates how to use one of the ADS1115 ADCs on the
-# DFRobot Joule Shield with devices that output a small differential
-# voltage (e.g. geophones, piezoelectric bands or pads, thermocouples).
-
-from __future__ import print_function
-from threading import Timer
-from time import sleep
-from upm import pyupm_ads1x15 as upm
-
-def stop():
-    global running
-    running = False
-
-def main():
-    global running
-    running = True
-    fileName = './ads1115.data' # Output filename
-    id = 0 # Sample number
-
-    # Initialize and configure the ADS1115 for the SM-24 Geophone
-    # There are two ADS1115 chips on the DFRobot Joule Shield on the same I2C bus
-    #     - 0x48 gives access to pins A0 - A3
-    #     - 0x49 gives access to pins A4 - A7
-    ads1115 = upm.ADS1115(0, 0x48)
-
-    # Put the ADC into differential mode for pins A0 and A1,
-    # the SM-24 Geophone is connected to these pins
-    ads1115.getSample(upm.ADS1X15.DIFF_0_1)
-
-    # Set the gain based on expected VIN range to -/+ 2.048 V
-    # Can be adjusted based on application to as low as -/+ 0.256 V, see API
-    # documentation for details
-    ads1115.setGain(upm.ADS1X15.GAIN_TWO)
-
-    # Set the sample rate to 860 samples per second (max) and turn on continuous
-    # sampling
-    ads1115.setSPS(upm.ADS1115.SPS_860)
-    ads1115.setContinuous(True)
-
-    # Open the output file
-    try:
-        f = open(fileName, 'w')
-    except OSError as e:
-        print('Cannot open output file:', e)
-        return
-
-    # Setup a timer to stop logging after 10 seconds
-    t = Timer(10, stop)
-    t.start()
-
-    # Read sensor and write to file every 1 ms
-    while running:
-        f.write(str(id) + ' %.7f' % ads1115.getLastSample() + '\n')
-        id += 1
-        sleep(0.001)
-
-    # Close and exit
-    f.close()
-    print('Wrote', id, 'samples to file:', fileName)
-    return
-
-if __name__ == '__main__':
-    main()
-
diff --git a/examples/python/adxl335.py b/examples/python/adxl335.py
deleted file mode 100755
index 25d1e68..0000000
--- a/examples/python/adxl335.py
+++ /dev/null
@@ -1,81 +0,0 @@
-#!/usr/bin/env python
-# Author: Zion Orent <zorent@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_adxl335 as upmAdxl335
-
-def main():
-    myAnalogAccel = upmAdxl335.ADXL335(0, 1, 2)
-
-    print("Please make sure the sensor is completely still.")
-    print("Sleeping for 2 seconds")
-    time.sleep(2)
-
-    ## Exit handlers ##
-    # This stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit,
-    # including functions from myAnalogAccel
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    print("Calibrating...")
-    myAnalogAccel.calibrate()
-
-    x = upmAdxl335.new_intPointer()
-    y = upmAdxl335.new_intPointer()
-    z = upmAdxl335.new_intPointer()
-
-    aX = upmAdxl335.new_floatPointer()
-    aY = upmAdxl335.new_floatPointer()
-    aZ = upmAdxl335.new_floatPointer()
-
-    while (1):
-        myAnalogAccel.values(x, y, z)
-        outputStr = "Raw Values: X: {0} Y: {1} Z: {2}".format(
-        upmAdxl335.intPointer_value(x), upmAdxl335.intPointer_value(y),
-        upmAdxl335.intPointer_value(z))
-        print(outputStr)
-
-        myAnalogAccel.acceleration(aX, aY, aZ)
-        outputStr = ("Acceleration: X: {0}g\n"
-        "Acceleration: Y: {1}g\n"
-        "Acceleration: Z: {2}g").format(upmAdxl335.floatPointer_value(aX),
-        upmAdxl335.floatPointer_value(aY),
-        upmAdxl335.floatPointer_value(aZ))
-        print(outputStr)
-
-        print(" ")
-
-        time.sleep(.2)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/adxl345.py b/examples/python/adxl345.py
deleted file mode 100755
index e87a95d..0000000
--- a/examples/python/adxl345.py
+++ /dev/null
@@ -1,46 +0,0 @@
-#!/usr/bin/env python
-from __future__ import print_function
-# Author: Mihai Tudor Panu <mihai.tudor.panu@intel.com>
-# Copyright (c) 2014 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from time import sleep
-from upm import pyupm_adxl345 as adxl345
-
-def main():
-    # Create an I2C accelerometer object
-    adxl = adxl345.Adxl345(0)
-
-    # Loop indefinitely
-    while True:
-        adxl.update() # Update the data
-        raw = adxl.getRawValues() # Read raw sensor data
-        force = adxl.getAcceleration() # Read acceleration force (g)
-        print("Raw: %6d %6d %6d" % (raw[0], raw[1], raw[2]))
-        print("ForceX: %5.2f g" % (force[0]))
-        print("ForceY: %5.2f g" % (force[1]))
-        print("ForceZ: %5.2f g\n" % (force[2]))
-
-        # Sleep for 1 s
-        sleep(1)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/adxrs610.py b/examples/python/adxrs610.py
deleted file mode 100755
index cff8f80..0000000
--- a/examples/python/adxrs610.py
+++ /dev/null
@@ -1,60 +0,0 @@
-#!/usr/bin/env python
-# Author: Jon Trulson <jtrulson@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_adxrs610 as sensorObj
-
-def main():
-    # Instantiate a ADXRS610 sensor on analog pin A0 (dataout), and
-    # analog A1 (temp out) with an analog reference voltage of
-    # 5.0
-    sensor = sensorObj.ADXRS610(0, 1, 5.0)
-
-    ## Exit handlers ##
-    # This function stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    # set a deadband region around the zero point to report 0.0 (optional)
-    sensor.setDeadband(0.015);
-
-    # Every tenth of a second, sample the ADXRS610 and output it's
-    # corresponding temperature and angular velocity
-
-    while (1):
-        print("Vel (deg/s):", sensor.getAngularVelocity())
-        print("Temp (C):", sensor.getTemperature())
-        time.sleep(.1)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/aeotecdsb09104.py b/examples/python/aeotecdsb09104.py
deleted file mode 100755
index c9d7b70..0000000
--- a/examples/python/aeotecdsb09104.py
+++ /dev/null
@@ -1,74 +0,0 @@
-#!/usr/bin/env python
-# Author: Jon Trulson <jtrulson@ics.com>
-# Copyright (c) 2016 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_ozw as sensorObj
-
-def main():
-    # This function lets you run code on exit
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-
-    defaultDev = "/dev/ttyACM0"
-    if (len(sys.argv) > 1):
-        defaultDev = sys.argv[1]
-    print("Using device", defaultDev)
-
-    # Instantiate an Aeotec DSB09104 instance, on device node 12.  You
-    # will almost certainly need to change this to reflect your own
-    # network.  Use the ozwdump example to see what nodes are available.
-    sensor = sensorObj.AeotecDSB09104(12)
-
-    # The first thing to do is create options, then lock them when done.
-    sensor.optionsCreate()
-    sensor.optionsLock()
-
-    # Next, initialize it.
-    print("Initializing, this may take awhile depending on your ZWave network")
-
-    sensor.init(defaultDev)
-    print("Initialization complete")
-
-    print("Querying data...")
-
-    while (True):
-        sensor.update()
-
-        print("Watts, Channel 1: %0.03f W" % sensor.getWattsC1())
-        print("Watts, Channel 2: %0.03f W" % sensor.getWattsC2())
-        print("Watts, Channel 3: %0.03f W" % sensor.getWattsC3())
-
-        print("Energy, Channel 1: %0.03f kWh" % sensor.getEnergyC1())
-        print("Energy, Channel 2: %0.03f kWh" % sensor.getEnergyC2())
-        print("Energy, Channel 3: %0.03f kWh" % sensor.getEnergyC3())
-
-        print("Battery Level: %d\n" % sensor.getBatteryLevel())
-        time.sleep(3)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/aeotecdw2e.py b/examples/python/aeotecdw2e.py
deleted file mode 100755
index f51dfa9..0000000
--- a/examples/python/aeotecdw2e.py
+++ /dev/null
@@ -1,83 +0,0 @@
-#!/usr/bin/env python
-# Author: Jon Trulson <jtrulson@ics.com>
-# Copyright (c) 2016 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_ozw as sensorObj
-
-def main():
-    # This function lets you run code on exit
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-
-    defaultDev = "/dev/ttyACM0"
-    if (len(sys.argv) > 1):
-        defaultDev = sys.argv[1]
-    print("Using device", defaultDev)
-
-    # Instantiate an Aeotec Door/Window 2nd Edition sensor instance, on
-    # device node 10.  You will almost certainly need to change this to
-    # reflect your own network.  Use the ozwdump example to see what nodes
-    # are available.
-    sensor = sensorObj.AeotecDW2E(10)
-
-    # The first thing to do is create options, then lock them when done.
-    sensor.optionsCreate()
-    sensor.optionsLock()
-
-    # Next, initialize it.
-    print("Initializing, this may take awhile depending on your ZWave network")
-
-    sensor.init(defaultDev)
-    print("Initialization complete")
-
-    print("Querying data...")
-
-    while (True):
-        if (sensor.isDeviceAvailable()):
-            print("Alarm status:", end=' ')
-            print(sensor.isAlarmTripped())
-
-            print("Tamper Switch status:", end=' ')
-            print(sensor.isTamperTripped())
-
-            print("Battery Level:", end=' ')
-            print(sensor.getBatteryLevel(), end=' ')
-            print("%")
-
-            print()
-        else:
-            print("Device has not yet responded to probe.")
-            print("Try waking it, or wait until it wakes itself if ", end=' ')
-            print("configured to do so.")
-
-            print()
-
-        time.sleep(1)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/aeotecsdg2.py b/examples/python/aeotecsdg2.py
deleted file mode 100755
index e1e1766..0000000
--- a/examples/python/aeotecsdg2.py
+++ /dev/null
@@ -1,101 +0,0 @@
-#!/usr/bin/env python
-# Author: Jon Trulson <jtrulson@ics.com>
-# Copyright (c) 2016 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_ozw as sensorObj
-
-def main():
-    # This function lets you run code on exit
-    def exitHandler():
-        print("Turning switch off and sleeping for 5 seconds...")
-        sensor.off()
-        time.sleep(5)
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-
-    defaultDev = "/dev/ttyACM0"
-    if (len(sys.argv) > 1):
-        defaultDev = sys.argv[1]
-    print("Using device", defaultDev)
-
-    # Instantiate an Aeotec Smart Dimmer Gen2 instance, on device node
-    # 9.  You will almost certainly need to change this to reflect your
-    # own network.  Use the ozwdump example to see what nodes are
-    # available.
-    sensor = sensorObj.AeotecSDG2(9)
-
-    # The first thing to do is create options, then lock them when done.
-    sensor.optionsCreate()
-    sensor.optionsLock()
-
-    # Next, initialize it.
-    print("Initializing, this may take awhile depending on your ZWave network")
-
-    sensor.init(defaultDev)
-    print("Initialization complete")
-
-    # turn light on
-    print("Turning switch on, then sleeping for 5 secs")
-    sensor.on();
-    time.sleep(5);
-
-    print("Querying data...")
-    dim = False;
-    while (True):
-        # put on a light show...
-        if (dim):
-            sensor.setLevel(25)
-        else:
-            sensor.on()
-
-        dim = not dim;
-
-        sensor.update()
-
-        print("Current Level:", end=' ')
-        print(sensor.getLevel())
-
-        print("Volts:", end=' ')
-        print(sensor.getVolts(), end=' ')
-        print("volts")
-
-        print("Energy Consumption:", end=' ')
-        print(sensor.getEnergy(), end=' ')
-        print("kWh")
-
-        print("Watts:", end=' ')
-        print(sensor.getWatts())
-
-        print("Current:", end=' ')
-        print(sensor.getCurrent(), end=' ')
-        print("amps")
-
-        print()
-        time.sleep(5)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/aeotecss6.py b/examples/python/aeotecss6.py
deleted file mode 100755
index b1b0616..0000000
--- a/examples/python/aeotecss6.py
+++ /dev/null
@@ -1,92 +0,0 @@
-#!/usr/bin/env python
-# Author: Jon Trulson <jtrulson@ics.com>
-# Copyright (c) 2016 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_ozw as sensorObj
-
-def main():
-    # This function lets you run code on exit
-    def exitHandler():
-        print("Turning switch off and sleeping for 5 seconds...")
-        sensor.off()
-        time.sleep(5)
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-
-    defaultDev = "/dev/ttyACM0"
-    if (len(sys.argv) > 1):
-        defaultDev = sys.argv[1]
-    print("Using device", defaultDev)
-
-    # Instantiate an Aeotec Smart Switch 6 instance, on device node 11.
-    # You will almost certainly need to change this to reflect your own
-    # network.  Use the ozwdump example to see what nodes are available.
-    sensor = sensorObj.AeotecSS6(11)
-
-    # The first thing to do is create options, then lock them when done.
-    sensor.optionsCreate()
-    sensor.optionsLock()
-
-    # Next, initialize it.
-    print("Initializing, this may take awhile depending on your ZWave network")
-
-    sensor.init(defaultDev)
-    print("Initialization complete")
-
-    # turn light on
-    print("Turning switch on, then sleeping for 5 secs")
-    sensor.on();
-    time.sleep(5);
-
-    print("Querying data...")
-
-    while (True):
-        sensor.update()
-
-        print("Switch status:", end=' ')
-        print(sensor.isOn())
-
-        print("Volts:", end=' ')
-        print(sensor.getVolts(), end=' ')
-        print("volts")
-
-        print("Energy Consumption:", end=' ')
-        print(sensor.getEnergy(), end=' ')
-        print("kWh")
-
-        print("Watts:", end=' ')
-        print(sensor.getWatts())
-
-        print("Current:", end=' ')
-        print(sensor.getCurrent(), end=' ')
-        print("amps")
-
-        print()
-        time.sleep(3)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/ak8975.py b/examples/python/ak8975.py
deleted file mode 100755
index 63b54d3..0000000
--- a/examples/python/ak8975.py
+++ /dev/null
@@ -1,64 +0,0 @@
-#!/usr/bin/env python
-# Author: Jon Trulson <jtrulson@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_mpu9150 as sensorObj
-
-def main():
-    # Instantiate an AK8975 on I2C bus 0
-    sensor = sensorObj.AK8975()
-
-    ## Exit handlers ##
-    # This function stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    sensor.init()
-
-    x = sensorObj.new_floatp()
-    y = sensorObj.new_floatp()
-    z = sensorObj.new_floatp()
-
-    while (1):
-        sensor.update()
-        sensor.getMagnetometer(x, y, z)
-        print("Magnetometer:  MX: ", sensorObj.floatp_value(x), end=' ')
-        print(" MY: ", sensorObj.floatp_value(y), end=' ')
-        print(" MZ: ", sensorObj.floatp_value(z))
-
-        print()
-
-        time.sleep(.5)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/apa102.py b/examples/python/apa102.py
deleted file mode 100755
index 811f961..0000000
--- a/examples/python/apa102.py
+++ /dev/null
@@ -1,50 +0,0 @@
-#!/usr/bin/env python
-# Author:  Yannick Adam <yannick.adam@gmail.com>
-# Copyright (c) 2016 Yannick Adam
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_apa102 as mylib
-
-def main():
-    # Instantiate a strip of 30 LEDs on SPI bus 0
-    ledStrip = mylib.APA102(30, 0, False)
-
-    ## Exit handlers ##
-    # This stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # Register exit handlers
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    print("Setting all LEDs to Green")
-    ledStrip.setAllLeds(31, 0, 255, 0)
-
-    print("Setting LEDs between 10 and 20 to Red")
-    ledStrip.setLeds(10, 20, 31, 255, 0, 0)
-
-    print("Setting LED 15 to Blue")
-    ledStrip.setLed(15, 31, 0, 0, 255)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/apds9002.py b/examples/python/apds9002.py
deleted file mode 100755
index 1b9eaed..0000000
--- a/examples/python/apds9002.py
+++ /dev/null
@@ -1,53 +0,0 @@
-#!/usr/bin/env python
-# Author: Zion Orent <zorent@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_apds9002 as upmApds9002
-
-def main():
-    # Instantiate a Grove Luminance sensor on analog pin A0
-    myLuminance = upmApds9002.APDS9002(0)
-
-    ## Exit handlers ##
-    # This stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This lets you run code on exit, including functions from myLuminance
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    while(1):
-        print("Luminance value is {0}".format(
-        myLuminance.value()))
-
-        time.sleep(1)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/at42qt1070.py b/examples/python/at42qt1070.py
deleted file mode 100755
index 6ed7c69..0000000
--- a/examples/python/at42qt1070.py
+++ /dev/null
@@ -1,80 +0,0 @@
-#!/usr/bin/env python
-# Author: Zion Orent <zorent@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_at42qt1070 as upmAt42qt1070
-
-def main():
-    # functions
-    def printButtons(touchObj):
-        buttonPressed = False
-        buttons = touchObj.getButtons()
-
-        sys.stdout.write("Buttons Pressed: ")
-        for i in range(7):
-            if (buttons & (1 << i)):
-                sys.stdout.write(str(i) + " ")
-                buttonPressed = True
-
-        if (not buttonPressed):
-            sys.stdout.write("None")
-
-        print(" ")
-
-        if (touchObj.isCalibrating()):
-            print("Calibration is occurring.")
-
-        if (touchObj.isOverflowed()):
-            print("Overflow was detected.")
-
-    # Global code that runs on startup
-
-    I2C_BUS = upmAt42qt1070.AT42QT1070_I2C_BUS
-    DEFAULT_I2C_ADDR = upmAt42qt1070.AT42QT1070_DEFAULT_I2C_ADDR
-
-    # Instantiate an AT42QT1070 on I2C bus 0
-    myTouchSensor = upmAt42qt1070.AT42QT1070(I2C_BUS,
-                                             DEFAULT_I2C_ADDR)
-
-    # Exit handlers
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # This function lets you run code on exit, including functions from myTouchSensor
-    atexit.register(exitHandler)
-    # This function stops python from printing a stacktrace when you hit control-C
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    # Print the button being touched every 0.1 seconds
-    while(1):
-        myTouchSensor.updateState()
-        printButtons(myTouchSensor)
-        time.sleep(.1)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/bh1749.py b/examples/python/bh1749.py
deleted file mode 100755
index 8d3f306..0000000
--- a/examples/python/bh1749.py
+++ /dev/null
@@ -1,60 +0,0 @@
-# The MIT License (MIT)
-#
-# Author: Assam Boudjelthia
-# Copyright (c) 2018 Rohm Semiconductor.
-#
-# Permission is hereby granted, free of charge, to any person obtaining a copy of
-# this software and associated documentation files (the "Software"), to deal in
-# the Software without restriction, including without limitation the rights to
-# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
-# the Software, and to permit persons to whom the Software is furnished to do so,
-# subject to the following conditions:
-#
-# The above copyright notice and this permission notice shall be included in all
-# copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-import time, sys, signal, atexit
-from upm import pyupm_bh1749
-
-
-def main():
-    bh1749_sensor = pyupm_bh1749.BH1749()
-
-    bh1749_sensor.SensorInit(pyupm_bh1749.INT_JUDGE_1,
-						pyupm_bh1749.MEAS_240MS,
-						pyupm_bh1749.RGB_GAIN_1X,
-						pyupm_bh1749.IR_GAIN_1X,
-						pyupm_bh1749.RED)
-    bh1749_sensor.SetThresholdHigh(511)
-
-    # Prevent stack printing on CTRL^C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    sampleCounter = 10
-    waitTime = bh1749_sensor.GetMeasurementTime()
-    print("Color readings: ")
-    while sampleCounter > 0:
-        [r, g, b, ir, g2] = bh1749_sensor.GetMeasurements()
-        print ("R: %d, y: %d, G: %d, IR: %d, G2: %d" % (r, g, b, ir, g2))
-        
-        time.sleep(waitTime / 1000.0)
-        sampleCounter -= 1
-
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/bh1750.py b/examples/python/bh1750.py
deleted file mode 100755
index 36c0a9d..0000000
--- a/examples/python/bh1750.py
+++ /dev/null
@@ -1,55 +0,0 @@
-#!/usr/bin/env python
-# Author: Jon Trulson <jtrulson@ics.com>
-# Copyright (c) 2016 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_bh1750 as sensorObj
-
-def main():
-    # Instantiate a BH1750 sensor using defaults (I2C bus (0), using
-    # the default I2C address (0x23), and setting the mode to highest
-    # resolution, lowest power mode).
-    sensor = sensorObj.BH1750()
-
-    ## Exit handlers ##
-    # This function stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    # Every second, sample the BH1750 and output the measured lux value
-
-    while (True):
-        print("Detected Light Level (lux):", sensor.getLux())
-        time.sleep(1)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/bh1792.py b/examples/python/bh1792.py
deleted file mode 100755
index 8b583a8..0000000
--- a/examples/python/bh1792.py
+++ /dev/null
@@ -1,58 +0,0 @@
-# The MIT License (MIT)
-#
-# Author: Assam Boudjelthia
-# Copyright (c) 2018 Rohm Semiconductor.
-#
-# Permission is hereby granted, free of charge, to any person obtaining a copy of
-# this software and associated documentation files (the "Software"), to deal in
-# the Software without restriction, including without limitation the rights to
-# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
-# the Software, and to permit persons to whom the Software is furnished to do so,
-# subject to the following conditions:
-#
-# The above copyright notice and this permission notice shall be included in all
-# copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-import time, datetime
-import sys
-import signal
-import atexit
-from upm import pyupm_bh1792
-
-def main():
-	bh1792_sensor = pyupm_bh1792.BH1792()
-	bh1792_sensor.SoftReset()
-	bh1792_sensor.EnableSyncMode(256, 32)
-	bh1792_sensor.StartMeasurement()
-
-	# Prevent stack printing on CTRL^C
-	def SIGINTHandler(signum, frame):
-		raise SystemExit
-
-	def exitHandler():
-		print("Exiting")
-		sys.exit(0)
-
-	atexit.register(exitHandler)
-	signal.signal(signal.SIGINT, SIGINTHandler)
-
-	sampleCounter = 10
-	waitTime = bh1792_sensor.GetMeasurementTimeMS()
-	
-	print("Heart beat sensor readings: ")
-	while sampleCounter > 0:
-		[off, on] = bh1792_sensor.GetGreenData()
-		print ("off: %d, on: %d, timestamp: %d msec" % (off, on, time.time() * 1000))
-		time.sleep(waitTime / 1000.0)
-		sampleCounter -= 1
-
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/biss0001.py b/examples/python/biss0001.py
deleted file mode 100755
index 14e63cf..0000000
--- a/examples/python/biss0001.py
+++ /dev/null
@@ -1,55 +0,0 @@
-#!/usr/bin/env python
-# Author: Zion Orent <zorent@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_biss0001 as upmMotion
-
-def main():
-    # Instantiate a Grove Motion sensor on GPIO pin D2
-    myMotion = upmMotion.BISS0001(2)
-
-    ## Exit handlers ##
-    # This function stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit, including functions from myMotion
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    # Read the value every second and detect motion
-    while(1):
-        if (myMotion.value()):
-            print("Detecting moving object")
-        else:
-            print("No moving objects detected")
-        time.sleep(1)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/bma220.py b/examples/python/bma220.py
deleted file mode 100755
index 25b84ad..0000000
--- a/examples/python/bma220.py
+++ /dev/null
@@ -1,60 +0,0 @@
-#!/usr/bin/env python
-# Author: Jon Trulson <jtrulson@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_bma220 as sensorObj
-
-def main():
-    # Instantiate an BMA220 using default parameters (bus 0, addr 0x0a)
-    sensor = sensorObj.BMA220()
-
-    ## Exit handlers ##
-    # This function stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    x = sensorObj.new_floatp()
-    y = sensorObj.new_floatp()
-    z = sensorObj.new_floatp()
-
-    while (1):
-        sensor.update()
-        sensor.getAccelerometer(x, y, z)
-        print("Accelerometer: AX:", sensorObj.floatp_value(x), end=' ')
-        print(" AY:", sensorObj.floatp_value(y), end=' ')
-        print(" AZ:", sensorObj.floatp_value(z))
-
-        time.sleep(.5)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/bma250e.py b/examples/python/bma250e.py
deleted file mode 100755
index 6cb048b..0000000
--- a/examples/python/bma250e.py
+++ /dev/null
@@ -1,67 +0,0 @@
-#!/usr/bin/env python
-# Author: Jon Trulson <jtrulson@ics.com>
-# Copyright (c) 2016-2017 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_bma250e as sensorObj
-
-def main():
-    # Instantiate a BMP250E instance using default i2c bus and address
-    sensor = sensorObj.BMA250E()
-
-    # For SPI, bus 0, you would pass -1 as the address, and a valid pin for CS:
-    # BMA250E(0, -1, 10);
-
-    ## Exit handlers ##
-    # This function stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    # now output data every 250 milliseconds
-    while (1):
-        sensor.update()
-
-        data = sensor.getAccelerometer()
-        print("Accelerometer x:", data[0], end=' ')
-        print(" y:", data[1], end=' ')
-        print(" z:", data[2], end=' ')
-        print(" g")
-
-        # we show both C and F for temperature
-        print("Compensation Temperature:", sensor.getTemperature(), "C /", end=' ')
-        print(sensor.getTemperature(True), "F")
-
-        print()
-        time.sleep(.250)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/bmc150.py b/examples/python/bmc150.py
deleted file mode 100755
index 8eba7a1..0000000
--- a/examples/python/bmc150.py
+++ /dev/null
@@ -1,70 +0,0 @@
-#!/usr/bin/env python
-# Author: Jon Trulson <jtrulson@ics.com>
-# Copyright (c) 2016 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_bmx055 as sensorObj
-
-def main():
-    # Instantiate a BMC150 instance using default i2c bus and address
-    sensor = sensorObj.BMC150()
-
-    ## Exit handlers ##
-    # This function stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    x = sensorObj.new_floatp()
-    y = sensorObj.new_floatp()
-    z = sensorObj.new_floatp()
-
-    # now output data every 250 milliseconds
-    while (1):
-        sensor.update()
-
-        sensor.getAccelerometer(x, y, z)
-        print("Accelerometer x:", sensorObj.floatp_value(x), end=' ')
-        print(" y:", sensorObj.floatp_value(y), end=' ')
-        print(" z:", sensorObj.floatp_value(z), end=' ')
-        print(" g")
-
-        sensor.getMagnetometer(x, y, z)
-        print("Magnetometer x:", sensorObj.floatp_value(x), end=' ')
-        print(" y:", sensorObj.floatp_value(y), end=' ')
-        print(" z:", sensorObj.floatp_value(z), end=' ')
-        print(" uT")
-
-        print()
-        time.sleep(.250)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/bme280.py b/examples/python/bme280.py
deleted file mode 100755
index 2a509ee..0000000
--- a/examples/python/bme280.py
+++ /dev/null
@@ -1,65 +0,0 @@
-#!/usr/bin/env python
-# Author: Jon Trulson <jtrulson@ics.com>
-# Copyright (c) 2016 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_bmp280 as sensorObj
-
-def main():
-    # Instantiate a BME280 instance using default i2c bus and address
-    sensor = sensorObj.BME280()
-
-    # For SPI, bus 0, you would pass -1 as the address, and a valid pin for CS:
-    # BME280(0, -1, 10);
-
-    ## Exit handlers ##
-    # This function stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    while (1):
-        sensor.update()
-
-        print("Compensation Temperature:", sensor.getTemperature(), "C /", end=' ')
-        print(sensor.getTemperature(True), "F")
-
-        print("Pressure: ", sensor.getPressure(), "Pa")
-
-        print("Computed Altitude:", sensor.getAltitude(), "m")
-
-        print("Humidity:", sensor.getHumidity(), "%RH")
-
-        print()
-        time.sleep(1)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/bmg160.py b/examples/python/bmg160.py
deleted file mode 100755
index 6fcae31..0000000
--- a/examples/python/bmg160.py
+++ /dev/null
@@ -1,67 +0,0 @@
-#!/usr/bin/env python
-# Author: Jon Trulson <jtrulson@ics.com>
-# Copyright (c) 2016 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_bmg160 as sensorObj
-
-def main():
-    # Instantiate a BMP250E instance using default i2c bus and address
-    sensor = sensorObj.BMG160()
-
-    # For SPI, bus 0, you would pass -1 as the address, and a valid pin for CS:
-    # BMG160(0, -1, 10);
-
-    ## Exit handlers ##
-    # This function stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    # now output data every 250 milliseconds
-    while (1):
-        sensor.update()
-
-        gyroData = sensor.getGyroscope()
-        print("Gyroscope x:", gyroData[0], end=' ')
-        print(" y:", gyroData[1], end=' ')
-        print(" z:", gyroData[2], end=' ')
-        print(" degrees/s")
-
-        # we show both C and F for temperature
-        print("Compensation Temperature:", sensor.getTemperature(), "C /", end=' ')
-        print(sensor.getTemperature(True), "F")
-
-        print()
-        time.sleep(.250)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/bmi055.py b/examples/python/bmi055.py
deleted file mode 100755
index 8bb2450..0000000
--- a/examples/python/bmi055.py
+++ /dev/null
@@ -1,70 +0,0 @@
-#!/usr/bin/env python
-# Author: Jon Trulson <jtrulson@ics.com>
-# Copyright (c) 2016 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_bmx055 as sensorObj
-
-def main():
-    # Instantiate a BMI055 instance using default i2c bus and address
-    sensor = sensorObj.BMI055()
-
-    ## Exit handlers ##
-    # This function stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    x = sensorObj.new_floatp()
-    y = sensorObj.new_floatp()
-    z = sensorObj.new_floatp()
-
-    # now output data every 250 milliseconds
-    while (1):
-        sensor.update()
-
-        sensor.getAccelerometer(x, y, z)
-        print("Accelerometer x:", sensorObj.floatp_value(x), end=' ')
-        print(" y:", sensorObj.floatp_value(y), end=' ')
-        print(" z:", sensorObj.floatp_value(z), end=' ')
-        print(" g")
-
-        sensor.getGyroscope(x, y, z)
-        print("Gyroscope x:", sensorObj.floatp_value(x), end=' ')
-        print(" y:", sensorObj.floatp_value(y), end=' ')
-        print(" z:", sensorObj.floatp_value(z), end=' ')
-        print(" degrees/s")
-
-        print()
-        time.sleep(.250)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/bmi160.py b/examples/python/bmi160.py
deleted file mode 100755
index e51c69c..0000000
--- a/examples/python/bmi160.py
+++ /dev/null
@@ -1,71 +0,0 @@
-#!/usr/bin/env python
-# Author: Jon Trulson <jtrulson@ics.com>
-# Copyright (c) 2016 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_bmi160 as sensorObj
-
-def main():
-    # Instantiate a BMI160 instance using default i2c bus and address
-    sensor = sensorObj.BMI160()
-
-    ## Exit handlers ##
-    # This function stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    x = sensorObj.new_floatp()
-    y = sensorObj.new_floatp()
-    z = sensorObj.new_floatp()
-
-    while (1):
-        sensor.update()
-        sensor.getAccelerometer(x, y, z)
-        print("Accelerometer: AX: ", sensorObj.floatp_value(x), end=' ')
-        print(" AY: ", sensorObj.floatp_value(y), end=' ')
-        print(" AZ: ", sensorObj.floatp_value(z))
-
-        sensor.getGyroscope(x, y, z)
-        print("Gyroscope:     GX: ", sensorObj.floatp_value(x), end=' ')
-        print(" GY: ", sensorObj.floatp_value(y), end=' ')
-        print(" GZ: ", sensorObj.floatp_value(z))
-
-        sensor.getMagnetometer(x, y, z)
-        print("Magnetometer:  MX: ", sensorObj.floatp_value(x), end=' ')
-        print(" MY: ", sensorObj.floatp_value(y), end=' ')
-        print(" MZ: ", sensorObj.floatp_value(z))
-
-        print()
-        time.sleep(.5)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/bmm150.py b/examples/python/bmm150.py
deleted file mode 100755
index 0e3bb1c..0000000
--- a/examples/python/bmm150.py
+++ /dev/null
@@ -1,65 +0,0 @@
-#!/usr/bin/env python
-# Author: Jon Trulson <jtrulson@ics.com>
-# Copyright (c) 2016-2017 Intel Corporation.
-#
-# The MIT License
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_bmm150 as sensorObj
-
-def main():
-    # Instantiate a BMP250E instance using default i2c bus and address
-    sensor = sensorObj.BMM150()
-
-    # For SPI, bus 0, you would pass -1 as the address, and a valid pin for CS:
-    # BMM150(0, -1, 10);
-
-    ## Exit handlers ##
-    # This function stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    # now output data every 250 milliseconds
-    while (1):
-        sensor.update()
-
-        data = sensor.getMagnetometer()
-        print("Magnetometer x:", data[0], end=' ')
-        print(" y:", data[1], end=' ')
-        print(" z:", data[2], end=' ')
-        print(" uT")
-
-        print()
-        time.sleep(.250)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/bmp280.py b/examples/python/bmp280.py
deleted file mode 100755
index c825561..0000000
--- a/examples/python/bmp280.py
+++ /dev/null
@@ -1,63 +0,0 @@
-#!/usr/bin/env python
-# Author: Jon Trulson <jtrulson@ics.com>
-# Copyright (c) 2016 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_bmp280 as sensorObj
-
-def main():
-    # Instantiate a BMP280 instance using default i2c bus and address
-    sensor = sensorObj.BMP280()
-
-    # For SPI, bus 0, you would pass -1 as the address, and a valid pin for CS:
-    # BMP280(0, -1, 10);
-
-    ## Exit handlers ##
-    # This function stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    while (1):
-        sensor.update()
-
-        print("Compensation Temperature:", sensor.getTemperature(), "C /", end=' ')
-        print(sensor.getTemperature(True), "F")
-
-        print("Pressure: ", sensor.getPressure(), "Pa")
-
-        print("Computed Altitude:", sensor.getAltitude(), "m")
-
-        print()
-        time.sleep(1)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/bmpx8x.py b/examples/python/bmpx8x.py
deleted file mode 100755
index d2eef27..0000000
--- a/examples/python/bmpx8x.py
+++ /dev/null
@@ -1,68 +0,0 @@
-#!/usr/bin/env python
-# Author: Zion Orent <zorent@ics.com>
-# Author: Jon Trulson <jtrulson@ics.com>
-# Copyright (c) 2014-2017 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_bmpx8x as upmBmpx8x
-
-def main():
-    # Load Barometer module on i2c using default values
-    sensor = upmBmpx8x.BMPX8X(0);
-
-    ## Exit handlers ##
-
-    # This function stops python from printing a stacktrace when you hit
-    # control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit, including functions
-    # from sensor
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    # Print the pressure, altitude, sea level, and
-    # temperature values every 0.1 seconds
-    while(1):
-        sensor.update()
-
-        outputStr = ("Pressure: {0}"
-        " Pa, Temperature: {1}"
-        " C, Altitude: {2}"
-        " m, Sea Level: {3} Pa".format(
-        sensor.getPressure(),
-        sensor.getTemperature(),
-        sensor.getAltitude(),
-        sensor.getSealevelPressure()))
-
-        print(outputStr)
-        time.sleep(.5)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/bmx055.py b/examples/python/bmx055.py
deleted file mode 100755
index 185a5c1..0000000
--- a/examples/python/bmx055.py
+++ /dev/null
@@ -1,76 +0,0 @@
-#!/usr/bin/env python
-# Author: Jon Trulson <jtrulson@ics.com>
-# Copyright (c) 2016 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_bmx055 as sensorObj
-
-def main():
-    # Instantiate a BMX055 instance using default i2c bus and address
-    sensor = sensorObj.BMX055()
-
-    ## Exit handlers ##
-    # This function stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    x = sensorObj.new_floatp()
-    y = sensorObj.new_floatp()
-    z = sensorObj.new_floatp()
-
-    # now output data every 250 milliseconds
-    while (1):
-        sensor.update()
-
-        sensor.getAccelerometer(x, y, z)
-        print("Accelerometer x:", sensorObj.floatp_value(x), end=' ')
-        print(" y:", sensorObj.floatp_value(y), end=' ')
-        print(" z:", sensorObj.floatp_value(z), end=' ')
-        print(" g")
-
-        sensor.getGyroscope(x, y, z)
-        print("Gyroscope x:", sensorObj.floatp_value(x), end=' ')
-        print(" y:", sensorObj.floatp_value(y), end=' ')
-        print(" z:", sensorObj.floatp_value(z), end=' ')
-        print(" degrees/s")
-
-        sensor.getMagnetometer(x, y, z)
-        print("Magnetometer x:", sensorObj.floatp_value(x), end=' ')
-        print(" y:", sensorObj.floatp_value(y), end=' ')
-        print(" z:", sensorObj.floatp_value(z), end=' ')
-        print(" uT")
-
-        print()
-        time.sleep(.250)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/bno055.py b/examples/python/bno055.py
deleted file mode 100755
index 40e57cb..0000000
--- a/examples/python/bno055.py
+++ /dev/null
@@ -1,113 +0,0 @@
-#!/usr/bin/env python
-# Author: Jon Trulson <jtrulson@ics.com>
-# Copyright (c) 2016-2017 Intel Corporation.
-#
-# The MIT License
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_bno055 as sensorObj
-
-def main():
-    # Instantiate an BNO055 using default parameters (bus 0, addr
-    # 0x28).  The default running mode is NDOF absolute orientation
-    # mode.
-    sensor = sensorObj.BNO055()
-
-    ## Exit handlers ##
-    # This function stops python from printing a stacktrace when you
-    # hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit
-    def exitHandler():
-        print("Exiting...")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    print("First we need to calibrate.  4 numbers will be output every")
-    print("second for each sensor.  0 means uncalibrated, and 3 means")
-    print("fully calibrated.")
-    print("See the UPM documentation on this sensor for instructions on")
-    print("what actions are required to calibrate.")
-    print()
-
-    while (not sensor.isFullyCalibrated()):
-        intData = sensor.getCalibrationStatus()
-        print("Magnetometer:", intData[0], end=' ')
-        print(" Accelerometer:", intData[1], end=' ')
-        print(" Gyroscope:", intData[2], end=' ')
-        print(" System:", intData[3])
-        time.sleep(1)
-
-    print()
-    print("Calibration complete.")
-    print()
-
-# example - read calibration data, sleep and then write it
-#    print("Reading calibration data....")
-#    byteData = sensor.readCalibrationData()
-#    print("Read data successfully.")
-#    print("Writing calibration data...")
-#    time.sleep(1)
-#    sensor.writeCalibrationData(byteData)
-#    print("Success!")
-#    time.sleep(3)
-
-    # now output various fusion data every 250 milliseconds
-
-    while (True):
-        sensor.update()
-
-        floatData = sensor.getEulerAngles()
-        print("Euler: Heading:", floatData[0], end=' ')
-        print(" Roll:", floatData[1], end=' ')
-        print(" Pitch:", floatData[2], end=' ')
-        print(" degrees")
-
-        floatData = sensor.getQuaternions()
-        print("Quaternion: W:", floatData[0], end=' ')
-        print(" X:", floatData[1], end=' ')
-        print(" Y:", floatData[2], end=' ')
-        print(" Z:", floatData[3])
-
-        floatData = sensor.getLinearAcceleration()
-        print("Linear Acceleration: X:", floatData[0], end=' ')
-        print(" Y:", floatData[1], end=' ')
-        print(" Z:", floatData[2], end=' ')
-        print(" m/s^2")
-
-        floatData = sensor.getGravityVectors()
-        print("Gravity Vector: X:", floatData[0], end=' ')
-        print(" Y:", floatData[1], end=' ')
-        print(" Z:", floatData[2], end=' ')
-        print(" m/s^2")
-
-        print()
-        time.sleep(.25);
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/button.py b/examples/python/button.py
deleted file mode 100755
index 43ab729..0000000
--- a/examples/python/button.py
+++ /dev/null
@@ -1,41 +0,0 @@
-#!/usr/bin/env python
-from __future__ import print_function
-# Author: Sarah Knepper <sarah.knepper@intel.com>
-# Copyright (c) 2014 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-import time
-from upm import pyupm_grove as grove
-
-def main():
-    # Create the button object using GPIO pin 0
-    button = grove.Button(0)
-
-    # Read the input and print, waiting one second between readings
-    while 1:
-        print(button.name(), ' value is ', button.value())
-        time.sleep(1)
-
-    # Delete the button object
-    del button
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/buzzer.py b/examples/python/buzzer.py
deleted file mode 100755
index ed7d88b..0000000
--- a/examples/python/buzzer.py
+++ /dev/null
@@ -1,51 +0,0 @@
-#!/usr/bin/env python
-from __future__ import print_function
-# Author: Sarah Knepper <sarah.knepper@intel.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-import time
-from upm import pyupm_buzzer as upmBuzzer
-
-def main():
-    # Create the buzzer object using GPIO pin 5
-    buzzer = upmBuzzer.Buzzer(5)
-
-    chords = [upmBuzzer.BUZZER_DO, upmBuzzer.BUZZER_RE, upmBuzzer.BUZZER_MI,
-              upmBuzzer.BUZZER_FA, upmBuzzer.BUZZER_SOL, upmBuzzer.BUZZER_LA,
-              upmBuzzer.BUZZER_SI];
-
-    # Print sensor name
-    print(buzzer.name())
-
-    # Play sound (DO, RE, MI, etc.), pausing for 0.1 seconds between notes
-    for chord_ind in range (0,7):
-        # play each note for a half second
-        print(buzzer.playSound(chords[chord_ind], 500000))
-        time.sleep(0.1)
-
-    print("exiting application")
-
-    # Delete the buzzer object
-    del buzzer
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/cjq4435.py b/examples/python/cjq4435.py
deleted file mode 100755
index 0fdcdc7..0000000
--- a/examples/python/cjq4435.py
+++ /dev/null
@@ -1,49 +0,0 @@
-#!/usr/bin/env python
-# Author: Zion Orent <zorent@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import division
-import time
-from upm import pyupm_cjq4435 as upmCjq4435
-
-def main():
-    # Instantiate a CJQ4435 MOSFET on a PWM capable digital pin D3
-    myMOSFETsensor = upmCjq4435.CJQ4435(3)
-
-    myMOSFETsensor.setPeriodMS(10)
-    myMOSFETsensor.enable(True)
-
-    # start with a duty cycle of 0.0 (off) and increment to 1.0 (on)
-    for i in range(11):
-        myMOSFETsensor.setDutyCycle(i / 10)
-        time.sleep(.1)
-    time.sleep(1)
-
-    # Now take it back down
-    #        start with a duty cycle of 1.0 (on) and decrement to 0.0 (off)
-    for i in range(10, -1, -1):
-        myMOSFETsensor.setDutyCycle(i / 10)
-        time.sleep(.1)
-    time.sleep(1)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/collision.py b/examples/python/collision.py
deleted file mode 100755
index 378b30f..0000000
--- a/examples/python/collision.py
+++ /dev/null
@@ -1,60 +0,0 @@
-#!/usr/bin/env python
-# Author: Zion Orent <zorent@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_collision as upmcollision
-
-def main():
-    # The was tested with the Collision Sensor
-    # Instantiate a Collision on digital pin D2
-    mycollision = upmcollision.Collision(2)
-
-    ## Exit handlers ##
-    # This stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This lets you run code on exit,
-    # including functions from myGrovecollision
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    collisionState = False
-    print("No collision")
-
-    while(1):
-        if (mycollision.isColliding() and not collisionState):
-            print("Collision!")
-            collisionState = True
-        elif (not mycollision.isColliding() and collisionState):
-            print("No collision")
-            collisionState = False
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/curieimu.py b/examples/python/curieimu.py
deleted file mode 100755
index 9f9c673..0000000
--- a/examples/python/curieimu.py
+++ /dev/null
@@ -1,61 +0,0 @@
-#!/usr/bin/env python
-
-# Author: Ron Evans (@deadprogram)
-# Copyright (c) 2016 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE
-
-from __future__ import print_function
-import mraa
-print (mraa.getVersion())
-
-# open connection to Firmata
-mraa.addSubplatform(mraa.GENERIC_FIRMATA, "/dev/ttyACM0")
-
-import time, sys, signal, atexit
-from upm import pyupm_curieimu as curieimu
-
-def main():
-    sensor = curieimu.CurieImu()
-
-    ## Exit handlers ##
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    while(1):
-        sensor.updateAccel();
-
-        outputStr = "acc: gX {0} - gY {1} - gZ {2}".format(
-        sensor.getAccelX(), sensor.getAccelY(),
-        sensor.getAccelZ())
-        print(outputStr)
-
-        time.sleep(1)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/cwlsxxa.py b/examples/python/cwlsxxa.py
deleted file mode 100755
index d0a97a0..0000000
--- a/examples/python/cwlsxxa.py
+++ /dev/null
@@ -1,66 +0,0 @@
-#!/usr/bin/env python
-# Author: Jon Trulson <jtrulson@ics.com>
-# Copyright (c) 2016 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_cwlsxxa as sensorObj
-
-def main():
-    ## Exit handlers ##
-    # This function stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    print("Initializing...")
-
-    # Instantiate an CWLSXXA instance, using A0 for CO2, A1 for
-    # humidity and A2 for temperature
-    sensor = sensorObj.CWLSXXA(0, 1, 2)
-
-    # update and print available values every second
-    while (1):
-        # update our values from the sensor
-        sensor.update()
-
-        # we show both C and F for temperature
-        print("Temperature:", sensor.getTemperature(), "C /", end=' ')
-        print(sensor.getTemperature(True), "F")
-
-        print("Humidity:", sensor.getHumidity(), "%")
-
-        print("CO2:", sensor.getCO2(), "ppm")
-
-        print()
-        time.sleep(1)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/dfrec.py b/examples/python/dfrec.py
deleted file mode 100755
index de6c8a8..0000000
--- a/examples/python/dfrec.py
+++ /dev/null
@@ -1,61 +0,0 @@
-#!/usr/bin/env python
-# Author: Jon Trulson <jtrulson@ics.com>
-# Copyright (c) 2016 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_dfrec as sensorObj
-
-def main():
-    # Instantiate a DFRobot EC sensor on analog pin A0, with a ds18b20
-    # temperature sensor connected to UART 0, and a device index (for
-    # the ds1820b uart bus) of 0, and an analog reference voltage of
-    # 5.0.
-    sensor = sensorObj.DFREC(0, 0, 0, 5.0)
-
-    ## Exit handlers ##
-    # This function stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    # Every 2 seconds, update and print values
-    while (True):
-        sensor.update()
-
-        print("EC =", sensor.getEC(), "ms/cm")
-        print("Volts =", sensor.getVolts(), end=' ')
-        print(", Temperature = ", sensor.getTemperature(), "C")
-        print()
-
-        time.sleep(2)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/dfrorp.py b/examples/python/dfrorp.py
deleted file mode 100755
index cdd66b1..0000000
--- a/examples/python/dfrorp.py
+++ /dev/null
@@ -1,73 +0,0 @@
-#!/usr/bin/env python
-# Author: Jon Trulson <jtrulson@ics.com>
-# Copyright (c) 2016 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_dfrorp as sensorObj
-
-def main():
-    # Instantiate a DFRobot ORP sensor on analog pin A0 with an analog
-    # reference voltage of 5.0.
-    sensor = sensorObj.DFRORP(0, 5.0)
-
-    # To calibrate:
-    #
-    # Disconnect the sensor probe (but leave the sensor interface board
-    # connected).  Then run one of the examples while holding down the
-    # 'calibrate' button on the device.  Read the ORP value reported
-    # (it should be fairly small).
-    #
-    # This value is what you should supply to setCalibrationOffset().
-    # Then reconnect the probe to the interface board and you should be
-    # ready to go.
-    #
-    # DO NOT press the calibrate button on the interface board while
-    # the probe is attached or you can permanently damage the probe.
-    sensor.setCalibrationOffset(0.97);
-
-    ## Exit handlers ##
-    # This function stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    # Every second, update and print values
-    while (True):
-        sensor.update()
-
-        print("ORP:", sensor.getORP(), "mV")
-
-        print()
-
-        time.sleep(1)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/dfrph.py b/examples/python/dfrph.py
deleted file mode 100755
index f7ecf4b..0000000
--- a/examples/python/dfrph.py
+++ /dev/null
@@ -1,61 +0,0 @@
-#!/usr/bin/env python
-# Author: Jon Trulson <jtrulson@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_dfrph as sensorObj
-
-def main():
-    # Instantiate a DFRPH sensor on analog pin A0, with an analog
-    # reference voltage of 5.0
-    sensor = sensorObj.DFRPH(0, 5.0)
-
-    ## Exit handlers ##
-    # This function stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    # After calibration, set the offset (based on calibration with a pH
-    # 7.0 buffer solution).  See the UPM sensor documentation for
-    # calibrations instructions.
-    sensor.setOffset(0.065);
-
-    # Every second, sample the pH and output it's corresponding
-    # analog voltage.
-
-    while (1):
-        print("Detected volts: ", sensor.volts())
-        print("pH value: ", sensor.pH())
-        time.sleep(1)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/ds1307.py b/examples/python/ds1307.py
deleted file mode 100755
index 59764db..0000000
--- a/examples/python/ds1307.py
+++ /dev/null
@@ -1,64 +0,0 @@
-#!/usr/bin/env python
-# Author: Zion Orent <zorent@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_ds1307 as upmDs1307
-
-def main():
-    # load RTC clock on i2c bus 0
-    myRTCClock = upmDs1307.DS1307(0)
-
-    def printTime(RTCObj):
-        timeStr = "The time is: {0}/{1}/{2} {3}:{4}:{5}".format(
-        RTCObj.month, RTCObj.dayOfMonth, RTCObj.year,
-        RTCObj.hours, RTCObj.minutes, RTCObj.seconds)
-
-        if (RTCObj.amPmMode):
-            timeStr += (" PM " if RTCObj.pm else " AM ")
-
-        print(timeStr)
-
-        print("Clock is in", ("AM/PM mode"
-        if RTCObj.amPmMode else "24hr mode"))
-
-    # always do this first
-    print("Loading the current time... ")
-    result = myRTCClock.loadTime()
-    if (not result):
-        print("myRTCClock.loadTime() failed.")
-        sys.exit(0)
-
-    printTime(myRTCClock);
-
-    # set the year as an example
-    print("setting the year to 50")
-    myRTCClock.year = 50
-    myRTCClock.setTime()
-
-    # reload the time and print it
-    myRTCClock.loadTime()
-    printTime(myRTCClock)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/ds18b20.py b/examples/python/ds18b20.py
deleted file mode 100755
index fa7f8d2..0000000
--- a/examples/python/ds18b20.py
+++ /dev/null
@@ -1,70 +0,0 @@
-#!/usr/bin/env python
-# Author: Jon Trulson <jtrulson@ics.com>
-# Copyright (c) 2016-2017 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_ds18b20 as sensorObj
-
-def main():
-    ## Exit handlers ##
-    # This function stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit
-    def exitHandler():
-        print("Exiting...")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    print("Initializing...")
-
-    # Instantiate an DS18B20 instance using the default values (uart 0)
-    sensor = sensorObj.DS18B20(0)
-
-    print("Found", sensor.devicesFound(), "device(s)")
-    print()
-
-    if (not sensor.devicesFound()):
-        sys.exit(1);
-
-    # update and print available values every 2 seconds
-    while (1):
-        # update our values for all of the detected sensors
-        sensor.update(-1)
-
-        # we show both C and F for temperature for the sensors
-        for i in range(sensor.devicesFound()):
-            print("Device:", i, end=' ')
-            print("Temperature:", sensor.getTemperature(i), "C /", end=' ')
-            print(sensor.getTemperature(i, True), "F")
-
-
-        print()
-        time.sleep(2)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/ds2413.py b/examples/python/ds2413.py
deleted file mode 100755
index 30ca70d..0000000
--- a/examples/python/ds2413.py
+++ /dev/null
@@ -1,62 +0,0 @@
-#!/usr/bin/env python
-# Author: Jon Trulson <jtrulson@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_ds2413 as sensorObj
-
-def main():
-    # Instantiate a DS2413 Module on a Dallas 1-wire bus connected to UART 0
-    sensor = sensorObj.DS2413(0)
-
-    ## Exit handlers ##
-    # This stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit
-    def exitHandler():
-        print("Exiting...")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    # find all of the DS2413 devices present on the bus
-    sensor.init();
-
-    # how many devices were found?
-    print("Found", sensor.devicesFound(), "device(s)")
-
-    # read the gpio and latch values from the first device
-    # the lower 4 bits are of the form:
-    # <gpioB latch> <gpioB value> <gpioA latch> <gpioA value>
-    print("GPIO device 0 values:", sensor.readGpios(0))
-
-    # set the gpio latch values of the first device
-    print("Setting GPIO latches to on")
-    sensor.writeGpios(0, 0x03);
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/e50hx.py b/examples/python/e50hx.py
deleted file mode 100755
index 9852886..0000000
--- a/examples/python/e50hx.py
+++ /dev/null
@@ -1,100 +0,0 @@
-#!/usr/bin/env python
-# Author: Jon Trulson <jtrulson@ics.com>
-# Copyright (c) 2016 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_e50hx as sensorObj
-
-def main():
-    ## Exit handlers ##
-    # This function stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit
-    def exitHandler():
-        print("Exiting...")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    # You will need to edit this example to conform to your site and your
-    # devices, specifically the Device Object Instance ID passed to the
-    # constructor, and the arguments to initMaster() that are
-    # appropriate for your BACnet network.
-
-    defaultDev = "/dev/ttyUSB0"
-
-    # if an argument was specified, use it as the device instead
-    if (len(sys.argv) > 1):
-        defaultDev = sys.argv[1]
-
-    print("Using device", defaultDev)
-    print("Initializing...")
-
-    # Instantiate an E50HX object for an E50HX device that has 1075425
-    # as it's unique Device Object Instance ID.  NOTE: You will
-    # certainly want to change this to the correct value for your
-    # device(s).
-    sensor = sensorObj.E50HX(1075425)
-
-    # Initialize our BACnet master, if it has not already been
-    # initialized, with the device and baudrate, choosing 1000001 as
-    # our unique Device Object Instance ID, 2 as our MAC address and
-    # using default values for maxMaster and maxInfoFrames
-    sensor.initMaster(defaultDev, 38400, 1000001, 2)
-
-    # Uncomment to enable debugging output
-    # sensor.setDebug(True);
-
-    # output the serial number and firmware revision
-    print()
-    print("Device Description:", sensor.getDeviceDescription())
-    print("Device Location:", sensor.getDeviceLocation())
-    print()
-
-    # update and print available values every second
-    while (1):
-        print("System Voltage:", end=' ')
-        print(sensor.getAnalogValue(sensorObj.E50HX.AV_System_Voltage), end=' ')
-        print(" ", end=' ')
-        print(sensor.getAnalogValueUnits(sensorObj.E50HX.AV_System_Voltage))
-
-        print("System Type:", end=' ')
-        print(sensor.getAnalogValue(sensorObj.E50HX.AV_System_Type))
-
-        print("Energy Consumption:", end=' ')
-        print(sensor.getAnalogInput(sensorObj.E50HX.AI_Energy), end=' ')
-        print(" ", end=' ')
-        print(sensor.getAnalogInputUnits(sensorObj.E50HX.AI_Energy))
-
-        print("Power Up Counter:", end=' ')
-        print(sensor.getAnalogInput(sensorObj.E50HX.AI_Power_Up_Count))
-
-        print()
-        time.sleep(5)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/eboled.py b/examples/python/eboled.py
deleted file mode 100755
index cdbe39a..0000000
--- a/examples/python/eboled.py
+++ /dev/null
@@ -1,43 +0,0 @@
-#!/usr/bin/env python
-# Author: Jon Trulson <jtrulson@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys
-
-from upm import pyupm_lcd as lcdObj
-
-def main():
-    # setup with default values
-    lcd = lcdObj.EBOLED();
-
-    lcd.clear();
-    lcd.setCursor(10, 15);
-    lcd.write("Hello");
-    lcd.setCursor(30, 15);
-    lcd.write("World!");
-    lcd.refresh();
-    print("Sleeping for 5 seconds...")
-    time.sleep(5)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/ecezo.py b/examples/python/ecezo.py
deleted file mode 100755
index 7247512..0000000
--- a/examples/python/ecezo.py
+++ /dev/null
@@ -1,66 +0,0 @@
-#!/usr/bin/env python
-# Author: Jon Trulson <jtrulson@ics.com>
-# Copyright (c) 2016 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_ecezo as sensorObj
-
-def main():
-    # Instantiate a ECEZO sensor on uart 0 at 9600 baud.
-    sensor = sensorObj.ECEZO(0, 9600, False);
-
-    # For I2C, assuming the device is configured for address 0x64 on
-    # I2C bus 0, you could use something like:
-    #
-    # sensor = sensorObj.ECEZO(0, 0x64, True);
-
-    ## Exit handlers ##
-    # This function stops python from printing a stacktrace when you
-    # hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    while (1):
-        sensor.update()
-
-        print("EC "
-              + str(sensor.getEC())
-              + " uS/cm, TDS "
-              + str(sensor.getTDS())
-              + " mg/L, Salinity "
-              + str(sensor.getSalinity())
-              + " PSS-78, SG "
-              + str(sensor.getSG()));
-        time.sleep(5)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/ehr.py b/examples/python/ehr.py
deleted file mode 100755
index 98115e4..0000000
--- a/examples/python/ehr.py
+++ /dev/null
@@ -1,70 +0,0 @@
-#!/usr/bin/env python
-# Author: Zion Orent <zorent@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_ehr as upmehr
-
-def main():
-    # Instantiate a  Ear-clip Heart Rate sensor on digital pin D2
-    myHeartRateSensor = upmehr.EHR(2)
-
-    ## Exit handlers ##
-    # This stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This lets you run code on exit,
-    # including functions from myHeartRateSensor
-    def exitHandler():
-        myHeartRateSensor.stopBeatCounter()
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    # set the beat counter to 0, init the clock and start counting beats
-    myHeartRateSensor.clearBeatCounter()
-    myHeartRateSensor.initClock()
-    myHeartRateSensor.startBeatCounter()
-
-    while(1):
-        # we grab these (millis and flowCount) just for display
-        # purposes in this example
-        millis = myHeartRateSensor.getMillis()
-        beats = myHeartRateSensor.beatCounter()
-
-        # heartRate() requires that at least 5 seconds pass before
-        # returning anything other than 0
-        fr = myHeartRateSensor.heartRate()
-
-        # output milliseconds passed, beat count, and computed heart rate
-        outputStr = "Millis: {0} Beats: {1} Heart Rate: {2}".format(
-        millis, beats, fr)
-        print(outputStr)
-        time.sleep(1)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/eldriver.py b/examples/python/eldriver.py
deleted file mode 100755
index cd8ee84..0000000
--- a/examples/python/eldriver.py
+++ /dev/null
@@ -1,60 +0,0 @@
-#!/usr/bin/env python
-# Author: Zion Orent <zorent@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_eldriver as upmeldriver
-
-def main():
-    # The was tested with the  El Driver Module
-    # Instantiate a  El Driver on digital pin D2
-    myEldriver = upmeldriver.ElDriver(2)
-
-    ## Exit handlers ##
-    # This function stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit, including functions from myEldriver
-    def exitHandler():
-        print("Exiting")
-        myEldriver.off()
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    lightState = True
-
-    while(1):
-        if (lightState):
-            myEldriver.on()
-        else:
-            myEldriver.off()
-        lightState = not lightState
-
-        time.sleep(1)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/electromagnet.py b/examples/python/electromagnet.py
deleted file mode 100755
index 139615a..0000000
--- a/examples/python/electromagnet.py
+++ /dev/null
@@ -1,63 +0,0 @@
-#!/usr/bin/env python
-# Author: Zion Orent <zorent@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_electromagnet as upmelectromagnet
-
-def main():
-    # This was tested with the  Electromagnetic Module
-    # Instantiate a  Electromagnet on digital pin D2
-    myElectromagnet = upmelectromagnet.Electromagnet(2)
-
-    ## Exit handlers ##
-    # This stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This lets you run code on exit,
-    # including functions from myElectromagnet
-    def exitHandler():
-        print("Exiting")
-        myElectromagnet.off()
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    magnetState = False
-
-    # Turn magnet on and off every 5 seconds
-    while(1):
-        magnetState = not magnetState
-        if (magnetState):
-            myElectromagnet.on()
-        else:
-            myElectromagnet.off()
-        print("Turning magnet", ("on" if magnetState else "off"))
-
-        time.sleep(5)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/emg.py b/examples/python/emg.py
deleted file mode 100755
index 6e57039..0000000
--- a/examples/python/emg.py
+++ /dev/null
@@ -1,55 +0,0 @@
-#!/usr/bin/env python
-# Author: Zion Orent <zorent@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_emg as upmEmg
-
-def main():
-    # Tested with the EMG Muscle Signal Reader Sensor Module
-    # Instantiate a EMG on analog pin A0
-    myEMG = upmEmg.EMG(0)
-
-    ## Exit handlers ##
-    # This stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This lets you run code on exit, including functions from myEMG
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    print("Calibrating....")
-    myEMG.calibrate()
-
-    while (1):
-        print(myEMG.value())
-        time.sleep(.1)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/enc03r.py b/examples/python/enc03r.py
deleted file mode 100755
index 3716efd..0000000
--- a/examples/python/enc03r.py
+++ /dev/null
@@ -1,66 +0,0 @@
-#!/usr/bin/env python
-# Author: Zion Orent <zorent@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_enc03r as upmEnc03r
-
-def main():
-    # Instantiate an ENC03R on analog pin A0
-    myAnalogGyro = upmEnc03r.ENC03R(0)
-
-    ## Exit handlers ##
-    # This function stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit,
-    # including functions from myAnalogGyro
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    CALIBRATION_SAMPLES = 1000
-
-    print ("Please place the sensor in a stable location,\n"
-    "and do not move it while calibration takes place.\n"
-    "This may take a couple of minutes.")
-
-    myAnalogGyro.calibrate(CALIBRATION_SAMPLES)
-    print("Calibration complete. ")
-    print("Reference value: ", myAnalogGyro.calibrationValue())
-
-    while(1):
-        myAnalogGyro.update();
-        outputStr = ("Angular velocity: {0}"
-        " deg/s".format(myAnalogGyro.angularVelocity()))
-        print(outputStr)
-
-        time.sleep(.1)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/es08a.py b/examples/python/es08a.py
deleted file mode 100755
index 0740a97..0000000
--- a/examples/python/es08a.py
+++ /dev/null
@@ -1,52 +0,0 @@
-#!/usr/bin/env python
-from __future__ import print_function
-# Author: John Van Drasek <john.r.van.drasek@intel.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-import time
-from upm import pyupm_servo as servo
-
-def main():
-    # Create the servo object using D5
-    gServo = servo.ES08A(5)
-
-    for i in range(0,10):
-        # Set the servo arm to 0 degrees
-        gServo.setAngle(0)
-        print('Set angle to 0')
-        time.sleep(1)
-
-        # Set the servo arm to 90 degrees
-        gServo.setAngle(90)
-        print('Set angle to 90')
-        time.sleep(1)
-
-        # Set the servo arm to 180 degrees
-        gServo.setAngle(180)
-        print('Set angle to 180')
-        time.sleep(1)
-
-    # Delete the servo object
-    del gServo
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/gp2y0a.py b/examples/python/gp2y0a.py
deleted file mode 100755
index 38467bf..0000000
--- a/examples/python/gp2y0a.py
+++ /dev/null
@@ -1,65 +0,0 @@
-#!/usr/bin/env python
-# Author: Zion Orent <zorent@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_gp2y0a as upmGp2y0a
-
-def main():
-    # Note, for the Grove 80cm version of this sensor, due to the way it is wired,
-    # you need to plug this into the A0 port, where it will use the available
-    # A1 pin for data.
-    # Instantiate a GP2Y0A on analog pin A1
-    myIRProximity = upmGp2y0a.GP2Y0A(1)
-
-    ## Exit handlers ##
-    # This stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This lets you run code on exit,
-    # including functions from myIRProximity
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    # analog voltage, usually 3.3 or 5.0
-    GP2Y0A_AREF = 5.0;
-    SAMPLES_PER_QUERY = 20;
-
-    # The higher the voltage (closer to AREF) the closer the object is.
-    # NOTE: The measured voltage will probably not exceed 3.3 volts.
-    # Every second, print the averaged voltage value
-    # (averaged over 20 samples).
-    while (1):
-        print("AREF: {0}, Voltage value (higher means closer): {1}".format(
-        GP2Y0A_AREF,
-        myIRProximity.value(GP2Y0A_AREF, SAMPLES_PER_QUERY)))
-        time.sleep(1)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/gprs.py b/examples/python/gprs.py
deleted file mode 100755
index cb21dbf..0000000
--- a/examples/python/gprs.py
+++ /dev/null
@@ -1,89 +0,0 @@
-#!/usr/bin/env python
-# Author: Jon Trulson <jtrulson@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_gprs as sensorObj
-
-def main():
-    # Instantiate a GPRS Module on UART 0
-    sensor = sensorObj.GPRS(0)
-
-    ## Exit handlers ##
-    # This stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    # Set the baud rate, 19200 baud is the default.
-    if (sensor.setBaudRate(19200)):
-        print("Failed to set baud rate")
-        sys.exit(0)
-
-    usageStr = ("Usage:\n"
-    "If an argument is supplied on the command line, that argument is\n"
-    "sent to the module and the response is printed out.\n\n"
-    "If no argument is used, then the manufacturer and the current\n"
-    "saved profiles are queried and the results printed out.\n\n")
-    print(usageStr)
-
-    # simple helper function to send a command and wait for a response
-    def sendCommand(sensor, cmd):
-        # commands need to be terminated with a carriage return
-        cmd += "\r";
-        sensor.writeDataStr(cmd)
-
-        # wait up to 1 second
-        if (sensor.dataAvailable(1000)):
-            print("Returned: ", end=' ')
-            print(sensor.readDataStr(1024))
-        else:
-            print("Timed out waiting for response")
-
-    if (len(sys.argv) > 1):
-        print("Sending command line argument (" + sys.argv[1] + ")...")
-        sendCommand(sensor, sys.argv[1])
-    else:
-        # query the module manufacturer
-        print("Querying module manufacturer (AT+CGMI)...")
-        sendCommand(sensor, "AT+CGMI");
-
-        time.sleep(1);
-
-        # query the saved profiles
-        print("Querying the saved profiles (AT&V)...")
-        sendCommand(sensor, "AT&V");
-
-        # A comprehensive list is available from the datasheet at:
-        # http://www.seeedstudio.com/wiki/images/7/72/AT_Commands_v1.11.pdf
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/grovebutton.py b/examples/python/grovebutton.py
deleted file mode 100755
index 71bbcaa..0000000
--- a/examples/python/grovebutton.py
+++ /dev/null
@@ -1,41 +0,0 @@
-#!/usr/bin/env python
-from __future__ import print_function
-# Author: Sarah Knepper <sarah.knepper@intel.com>
-# Copyright (c) 2014 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-import time
-from upm import pyupm_grove as grove
-
-def main():
-    # Create the button object using GPIO pin 0
-    button = grove.GroveButton(0)
-
-    # Read the input and print, waiting one second between readings
-    while 1:
-        print(button.name(), ' value is ', button.value())
-        time.sleep(1)
-
-    # Delete the button object
-    del button
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/grovecircularled.py b/examples/python/grovecircularled.py
deleted file mode 100755
index d112a36..0000000
--- a/examples/python/grovecircularled.py
+++ /dev/null
@@ -1,55 +0,0 @@
-#!/usr/bin/env python
-#
-# Author: Jon Trulson <jtrulson@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_my9221 as upmGroveCircularLED
-
-def main():
-    # Exit handlers
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    def exitHandler():
-        circle.setLevel(0, True)
-        print("Exiting")
-        sys.exit(0)
-
-    # This function lets you run code on exit
-    atexit.register(exitHandler)
-    # This function stops python from printing a stacktrace when you hit control-C
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    # Instantiate a Grove Circular LED on gpio pins 9 and 8
-    circle = upmGroveCircularLED.GroveCircularLED(9, 8)
-
-    level = 0
-
-    while(1):
-        circle.setSpinner(level)
-        level = (level + 1) % 24
-        time.sleep(.1)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/grovecollision.py b/examples/python/grovecollision.py
deleted file mode 100755
index 67c0eba..0000000
--- a/examples/python/grovecollision.py
+++ /dev/null
@@ -1,60 +0,0 @@
-#!/usr/bin/env python
-# Author: Zion Orent <zorent@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_grovecollision as upmGrovecollision
-
-def main():
-    # The was tested with the Grove Collision Sensor
-    # Instantiate a Grove Collision on digital pin D2
-    myGrovecollision = upmGrovecollision.GroveCollision(2)
-
-    ## Exit handlers ##
-    # This stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This lets you run code on exit,
-    # including functions from myGrovecollision
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    collisionState = False
-    print("No collision")
-
-    while(1):
-        if (myGrovecollision.isColliding() and not collisionState):
-            print("Collision!")
-            collisionState = True
-        elif (not myGrovecollision.isColliding() and collisionState):
-            print("No collision")
-            collisionState = False
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/groveehr.py b/examples/python/groveehr.py
deleted file mode 100755
index 142db0f..0000000
--- a/examples/python/groveehr.py
+++ /dev/null
@@ -1,70 +0,0 @@
-#!/usr/bin/env python
-# Author: Zion Orent <zorent@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_groveehr as upmGroveehr
-
-def main():
-    # Instantiate a Grove Ear-clip Heart Rate sensor on digital pin D2
-    myHeartRateSensor = upmGroveehr.GroveEHR(2)
-
-    ## Exit handlers ##
-    # This stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This lets you run code on exit,
-    # including functions from myHeartRateSensor
-    def exitHandler():
-        myHeartRateSensor.stopBeatCounter()
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    # set the beat counter to 0, init the clock and start counting beats
-    myHeartRateSensor.clearBeatCounter()
-    myHeartRateSensor.initClock()
-    myHeartRateSensor.startBeatCounter()
-
-    while(1):
-        # we grab these (millis and flowCount) just for display
-        # purposes in this example
-        millis = myHeartRateSensor.getMillis()
-        beats = myHeartRateSensor.beatCounter()
-
-        # heartRate() requires that at least 5 seconds pass before
-        # returning anything other than 0
-        fr = myHeartRateSensor.heartRate()
-
-        # output milliseconds passed, beat count, and computed heart rate
-        outputStr = "Millis: {0} Beats: {1} Heart Rate: {2}".format(
-        millis, beats, fr)
-        print(outputStr)
-        time.sleep(1)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/groveeldriver.py b/examples/python/groveeldriver.py
deleted file mode 100755
index 08fa8fc..0000000
--- a/examples/python/groveeldriver.py
+++ /dev/null
@@ -1,60 +0,0 @@
-#!/usr/bin/env python
-# Author: Zion Orent <zorent@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_groveeldriver as upmGroveeldriver
-
-def main():
-    # The was tested with the Grove El Driver Module
-    # Instantiate a Grove El Driver on digital pin D2
-    myEldriver = upmGroveeldriver.GroveElDriver(2)
-
-    ## Exit handlers ##
-    # This function stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit, including functions from myEldriver
-    def exitHandler():
-        print("Exiting")
-        myEldriver.off()
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    lightState = True
-
-    while(1):
-        if (lightState):
-            myEldriver.on()
-        else:
-            myEldriver.off()
-        lightState = not lightState
-
-        time.sleep(1)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/groveelectromagnet.py b/examples/python/groveelectromagnet.py
deleted file mode 100755
index b9b17d5..0000000
--- a/examples/python/groveelectromagnet.py
+++ /dev/null
@@ -1,63 +0,0 @@
-#!/usr/bin/env python
-# Author: Zion Orent <zorent@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_groveelectromagnet as upmGroveelectromagnet
-
-def main():
-    # This was tested with the Grove Electromagnetic Module
-    # Instantiate a Grove Electromagnet on digital pin D2
-    myElectromagnet = upmGroveelectromagnet.GroveElectromagnet(2)
-
-    ## Exit handlers ##
-    # This stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This lets you run code on exit,
-    # including functions from myElectromagnet
-    def exitHandler():
-        print("Exiting")
-        myElectromagnet.off()
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    magnetState = False
-
-    # Turn magnet on and off every 5 seconds
-    while(1):
-        magnetState = not magnetState
-        if (magnetState):
-            myElectromagnet.on()
-        else:
-            myElectromagnet.off()
-        print("Turning magnet", ("on" if magnetState else "off"))
-
-        time.sleep(5)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/groveemg.py b/examples/python/groveemg.py
deleted file mode 100755
index b08fb74..0000000
--- a/examples/python/groveemg.py
+++ /dev/null
@@ -1,55 +0,0 @@
-#!/usr/bin/env python
-# Author: Zion Orent <zorent@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_groveemg as upmGroveemg
-
-def main():
-    # Tested with the GroveEMG Muscle Signal Reader Sensor Module
-    # Instantiate a GroveEMG on analog pin A0
-    myEMG = upmGroveemg.GroveEMG(0)
-
-    ## Exit handlers ##
-    # This stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This lets you run code on exit, including functions from myEMG
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    print("Calibrating....")
-    myEMG.calibrate()
-
-    while (1):
-        print(myEMG.value())
-        time.sleep(.1)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/grovegprs.py b/examples/python/grovegprs.py
deleted file mode 100755
index f403cc8..0000000
--- a/examples/python/grovegprs.py
+++ /dev/null
@@ -1,89 +0,0 @@
-#!/usr/bin/env python
-# Author: Jon Trulson <jtrulson@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_grovegprs as sensorObj
-
-def main():
-    # Instantiate a GroveGPRS Module on UART 0
-    sensor = sensorObj.GroveGPRS(0)
-
-    ## Exit handlers ##
-    # This stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    # Set the baud rate, 19200 baud is the default.
-    if (sensor.setBaudRate(19200)):
-        print("Failed to set baud rate")
-        sys.exit(0)
-
-    usageStr = ("Usage:\n"
-    "If an argument is supplied on the command line, that argument is\n"
-    "sent to the module and the response is printed out.\n\n"
-    "If no argument is used, then the manufacturer and the current\n"
-    "saved profiles are queried and the results printed out.\n\n")
-    print(usageStr)
-
-    # simple helper function to send a command and wait for a response
-    def sendCommand(sensor, cmd):
-        # commands need to be terminated with a carriage return
-        cmd += "\r";
-        sensor.writeDataStr(cmd)
-
-        # wait up to 1 second
-        if (sensor.dataAvailable(1000)):
-            print("Returned: ", end=' ')
-            print(sensor.readDataStr(1024))
-        else:
-            print("Timed out waiting for response")
-
-    if (len(sys.argv) > 1):
-        print("Sending command line argument (" + sys.argv[1] + ")...")
-        sendCommand(sensor, sys.argv[1])
-    else:
-        # query the module manufacturer
-        print("Querying module manufacturer (AT+CGMI)...")
-        sendCommand(sensor, "AT+CGMI");
-
-        time.sleep(1);
-
-        # query the saved profiles
-        print("Querying the saved profiles (AT&V)...")
-        sendCommand(sensor, "AT&V");
-
-        # A comprehensive list is available from the datasheet at:
-        # http://www.seeedstudio.com/wiki/images/7/72/AT_Commands_v1.11.pdf
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/grovegsr.py b/examples/python/grovegsr.py
deleted file mode 100755
index d2c51cd..0000000
--- a/examples/python/grovegsr.py
+++ /dev/null
@@ -1,56 +0,0 @@
-#!/usr/bin/env python
-# Author: Zion Orent <zorent@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_grovegsr as upmGrovegsr
-
-def main():
-    # Tested with the GroveGSR Galvanic Skin Response Sensor module.
-
-    # Instantiate a GroveGSR on analog pin A0
-    myGSR = upmGrovegsr.GroveGSR(0)
-
-    ## Exit handlers ##
-    # This stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This lets you run code on exit, including functions from myGSR
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    print("Calibrating....")
-    myGSR.calibrate()
-
-    while (1):
-        print(myGSR.value())
-        time.sleep(.5)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/groveled.py b/examples/python/groveled.py
deleted file mode 100755
index 05a8622..0000000
--- a/examples/python/groveled.py
+++ /dev/null
@@ -1,47 +0,0 @@
-#!/usr/bin/env python
-from __future__ import print_function
-# Author: Sarah Knepper <sarah.knepper@intel.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-import time
-from upm import pyupm_grove as grove
-
-def main():
-    # Create the Grove LED object using GPIO pin 2
-    led = grove.GroveLed(2)
-
-    # Print the name
-    print(led.name())
-
-    # Turn the LED on and off 10 times, pausing one second
-    # between transitions
-    for i in range (0,10):
-        led.on()
-        time.sleep(1)
-        led.off()
-        time.sleep(1)
-
-    # Delete the Grove LED object
-    del led
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/groveledbar.py b/examples/python/groveledbar.py
deleted file mode 100755
index 975d43f..0000000
--- a/examples/python/groveledbar.py
+++ /dev/null
@@ -1,67 +0,0 @@
-#!/usr/bin/env python
-# Author: Zion Orent <zorent@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_my9221 as upmMy9221
-
-def main():
-    # Instantiate a MY9221, we use D8 for the data, and D9 for the
-    # data clock.  This was tested with a Grove LED bar.
-    myLEDBar = upmMy9221.GroveLEDBar(8, 9)
-
-    # Exit handlers
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    def exitHandler():
-        myLEDBar.setBarLevel(0, True)
-        print("Exiting")
-        sys.exit(0)
-
-    # This function lets you run code on exit
-    atexit.register(exitHandler)
-    # This function stops python from printing a stacktrace when you hit control-C
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    directionBool = True
-    level = 1
-
-    x = 0
-    while(1):
-        # If it's less than 10
-        # light up the LED now
-        # call show_LED again in 50 ms
-        if (level <= 10):
-            myLEDBar.setBarLevel(level, directionBool)
-            level += 1
-        # Switch LED lighting directions between lighting cycles
-        else:
-            directionBool = not directionBool
-            level = 1
-            time.sleep(1)
-        time.sleep(.05)
-        x += 1
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/grovelight.py b/examples/python/grovelight.py
deleted file mode 100755
index f440719..0000000
--- a/examples/python/grovelight.py
+++ /dev/null
@@ -1,43 +0,0 @@
-#!/usr/bin/env python
-from __future__ import print_function
-# Author: Sarah Knepper <sarah.knepper@intel.com>
-# Copyright (c) 2014 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-import time
-from upm import pyupm_grove as grove
-
-def main():
-    # Create the light sensor object using AIO pin 0
-    light = grove.GroveLight(0)
-
-    # Read the input and print both the raw value and a rough lux value,
-    # waiting one second between readings
-    while 1:
-        print(light.name() + " raw value is %d" % light.raw_value() + \
-            ", which is roughly %d" % light.value() + " lux");
-        time.sleep(1)
-
-    # Delete the light sensor object
-    del light
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/grovelinefinder.py b/examples/python/grovelinefinder.py
deleted file mode 100755
index 2fad2e3..0000000
--- a/examples/python/grovelinefinder.py
+++ /dev/null
@@ -1,54 +0,0 @@
-#!/usr/bin/env python
-# Author: Zion Orent <zorent@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_grovelinefinder as upmGrovelinefinder
-
-def main():
-    # Instantiate a Grove line finder sensor on digital pin D2
-    myLineFinder = upmGrovelinefinder.GroveLineFinder(2)
-
-    ## Exit handlers ##
-    # This function stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit, including functions from myLineFinder
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    while(1):
-        if (myLineFinder.whiteDetected()):
-            print("White detected.")
-        else:
-            print("Black detected.")
-        time.sleep(1)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/grovemd-stepper.py b/examples/python/grovemd-stepper.py
deleted file mode 100755
index 9b9a770..0000000
--- a/examples/python/grovemd-stepper.py
+++ /dev/null
@@ -1,55 +0,0 @@
-#!/usr/bin/env python
-# Author: Jon Trulson <jtrulson@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-import time
-from upm import pyupm_grovemd as upmGrovemd
-
-def main():
-    I2C_BUS = upmGrovemd.GROVEMD_I2C_BUS
-    I2C_ADDR = upmGrovemd.GROVEMD_DEFAULT_I2C_ADDR
-
-    # Instantiate an I2C Grove Motor Driver on I2C bus 0
-    myMotorDriver = upmGrovemd.GroveMD(I2C_BUS, I2C_ADDR)
-
-    # This example demonstrates using the GroveMD to drive a stepper motor
-
-    # configure it, for this example, we'll assume 200 steps per rev
-    myMotorDriver.configStepper(200)
-
-    # set for half a rotation
-    myMotorDriver.setStepperSteps(100)
-
-    # let it go - clockwise rotation, 10 RPM speed
-    myMotorDriver.enableStepper(upmGrovemd.GroveMD.STEP_DIR_CW, 10)
-
-    time.sleep(3)
-
-    # Now do it backwards...
-    myMotorDriver.setStepperSteps(100)
-    myMotorDriver.enableStepper(upmGrovemd.GroveMD.STEP_DIR_CCW, 10)
-
-    # now disable
-    myMotorDriver.disableStepper()
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/grovemd.py b/examples/python/grovemd.py
deleted file mode 100755
index 63cdee0..0000000
--- a/examples/python/grovemd.py
+++ /dev/null
@@ -1,51 +0,0 @@
-#!/usr/bin/env python
-# Author: Zion Orent <zorent@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time
-from upm import pyupm_grovemd as upmGrovemd
-
-def main():
-    I2C_BUS = upmGrovemd.GROVEMD_I2C_BUS
-    I2C_ADDR = upmGrovemd.GROVEMD_DEFAULT_I2C_ADDR
-
-    # Instantiate an I2C Grove Motor Driver on I2C bus 0
-    myMotorDriver = upmGrovemd.GroveMD(I2C_BUS, I2C_ADDR)
-
-    # set direction to CW and set speed to 50%
-    print("Spin M1 and M2 at half speed for 3 seconds")
-    myMotorDriver.setMotorDirections(upmGrovemd.GroveMD.DIR_CW, upmGrovemd.GroveMD.DIR_CW)
-    myMotorDriver.setMotorSpeeds(127, 127)
-
-    time.sleep(3)
-    # counter clockwise
-    print("Reversing M1 and M2 for 3 seconds")
-    myMotorDriver.setMotorDirections(upmGrovemd.GroveMD.DIR_CCW,
-    upmGrovemd.GroveMD.DIR_CCW)
-    time.sleep(3)
-
-    print("Stopping motors")
-    myMotorDriver.setMotorSpeeds(0, 0)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/grovemoisture.py b/examples/python/grovemoisture.py
deleted file mode 100755
index 13bf7e2..0000000
--- a/examples/python/grovemoisture.py
+++ /dev/null
@@ -1,64 +0,0 @@
-#!/usr/bin/env python
-# Author: Zion Orent <zorent@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_grovemoisture as upmMoisture
-
-def main():
-    # Instantiate a Grove Moisture sensor on analog pin A0
-    myMoisture = upmMoisture.GroveMoisture(0)
-
-    ## Exit handlers ##
-    # This function stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit, including functions from myMoisture
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    # Values (approximate):
-    # 0-300,   sensor in air or dry soil
-    # 300-600, sensor in humid soil
-    # 600+,    sensor in wet soil or submerged in water
-
-    # Read the value every second and print the corresponding moisture level
-    while(1):
-        moisture_val = myMoisture.value()
-        if (moisture_val >= 0 and moisture_val < 300):
-            result = "Dry"
-        elif (moisture_val >= 300 and moisture_val < 600):
-            result = "Moist"
-        else:
-            result = "Wet"
-        print("Moisture value: {0}, {1}".format(moisture_val, result))
-        time.sleep(1)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/groveo2.py b/examples/python/groveo2.py
deleted file mode 100755
index cce2bfc..0000000
--- a/examples/python/groveo2.py
+++ /dev/null
@@ -1,54 +0,0 @@
-#!/usr/bin/env python
-# Author: Zion Orent <zorent@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_groveo2 as upmGroveo2
-
-def main():
-    # This was tested with the O2 Oxygen Concentration Sensor Module
-    # Instantiate a GroveO2 on analog pin A0
-    myGroveO2 = upmGroveo2.GroveO2(0)
-
-    ## Exit handlers ##
-    # This stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This lets you run code on exit, including functions from myGroveO2
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    while(1):
-        print("The output voltage is: {0}mV".format(
-        myGroveO2.voltageValue()))
-
-        time.sleep(.1)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/groverelay.py b/examples/python/groverelay.py
deleted file mode 100755
index b1e7f9b..0000000
--- a/examples/python/groverelay.py
+++ /dev/null
@@ -1,50 +0,0 @@
-#!/usr/bin/env python
-from __future__ import print_function
-# Author: Sarah Knepper <sarah.knepper@intel.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-import time
-from upm import pyupm_grove as grove
-
-def main():
-    # Create the relay switch object using GPIO pin 0
-    relay = grove.GroveRelay(0)
-
-    # Close and then open the relay switch 3 times,
-    # waiting one second each time.  The LED on the relay switch
-    # will light up when the switch is on (closed).
-    # The switch will also make a noise between transitions.
-    for i in range (0,3):
-        relay.on()
-        if relay.isOn():
-            print(relay.name(), 'is on')
-        time.sleep(1)
-        relay.off()
-        if relay.isOff():
-            print(relay.name(), 'is off')
-        time.sleep(1)
-
-    # Delete the relay switch object
-    del relay
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/groverotary.py b/examples/python/groverotary.py
deleted file mode 100755
index 8cec63c..0000000
--- a/examples/python/groverotary.py
+++ /dev/null
@@ -1,50 +0,0 @@
-#!/usr/bin/env python
-from __future__ import print_function
-# Author: Mihai Tudor Panu <mihai.tudor.panu@intel.com>
-# Copyright (c) 2014 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from time import sleep
-from upm import pyupm_grove as grove
-
-def main():
-    # New knob on AIO pin 0
-    knob = grove.GroveRotary(0)
-
-    # Loop indefinitely
-    while True:
-        # Read values
-        abs = knob.abs_value()
-        absdeg = knob.abs_deg()
-        absrad = knob.abs_rad()
-
-        rel = knob.rel_value()
-        reldeg = knob.rel_deg()
-        relrad = knob.rel_rad()
-
-        print("Abs values: %4d" % int(abs) , " raw %4d" % int(absdeg), "deg = %5.2f" % absrad , " rad ", end=' ')
-        print("Rel values: %4d" % int(rel) , " raw %4d" % int(reldeg), "deg = %5.2f" % relrad , " rad")
-
-        # Sleep for 2.5 s
-        sleep(2.5)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/grovescam.py b/examples/python/grovescam.py
deleted file mode 100755
index ed24d99..0000000
--- a/examples/python/grovescam.py
+++ /dev/null
@@ -1,66 +0,0 @@
-#!/usr/bin/env python
-#
-# Author: Jon Trulson <jtrulson@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import sys
-from upm import pyupm_grovescam as upmGrovescam
-
-def main():
-    # Instantiate a Grove Serial Camera on UART 0
-    camera = upmGrovescam.GROVESCAM(0)
-
-    # make sure port is initialized properly. 115200 baud is the default.
-    if (not camera.setupTty()):
-        print("Failed to setup tty port parameters")
-        sys.exit(1)
-
-    if (camera.init()):
-        print("Initialized...")
-    else:
-        print("init() failed")
-
-    if (camera.preCapture()):
-        print("preCapture succeeded...")
-    else:
-        print("preCapture failed.")
-
-    if (camera.doCapture()):
-        print("doCapture succeeded...")
-    else:
-        print("doCapture failed.")
-
-    print("Image size is", camera.getImageSize(), "bytes")
-
-    if (camera.getImageSize() > 0):
-        print("Storing image.jpg...")
-        if (camera.storeImage("image.jpg")):
-            print("storeImage succeeded...")
-        else:
-            print("storeImage failed.")
-
-    print("Exiting.")
-    sys.exit(0)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/groveslide.py b/examples/python/groveslide.py
deleted file mode 100755
index d2d72ae..0000000
--- a/examples/python/groveslide.py
+++ /dev/null
@@ -1,44 +0,0 @@
-#!/usr/bin/env python
-from __future__ import print_function
-# Author: Mihai Tudor Panu <mihai.tudor.panu@intel.com>
-# Copyright (c) 2014 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from time import sleep
-from upm import pyupm_grove as grove
-
-def main():
-    # New Grove Slider on AIO pin 0
-    slider = grove.GroveSlide(0)
-
-    # Loop indefinitely
-    while True:
-        # Read values
-        raw = slider.raw_value()
-        volts = slider.voltage_value()
-
-        print("Slider value: ", raw , " = %.2f" % volts , " V")
-
-        # Sleep for 2.5 s
-        sleep(2.5)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/grovespeaker.py b/examples/python/grovespeaker.py
deleted file mode 100755
index 58f2be2..0000000
--- a/examples/python/grovespeaker.py
+++ /dev/null
@@ -1,38 +0,0 @@
-#!/usr/bin/env python
-# Author: Zion Orent <zorent@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-import time, sys, signal, atexit
-from upm import pyupm_grovespeaker as upmGrovespeaker
-
-def main():
-    # Instantiate a Grove Speaker on digital pin D2
-    mySpeaker = upmGrovespeaker.GroveSpeaker(2)
-
-    # Play all 7 of the lowest notes
-    mySpeaker.playAll()
-
-    # Play a medium C-sharp
-    mySpeaker.playSound('c', True, "med")
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/grovetemp.py b/examples/python/grovetemp.py
deleted file mode 100755
index 59adc03..0000000
--- a/examples/python/grovetemp.py
+++ /dev/null
@@ -1,47 +0,0 @@
-#!/usr/bin/env python
-from __future__ import print_function
-# Author: Brendan Le Foll <brendan.le.foll@intel.com>
-# Contributions: Sarah Knepper <sarah.knepper@intel.com>
-# Copyright (c) 2014 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-import time
-from upm import pyupm_grove as grove
-
-def main():
-    # Create the temperature sensor object using AIO pin 0
-    temp = grove.GroveTemp(0)
-    print(temp.name())
-
-    # Read the temperature ten times, printing both the Celsius and
-    # equivalent Fahrenheit temperature, waiting one second between readings
-    for i in range(0, 10):
-        celsius = temp.value()
-        fahrenheit = celsius * 9.0/5.0 + 32.0;
-        print("%d degrees Celsius, or %d degrees Fahrenheit" \
-            % (celsius, fahrenheit))
-        time.sleep(1)
-
-    # Delete the temperature sensor object
-    del temp
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/grovevdiv.py b/examples/python/grovevdiv.py
deleted file mode 100755
index fc3b0b2..0000000
--- a/examples/python/grovevdiv.py
+++ /dev/null
@@ -1,57 +0,0 @@
-#!/usr/bin/env python
-# Author: Zion Orent <zorent@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_grovevdiv as upmGrovevdiv
-
-def main():
-    # Instantiate a Grove Voltage Divider sensor on analog pin A0
-    myVoltageDivider = upmGrovevdiv.GroveVDiv(0)
-
-    ## Exit handlers ##
-    # This stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit,
-    # including functions from myVoltageDivider
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    while(1):
-        val = myVoltageDivider.value(100)
-        gain3val = myVoltageDivider.computedValue(3, val)
-        gain10val = myVoltageDivider.computedValue(10, val)
-        print("ADC value: {0} Gain 3: {1}v Gain 10: {2}v".format(
-        val,  gain3val, gain10val))
-
-        time.sleep(1)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/grovewater.py b/examples/python/grovewater.py
deleted file mode 100755
index 1ed8508..0000000
--- a/examples/python/grovewater.py
+++ /dev/null
@@ -1,54 +0,0 @@
-#!/usr/bin/env python
-# Author: Zion Orent <zorent@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_grovewater as upmGrovewater
-
-def main():
-    # Instantiate a Grove Water sensor on digital pin D2
-    myWaterSensor = upmGrovewater.GroveWater(2)
-
-    ## Exit handlers ##
-    # This function stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit, including functions from myWaterSensor
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    while(1):
-        if (myWaterSensor.isWet()):
-            print("Sensor is wet")
-        else:
-            print("Sensor is dry")
-        time.sleep(1)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/grovewfs.py b/examples/python/grovewfs.py
deleted file mode 100755
index 907c3be..0000000
--- a/examples/python/grovewfs.py
+++ /dev/null
@@ -1,67 +0,0 @@
-#!/usr/bin/env python
-# Author: Zion Orent <zorent@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_grovewfs as upmGrovewfs
-
-def main():
-    # Instantiate a Grove Water Flow Sensor on digital pin D2
-    myWaterFlow = upmGrovewfs.GroveWFS(2)
-
-    ## Exit handlers ##
-    # This stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit,
-    # including functions from myWaterFlow
-    def exitHandler():
-        myWaterFlow.stopFlowCounter()
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    # set the flow counter to 0 and start counting
-    myWaterFlow.clearFlowCounter()
-    myWaterFlow.startFlowCounter()
-
-    while (1):
-        # we grab these (millis and flowCount) just for display
-        # purposes in this example
-        millis = myWaterFlow.getMillis()
-        flowCount = myWaterFlow.flowCounter()
-
-        fr = myWaterFlow.flowRate()
-
-        # output milliseconds passed, flow count, and computed flow rate
-        outputStr = "Millis: {0} Flow Count: {1} Flow Rate: {2} LPM".format(
-        millis, flowCount, fr)
-        print(outputStr)
-        time.sleep(2)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/gsr.py b/examples/python/gsr.py
deleted file mode 100755
index 67db0a7..0000000
--- a/examples/python/gsr.py
+++ /dev/null
@@ -1,56 +0,0 @@
-#!/usr/bin/env python
-# Author: Zion Orent <zorent@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_gsr as upmGsr
-
-def main():
-    # Tested with the GSR Galvanic Skin Response Sensor module.
-
-    # Instantiate a GSR on analog pin A0
-    myGSR = upmGsr.GSR(0)
-
-    ## Exit handlers ##
-    # This stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This lets you run code on exit, including functions from myGSR
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    print("Calibrating....")
-    myGSR.calibrate()
-
-    while (1):
-        print(myGSR.value())
-        time.sleep(.5)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/guvas12d.py b/examples/python/guvas12d.py
deleted file mode 100755
index 3f943a2..0000000
--- a/examples/python/guvas12d.py
+++ /dev/null
@@ -1,57 +0,0 @@
-#!/usr/bin/env python
-# Author: Zion Orent <zorent@ics.com>
-#         Jon Trulson <jtrulson@ics.com>
-# Copyright (c) 2015-2016 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_guvas12d as upmUV
-
-def main():
-    # analog voltage, usually 3.3 or 5.0
-    GUVAS12D_AREF = 5.0;
-
-    # Instantiate a UV sensor on analog pin A0
-    myUVSensor = upmUV.GUVAS12D(0, GUVAS12D_AREF);
-
-    ## Exit handlers ##
-    # This function stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit, including functions from myUVSensor
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    while(1):
-        s = ("Volts:  {0}, Intensity: {1} mW/m^2".format(myUVSensor.volts(),
-                                                         myUVSensor.intensity()))
-        print(s)
-        time.sleep(1)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/h3lis331dl.py b/examples/python/h3lis331dl.py
deleted file mode 100755
index b7de2bd..0000000
--- a/examples/python/h3lis331dl.py
+++ /dev/null
@@ -1,79 +0,0 @@
-#!/usr/bin/env python
-# Author: Jon Trulson <jtrulson@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_h3lis331dl as upmH3LIS331DL
-
-def main():
-    # Instantiate an H3LIS331DL on I2C bus 0
-    myDigitalAccelerometer = upmH3LIS331DL.H3LIS331DL(
-            upmH3LIS331DL.H3LIS331DL_I2C_BUS,
-            upmH3LIS331DL.H3LIS331DL_DEFAULT_I2C_ADDR);
-
-    ## Exit handlers ##
-    # This function stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit, including functions from myDigitalAccelerometer
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    # Initialize the device with default values
-    myDigitalAccelerometer.init()
-
-    x = upmH3LIS331DL.new_intp()
-    y = upmH3LIS331DL.new_intp()
-    z = upmH3LIS331DL.new_intp()
-
-    ax = upmH3LIS331DL.new_floatp()
-    ay = upmH3LIS331DL.new_floatp()
-    az = upmH3LIS331DL.new_floatp()
-
-    while (1):
-        myDigitalAccelerometer.update()
-        myDigitalAccelerometer.getRawXYZ(x, y, z)
-        outputStr = ("Raw: X = {0}"
-        " Y = {1}"
-        " Z = {2}").format(upmH3LIS331DL.intp_value(x),
-        upmH3LIS331DL.intp_value(y),
-        upmH3LIS331DL.intp_value(z))
-        print(outputStr)
-
-        myDigitalAccelerometer.getAcceleration(ax, ay, az)
-        outputStr = ("Acceleration: AX = {0}"
-        " AY = {1}"
-        " AZ = {2}").format(upmH3LIS331DL.floatp_value(ax),
-        upmH3LIS331DL.floatp_value(ay),
-        upmH3LIS331DL.floatp_value(az))
-        print(outputStr)
-        time.sleep(.5)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/h803x.py b/examples/python/h803x.py
deleted file mode 100755
index 7c6b4ef..0000000
--- a/examples/python/h803x.py
+++ /dev/null
@@ -1,111 +0,0 @@
-#!/usr/bin/env python
-# Author: Jon Trulson <jtrulson@ics.com>
-# Copyright (c) 2016 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_h803x as sensorObj
-
-def main():
-    ## Exit handlers ##
-    # This function stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit
-    def exitHandler():
-        print("Exiting...")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    defaultDev = "/dev/ttyUSB0"
-
-    # if an argument was specified, use it as the device instead
-    if (len(sys.argv) > 1):
-        defaultDev = sys.argv[1]
-
-    print("Using device", defaultDev)
-    print("Initializing...")
-
-    # Instantiate an H803X instance, using MODBUS slave address 1, and
-    # default comm parameters (9600, 8, N, 2)
-    sensor = sensorObj.H803X(defaultDev, 1)
-
-    # output the serial number and firmware revision
-    print("Slave ID:", sensor.getSlaveID())
-
-    print()
-
-    # update and print available values every second
-    while (1):
-        # update our values from the sensor
-        sensor.update()
-
-        # H8035 / H8036
-        print("Consumption (kWh):", sensor.getConsumption())
-        print("Real Power (kW):", sensor.getRealPower())
-
-        if (sensor.isH8036()):
-            # The H8036 has much more data available...
-
-            print("Reactive Power (kVAR):", sensor.getReactivePower())
-            print("Apparent Power (kVA):", sensor.getApparentPower())
-            print("Power Factor:", sensor.getPowerFactor())
-            print("Volts Line to Line:", sensor.getVoltsLineToLine())
-            print("Volts Line to Neutral:", sensor.getVoltsLineToNeutral())
-
-            print("Current:", sensor.getCurrent())
-
-            print("Real Power Phase A (kW):", sensor.getRealPowerPhaseA())
-            print("Real Power Phase B (kW):", sensor.getRealPowerPhaseB())
-            print("Real Power Phase C (kW):", sensor.getRealPowerPhaseC())
-
-            print("Power Factor Phase A:", sensor.getPowerFactorPhaseA())
-            print("Power Factor Phase B:", sensor.getPowerFactorPhaseB())
-            print("Power Factor Phase C:", sensor.getPowerFactorPhaseC())
-
-            print("Volts Phase A to B:", sensor.getVoltsPhaseAToB())
-            print("Volts Phase B to C:", sensor.getVoltsPhaseBToC())
-            print("Volts Phase A to C:", sensor.getVoltsPhaseAToC())
-            print("Volts Phase A to Neutral: ", end=' ')
-            print(sensor.getVoltsPhaseAToNeutral())
-            print("Volts Phase B to Neutral: ", end=' ')
-            print(sensor.getVoltsPhaseBToNeutral())
-            print("Volts Phase C to Neutral: ", end=' ')
-            print(sensor.getVoltsPhaseCToNeutral())
-
-            print("Current Phase A:", sensor.getCurrentPhaseA())
-            print("Current Phase B:", sensor.getCurrentPhaseB())
-            print("Current Phase C:", sensor.getCurrentPhaseC())
-
-            print("Avg Real Power (kW):", sensor.getAvgRealPower())
-            print("Min Real Power (kW):", sensor.getMinRealPower())
-            print("Max Real Power (kW):", sensor.getMaxRealPower())
-
-        print()
-        time.sleep(2)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/hcsr04.py b/examples/python/hcsr04.py
deleted file mode 100755
index daae0fe..0000000
--- a/examples/python/hcsr04.py
+++ /dev/null
@@ -1,52 +0,0 @@
-#!/usr/bin/env python
-# Author: Abhishek Malik <abhishek.malik@intel.com>
-# Copyright (c) 2017 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_hcsr04 as hcsr04
-
-def main():
-    # Instantiate a HCSR04 Distance sensor on digital pins 2 and 4
-    hcsr04_sensor = hcsr04.HCSR04(2, 4);
-
-    ## Exit handlers ##
-    # This function stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    # Read the value every second and detect the pressure
-    while(1):
-        print("Distance: {0}".format(hcsr04_sensor.getDistance(hcsr04.HCSR04_CM)))
-        time.sleep(1)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/hdc1000.py b/examples/python/hdc1000.py
deleted file mode 100755
index 3a60b5a..0000000
--- a/examples/python/hdc1000.py
+++ /dev/null
@@ -1,57 +0,0 @@
-#!/usr/bin/env python
-# Author: Norbert Wesp <nwesp@phytec.de>
-# Copyright (c) 2017 Phytec Messtechnik GmbH.
-#
-# based on: tcs3414cs.py
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_hdc1000 as HDC1000
-
-def main():
-    # Instantiate the Temperature and Humidity Sensor on I2C on bus 1
-    mySensor = HDC1000.HDC1000(1)
-
-    ## Exit handlers ##
-    # This stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This lets you run code on exit,
-    # including functions from mySensor
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    # Print out the humidity and temperature value every 0.5 seconds
-    while(1):
-        mySensor.getHumidity(True)
-        mySensor.getTemperature(True)
-
-        time.sleep(.5)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/hdxxvxta.py b/examples/python/hdxxvxta.py
deleted file mode 100755
index d6255f8..0000000
--- a/examples/python/hdxxvxta.py
+++ /dev/null
@@ -1,64 +0,0 @@
-#!/usr/bin/env python
-# Author: Jon Trulson <jtrulson@ics.com>
-# Copyright (c) 2016 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_hdxxvxta as sensorObj
-
-def main():
-    ## Exit handlers ##
-    # This function stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    print("Initializing...")
-
-    # Instantiate an HDXXVXTA instance, using A1 for humidity and A0
-    # for temperature
-    sensor = sensorObj.HDXXVXTA(1, 0)
-
-    # update and print available values every second
-    while (1):
-        # update our values from the sensor
-        sensor.update()
-
-        # we show both C and F for temperature
-        print("Temperature:", sensor.getTemperature(), "C /", end=' ')
-        print(sensor.getTemperature(True), "F")
-
-        print("Humidity:", sensor.getHumidity(), "%")
-
-        print()
-        time.sleep(1)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/hka5.py b/examples/python/hka5.py
deleted file mode 100755
index 28ee9ea..0000000
--- a/examples/python/hka5.py
+++ /dev/null
@@ -1,67 +0,0 @@
-#!/usr/bin/env python
-# Author: Jon Trulson <jtrulson@ics.com>
-# Copyright (c) 2016 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_hka5 as sensorObj
-
-def main():
-    # Instantiate a HKA5 sensor on uart 0.  We don't use the set or
-    # reset pins, so we pass -1 for them.
-    sensor = sensorObj.HKA5(0, -1, -1)
-
-    ## Exit handlers ##
-    # This function stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    # update once every 2 seconds and output data
-    while (True):
-        sensor.update()
-
-        print("PM 1  :", end=' ')
-        print(sensor.getPM1(), end=' ')
-        print(" ug/m3")
-
-        print("PM 2.5:", end=' ')
-        print(sensor.getPM2_5(), end=' ')
-        print(" ug/m3")
-
-        print("PM 10 :", end=' ')
-        print(sensor.getPM10(), end=' ')
-        print(" ug/m3")
-
-        print()
-        time.sleep(2)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/hm11.py b/examples/python/hm11.py
deleted file mode 100755
index c316ceb..0000000
--- a/examples/python/hm11.py
+++ /dev/null
@@ -1,110 +0,0 @@
-#!/usr/bin/env python
-# Author: Zion Orent <zorent@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_hm11 as upmHm11
-
-def main():
-    # Instantiate a HM11 BLE Module on UART 0
-    my_ble_obj = upmHm11.HM11(0)
-
-    ## Exit handlers ##
-    # This stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit,
-    # including functions from my_ble_obj
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    bufferLength = 256
-
-    # make sure port is initialized properly. 9600 baud is the default.
-    if (not my_ble_obj.setupTty(upmHm11.cvar.int_B9600)):
-        print("Failed to setup tty port parameters")
-        sys.exit(0)
-
-    usageStr = ("Usage:\n"
-    "Pass a commandline argument (any argument) to this program\n"
-    "to query the radio configuration and output it.  NOTE: the\n"
-    "radio must be in CONFIG mode for this to work.\n\n"
-    "Running this program without arguments will simply transmit\n"
-    "'Hello World!' every second, and output any data received from\n"
-    "another radio.\n\n")
-    print(usageStr)
-
-    # simple helper function to send a command and wait for a response
-    def sendCommand(bleObj, cmd):
-        bleBuffer = upmHm11.charArray(bufferLength)
-        bleObj.writeData(cmd, len(cmd))
-
-        # wait up to 1 second
-        if (bleObj.dataAvailable(1000)):
-            bleObj.readData(bleBuffer, bufferLength)
-            bleData = ""
-            # read only the number of characters
-            # specified by myGPSSensor.readData
-            for x in range(0, bufferLength):
-                if (bleBuffer.__getitem__(x) == '\0'):
-                    break
-                else:
-                    bleData += bleBuffer.__getitem__(x)
-            print(bleData)
-        else:
-            print("Timed out waiting for response")
-
-    if (len(sys.argv) > 1):
-        print("Sending command line argument (" + sys.argv[1] + ")...")
-        sendCommand(my_ble_obj, sys.argv[1])
-    else:
-        # query the module address
-        addr = "AT+ADDR?";
-        print("Querying module address (" + addr + ")...")
-
-        sendCommand(my_ble_obj, addr)
-        time.sleep(1)
-        # query the module address
-        pin = "AT+PASS?";
-        print("Querying module PIN (" + pin + ")...")
-        sendCommand(my_ble_obj, pin)
-
-        # Other potentially useful commands are:
-        #
-        # AT+VERS? - query module version
-        # AT+ROLE0 - set as slave
-        # AT+ROLE1 - set as master
-        # AT+CLEAR - clear all previous settings
-        # AT+RESET - restart the device
-        #
-        # A comprehensive list is available from the datasheet at:
-        # http://www.seeedstudio.com/wiki/images/c/cd/Bluetooth4_en.pdf
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/hmc5883l.py b/examples/python/hmc5883l.py
deleted file mode 100755
index 9ade1ea..0000000
--- a/examples/python/hmc5883l.py
+++ /dev/null
@@ -1,49 +0,0 @@
-#!/usr/bin/env python
-from __future__ import print_function
-# Author: Mihai Tudor Panu <mihai.tudor.panu@intel.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from time import sleep
-from upm import pyupm_hmc5883l as hmc5883l
-
-def main():
-    # Create an I2C compass object and set declination
-    hmc = hmc5883l.Hmc5883l(0)
-    hmc.set_declination(0.2749)
-
-    # Loop indefinitely
-    while True:
-        hmc.update() # Update the data
-        pos = hmc.coordinates() # Read raw coordinates
-        hdg = hmc.heading() # Read heading
-        dir = hmc.direction() # Read direction
-
-        # Print values
-        print("Coor: %5d %5d %5d" % (pos[0], pos[1], pos[2]))
-        print("Heading: %5.2f" % (hdg))
-        print("Direction: %3.2f\n" % (dir))
-
-        # Sleep for 1 s
-        sleep(1)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/hmtrp.py b/examples/python/hmtrp.py
deleted file mode 100755
index 11ee2d0..0000000
--- a/examples/python/hmtrp.py
+++ /dev/null
@@ -1,144 +0,0 @@
-#!/usr/bin/env python
-# Author: Zion Orent <zorent@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_hmtrp as upmHmtrp
-
-def main():
-    # Instantiate a HMTRP radio device on uart 0
-    my_HMTRP_Radio = upmHmtrp.HMTRP(0)
-
-    ## Exit handlers ##
-    # This stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit,
-    # including functions from my_HMTRP_Radio
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    myCounter = 0
-
-    # normal read/write mode
-    bufferLength = 256
-    radioBuffer = upmHmtrp.charArray(bufferLength)
-
-    # make sure port is initialized properly. 9600 baud is the default.
-    if (not my_HMTRP_Radio.setupTty(upmHmtrp.cvar.int_B9600)):
-        print("Failed to setup tty port parameters")
-        sys.exit(0)
-
-    usageStr = ("Usage:\n"
-    "Pass a commandline argument (any argument) to this program\n"
-    "to query the radio configuration and output it.  NOTE: the\n"
-    "radio must be in CONFIG mode for this to work.\n\n"
-    "Running this program without arguments will simply transmit\n"
-    "'Hello World!' every second, and output any data received from\n"
-    "another radio.\n\n")
-    print(usageStr)
-
-    '''
-    By default, this radio simply transmits data sent via writeData()
-    and reads any available data via readData().
-
-    It can be placed into a configuration mode by grounding the
-    CONFIG pin on the module.  When this is done, the various
-    configuration query and config methods can be used.  In this
-    example, by default, we just read any data available fom the
-    device, and periodically transmit "Hello World".
-
-    If any argument was specified on the command line, do a simple
-    configuration query and output the results.  The radio must be in
-    CONFIG mode for this to work.
-
-    Note that the first command-line argument should be "hmtry.py"
-    The data we want would be the second... if it exists
-    '''
-    if (len(sys.argv) > 1):
-        # config mode
-        freq = upmHmtrp.uint32Array(0)
-        dataRate = upmHmtrp.uint32Array(0)
-        rxBandwidth = upmHmtrp.uint16Array(0)
-        modulation = upmHmtrp.uint8Array(0)
-        txPower = upmHmtrp.uint8Array(0)
-        uartBaud = upmHmtrp.uint32Array(0)
-
-        if (my_HMTRP_Radio.getConfig(freq, dataRate, rxBandwidth,
-        modulation, txPower, uartBaud)):
-            print("Radio configuration:")
-            outputStr = ("freq: {0} dataRate: {1} "
-            "rxBandwidth: {2}Khz").format(freq.__getitem__(0),
-            dataRate.__getitem__(0),
-            rxBandwidth.__getitem__(0))
-            print(outputStr)
-
-            outputStr = "modulation: %d Khz txPower: %d uartBaud: %d" % (
-            modulation.__getitem__(0), txPower.__getitem__(0),
-            uartBaud.__getitem__(0))
-            print(outputStr)
-        else:
-            errString = ("getConfig() failed.  Make sure the radio "
-            "is in CONFIG mode.")
-            print(errString)
-    else:
-        print("Running in normal read/write mode.")
-        while (1):
-            # we don't want the read to block in this example, so always
-            # check to see if data is available first.
-            if (my_HMTRP_Radio.dataAvailable()):
-                rv = my_HMTRP_Radio.readData(radioBuffer, bufferLength)
-
-                if (rv > 0):
-                    resultStr = "";
-                    for x in range(rv):
-                        resultStr += radioBuffer.__getitem__(x)
-                    print("Received:", resultStr)
-
-                if (rv < 0): # some sort of read error occurred
-                    print("Port read error.")
-                    sys.exit(0)
-            myCounter += 1
-            # every second, transmit "Hello World"
-            if (myCounter > 10):
-                msg = "Hello World!"
-
-                print("Transmitting %s..." % msg)
-
-                # Adding 1 for NULL terminator.
-                # Note that SWIG automatically adds a NULL terminator,
-                # so no need to NULL-terminate ourselves.
-                # Just increment the message length to include
-                # the NULL that's already there
-                my_HMTRP_Radio.writeData(msg, (len(msg) + 1))
-                myCounter = 0
-            time.sleep(.1)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/hp20x.py b/examples/python/hp20x.py
deleted file mode 100755
index 603efc1..0000000
--- a/examples/python/hp20x.py
+++ /dev/null
@@ -1,58 +0,0 @@
-#!/usr/bin/env python
-# Author: Jon Trulson <jtrulson@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_hp20x as barometerObj
-
-def main():
-    ## Exit handlers ##
-    # This stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit,
-    # including functions from ringCoder
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    # Instantiate an HP20X on default I2C bus and address
-    bar = barometerObj.HP20X()
-
-    # Initialize the device with default values
-    bar.init()
-
-    while(1):
-        print("Temperature:", bar.getTemperature(), "Celsius")
-        print("Pressure:   ", bar.getPressure(), "Millibars")
-        print("Altitude:   ", bar.getAltitude(), "Meters")
-        print()
-        time.sleep(1)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/ht9170.py b/examples/python/ht9170.py
deleted file mode 100755
index f029cb4..0000000
--- a/examples/python/ht9170.py
+++ /dev/null
@@ -1,58 +0,0 @@
-#!/usr/bin/env python
-# Author: Zion Orent <zorent@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_ht9170 as upmHt9170
-
-def main():
-    # Instantiate a DTMF decoder
-    myDTMF = upmHt9170.HT9170(12, 11, 10, 9, 8)
-
-    ## Exit handlers ##
-    # This stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This lets you run code on exit, including functions from myDTMF
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    # Now we just spin in a loop, sleeping every 100ms, checking to see
-    # if a digit is available.  If so, we decode and print the digit,
-    # and continue looping.
-    while (1):
-        if (dtmf_obj.digitReady()):
-            print("Got DTMF code:", dtmf_obj.decodeDigit())
-            # now spin until digitReady() goes false again
-            while (dtmf.digitReady()):
-                pass
-        time.sleep(.1)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/htu21d.py b/examples/python/htu21d.py
deleted file mode 100755
index b1fea0e..0000000
--- a/examples/python/htu21d.py
+++ /dev/null
@@ -1,44 +0,0 @@
-#!/usr/bin/env python
-from __future__ import print_function
-# Author: Mihai Tudor Panu <mihai.tudor.panu@intel.com>
-# Copyright (c) 2017 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from time import sleep
-from upm import pyupm_htu21d as htu21d
-
-def main():
-    # Create an I2C sensor object
-    sensor = htu21d.HTU21D(0)
-
-    # Loop indefinitely, updating data and printing values
-    while True:
-        sensor.sampleData()
-        print("Relative Humidity: %f %%" % sensor.getHumidity())
-        print("Compensated RH: %f %%" % sensor.getCompRH())
-        print("Temperature: %f C" % sensor.getTemperature())
-        print("Dew Point: %f C" % sensor.getDewPoint())
-
-        # Sleep for 1 s
-        sleep(1)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/hwxpxx.py b/examples/python/hwxpxx.py
deleted file mode 100755
index c065fee..0000000
--- a/examples/python/hwxpxx.py
+++ /dev/null
@@ -1,84 +0,0 @@
-#!/usr/bin/env python
-# Author: Jon Trulson <jtrulson@ics.com>
-# Copyright (c) 2016 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_hwxpxx as sensorObj
-
-def main():
-    ## Exit handlers ##
-    # This function stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit
-    def exitHandler():
-        print("Exiting...")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    defaultDev = "/dev/ttyUSB0"
-
-    # if an argument was specified, use it as the device instead
-    if (len(sys.argv) > 1):
-        defaultDev = sys.argv[1]
-
-    print("Using device", defaultDev)
-    print("Initializing...")
-
-    # Instantiate an HWXPXX instance, using MODBUS slave address 3, and
-    # default comm parameters (19200, 8, N, 2)
-    sensor = sensorObj.HWXPXX(defaultDev, 3)
-
-    # output the serial number and firmware revision
-    print("Slave ID:", sensor.getSlaveID())
-
-    # stored temperature and humidity offsets
-    print("Temperature Offset:", sensor.getTemperatureOffset())
-    print("Humidity Offset:", sensor.getHumidityOffset())
-
-    print()
-
-    # update and print available values every second
-    while (1):
-        # update our values from the sensor
-        sensor.update()
-
-        # we show both C and F for temperature
-        print("Temperature:", sensor.getTemperature(), "C /", end=' ')
-        print(sensor.getTemperature(True), "F")
-
-        print("Humidity:", sensor.getHumidity(), "%")
-
-        print("Slider:", sensor.getSlider(), "%")
-
-        print("Override Switch Status:", sensor.getOverrideSwitchStatus())
-
-        print()
-        time.sleep(1)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/ili9341.py b/examples/python/ili9341.py
deleted file mode 100755
index 8b56844..0000000
--- a/examples/python/ili9341.py
+++ /dev/null
@@ -1,79 +0,0 @@
-#!/usr/bin/env python
-# Author: Shawn Hymel
-# Copyright (c) 2016 SparkFun Electronics
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-import time
-from upm import pyupm_ili9341 as ili9341
-
-def main():
-    # Pins (Edison)
-    # CS_LCD   GP44 (MRAA 31)
-    # CS_SD    GP43 (MRAA 38) unused
-    # DC       GP12 (MRAA 20)
-    # RESEST   GP13 (MRAA 14)
-    lcd = ili9341.ILI9341(31, 38, 20, 14)
-
-    # Fill the screen with a solid color
-    lcd.fillScreen(lcd.color565(0, 40, 16))
-
-    # Draw some shapes
-    lcd.drawFastVLine(10, 10, 100, ili9341.ILI9341_RED)
-    lcd.drawFastHLine(20, 10, 50, ili9341.ILI9341_CYAN)
-    lcd.drawLine(160, 30, 200, 60, ili9341.ILI9341_GREEN)
-    lcd.fillRect(20, 30, 75, 60, ili9341.ILI9341_ORANGE)
-    lcd.drawCircle(70, 50, 20, ili9341.ILI9341_PURPLE)
-    lcd.fillCircle(120, 50, 20, ili9341.ILI9341_PURPLE)
-    lcd.drawTriangle(50, 100, 10, 140, 90, 140, ili9341.ILI9341_YELLOW)
-    lcd.fillTriangle(150, 100, 110, 140, 190, 140, ili9341.ILI9341_YELLOW)
-    lcd.drawRoundRect(20, 150, 50, 30, 10, ili9341.ILI9341_RED)
-    lcd.drawRoundRect(130, 150, 50, 30, 10, ili9341.ILI9341_RED)
-    lcd.fillRoundRect(75, 150, 50, 30, 10, ili9341.ILI9341_RED)
-
-    # Write some text
-    lcd.setCursor(0, 200)
-    lcd.setTextColor(ili9341.ILI9341_LIGHTGREY)
-    lcd.setTextWrap(True)
-    lcd.setTextSize(1)
-    lcd._print("Text 1\n")
-    lcd.setTextSize(2)
-    lcd._print("Text 2\n")
-    lcd.setTextSize(3)
-    lcd._print("Text 3\n")
-    lcd.setTextSize(4)
-    lcd._print("Text 4\n")
-
-    # Test screen rotation
-    for r in range(0, 4):
-        lcd.setRotation(r)
-        lcd.fillRect(0, 0, 5, 5, ili9341.ILI9341_WHITE)
-        time.sleep(1)
-
-    # Invert colors, wait, then revert back
-    lcd.invertDisplay(True)
-    time.sleep(2)
-    lcd.invertDisplay(False)
-
-    # Don't forget to free up that memory!
-    del lcd
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/ims.py b/examples/python/ims.py
deleted file mode 100755
index de8547b..0000000
--- a/examples/python/ims.py
+++ /dev/null
@@ -1,44 +0,0 @@
-#!/usr/bin/env python
-# Author: Noel Eck <noel.eck@intel.com>
-# Copyright (c) 2016 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_ims
-
-def main():
-    # Create an instance of the I2C Moisture Sensor
-    # I2C bus 0, default address = 0x20
-    ims = pyupm_ims.IMS(0)
-
-    print ('I2C moisture sensor example...')
-    while (1):
-        try:
-            print ('Version: %d light: 0x%04x moisture: 0x%04x temp: %3.2f C' \
-                    % (ims.get_version(), ims.get_light(), ims.get_moisture(),
-                    ims.get_temperature()))
-            time.sleep(1)
-        except KeyboardInterrupt:
-            break
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/ina132.py b/examples/python/ina132.py
deleted file mode 100755
index 08f639f..0000000
--- a/examples/python/ina132.py
+++ /dev/null
@@ -1,53 +0,0 @@
-#!/usr/bin/env python
-# Author: Zion Orent <zorent@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_ina132 as upmIna132
-
-def main():
-    # Tested with the INA132 Differential Amplifier Sensor module.
-    # Instantiate an INA132 on analog pin A0
-    myDifferentialAmplifier = upmIna132.INA132(0)
-
-    ## Exit handlers ##
-    # This stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This lets you run code on exit,
-    # including functions from myDifferentialAmplifier
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    while(1):
-        print(myDifferentialAmplifier.value())
-        time.sleep(1)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/isd1820.py b/examples/python/isd1820.py
deleted file mode 100755
index d19bf3c..0000000
--- a/examples/python/isd1820.py
+++ /dev/null
@@ -1,74 +0,0 @@
-#!/usr/bin/env python
-# Author: Zion Orent <zorent@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, atexit
-from upm import pyupm_isd1820 as upmIsd1820
-
-def main():
-    # Instantiate a ISD1820 on digital pins 2 (play) and 3 (record)
-    # This example was tested on the Grove Recorder.
-    myRecorder = upmIsd1820.ISD1820(2, 3)
-
-    doRecord = False
-
-    if len(sys.argv) > 1:
-        doRecord = True
-
-    # This lets you run code on exit,
-    # including functions from myRecorder
-    def exitHandler():
-        # turn off whatever we were doing.
-        if (doRecord):
-            myRecorder.record(False)
-        else:
-            myRecorder.play(False)
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-
-    # if an argument was specified (any argument), go into record mode,
-    # else playback a previously recorded sample
-
-    print("Supply any argument to the command line to record.")
-    print("Running this example without arguments will play back any ")
-    print("previously recorded sound.")
-    print("There is approximately 10 seconds of recording time.\n")
-
-    # depending on what was selected, do it, and sleep for 15 seconds
-    if (doRecord):
-        myRecorder.record(True)
-    else:
-        myRecorder.play(True)
-
-    # There are about 10 seconds of recording/playback time, so we will
-    # sleep for a little extra time.
-    print("Sleeping for 15 seconds...")
-    time.sleep(15)
-
-    # exitHandler runs automatically
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/itg3200.py b/examples/python/itg3200.py
deleted file mode 100755
index a511ffa..0000000
--- a/examples/python/itg3200.py
+++ /dev/null
@@ -1,48 +0,0 @@
-#!/usr/bin/env python
-from __future__ import print_function
-# Author: John Van Drasek <john.r.van.drasek@intel.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-import time
-from upm import pyupm_itg3200 as itg3200
-
-def main():
-    # Create an I2C gyro object
-    gyro = itg3200.Itg3200(0)
-
-    while(1):
-        gyro.update() # Update the data
-        rot = gyro.getRawValues() # Read raw sensor data
-        ang = gyro.getRotation() # Read rotational speed (deg/sec)
-        print("Raw: %6d %6d %6d" % (rot[0], rot[1], rot[2]))
-        print("AngX: %5.2f" % (ang[0]))
-        print("AngY: %5.2f" % (ang[1]))
-        print("AngZ: %5.2f" % (ang[2]))
-        print("Temp: %5.2f Raw: %6d" % (gyro.getTemperature(), gyro.getRawTemp()))
-        print(' ')
-        time.sleep(1)
-
-    # Delete the gyro object
-    del gyro
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/jhd1313m1-lcd.py b/examples/python/jhd1313m1-lcd.py
deleted file mode 100755
index 56a9861..0000000
--- a/examples/python/jhd1313m1-lcd.py
+++ /dev/null
@@ -1,42 +0,0 @@
-#!/usr/bin/env python
-# Author: Brendan Le Foll <brendan.le.foll@intel.com>
-# Copyright (c) 2014 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from upm import pyupm_jhd1313m1 as lcd
-
-def main():
-    # Initialize Jhd1313m1 at 0x3E (LCD_ADDRESS) and 0x62 (RGB_ADDRESS)
-    myLcd = lcd.Jhd1313m1(0, 0x3E, 0x62)
-
-    myLcd.setCursor(0,0)
-    # RGB Blue
-    #myLcd.setColor(53, 39, 249)
-
-    # RGB Red
-    myLcd.setColor(255, 0, 0)
-
-    myLcd.write('Hello World')
-    myLcd.setCursor(1,2)
-    myLcd.write('Hello World')
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/joystick12.py b/examples/python/joystick12.py
deleted file mode 100755
index 0f08c50..0000000
--- a/examples/python/joystick12.py
+++ /dev/null
@@ -1,55 +0,0 @@
-#!/usr/bin/env python
-# Author: Zion Orent <zorent@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_joystick12 as upmJoystick12
-
-def main():
-    # Instantiate a joystick on analog pins A0 and A1
-    myJoystick = upmJoystick12.Joystick12(0, 1)
-
-    ## Exit handlers ##
-    # This function stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit, including functions from myJoystick
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    # Print the X and Y input values every second
-    while(1):
-        XString = "Driving X:" + str(myJoystick.getXInput())
-        YString = ": and Y:" + str(myJoystick.getYInput())
-        print(XString + YString)
-
-        time.sleep(1)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/kx122.py b/examples/python/kx122.py
deleted file mode 100755
index b64ef4d..0000000
--- a/examples/python/kx122.py
+++ /dev/null
@@ -1,64 +0,0 @@
-#!/usr/bin/env python
-# Author: Noel Eck <noel.eck@intel.com>
-# Copyright (c) 2017 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_kx122
-
-
-def main():
-    # Instantiate a KX122
-    kx122_sensor = pyupm_kx122.KX122(0, -1, 24)
-
-    # Reset the device
-    kx122_sensor.softwareReset()
-
-    # Initialize the device
-    kx122_sensor.deviceInit(pyupm_kx122.KX122_ODR_50,
-                            pyupm_kx122.HIGH_RES,
-                            pyupm_kx122.KX122_RANGE_2G)
-
-    # This function stops python from printing a stacktrace when you hit ctrl-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # Exit handler
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    # Print the acceleration
-    while True:
-        [x, y, z] = kx122_sensor.getAccelerationData()
-
-        print ("x: %0.02f, y: %0.02f, z: %0.02f" % (x, y, z))
-
-        time.sleep(1)
-
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/kxtj3.py b/examples/python/kxtj3.py
deleted file mode 100755
index 262bbe5..0000000
--- a/examples/python/kxtj3.py
+++ /dev/null
@@ -1,61 +0,0 @@
-#!/usr/bin/env python
-
-# The MIT License (MIT)
-#
-# Author: Assam Boudjelthia
-# Copyright (c) 2018 Rohm Semiconductor.
-#
-# Permission is hereby granted, free of charge, to any person obtaining a copy of
-# this software and associated documentation files (the "Software"), to deal in
-# the Software without restriction, including without limitation the rights to
-# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
-# the Software, and to permit persons to whom the Software is furnished to do so,
-# subject to the following conditions:
-#
-# The above copyright notice and this permission notice shall be included in all
-# copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-
-import time, sys, signal, atexit
-from upm import pyupm_kxtj3
-
-
-def main():
-    kxtj3_sensor = pyupm_kxtj3.KXTJ3(0x0, 0x0f)
-
-    kxtj3_sensor.SensorInit(pyupm_kxtj3.KXTJ3_ODR_25,
-                            pyupm_kxtj3.HIGH_RES,
-                            pyupm_kxtj3.KXTJ3_RANGE_16G_14)
-
-    # Prevent stack printing on CTRL^C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    sampleCounter = 10
-    waitTime = kxtj3_sensor.GetAccelerationSamplePeriod()
-    print("Setting settings:\nODR: 25 Hz\nResolution: "
-          "High\nAcceleration range: 16g with 14bits")
-    print("Acceleration:")
-    while sampleCounter > 0:
-        [x, y, z] = kxtj3_sensor.GetAccelerationVector()
-
-        print ("x: %0.02f, y: %0.02f, z: %0.02f" % (x, y, z))
-
-        time.sleep(waitTime)
-        sampleCounter -= 1
-
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/l298-stepper.py b/examples/python/l298-stepper.py
deleted file mode 100755
index d1360ae..0000000
--- a/examples/python/l298-stepper.py
+++ /dev/null
@@ -1,69 +0,0 @@
-#!/usr/bin/env python
-# Author: Zion Orent <zorent@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_l298 as upmL298
-
-def main():
-    # Instantiate a Stepper motor on a L298 Dual H-Bridge.
-    # This was tested with the NEMA-17 12V, 350mA, with 200 steps per rev.
-    myHBridge = upmL298.L298(200, 3, 4, 7, 8, 9)
-
-    ## Exit handlers ##
-    # This stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This lets you run code on exit,
-    # including functions from myHBridge
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    myHBridge.setSpeed(10) # 10 RPMs
-    myHBridge.setDirection(upmL298.L298.DIR_CW)
-    myHBridge.enable(True)
-
-    print("Rotating 1 full revolution at 10 RPM speed.")
-    # move 200 steps, a full rev
-    myHBridge.stepperSteps(200)
-
-    print("Sleeping for 2 seconds...")
-    time.sleep(2)
-
-    print("Rotating 1/2 revolution in opposite direction at 10 RPM speed.")
-    myHBridge.setDirection(upmL298.L298.DIR_CCW)
-    myHBridge.stepperSteps(100)
-
-    # release
-    myHBridge.enable(False)
-
-    # exitHandler is called automatically
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/l298.py b/examples/python/l298.py
deleted file mode 100755
index c7a8b80..0000000
--- a/examples/python/l298.py
+++ /dev/null
@@ -1,67 +0,0 @@
-#!/usr/bin/env python
-# Author: Zion Orent <zorent@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_l298 as upmL298
-
-def main():
-    # Instantiate one of the 2 possible DC motors on a L298 Dual
-    # H-Bridge.  For controlling a stepper motor, see the l298-stepper
-    # example.
-    myHBridge = upmL298.L298(3, 4, 7)
-
-    ## Exit handlers ##
-    # This stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This lets you run code on exit,
-    # including functions from myHBridge
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    print("Starting motor at 50% for 3 seconds...")
-    myHBridge.setSpeed(50)
-    myHBridge.setDirection(upmL298.L298.DIR_CW)
-    myHBridge.enable(True)
-
-    time.sleep(3)
-
-    print("Reversing direction...")
-    myHBridge.setDirection(upmL298.L298.DIR_NONE) # fast stop
-    myHBridge.setDirection(upmL298.L298.DIR_CCW)
-    time.sleep(3);
-
-    myHBridge.setSpeed(0)
-    myHBridge.enable(False)
-
-    # exitHandler is called automatically
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/lcdks.py b/examples/python/lcdks.py
deleted file mode 100755
index 818c91e..0000000
--- a/examples/python/lcdks.py
+++ /dev/null
@@ -1,63 +0,0 @@
-#!/usr/bin/env python
-# Author: Jon Trulson <jtrulson@ics.com>
-# Copyright (c) 2017 Intel Corporation.
-#
-# The MIT License
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_lcdks as lcdksObj
-
-def main():
-    ## Exit handlers ##
-    # This stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit,
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    # Instantiate a LCDKS (LCD Keypad Shield) using default pins
-
-    # NOTE: The default pins do not include support for a gpio
-    # controlled backlight.  If you need one, you will need to specify
-    # all neccessary pins to the constructor.
-    lcd = lcdksObj.LCDKS()
-
-    lcd.setCursor(0,0)
-    lcd.write("LCDKS driver")
-    lcd.setCursor(1,2)
-    lcd.write("Hello World")
-
-    # output current key value every second.
-    while(1):
-        print("Button value: ", lcd.getKeyValue())
-        time.sleep(1)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/ldt0028.py b/examples/python/ldt0028.py
deleted file mode 100755
index 6724cd8..0000000
--- a/examples/python/ldt0028.py
+++ /dev/null
@@ -1,72 +0,0 @@
-#!/usr/bin/env python
-from __future__ import print_function
-# Author: Sarah Knepper <sarah.knepper@intel.com>
-# Copyright (c) 2014 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-import time
-import array
-from upm import pyupm_ldt0028 as ldt0028
-
-def main():
-    NUMBER_OF_SECONDS = 10
-    SAMPLES_PER_SECOND = 50
-    THRESHOLD = 100
-
-    # Create the LDT0-028 Piezo Vibration Sensor object using AIO pin 0
-    sensor = ldt0028.LDT0028(0)
-
-    # Read the signal every 20 milliseconds for 10 seconds
-    print('For the next', NUMBER_OF_SECONDS, 'seconds,', \
-          SAMPLES_PER_SECOND, 'samples will be taken every second.\n')
-    buffer = array.array('H')
-    for i in range(0, NUMBER_OF_SECONDS * SAMPLES_PER_SECOND):
-        buffer.append(sensor.getSample())
-        time.sleep(1.0/SAMPLES_PER_SECOND)
-
-    # Print the number of times the reading was greater than the threshold
-    count = 0
-    for i in range(0, NUMBER_OF_SECONDS * SAMPLES_PER_SECOND):
-        if buffer[i] > THRESHOLD:
-            count += 1
-    print(sensor.name(), ' exceeded the threshold value of', \
-            THRESHOLD, 'a total of', count, 'times,')
-    print('out of a total of', NUMBER_OF_SECONDS*SAMPLES_PER_SECOND, \
-            'reading.\n')
-
-    # Print a graphical representation of the average value sampled
-    # each second for the past 10 seconds, using a scale factor of 15
-    print('Now printing a graphical representation of the average reading ')
-    print('each second for the last', NUMBER_OF_SECONDS, 'seconds.')
-    SCALE_FACTOR = 15
-    for i in range(0, NUMBER_OF_SECONDS):
-        sum = 0
-        for j in range(0, SAMPLES_PER_SECOND):
-            sum += buffer[i*SAMPLES_PER_SECOND+j]
-        average = sum / SAMPLES_PER_SECOND
-        stars_to_print = int(round(average / SCALE_FACTOR))
-        print('(' + repr(int(round(average))).rjust(4) + ') |', '*' * stars_to_print)
-
-    # Delete the sensor object
-    del sensor
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/le910.py b/examples/python/le910.py
deleted file mode 100755
index 3ea6fa2..0000000
--- a/examples/python/le910.py
+++ /dev/null
@@ -1,157 +0,0 @@
-#!/usr/bin/env python
-# Author: Jon Trulson <jtrulson@ics.com>
-# Copyright (c) 2017 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_uartat as UARTAT
-
-def main():
-    ## Exit handlers ##
-    # This function stops python from printing a stacktrace when you
-    # hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit, including functions from sensor
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    defaultDev = "/dev/ttyUSB0"
-
-    # if an argument was specified, use it as the device instead
-    if (len(sys.argv) > 1):
-        defaultDev = sys.argv[1]
-
-    print("Using device:", defaultDev);
-
-    # Instantiate a UARTAT sensor on defaultDev at 115200 baud.
-    sensor = UARTAT.UARTAT(defaultDev, 115200)
-
-    # This is a simplistic example that tries to configure the LE910,
-    # and use it's built-in socket capabilities to connect to a
-    # remote host, obtain a small piece of data, and return it.  It's
-    # mainly intended to show you how you can use the various AT
-    # commands supported by the LE910 to perform simple tasks.
-    #
-    # You must have a valid SIM card with an active data plan for
-    # this example to do anything interesting.
-    #
-    # See the LE910 AT Commands reference for full information on
-    # what is possible with this device.  The uartat driver is
-    # intended to make it a little easier to control AT-style
-    # devices, but is by no means a full-featured communication
-    # infrastructure.  A "real" application will probably need to be
-    # much more sophisticated with regard to parsing, doing retries,
-    # etc.
-    #
-    # For experimenting with various AT commands, try using an
-    # interactive terminal emulator like minicom or screen.
-
-    # make sure we are in command mode
-    if (not sensor.inCommandMode()):
-        print("Not in command mode, switching...")
-        sensor.commandMode("+++", 1000)
-
-    # flter out CR's in responses by default
-    sensor.filterCR(True)
-
-    print("Configuring modem...")
-
-    # discard any waiting characters
-    sensor.drain()
-
-    # reset modem
-    sensor.command("ATZ\r")
-
-    # turn off command echo, set verbosity to 1, enable data
-    # connection mode
-    sensor.command("ATE0 V1 +FCLASS=0\r")
-    sensor.drain()
-
-    # Now issue some commands and output the results.
-
-    print("Modem and SIM information:")
-
-    bufferLength = 256
-
-    buffer = sensor.commandWithResponse("AT+ICCID\r", bufferLength)
-    if (buffer):
-        print("ICCID (SIM ID):", buffer)
-
-    buffer = sensor.commandWithResponse("AT+CGSN=1\r", bufferLength)
-    if (buffer):
-        print("IMEI: ", buffer)
-
-    # see if we are on the network....
-    buffer = sensor.commandWithResponse("AT+CREG?\r", bufferLength)
-    if (buffer):
-        print(buffer)
-
-        # look for "CGREG: 0,1" or "CGREG: 0,5"
-        if (sensor.find(buffer, "CREG: 0,1") or
-            sensor.find(buffer, "CREG: 0,5")):
-            print("Connected to the cell data network.")
-
-            # wait up to 5 seconds for responses now...
-            sensor.setResponseWaitTime(5000)
-
-            # setup PDP context (socket 1).  An ERROR repsonse is
-            # possible if the PDP context is already set up.
-            sensor.command("AT#SGACT=1,1\r")
-
-            # setup a TCP socket to nist.gov and read the timestamp.
-
-            print("Connecting to time-a.nist.gov, TCP port 13")
-
-            # Wait up to 60 seconds to find the NO CARRIER
-            # string, which will be present at the end, if the
-            # connection succeeded and the requested data was
-            # obtained.
-            buffer = sensor.commandWaitFor("AT#SD=1,0,13,\"time-a.nist.gov\"\r",
-                                           bufferLength, "\nNO CARRIER\n", 60000)
-            if (buffer):
-                # print out the response
-                print("RESPONSE: ")
-                print(buffer)
-            else:
-                print("No response.")
-
-            # destroy PDP context
-            sensor.setResponseWaitTime(250)
-            sensor.command("AT#SGACT=1,0\r")
-        else:
-            print("You do not appear to be connected to the network...")
-    else:
-        print("Error executing query\n")
-
-    # reset the modem
-    sensor.command("ATZ\r")
-
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/led.py b/examples/python/led.py
deleted file mode 100755
index 501d5b3..0000000
--- a/examples/python/led.py
+++ /dev/null
@@ -1,44 +0,0 @@
-#!/usr/bin/env python
-from __future__ import print_function
-# Author: Sarah Knepper <sarah.knepper@intel.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-import time
-from upm import pyupm_led
-
-def main():
-    # Create the Grove LED object using GPIO pin 2
-    led = pyupm_led.Led(2)
-
-    # Print the name
-    print(led.name())
-
-    # Turn the LED on and off 10 times, pausing one second
-    # between transitions
-    for i in range (0,10):
-        led.on()
-        time.sleep(1)
-        led.off()
-        time.sleep(1)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/light.py b/examples/python/light.py
deleted file mode 100755
index 1008ade..0000000
--- a/examples/python/light.py
+++ /dev/null
@@ -1,43 +0,0 @@
-#!/usr/bin/env python
-# Author: Sarah Knepper <sarah.knepper@intel.com>
-# Copyright (c) 2014 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time
-from upm import pyupm_light as lightObj
-
-def main():
-    # Create the light sensor object using AIO pin 0
-    sensor = lightObj.Light(0)
-
-    # Read the input and print both the normalized ADC value and a
-    # rough lux value, waiting one second between readings
-    while 1:
-        print(sensor.name() + " normalized value is %f" % sensor.getNormalized()
-              + ", which is roughly %d" % sensor.value() + " lux");
-        time.sleep(1)
-
-    # Delete the light sensor object
-    del lightObj
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/linefinder.py b/examples/python/linefinder.py
deleted file mode 100755
index a7bdc99..0000000
--- a/examples/python/linefinder.py
+++ /dev/null
@@ -1,54 +0,0 @@
-#!/usr/bin/env python
-# Author: Zion Orent <zorent@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_linefinder as upmlinefinder
-
-def main():
-    # Instantiate a  line finder sensor on digital pin D2
-    myLineFinder = upmlinefinder.LineFinder(2)
-
-    ## Exit handlers ##
-    # This function stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit, including functions from myLineFinder
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    while(1):
-        if (myLineFinder.whiteDetected()):
-            print("White detected.")
-        else:
-            print("Black detected.")
-        time.sleep(1)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/lis2ds12.py b/examples/python/lis2ds12.py
deleted file mode 100755
index f7159bc..0000000
--- a/examples/python/lis2ds12.py
+++ /dev/null
@@ -1,68 +0,0 @@
-#!/usr/bin/env python
-# Author: Jon Trulson <jtrulson@ics.com>
-# Copyright (c) 2016-2017 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_lis2ds12 as sensorObj
-
-def main():
-    # Instantiate a LIS2DS12 instance using default i2c bus and address
-    sensor = sensorObj.LIS2DS12()
-
-    # For SPI, bus 0, you would pass -1 as the address, and a valid pin for CS:
-    # LIS2DS12(0, -1, 10);
-
-    ## Exit handlers ##
-    # This function stops python from printing a stacktrace when you
-    # hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    # now output data every 250 milliseconds
-    while (1):
-        sensor.update()
-
-        data = sensor.getAccelerometer()
-        print("Accelerometer x:", data[0], end=' ')
-        print(" y:", data[1], end=' ')
-        print(" z:", data[2], end=' ')
-        print(" g")
-
-        # we show both C and F for temperature
-        print("Compensation Temperature:", sensor.getTemperature(), "C /", end=' ')
-        print(sensor.getTemperature(True), "F")
-
-        print()
-        time.sleep(.250)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/lis3dh.py b/examples/python/lis3dh.py
deleted file mode 100755
index 37d4215..0000000
--- a/examples/python/lis3dh.py
+++ /dev/null
@@ -1,72 +0,0 @@
-#!/usr/bin/env python
-# Author: Alex Tereschenko <alext.mkrs@gmail.com>
-# Copyright (c) 2018 Alex Tereschenko.
-#
-# Based on LIS2DS12 example by
-# Author: Jon Trulson <jtrulson@ics.com>
-# Copyright (c) 2017 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_lis3dh as sensorObj
-
-def main():
-    # Instantiate a LIS3DH instance using default i2c bus and address
-    sensor = sensorObj.LIS3DH()
-
-    # For SPI, bus 0, you would pass -1 as the address, and a valid pin for CS:
-    # LIS3DH(0, -1, 10);
-
-    ## Exit handlers ##
-    # This function stops python from printing a stacktrace when you
-    # hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    # now output data every 250 milliseconds
-    while (1):
-        sensor.update()
-
-        data = sensor.getAccelerometer()
-        print("Accelerometer x:", data[0], end=' ')
-        print(" y:", data[1], end=' ')
-        print(" z:", data[2], end=' ')
-        print(" g")
-
-        # we show both C and F for temperature
-        print("Compensation Temperature:", sensor.getTemperature(), "C /", end=' ')
-        print(sensor.getTemperature(True), "F")
-
-        print()
-        time.sleep(.250)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/lm35.py b/examples/python/lm35.py
deleted file mode 100755
index 6bcfe14..0000000
--- a/examples/python/lm35.py
+++ /dev/null
@@ -1,54 +0,0 @@
-#!/usr/bin/env python
-# Author: Jon Trulson <jtrulson@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_lm35 as sensorObj
-
-def main():
-    # Instantiate a LM35 on analog pin A0, with a default analog
-    # reference voltage of 5.0
-    sensor = sensorObj.LM35(0)
-
-    ## Exit handlers ##
-    # This function stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    # Every half second, sample the sensor and output the temperature
-
-    while (1):
-        print("Temperature:", sensor.getTemperature(), "C")
-        time.sleep(.5)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/loudness.py b/examples/python/loudness.py
deleted file mode 100755
index 7c45685..0000000
--- a/examples/python/loudness.py
+++ /dev/null
@@ -1,55 +0,0 @@
-#!/usr/bin/env python
-# Author: Jon Trulson <jtrulson@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_loudness as sensorObj
-
-def main():
-    # Instantiate a Loudness sensor on analog pin A0, with an analog
-    # reference voltage of 5.0
-    sensor = sensorObj.Loudness(0, 5.0)
-
-    ## Exit handlers ##
-    # This function stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    # Every tenth of a second, sample the loudness and output it's
-    # corresponding analog voltage.
-
-    while (1):
-        print("Detected loudness (volts): ", sensor.loudness())
-        time.sleep(.1)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/lsm303agr.py b/examples/python/lsm303agr.py
deleted file mode 100755
index ded05e4..0000000
--- a/examples/python/lsm303agr.py
+++ /dev/null
@@ -1,71 +0,0 @@
-#!/usr/bin/env python
-# Author: Jon Trulson <jtrulson@ics.com>
-# Copyright (c) 2017 Intel Corporation.
-#
-# The MIT License
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_lsm303agr as sensorObj
-
-def main():
-    # Instantiate a BMP250E instance using default i2c bus and address
-    sensor = sensorObj.LSM303AGR()
-
-    ## Exit handlers ##
-    # This function stops python from printing a stacktrace when you
-    # hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    # now output data every 250 milliseconds
-    while (1):
-        sensor.update()
-
-        data = sensor.getAccelerometer()
-        print("Accelerometer x:", data[0], end=' ')
-        print(" y:", data[1], end=' ')
-        print(" z:", data[2], end=' ')
-        print(" g")
-
-        data = sensor.getMagnetometer()
-        print("Magnetometer x:", data[0], end=' ')
-        print(" y:", data[1], end=' ')
-        print(" z:", data[2], end=' ')
-        print(" uT")
-
-        print("Temperature: ", sensor.getTemperature())
-
-        print()
-        time.sleep(.250)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/lsm303d.py b/examples/python/lsm303d.py
deleted file mode 100755
index 9d6da26..0000000
--- a/examples/python/lsm303d.py
+++ /dev/null
@@ -1,71 +0,0 @@
-#!/usr/bin/env python
-# Author: Jon Trulson <jtrulson@ics.com>
-# Copyright (c) 2017 Intel Corporation.
-#
-# The MIT License
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_lsm303d as sensorObj
-
-def main():
-    # Instantiate a BMP250E instance using default i2c bus and address
-    sensor = sensorObj.LSM303D()
-
-    ## Exit handlers ##
-    # This function stops python from printing a stacktrace when you
-    # hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    # now output data every 250 milliseconds
-    while (1):
-        sensor.update()
-
-        data = sensor.getAccelerometer()
-        print("Accelerometer x:", data[0], end=' ')
-        print(" y:", data[1], end=' ')
-        print(" z:", data[2], end=' ')
-        print(" g")
-
-        data = sensor.getMagnetometer()
-        print("Magnetometer x:", data[0], end=' ')
-        print(" y:", data[1], end=' ')
-        print(" z:", data[2], end=' ')
-        print(" uT")
-
-        print("Temperature: ", sensor.getTemperature())
-
-        print()
-        time.sleep(.250)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/lsm303dlh.py b/examples/python/lsm303dlh.py
deleted file mode 100755
index 69336fe..0000000
--- a/examples/python/lsm303dlh.py
+++ /dev/null
@@ -1,90 +0,0 @@
-#!/usr/bin/env python
-
-# Author: Brendan Le Foll <brendan.le.foll@intel.com>
-# Contributions: Zion Orent <zorent@ics.com>
-# Copyright (c) 2014 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_lsm303dlh as lsm303dlh
-
-def main():
-    # Instantiate LSM303DLH compass on I2C
-    myAccelrCompass = lsm303dlh.LSM303DLH(0)
-
-    ## Exit handlers ##
-    # This stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This lets you run code on exit,
-    # including functions from myAccelrCompass
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    while(1):
-        # Load coordinates into LSM303DLH object
-        successFail = myAccelrCompass.getCoordinates()
-        # in XYZ order. The sensor returns XZY,
-        # but the driver compensates and makes it XYZ
-        coords = myAccelrCompass.getRawCoorData()
-
-        # Print out the X, Y, and Z coordinate data
-        # using two different methods
-        outputStr = "coor: rX {0} - rY {1} - rZ {2}".format(
-        coords.__getitem__(0), coords.__getitem__(1),
-        coords.__getitem__(2))
-        print(outputStr)
-
-        outputStr = "coor: gX {0} - gY {1} - gZ {2}".format(
-        myAccelrCompass.getCoorX(), myAccelrCompass.getCoorY(),
-        myAccelrCompass.getCoorZ())
-        print(outputStr)
-
-        # Get and print out the heading
-        print("heading:", myAccelrCompass.getHeading())
-
-        # Get the acceleration
-        myAccelrCompass.getAcceleration();
-        accel = myAccelrCompass.getRawAccelData();
-
-        # Print out the X, Y, and Z acceleration data
-        # using two different methods
-        outputStr = "acc: rX {0} - rY {1} - Z {2}".format(
-        accel.__getitem__(0), accel.__getitem__(1), accel.__getitem__(2))
-        print(outputStr)
-
-        outputStr = "acc: gX {0} - gY {1} - gZ {2}".format(
-        myAccelrCompass.getAccelX(), myAccelrCompass.getAccelY(),
-        myAccelrCompass.getAccelZ())
-        print(outputStr)
-
-        print(" ")
-        time.sleep(1)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/lsm6ds3h.py b/examples/python/lsm6ds3h.py
deleted file mode 100755
index d899f86..0000000
--- a/examples/python/lsm6ds3h.py
+++ /dev/null
@@ -1,74 +0,0 @@
-#!/usr/bin/env python
-# Author: Jon Trulson <jtrulson@ics.com>
-# Copyright (c) 2016-2017 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_lsm6ds3h as sensorObj
-
-def main():
-    # Instantiate a BMP250E instance using default i2c bus and address
-    sensor = sensorObj.LSM6DS3H()
-
-    # For SPI, bus 0, you would pass -1 as the address, and a valid pin for CS:
-    # LSM6DS3H(0, -1, 10);
-
-    ## Exit handlers ##
-    # This function stops python from printing a stacktrace when you
-    # hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    # now output data every 250 milliseconds
-    while (1):
-        sensor.update()
-
-        data = sensor.getAccelerometer()
-        print("Accelerometer x:", data[0], end=' ')
-        print(" y:", data[1], end=' ')
-        print(" z:", data[2], end=' ')
-        print(" g")
-
-        data = sensor.getGyroscope()
-        print("Gyroscope x:", data[0], end=' ')
-        print(" y:", data[1], end=' ')
-        print(" z:", data[2], end=' ')
-        print(" dps")
-
-        # we show both C and F for temperature
-        print("Compensation Temperature:", sensor.getTemperature(), "C /", end=' ')
-        print(sensor.getTemperature(True), "F")
-
-        print()
-        time.sleep(.250)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/lsm6dsl.py b/examples/python/lsm6dsl.py
deleted file mode 100755
index d51f6c2..0000000
--- a/examples/python/lsm6dsl.py
+++ /dev/null
@@ -1,74 +0,0 @@
-#!/usr/bin/env python
-# Author: Jon Trulson <jtrulson@ics.com>
-# Copyright (c) 2016-2017 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_lsm6dsl as sensorObj
-
-def main():
-    # Instantiate a BMP250E instance using default i2c bus and address
-    sensor = sensorObj.LSM6DSL()
-
-    # For SPI, bus 0, you would pass -1 as the address, and a valid pin for CS:
-    # LSM6DSL(0, -1, 10);
-
-    ## Exit handlers ##
-    # This function stops python from printing a stacktrace when you
-    # hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    # now output data every 250 milliseconds
-    while (1):
-        sensor.update()
-
-        data = sensor.getAccelerometer()
-        print("Accelerometer x:", data[0], end=' ')
-        print(" y:", data[1], end=' ')
-        print(" z:", data[2], end=' ')
-        print(" g")
-
-        data = sensor.getGyroscope()
-        print("Gyroscope x:", data[0], end=' ')
-        print(" y:", data[1], end=' ')
-        print(" z:", data[2], end=' ')
-        print(" dps")
-
-        # we show both C and F for temperature
-        print("Compensation Temperature:", sensor.getTemperature(), "C /", end=' ')
-        print(sensor.getTemperature(True), "F")
-
-        print()
-        time.sleep(.250)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/lsm9ds0.py b/examples/python/lsm9ds0.py
deleted file mode 100755
index 36f87a2..0000000
--- a/examples/python/lsm9ds0.py
+++ /dev/null
@@ -1,76 +0,0 @@
-#!/usr/bin/env python
-# Author: Jon Trulson <jtrulson@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_lsm9ds0 as sensorObj
-
-def main():
-    # Instantiate an LSM9DS0 using default parameters (bus 1, gyro addr 6b,
-    # xm addr 1d)
-    sensor = sensorObj.LSM9DS0()
-
-    ## Exit handlers ##
-    # This function stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    sensor.init()
-
-    x = sensorObj.new_floatp()
-    y = sensorObj.new_floatp()
-    z = sensorObj.new_floatp()
-
-    while (1):
-        sensor.update()
-        sensor.getAccelerometer(x, y, z)
-        print("Accelerometer: AX: ", sensorObj.floatp_value(x), end=' ')
-        print(" AY: ", sensorObj.floatp_value(y), end=' ')
-        print(" AZ: ", sensorObj.floatp_value(z))
-
-        sensor.getGyroscope(x, y, z)
-        print("Gyroscope:     GX: ", sensorObj.floatp_value(x), end=' ')
-        print(" GY: ", sensorObj.floatp_value(y), end=' ')
-        print(" GZ: ", sensorObj.floatp_value(z))
-
-        sensor.getMagnetometer(x, y, z)
-        print("Magnetometer:  MX: ", sensorObj.floatp_value(x), end=' ')
-        print(" MY: ", sensorObj.floatp_value(y), end=' ')
-        print(" MZ: ", sensorObj.floatp_value(z))
-
-        print("Temperature:  ", sensor.getTemperature())
-        print()
-
-        time.sleep(.5)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/m24lr64e.py b/examples/python/m24lr64e.py
deleted file mode 100755
index aa9bfb2..0000000
--- a/examples/python/m24lr64e.py
+++ /dev/null
@@ -1,53 +0,0 @@
-#!/usr/bin/env python
-# Author: Jon Trulson <jtrulson@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import sys
-from upm import pyupm_m24lr64e as nfcTagObj
-
-def main():
-    # Instantiate a M24LR64E Grove NFC Tag Module on UART 0
-    nfcTag = nfcTagObj.M24LR64E(nfcTagObj.M24LR64E_I2C_BUS)
-
-    # This example accesses the device in the 'user' (default) mode,
-    # reads the last byte of data in the EEPROM, inverts it, writes
-    # it back, and then re-reads it.
-
-    # Read the last byte of the EEPROM area
-    addr = (nfcTagObj.M24LR64E.EEPROM_I2C_LENGTH - 1)
-    print("Address: ", addr)
-    byte = nfcTag.readByte(addr)
-
-    print("Read byte: ", format(byte, '02x'))
-
-    # Now change it to it's opposite and write it
-    byte = (~byte & 0xff)
-    nfcTag.writeByte(addr, byte)
-    print("Wrote inverted byte: ", format(byte, '02x'))
-
-    # Now read it back.
-    byte = nfcTag.readByte(addr)
-    print("Read byte: ", format(byte, '02x'))
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/mag3110.py b/examples/python/mag3110.py
deleted file mode 100755
index ee258a0..0000000
--- a/examples/python/mag3110.py
+++ /dev/null
@@ -1,62 +0,0 @@
-#!/usr/bin/env python
-# Author: Norbert Wesp <nwesp@phytec.de>
-# Copyright (c) 2017 Phytec Messtechnik GmbH.
-#
-# based on: tcs3414cs.py
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_mag3110 as MAG3110
-
-def main():
-    # Instantiate the Three-Axis Digital Magnetometer Sensor on I2C on bus 1
-    mySensor = MAG3110.MAG3110(1)
-
-    ## Exit handlers ##
-    # This stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This lets you run code on exit,
-    # including functions from mySensor
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    data = MAG3110.mag3110_data_t()
-
-    # activate periodic measurements
-    mySensor.setActive();
-
-    # Print out the x, y, z, status and die temperature value every 0.5 seconds
-    while(1):
-        mySensor.getData(data, True)
-        print(data.x, data.y, data.z, hex(data.status), data.dtemp)
-
-        time.sleep(.5)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/make_oled_pic.py b/examples/python/make_oled_pic.py
deleted file mode 100755
index a9edb99..0000000
--- a/examples/python/make_oled_pic.py
+++ /dev/null
@@ -1,78 +0,0 @@
-#!/usr/bin/env python
-
-# Author: Brendan Le Foll <brendan.le.foll@intel.com>
-# Copyright (c) 2014 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE
-
-from __future__ import print_function
-
-from PIL import Image
-import sys
-
-def main():
-    # Pixels are arranged in one byte for 8 vertical pixels and not addressed individually
-    # We convert the image to greysacle and end up making it monochrome where we
-    # consider that every pixel that is '40' is black.
-
-    width = 128
-    height = 64
-
-    if len(sys.argv) != 2:
-        print('Please specify an image to use as the only argument')
-        exit(1)
-
-    im = Image.open(sys.argv[1])
-    im = im.convert('L').resize((width, height))
-
-    data = list(im.getdata())
-
-    byteblock = [0 for i in range(width)]
-    widthblock = [list(byteblock) for i in range(int(height/8))]
-    numblock = 0
-    pixcount = 0
-    i = 0
-
-    # we split the list by width * 8, to create data chunks of 8rows
-    datachunks=[data[x:x+(width*8)] for x in range(0, len(data), (width*8))]
-
-    # grab every pixel of image (or datachunk)
-    while i < len(widthblock):
-        pixcount = 0
-        for y in datachunks[i]:
-            xcoor = pixcount % width
-            ycoor = int(pixcount/width)
-            blknum = xcoor % len(widthblock)
-            blkycoor = ycoor
-
-            # 40 is what we consider 'black'
-            if y > 40:
-                widthblock[i][xcoor] |= (1 << blkycoor)
-
-            pixcount += 1
-        i += 1
-
-    flatlist = [y for x in widthblock for y in x]
-
-    carray = 'static uint8_t image[] = {\n' + ', '.join(str(x) for x in flatlist)
-    print(carray + '\n};')
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/max30100.py b/examples/python/max30100.py
deleted file mode 100755
index 04a70cb..0000000
--- a/examples/python/max30100.py
+++ /dev/null
@@ -1,71 +0,0 @@
-#!/usr/bin/env python
-# Author: Noel Eck <noel.eck@intel.com>
-# Copyright (c) 2016 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_max30100
-
-# Callback class derived from CXX Callback
-class mycallback(pyupm_max30100.Callback):
-    def __init__(self):
-        self.count = 0
-        pyupm_max30100.Callback.__init__(self)
-
-    def run(self, samp):
-        print("My callback sample IR: %d R: %d" % (samp.IR, samp.R))
-
-def main():
-    # Create an instance of the oximiter
-    # I2C bus 0
-    x = pyupm_max30100.MAX30100(0)
-
-    print ('Oximeter sensor example...')
-
-    # Create an instance of the mycallback class
-    cb = mycallback().__disown__()
-
-    # Read the temperature and version
-    print ("Temperature: %d C" % x.temperature())
-    print ("Version: 0x%04x" % x.version())
-
-    # Set high-res (50 Hz, 16-bit)
-    x.high_res_enable(True)
-
-    # Set to sample SpO2
-    x.mode(pyupm_max30100.MAX30100_MODE_SPO2_EN);
-
-    # Read continuously, stepping up the LED current every second,
-    # us GPIO 0 as the interrupt pin
-    x.sample_continuous(0, False, cb)
-    for i in range(16):
-        print("Setting LED current = %d" % i)
-        x.current(i, i)
-        time.sleep(1)
-
-    # Read individual samples
-    for i in range(10):
-        val = x.sample();
-        print("Single value IR: %d R: %d " % (val.IR, val.R))
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/maxsonarez.py b/examples/python/maxsonarez.py
deleted file mode 100755
index fc2d8b7..0000000
--- a/examples/python/maxsonarez.py
+++ /dev/null
@@ -1,64 +0,0 @@
-#!/usr/bin/env python
-# Author: Jon Trulson <jtrulson@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_maxsonarez as MaxSonarEZ
-
-def main():
-    # Instantiate a MaxSonar-EZ on analog pin A1, with an analog
-    # reference voltage of MAXSONAREZ_AREF
-    Sonar = MaxSonarEZ.MAXSONAREZ(1)
-
-    ## Exit handlers ##
-    # This stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This lets you run code on exit,
-    # including functions from Sonar
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    # analog voltage, usually 3.3 or 5.0
-    MAXSONAREZ_AREF = 5.0;
-
-    # Every second, sample the sonar and output the distance to an
-    # object in inches.
-
-    # With the EZ3 version, the minimum and maximum ranges seemed to be
-    # between 6 and 33 inches
-
-    while (1):
-        print("AREF: {0}, distance in inches: {1}".format(
-                MAXSONAREZ_AREF,
-                Sonar.inches()))
-        time.sleep(1)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/mb704x.py b/examples/python/mb704x.py
deleted file mode 100755
index 27baf7d..0000000
--- a/examples/python/mb704x.py
+++ /dev/null
@@ -1,56 +0,0 @@
-#!/usr/bin/env python
-# Author: Jon Trulson <jtrulson@ics.com>
-# Copyright (c) 2016 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_mb704x as sensorObj
-
-def main():
-    # Instantiate a MB704X sensor using default parameters (bus 0,
-    # address 112)
-    sensor = sensorObj.MB704X();
-
-    ## Exit handlers ##
-    # This function stops python from printing a stacktrace when you
-    # hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    while (1):
-        print("Range: "
-              + str(sensor.getRange())
-              + " cm")
-
-        time.sleep(.5)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/mcp2515-txrx.py b/examples/python/mcp2515-txrx.py
deleted file mode 100755
index ec00ffc..0000000
--- a/examples/python/mcp2515-txrx.py
+++ /dev/null
@@ -1,99 +0,0 @@
-#!/usr/bin/env python
-# Author: Jon Trulson <jtrulson@ics.com>
-# Copyright (c) 2016 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_mcp2515 as MCP2515
-
-def main():
-    # Instantiate a MCP2515 on SPI bus 0 using a hw CS pin (-1).
-    sensor = MCP2515.MCP2515(0, -1)
-
-    ## Exit handlers ##
-    # This function stops python from printing a stacktrace when you
-    # hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit, including functions from sensor
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    # by default we just receive packets
-    do_tx = False;
-    if (len(sys.argv) > 1):
-        do_tx = True
-
-    # NOTE: This example assumes that only two devices are connected
-    # to the CAN bus, and that both devices are running this example;
-    # one in TX (transmit) mode, and one in RX (receive) mode.
-
-    # If this is not the case, then in rx mode you may see other
-    # packets from other devices, or not, depending on whether the
-    # speed is correct for the network.  In tx mode, errors may be
-    # generated on the bus, especially if the CAN bus speed does not
-    # match the rest of the network.
-
-    # You should start the receiver example first.  The transmitter
-    # example will fail after about 5 seconds (timeout) of not being
-    # able to transmit a message.
-
-    # By default, after initialization, the baud rate is set to
-    # 50Kbps, and the mode is NORMAL, so we don't need to set any of
-    # that here.
-
-    while (True):
-        if (do_tx):
-            print("Loading a packet of 8 numbers (0-7) into a TX buffer...")
-            myPayload = "01234567";
-            sensor.loadTXBuffer(MCP2515.MCP2515_TX_BUFFER0, 0, False,
-                                False, myPayload);
-
-            # now lets try to transmit it
-            print("Transmitting packet...")
-            sensor.transmitBuffer(MCP2515.MCP2515_TX_BUFFER0, True)
-
-            print("Transmit successful")
-            print()
-            time.sleep(.5)
-        else:
-            # RX mode
-            # Look for a packet waiting for us in RXB0
-            if (sensor.rxStatusMsgs() == MCP2515.MCP2515_RXMSG_RXB0):
-                print("Packet received in RXB0, decoding...")
-
-                # now lets retrieve and print it
-                sensor.getRXMsg(MCP2515.MCP2515_RX_BUFFER0)
-
-                sensor.printMsg();
-                print()
-
-    print("Exiting...")
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/mcp2515.py b/examples/python/mcp2515.py
deleted file mode 100755
index cbac14b..0000000
--- a/examples/python/mcp2515.py
+++ /dev/null
@@ -1,79 +0,0 @@
-#!/usr/bin/env python
-# Author: Jon Trulson <jtrulson@ics.com>
-# Copyright (c) 2016 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_mcp2515 as MCP2515
-
-def main():
-    # Instantiate a MCP2515 on SPI bus 0 using a hw CS pin (-1).
-    sensor = MCP2515.MCP2515(0, -1)
-
-    ## Exit handlers ##
-    # This function stops python from printing a stacktrace when you
-    # hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit, including functions from sensor
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    print("Setting loopback mode...")
-
-    # set the mode to loopback mode.  In loopback mode, transmitted
-    # packets are sent directly to an appropriate receive buffer
-    # without actually going out onto the CAN bus.
-    sensor.setOpmode(MCP2515.MCP2515_OPMODE_LOOPBACK);
-
-    # lets build up a packet and try loading it (8 bytes max).
-    myPayload = "01234567";
-    print("Loading a packet of 8 numbers (0-7) into a TX buffer...")
-    sensor.loadTXBuffer(MCP2515.MCP2515_TX_BUFFER0, 0, False, False, myPayload);
-
-    # now lets try to transmit it
-    print("Transmitting packet...")
-    sensor.transmitBuffer(MCP2515.MCP2515_TX_BUFFER0, True);
-
-    print("Transmit successful")
-
-    # There should now be a packet waiting for us in RXB0
-    if (sensor.rxStatusMsgs() == MCP2515.MCP2515_RXMSG_RXB0):
-        print("Packet received in RXB0, decoding...")
-
-        # now lets retrieve and print it
-        sensor.getRXMsg(MCP2515.MCP2515_RX_BUFFER0);
-
-        sensor.printMsg();
-    else:
-        print("No packet found, how strange.")
-
-    print("Exiting...")
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/md-stepper.py b/examples/python/md-stepper.py
deleted file mode 100755
index 1d7914d..0000000
--- a/examples/python/md-stepper.py
+++ /dev/null
@@ -1,55 +0,0 @@
-#!/usr/bin/env python
-# Author: Jon Trulson <jtrulson@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-import time
-from upm import pyupm_md as upmmd
-
-def main():
-    I2C_BUS = upmmd.MD_I2C_BUS
-    I2C_ADDR = upmmd.MD_DEFAULT_I2C_ADDR
-
-    # Instantiate an I2C Motor Driver on I2C bus 0
-    myMotorDriver = upmmd.MD(I2C_BUS, I2C_ADDR)
-
-    # This example demonstrates using the MD to drive a stepper motor
-
-    # configure it, for this example, we'll assume 200 steps per rev
-    myMotorDriver.configStepper(200)
-
-    # set for half a rotation
-    myMotorDriver.setStepperSteps(100)
-
-    # let it go - clockwise rotation, 10 RPM speed
-    myMotorDriver.enableStepper(upmmd.MD_STEP_DIR_CW, 10)
-
-    time.sleep(3)
-
-    # Now do it backwards...
-    myMotorDriver.setStepperSteps(100)
-    myMotorDriver.enableStepper(upmmd.MD_STEP_DIR_CCW, 10)
-
-    # now disable
-    myMotorDriver.disableStepper()
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/md.py b/examples/python/md.py
deleted file mode 100755
index f65065b..0000000
--- a/examples/python/md.py
+++ /dev/null
@@ -1,51 +0,0 @@
-#!/usr/bin/env python
-# Author: Zion Orent <zorent@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time
-from upm import pyupm_md as upmmd
-
-def main():
-    I2C_BUS = upmmd.MD_I2C_BUS
-    I2C_ADDR = upmmd.MD_DEFAULT_I2C_ADDR
-
-    # Instantiate an I2C Motor Driver on I2C bus 0
-    myMotorDriver = upmmd.MD(I2C_BUS, I2C_ADDR)
-
-    # set direction to CW and set speed to 50%
-    print("Spin M1 and M2 at half speed for 3 seconds")
-    myMotorDriver.setMotorDirections(upmmd.MD_DIR_CW, upmmd.MD_DIR_CW)
-    myMotorDriver.setMotorSpeeds(127, 127)
-
-    time.sleep(3)
-    # counter clockwise
-    print("Reversing M1 and M2 for 3 seconds")
-    myMotorDriver.setMotorDirections(upmmd.MD_DIR_CCW,
-                                     upmmd.MD_DIR_CCW)
-    time.sleep(3)
-
-    print("Stopping motors")
-    myMotorDriver.setMotorSpeeds(0, 0)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/mg811.py b/examples/python/mg811.py
deleted file mode 100755
index 1c29cb6..0000000
--- a/examples/python/mg811.py
+++ /dev/null
@@ -1,56 +0,0 @@
-#!/usr/bin/env python
-# Author: Jon Trulson <jtrulson@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_mg811 as sensorObj
-
-def main():
-    # Instantiate an MG811 on analog pin A0, and digital pin D2 with an
-    # analog reference voltage of MG811_AREF (5.0)
-
-    sensor = sensorObj.MG811(0, 2, 5.0)
-
-    ## Exit handlers ##
-    # This function stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    # Every tenth of a second, sample the sensor and output it's
-    # detected CO2 concentration in parts per million (ppm)
-
-    while (1):
-        print("CO2 concentration in PPM: ", sensor.ppm())
-        time.sleep(.1)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/mhz16.py b/examples/python/mhz16.py
deleted file mode 100755
index 05560d8..0000000
--- a/examples/python/mhz16.py
+++ /dev/null
@@ -1,73 +0,0 @@
-#!/usr/bin/env python
-# Author: Zion Orent <zorent@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_mhz16 as upmMhz16
-
-def main():
-    # Instantiate a MHZ16 serial CO2 sensor on uart 0.
-    # This example was tested on the Grove CO2 sensor module.
-    myCO2 = upmMhz16.MHZ16(0)
-
-    ## Exit handlers ##
-    # This stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit,
-    # including functions from myCO2
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    # make sure port is initialized properly.  9600 baud is the default.
-    if (not myCO2.setupTty(upmMhz16.cvar.int_B9600)):
-        print("Failed to setup tty port parameters")
-        sys.exit(0)
-
-    print ("Make sure that the sensor has had "
-    "at least 3 minutes to warm up\n"
-    "or you will not get valid results.\n"
-    "The temperature reported is not the ambient temperature,\n"
-    "but rather the temperature of the sensor elements.")
-
-    time.sleep(1)
-
-    while(1):
-        if (not myCO2.getData()):
-            print("Failed to retrieve data")
-        else:
-            outputStr = ("CO2 concentration: {0} PPM, "
-            "Temperature (in C): {1}".format(
-            myCO2.getGas(), myCO2.getTemperature()))
-            print(outputStr)
-
-        time.sleep(2)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/mic.py b/examples/python/mic.py
deleted file mode 100755
index 602010e..0000000
--- a/examples/python/mic.py
+++ /dev/null
@@ -1,53 +0,0 @@
-#!/usr/bin/env python
-from __future__ import print_function
-# Author: John Van Drasek <john.r.van.drasek@intel.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-import time
-from upm import pyupm_mic as upmMicrophone
-
-def main():
-    # Attach microphone to analog port A0
-    myMic = upmMicrophone.Microphone(0)
-    threshContext = upmMicrophone.thresholdContext()
-    threshContext.averageReading = 0
-    threshContext.runningAverage = 0
-    threshContext.averagedOver = 2
-
-    # Infinite loop, ends when script is cancelled
-    # Repeatedly, take a sample every 2 microseconds;
-    # find the average of 128 samples; and
-    # print a running graph of dots as averages
-    while(1):
-        buffer = upmMicrophone.uint16Array(128)
-        len = myMic.getSampledWindow(2, 128, buffer);
-        if len:
-            thresh = myMic.findThreshold(threshContext, 30, buffer, len)
-            myMic.printGraph(threshContext)
-            if(thresh):
-                print("Threshold is ", thresh)
-
-    # Delete the upmMicrophone object
-    del myMic
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/mma7361.py b/examples/python/mma7361.py
deleted file mode 100755
index afdfef7..0000000
--- a/examples/python/mma7361.py
+++ /dev/null
@@ -1,74 +0,0 @@
-#!/usr/bin/env python
-# Author: Jon Trulson <jtrulson@ics.com>
-# Copyright (c) 2016 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_mma7361 as sensorObj
-
-def main():
-    # Instantiate a MMA7361 sensor on analog pins A0 (X), A1 (Y) A2
-    # (Z), selftest pin on D2, sleep pin on D3 nd an analog reference
-    # value of 5.0.  The freefall pin and the range pin are unused
-    # (-1).
-    sensor = sensorObj.MMA7361(0, 1, 2, 2, 3, -1, -1, 5.0)
-
-    # 1.5g (true = 6g)
-    sensor.setRange(False)
-
-    ## Exit handlers ##
-    # This function stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    x = sensorObj.new_floatp()
-    y = sensorObj.new_floatp()
-    z = sensorObj.new_floatp()
-
-    # Every 10th of a second, update and print values
-    while (1):
-        sensor.update()
-
-        sensor.getAcceleration(x, y, z)
-        print("Accelerometer x:", sensorObj.floatp_value(x), end=' ')
-        print(" y:", sensorObj.floatp_value(y), end=' ')
-        print(" z:", sensorObj.floatp_value(z))
-
-        sensor.getVolts(x, y, z)
-        print("Volts x:", sensorObj.floatp_value(x), end=' ')
-        print(" y:", sensorObj.floatp_value(y), end=' ')
-        print(" z:", sensorObj.floatp_value(z))
-
-        print()
-        time.sleep(.100)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/mma7660.py b/examples/python/mma7660.py
deleted file mode 100755
index 3f5046d..0000000
--- a/examples/python/mma7660.py
+++ /dev/null
@@ -1,73 +0,0 @@
-#!/usr/bin/env python
-# Author: Zion Orent <zorent@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_mma7660 as upmMMA7660
-
-def main():
-    # Instantiate an MMA7660 on I2C bus 0
-    myDigitalAccelerometer = upmMMA7660.MMA7660(
-                                            upmMMA7660.MMA7660_DEFAULT_I2C_BUS,
-                                            upmMMA7660.MMA7660_DEFAULT_I2C_ADDR);
-
-    ## Exit handlers ##
-    # This function stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit, including functions from myDigitalAccelerometer
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    # place device in standby mode so we can write registers
-    myDigitalAccelerometer.setModeStandby()
-
-    # enable 64 samples per second
-    myDigitalAccelerometer.setSampleRate(upmMMA7660.MMA7660_AUTOSLEEP_64)
-
-    # place device into active mode
-    myDigitalAccelerometer.setModeActive()
-
-    ax = upmMMA7660.new_floatp()
-    ay = upmMMA7660.new_floatp()
-    az = upmMMA7660.new_floatp()
-
-    while (1):
-        myDigitalAccelerometer.getAcceleration(ax, ay, az)
-        outputStr = ("Acceleration: x = {0}"
-                     "g y = {1}"
-                     "g z = {2}g").format(upmMMA7660.floatp_value(ax),
-        upmMMA7660.floatp_value(ay),
-        upmMMA7660.floatp_value(az))
-        print(outputStr)
-        print()
-        time.sleep(.5)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/mma8x5x.py b/examples/python/mma8x5x.py
deleted file mode 100755
index 1c50b58..0000000
--- a/examples/python/mma8x5x.py
+++ /dev/null
@@ -1,62 +0,0 @@
-#!/usr/bin/env python
-# Author: Norbert Wesp <nwesp@phytec.de>
-# Copyright (c) 2017 Phytec Messtechnik GmbH.
-#
-# based on: tcs3414cs.py
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_mma8x5x as MMA8X5X
-
-def main():
-    # Instantiate the Three-Axis Accelerometer Sensor on I2C on bus 1
-    mySensor = MMA8X5X.MMA8X5X(1)
-
-    ## Exit handlers ##
-    # This stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This lets you run code on exit,
-    # including functions from mySensor
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    data = MMA8X5X.mma8x5x_data_t()
-
-    # activate periodic measurements
-    mySensor.setActive();
-
-    # Print out the x, y, z value every 0.5 seconds
-    while(1):
-        mySensor.getData(data, True)
-        print(data.x, data.y, data.z)
-
-        time.sleep(.5)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/moisture.py b/examples/python/moisture.py
deleted file mode 100755
index 2df53b3..0000000
--- a/examples/python/moisture.py
+++ /dev/null
@@ -1,64 +0,0 @@
-#!/usr/bin/env python
-# Author: Zion Orent <zorent@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_moisture as upmMoisture
-
-def main():
-    # Instantiate a Grove Moisture sensor on analog pin A0
-    myMoisture = upmMoisture.Moisture(0)
-
-    ## Exit handlers ##
-    # This function stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit, including functions from myMoisture
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    # Values (approximate):
-    # 0-300,   sensor in air or dry soil
-    # 300-600, sensor in humid soil
-    # 600+,    sensor in wet soil or submerged in water
-
-    # Read the value every second and print the corresponding moisture level
-    while(1):
-        moisture_val = myMoisture.value()
-        if (moisture_val >= 0 and moisture_val < 300):
-            result = "Dry"
-        elif (moisture_val >= 300 and moisture_val < 600):
-            result = "Moist"
-        else:
-            result = "Wet"
-        print("Moisture value: {0}, {1}".format(moisture_val, result))
-        time.sleep(1)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/mpr121.py b/examples/python/mpr121.py
deleted file mode 100755
index 7f56067..0000000
--- a/examples/python/mpr121.py
+++ /dev/null
@@ -1,75 +0,0 @@
-#!/usr/bin/env python
-# Author: Zion Orent <zorent@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_mpr121 as upmMpr121
-
-def main():
-    I2C_BUS = upmMpr121.MPR121_I2C_BUS
-    DEFAULT_I2C_ADDR = upmMpr121.MPR121_DEFAULT_I2C_ADDR
-
-    # Instantiate an MPR121 touch sensor on I2C
-    myTouchSensor = upmMpr121.MPR121(I2C_BUS, DEFAULT_I2C_ADDR)
-
-    ## Exit handlers ##
-    # This stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit,
-    # including functions from myTouchSensor
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-
-    def printButtons(touchSensor):
-        buttonPressed = False
-
-        outputStr = "Buttons Pressed: "
-        for i in range(12):
-            if (touchSensor.m_buttonStates & (1 << i)):
-                outputStr += (str(i) + " ")
-                buttonPressed = True
-
-        if (not buttonPressed):
-            outputStr += "None"
-
-        print(outputStr)
-
-        if (touchSensor.m_overCurrentFault):
-            print("Over Current Fault detected!")
-
-    while(1):
-        myTouchSensor.readButtons()
-        printButtons(myTouchSensor)
-
-        time.sleep(1)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/mpu60x0.py b/examples/python/mpu60x0.py
deleted file mode 100755
index 6e37b91..0000000
--- a/examples/python/mpu60x0.py
+++ /dev/null
@@ -1,70 +0,0 @@
-#!/usr/bin/env python
-# Author: Jon Trulson <jtrulson@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_mpu9150 as sensorObj
-
-def main():
-    # Instantiate an MPU60X0 on I2C bus 0
-    sensor = sensorObj.MPU60X0()
-
-    ## Exit handlers ##
-    # This function stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    sensor.init()
-
-    x = sensorObj.new_floatp()
-    y = sensorObj.new_floatp()
-    z = sensorObj.new_floatp()
-
-    while (1):
-        sensor.update()
-        sensor.getAccelerometer(x, y, z)
-        print("Accelerometer: AX: ", sensorObj.floatp_value(x), end=' ')
-        print(" AY: ", sensorObj.floatp_value(y), end=' ')
-        print(" AZ: ", sensorObj.floatp_value(z))
-
-        sensor.getGyroscope(x, y, z)
-        print("Gyroscope:     GX: ", sensorObj.floatp_value(x), end=' ')
-        print(" GY: ", sensorObj.floatp_value(y), end=' ')
-        print(" GZ: ", sensorObj.floatp_value(z))
-
-        print("Temperature:  ", sensor.getTemperature())
-        print()
-
-        time.sleep(.5)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/mpu9150.py b/examples/python/mpu9150.py
deleted file mode 100755
index cc693d1..0000000
--- a/examples/python/mpu9150.py
+++ /dev/null
@@ -1,75 +0,0 @@
-#!/usr/bin/env python
-# Author: Jon Trulson <jtrulson@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_mpu9150 as sensorObj
-
-def main():
-    # Instantiate an MPU9150 on I2C bus 0
-    sensor = sensorObj.MPU9150()
-
-    ## Exit handlers ##
-    # This function stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    sensor.init()
-
-    x = sensorObj.new_floatp()
-    y = sensorObj.new_floatp()
-    z = sensorObj.new_floatp()
-
-    while (1):
-        sensor.update()
-        sensor.getAccelerometer(x, y, z)
-        print("Accelerometer: AX: ", sensorObj.floatp_value(x), end=' ')
-        print(" AY: ", sensorObj.floatp_value(y), end=' ')
-        print(" AZ: ", sensorObj.floatp_value(z))
-
-        sensor.getGyroscope(x, y, z)
-        print("Gyroscope:     GX: ", sensorObj.floatp_value(x), end=' ')
-        print(" GY: ", sensorObj.floatp_value(y), end=' ')
-        print(" GZ: ", sensorObj.floatp_value(z))
-
-        sensor.getMagnetometer(x, y, z)
-        print("Magnetometer:  MX: ", sensorObj.floatp_value(x), end=' ')
-        print(" MY: ", sensorObj.floatp_value(y), end=' ')
-        print(" MZ: ", sensorObj.floatp_value(z))
-
-        print("Temperature:  ", sensor.getTemperature())
-        print()
-
-        time.sleep(.5)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/mpu9250.py b/examples/python/mpu9250.py
deleted file mode 100755
index 99a9e60..0000000
--- a/examples/python/mpu9250.py
+++ /dev/null
@@ -1,75 +0,0 @@
-#!/usr/bin/env python
-# Author: Jon Trulson <jtrulson@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_mpu9150 as sensorObj
-
-def main():
-    # Instantiate an MPU9250 on I2C bus 0
-    sensor = sensorObj.MPU9250()
-
-    ## Exit handlers ##
-    # This function stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    sensor.init()
-
-    x = sensorObj.new_floatp()
-    y = sensorObj.new_floatp()
-    z = sensorObj.new_floatp()
-
-    while (1):
-        sensor.update()
-        sensor.getAccelerometer(x, y, z)
-        print("Accelerometer: AX: ", sensorObj.floatp_value(x), end=' ')
-        print(" AY: ", sensorObj.floatp_value(y), end=' ')
-        print(" AZ: ", sensorObj.floatp_value(z))
-
-        sensor.getGyroscope(x, y, z)
-        print("Gyroscope:     GX: ", sensorObj.floatp_value(x), end=' ')
-        print(" GY: ", sensorObj.floatp_value(y), end=' ')
-        print(" GZ: ", sensorObj.floatp_value(z))
-
-        sensor.getMagnetometer(x, y, z)
-        print("Magnetometer:  MX: ", sensorObj.floatp_value(x), end=' ')
-        print(" MY: ", sensorObj.floatp_value(y), end=' ')
-        print(" MZ: ", sensorObj.floatp_value(z))
-
-        print("Temperature:  ", sensor.getTemperature())
-        print()
-
-        time.sleep(.5)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/mq2.py b/examples/python/mq2.py
deleted file mode 100755
index 240d475..0000000
--- a/examples/python/mq2.py
+++ /dev/null
@@ -1,65 +0,0 @@
-#!/usr/bin/env python
-# Author: Zion Orent <zorent@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_gas as upmGas
-
-def main():
-    # Attach gas sensor to AIO0
-    myMQ2 = upmGas.MQ2(0);
-
-    ## Exit handlers ##
-    # This function stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit, including functions from myMQ2
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    threshContext = upmGas.thresholdContext()
-    threshContext.averageReading = 0
-    threshContext.runningAverage = 0
-    threshContext.averagedOver = 2
-
-    # Infinite loop, ends when script is cancelled
-    # Repeatedly, take a sample every 2 microseconds;
-    # find the average of 128 samples; and
-    # print a running graph of dots as averages
-    mybuffer = upmGas.uint16Array(128)
-    while(1):
-        samplelen = myMQ2.getSampledWindow(2, 128, mybuffer)
-        if samplelen:
-            thresh = myMQ2.findThreshold(threshContext, 30, mybuffer, samplelen)
-            myMQ2.printGraph(threshContext, 5)
-            if(thresh):
-                print("Threshold is ", thresh)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/mq3.py b/examples/python/mq3.py
deleted file mode 100755
index a605c16..0000000
--- a/examples/python/mq3.py
+++ /dev/null
@@ -1,65 +0,0 @@
-#!/usr/bin/env python
-# Author: Zion Orent <zorent@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_gas as upmGas
-
-def main():
-    # Attach gas sensor to AIO0
-    myMQ3 = upmGas.MQ3(0)
-
-    ## Exit handlers ##
-    # This function stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit, including functions from myMQ3
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    threshContext = upmGas.thresholdContext()
-    threshContext.averageReading = 0
-    threshContext.runningAverage = 0
-    threshContext.averagedOver = 2
-
-    # Infinite loop, ends when script is cancelled
-    # Repeatedly, take a sample every 2 microseconds;
-    # find the average of 128 samples; and
-    # print a running graph of dots as averages
-    mybuffer = upmGas.uint16Array(128)
-    while(1):
-        samplelen = myMQ3.getSampledWindow(2, 128, mybuffer)
-        if samplelen:
-            thresh = myMQ3.findThreshold(threshContext, 30, mybuffer, samplelen)
-            myMQ3.printGraph(threshContext, 5)
-            if(thresh):
-                print("Threshold is ", thresh)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/mq303a.py b/examples/python/mq303a.py
deleted file mode 100755
index a800b7b..0000000
--- a/examples/python/mq303a.py
+++ /dev/null
@@ -1,78 +0,0 @@
-#!/usr/bin/env python
-# Author: Zion Orent <zorent@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-
-# Load alcohol sensor module
-from upm import pyupm_mq303a as upmMq303a
-
-def main():
-    # Instantiate an mq303a sensor on analog pin A0
-    # This device uses a heater powered from an analog I/O pin.
-    # If using A0 as the data pin, then you need to use A1, as the heater
-    # pin (if using a grove mq303a).  For A1, we can use the D15 gpio,
-    # setup as an output, and drive it low to power the heater.
-    myAlcoholSensor = upmMq303a.MQ303A(0, 15)
-
-    ## Exit handlers ##
-    # This function stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit, including functions from myAlcoholSensor
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    print("Enabling heater and waiting 2 minutes for warmup.")
-
-    # give time updates every 30 seconds until 2 minutes have passed
-    # for the alcohol sensor to warm up
-    def warmup(iteration):
-        totalSeconds = (30 * iteration)
-        time.sleep(30)
-        print(totalSeconds, "seconds have passed")
-    warmup(1)
-    warmup(2)
-    warmup(3)
-    warmup(4)
-
-    notice = ("This sensor may need to warm "
-    "until the value drops below about 450.")
-    print(notice)
-
-    # Print the detected alcohol value every second
-    while(1):
-        val = myAlcoholSensor.value()
-        msg = "Alcohol detected "
-        msg += "(higher means stronger alcohol): "
-        print(msg + str(val))
-        time.sleep(1)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/mq4.py b/examples/python/mq4.py
deleted file mode 100755
index 21a7b7a..0000000
--- a/examples/python/mq4.py
+++ /dev/null
@@ -1,65 +0,0 @@
-#!/usr/bin/env python
-# Author: Jon Trulson <jtrulson@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_gas as upmGAS
-
-def main():
-    # Attach gas sensor to Analog A0
-    sensor = upmGAS.MQ4(0)
-
-    ## Exit handlers ##
-    # This function stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit, including functions from sensor
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    threshContext = upmGAS.thresholdContext()
-    threshContext.averageReading = 0
-    threshContext.runningAverage = 0
-    threshContext.averagedOver = 2
-
-    # Infinite loop, ends when script is cancelled
-    # Repeatedly, take a sample every 2 microseconds;
-    # find the average of 128 samples; and
-    # print a running graph of asteriskss as averages
-    mybuffer = upmGAS.uint16Array(128)
-    while(1):
-        samplelen = sensor.getSampledWindow(2, 128, mybuffer)
-        if samplelen:
-            thresh = sensor.findThreshold(threshContext, 30, mybuffer, samplelen)
-            sensor.printGraph(threshContext, 5)
-    #               if(thresh):
-    #                       print "Threshold is ", thresh
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/mq5.py b/examples/python/mq5.py
deleted file mode 100755
index 54041a7..0000000
--- a/examples/python/mq5.py
+++ /dev/null
@@ -1,65 +0,0 @@
-#!/usr/bin/env python
-# Author: Zion Orent <zorent@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_gas as upmGas
-
-def main():
-    # Attach gas sensor to AIO0
-    myMQ5 = upmGas.MQ5(0)
-
-    ## Exit handlers ##
-    # This function stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit, including functions from myMQ5
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    threshContext = upmGas.thresholdContext()
-    threshContext.averageReading = 0
-    threshContext.runningAverage = 0
-    threshContext.averagedOver = 2
-
-    # Infinite loop, ends when script is cancelled
-    # Repeatedly, take a sample every 2 microseconds;
-    # find the average of 128 samples; and
-    # print a running graph of dots as averages
-    mybuffer = upmGas.uint16Array(128)
-    while(1):
-        samplelen = myMQ5.getSampledWindow(2, 128, mybuffer)
-        if samplelen:
-            thresh = myMQ5.findThreshold(threshContext, 30, mybuffer, samplelen)
-            myMQ5.printGraph(threshContext, 5)
-            if(thresh):
-                print("Threshold is ", thresh)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/mq6.py b/examples/python/mq6.py
deleted file mode 100755
index 27f6328..0000000
--- a/examples/python/mq6.py
+++ /dev/null
@@ -1,65 +0,0 @@
-#!/usr/bin/env python
-# Author: Jon Trulson <jtrulson@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_gas as upmGAS
-
-def main():
-    # Attach gas sensor to Analog A0
-    sensor = upmGAS.MQ6(0)
-
-    ## Exit handlers ##
-    # This function stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit, including functions from sensor
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    threshContext = upmGAS.thresholdContext()
-    threshContext.averageReading = 0
-    threshContext.runningAverage = 0
-    threshContext.averagedOver = 2
-
-    # Infinite loop, ends when script is cancelled
-    # Repeatedly, take a sample every 2 microseconds;
-    # find the average of 128 samples; and
-    # print a running graph of asteriskss as averages
-    mybuffer = upmGAS.uint16Array(128)
-    while(1):
-        samplelen = sensor.getSampledWindow(2, 128, mybuffer)
-        if samplelen:
-            thresh = sensor.findThreshold(threshContext, 30, mybuffer, samplelen)
-            sensor.printGraph(threshContext, 5)
-    #               if(thresh):
-    #                       print "Threshold is ", thresh
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/mq7.py b/examples/python/mq7.py
deleted file mode 100755
index 86a46f5..0000000
--- a/examples/python/mq7.py
+++ /dev/null
@@ -1,65 +0,0 @@
-#!/usr/bin/env python
-# Author: Jon Trulson <jtrulson@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_gas as upmGAS
-
-def main():
-    # Attach gas sensor to Analog A0
-    sensor = upmGAS.MQ7(0)
-
-    ## Exit handlers ##
-    # This function stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit, including functions from sensor
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    threshContext = upmGAS.thresholdContext()
-    threshContext.averageReading = 0
-    threshContext.runningAverage = 0
-    threshContext.averagedOver = 2
-
-    # Infinite loop, ends when script is cancelled
-    # Repeatedly, take a sample every 2 microseconds;
-    # find the average of 128 samples; and
-    # print a running graph of asteriskss as averages
-    mybuffer = upmGAS.uint16Array(128)
-    while(1):
-        samplelen = sensor.getSampledWindow(2, 128, mybuffer)
-        if samplelen:
-            thresh = sensor.findThreshold(threshContext, 30, mybuffer, samplelen)
-            sensor.printGraph(threshContext, 5)
-    #               if(thresh):
-    #                       print "Threshold is ", thresh
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/mq8.py b/examples/python/mq8.py
deleted file mode 100755
index eb0b094..0000000
--- a/examples/python/mq8.py
+++ /dev/null
@@ -1,65 +0,0 @@
-#!/usr/bin/env python
-# Author: Jon Trulson <jtrulson@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_gas as upmGAS
-
-def main():
-    # Attach gas sensor to Analog A0
-    sensor = upmGAS.MQ8(0)
-
-    ## Exit handlers ##
-    # This function stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit, including functions from sensor
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    threshContext = upmGAS.thresholdContext()
-    threshContext.averageReading = 0
-    threshContext.runningAverage = 0
-    threshContext.averagedOver = 2
-
-    # Infinite loop, ends when script is cancelled
-    # Repeatedly, take a sample every 2 microseconds;
-    # find the average of 128 samples; and
-    # print a running graph of asteriskss as averages
-    mybuffer = upmGAS.uint16Array(128)
-    while(1):
-        samplelen = sensor.getSampledWindow(2, 128, mybuffer)
-        if samplelen:
-            thresh = sensor.findThreshold(threshContext, 30, mybuffer, samplelen)
-            sensor.printGraph(threshContext, 5)
-    #               if(thresh):
-    #                       print "Threshold is ", thresh
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/mq9.py b/examples/python/mq9.py
deleted file mode 100755
index 0dc9762..0000000
--- a/examples/python/mq9.py
+++ /dev/null
@@ -1,65 +0,0 @@
-#!/usr/bin/env python
-# Author: Zion Orent <zorent@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_gas as upmGas
-
-def main():
-    # Attach gas sensor to AIO0
-    myMQ9 = upmGas.MQ9(0)
-
-    ## Exit handlers ##
-    # This function stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit, including functions from myMQ9
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    threshContext = upmGas.thresholdContext()
-    threshContext.averageReading = 0
-    threshContext.runningAverage = 0
-    threshContext.averagedOver = 2
-
-    # Infinite loop, ends when script is cancelled
-    # Repeatedly, take a sample every 2 microseconds;
-    # find the average of 128 samples; and
-    # print a running graph of dots as averages
-    mybuffer = upmGas.uint16Array(128)
-    while(1):
-        samplelen = myMQ9.getSampledWindow(2, 128, mybuffer)
-        if samplelen:
-            thresh = myMQ9.findThreshold(threshContext, 30, mybuffer, samplelen)
-            myMQ9.printGraph(threshContext, 5)
-            if(thresh):
-                print("Threshold is ", thresh)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/ms5803.py b/examples/python/ms5803.py
deleted file mode 100755
index 9cc826e..0000000
--- a/examples/python/ms5803.py
+++ /dev/null
@@ -1,58 +0,0 @@
-#!/usr/bin/env python
-# Author: Jon Trulson <jtrulson@ics.com>
-# Copyright (c) 2016 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_ms5803 as sensorObj
-
-def main():
-    # Instantiate a MS5803 instance using bus 0 and default i2c address
-    sensor = sensorObj.MS5803(0)
-
-    # For SPI, bus 0, you would pass -1 as the address, and a valid pin for CS:
-    # MS5803(0, -1, 10);
-
-    ## Exit handlers ##
-    # This function stops python from printing a stacktrace when you
-    # hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    while (1):
-        sensor.update()
-
-        print("Temperature:", sensor.getTemperature(), "C,", end=' ')
-        print("Pressure: ", sensor.getPressure(), "mbar")
-        time.sleep(1)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/nlgpio16.py b/examples/python/nlgpio16.py
deleted file mode 100755
index f4b7ef8..0000000
--- a/examples/python/nlgpio16.py
+++ /dev/null
@@ -1,56 +0,0 @@
-#!/usr/bin/env python
-# Author: Jon Trulson <jtrulson@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import sys, signal, atexit
-from upm import pyupm_nlgpio16 as sensorObj
-
-def main():
-    # Instantiate a NLGPIO16 Module on the default UART (/dev/ttyACM0)
-    sensor = sensorObj.NLGPIO16()
-
-    ## Exit handlers ##
-    # This stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    # get the Version
-    print("Device Version:", sensor.getVersion())
-    # read the gpio at pin 3
-    print("GPIO 3 Value:", sensor.gpioRead(3))
-    # read the analog voltage at pin 5
-    print("Analog 5 Voltage:", sensor.analogReadVolts(5))
-    # set the gpio at pin 14 to HIGH
-    sensor.gpioSet(14)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/nmea_gps.py b/examples/python/nmea_gps.py
deleted file mode 100755
index cd44862..0000000
--- a/examples/python/nmea_gps.py
+++ /dev/null
@@ -1,54 +0,0 @@
-#!/usr/bin/env python
-# Author: Jon Trulson <jtrulson@ics.com>
-# Copyright (c) 2016 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_nmea_gps as sensorObj
-
-def main():
-    # Instantiate a NMEAGPS sensor on uart 0 at 9600 baud with enable
-    # pin on D3
-    sensor = sensorObj.NMEAGPS(0, 9600, 3)
-
-    ## Exit handlers ##
-    # This function stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    # loop, dumping NMEA data out as fast as it comes in
-    while (sensor.dataAvailable(5000)):
-        sys.stdout.write(sensor.readStr(256))
-
-    print("Timed out")
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/nmea_gps_i2c.py b/examples/python/nmea_gps_i2c.py
deleted file mode 100755
index 1e593c1..0000000
--- a/examples/python/nmea_gps_i2c.py
+++ /dev/null
@@ -1,55 +0,0 @@
-#!/usr/bin/env python
-# Author: Jon Trulson <jtrulson@ics.com>
-# Copyright (c) 2016 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_nmea_gps as sensorObj
-
-def main():
-    # Instantiate a NMEA_GPS UBLOX based i2c sensor on i2c bus 0 at
-    # address 0x42
-    sensor = sensorObj.NMEAGPS(0, 0x42)
-
-    ## Exit handlers ##
-    # This function stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    # loop, dumping NMEA data out as fast as it comes in
-    while (True):
-        if (sensor.dataAvailable(0)):
-            sys.stdout.write(sensor.readStr(256))
-        else:
-            time.sleep(.1)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/nunchuck.py b/examples/python/nunchuck.py
deleted file mode 100755
index b6851b0..0000000
--- a/examples/python/nunchuck.py
+++ /dev/null
@@ -1,70 +0,0 @@
-#!/usr/bin/env python
-# Author: Zion Orent <zorent@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_nunchuck as upmNunchuck
-
-def main():
-    # Instantiate a nunchuck controller bus 3 on I2C
-    myNunchuck = upmNunchuck.NUNCHUCK(3)
-
-    ## Exit handlers ##
-    # This function stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit, including functions from myNunchuck
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    def buttonStateStr(buttonState):
-        return "pressed" if buttonState else "not pressed"
-
-    # Print the X and Y input values every second
-    while(1):
-        myNunchuck.update()
-
-        outputStr = "stickX: {0}, stickY: {1}".format(
-        myNunchuck.stickX, myNunchuck.stickY)
-        print(outputStr)
-        outputStr = "accelX: {0}, accelY: {1}, accelZ: {2}".format(
-        myNunchuck.accelX, myNunchuck.accelY, myNunchuck.accelZ)
-        print(outputStr)
-
-        outputStr = "button C: {0}".format(
-        buttonStateStr(myNunchuck.buttonC))
-        print(outputStr)
-        outputStr = "button Z: {0}".format(
-        buttonStateStr(myNunchuck.buttonZ))
-        print(outputStr)
-
-        time.sleep(.1)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/o2.py b/examples/python/o2.py
deleted file mode 100755
index f7e9f8e..0000000
--- a/examples/python/o2.py
+++ /dev/null
@@ -1,54 +0,0 @@
-#!/usr/bin/env python
-# Author: Zion Orent <zorent@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_o2 as upmO2
-
-def main():
-    # This was tested with the O2 Oxygen Concentration Sensor Module
-    # Instantiate a O2 on analog pin A0
-    myO2 = upmO2.O2(0)
-
-    ## Exit handlers ##
-    # This stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This lets you run code on exit, including functions from myO2
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    while(1):
-        print("The output voltage is: {0}mV".format(
-        myO2.voltageValue()))
-
-        time.sleep(.1)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/oled_ssd1308.py b/examples/python/oled_ssd1308.py
deleted file mode 100755
index 76c14f6..0000000
--- a/examples/python/oled_ssd1308.py
+++ /dev/null
@@ -1,100 +0,0 @@
-#!/usr/bin/env python
-# Author: Zion Orent <zorent@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-# Load lcd display module
-from __future__ import print_function
-import time, signal, sys
-from upm import pyupm_lcd as upmLCD
-
-def main():
-    myLCD = upmLCD.SSD1308(0, 0x3C);
-
-    logoArr = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 128, 128, 128, 192, 192, 192, 224,
-    224, 224, 224, 240, 240, 248, 248, 120, 120, 120, 120, 60, 60, 60, 60, 60,
-    62, 30, 30, 30, 30, 30, 30, 30, 31, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
-    15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 31, 31, 31, 31, 31,
-    30, 62, 62, 62, 62, 126, 126, 124, 124, 252, 252, 248, 248, 240, 240, 240,
-    224, 224, 224, 192, 128, 128, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 128, 128, 128, 128, 128, 128,
-    128, 0, 56, 56, 28, 30, 14, 15, 15, 7, 7, 7, 7, 3, 3, 1, 1, 1, 1, 0, 0, 0,
-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-    192, 192, 192, 192, 192, 192, 192, 192, 0, 0, 0, 0, 192, 193, 195, 195,
-    195, 7, 15, 15, 63, 127, 255, 255, 255, 254, 252, 252, 240, 192, 0, 0, 0,
-    0, 0, 0, 0, 0, 128, 192, 192, 240, 248, 124, 124, 60, 0, 0, 0, 0, 159, 159,
-    159, 159, 159, 159, 159, 159, 0, 0, 0, 0, 128, 128, 128, 128, 128, 128,
-    128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 0, 0,
-    0, 0, 0, 0, 254, 254, 254, 254, 254, 254, 254, 254, 128, 128, 128, 128,
-    128, 0, 0, 0, 0, 0, 0, 0, 128, 128, 128, 192, 192, 192, 192, 192, 192, 128,
-    128, 128, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255,
-    0, 0, 0, 0, 3, 7, 3, 3, 3, 0, 0, 0, 0, 0, 1, 1, 255, 255, 255, 255, 255,
-    255, 255, 0, 0, 224, 248, 252, 252, 255, 127, 15, 15, 3, 1, 0, 0, 0, 0, 0,
-    0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 255, 255, 255,
-    255, 255, 255, 255, 255, 15, 15, 15, 15, 15, 15, 255, 255, 255, 255, 255,
-    255, 255, 252, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 15, 15,
-    15, 15, 15, 224, 224, 252, 254, 255, 255, 255, 255, 159, 159, 143, 143,
-    135, 135, 143, 159, 255, 255, 255, 255, 255, 255, 252, 248, 0, 0, 0, 255,
-    255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128,
-    224, 248, 248, 255, 255, 255, 255, 255, 127, 15, 255, 255, 255, 255, 255,
-    255, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255,
-    255, 255, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0,
-    0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 255, 255, 255,
-    255, 255, 255, 255, 255, 192, 192, 192, 192, 192, 31, 31, 255, 255, 255,
-    255, 255, 255, 231, 231, 199, 199, 199, 199, 199, 199, 199, 199, 231, 231,
-    231, 231, 199, 135, 0, 0, 0, 63, 255, 255, 255, 255, 255, 255, 255, 0, 0,
-    0, 0, 224, 240, 248, 248, 252, 254, 255, 255, 255, 127, 63, 63, 31, 15, 7,
-    7, 1, 0, 0, 63, 63, 255, 255, 255, 255, 255, 240, 192, 192, 128, 0, 0, 0,
-    0, 0, 0, 0, 0, 1, 3, 3, 7, 7, 7, 7, 7, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7,
-    0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 3, 3, 7, 7, 7,
-    7, 7, 7, 7, 7, 7, 0, 0, 0, 1, 3, 3, 3, 7, 7, 7, 7, 15, 15, 15, 15, 7, 7, 7,
-    7, 7, 3, 3, 3, 1, 0, 0, 0, 0, 1, 3, 3, 7, 135, 135, 135, 192, 192, 0, 0, 7,
-    7, 3, 3, 3, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7, 15, 15,
-    31, 127, 127, 127, 255, 255, 252, 252, 252, 248, 240, 240, 240, 224, 224,
-    224, 192, 192, 192, 192, 128, 128, 128, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-    0, 0, 0, 0, 0, 128, 128, 128, 128, 128, 128, 128, 192, 192, 192, 192, 192,
-    224, 224, 224, 224, 240, 240, 240, 240, 248, 248, 248, 248, 252, 252, 252,
-    254, 254, 255, 255, 255, 255, 255, 255, 127, 127, 0, 0, 0, 0, 0, 0, 0, 0,
-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
-    3, 3, 3, 7, 7, 7, 15, 15, 31, 31, 31, 63, 63, 63, 63, 63, 127, 127, 127,
-    127, 127, 255, 255, 255, 255, 254, 254, 254, 254, 254, 254, 254, 254, 254,
-    254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254,
-    255, 255, 255, 255, 255, 255, 255, 127, 127, 127, 127, 127, 127, 127, 127,
-    63, 63, 63, 63, 63, 31, 31, 31, 31, 31, 15, 15, 15, 15, 7, 7, 7, 7, 3, 3,
-    3, 3, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-    0, 0, 0, 0, 0, 0, 0]
-
-    intelLogo = upmLCD.uint8Array(len(logoArr))
-
-    for x in range(len(logoArr)):
-        intelLogo.__setitem__(x, logoArr[x])
-    myLCD.clear()
-    myLCD.draw(intelLogo, 1024)
-
-    del intelLogo
-    del myLCD
-    print("Exiting")
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/oled_ssd1327.py b/examples/python/oled_ssd1327.py
deleted file mode 100755
index cffa167..0000000
--- a/examples/python/oled_ssd1327.py
+++ /dev/null
@@ -1,194 +0,0 @@
-#!/usr/bin/env python
-# Author: Zion Orent <zorent@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-# Load lcd display module
-from __future__ import print_function
-import time, signal, sys
-from upm import pyupm_lcd as upmLCD
-
-def main():
-    myLCD = upmLCD.SSD1327(0, 0x3C);
-
-    logoArr = [0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x08, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x60, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x06, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x01, 0xC0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x01, 0xC0, 0x07, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x03, 0x80, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x03, 0x80,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x07, 0x80, 0x03, 0xC0, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x07, 0x80, 0x01, 0xC0,
-    0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20,
-    0x07, 0x80, 0x01, 0xE0, 0x08, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x20, 0x0F, 0x80, 0x01, 0xE0,
-    0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30,
-    0x0F, 0x00, 0x01, 0xE0, 0x08, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x30, 0x0F, 0x00, 0x01, 0xE0,
-    0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30,
-    0x0F, 0x00, 0x01, 0xE0, 0x18, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x30, 0x0F, 0x00, 0x01, 0xE0,
-    0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38,
-    0x0F, 0x00, 0x01, 0xE0, 0x18, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x38, 0x0F, 0x00, 0x01, 0xE0,
-    0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38,
-    0x0F, 0x80, 0x01, 0xE0, 0x38, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x3C, 0x0F, 0x80, 0x01, 0xE0,
-    0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E,
-    0x0F, 0x80, 0x03, 0xE0, 0x78, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x1E, 0x07, 0x80, 0x03, 0xE0,
-    0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E,
-    0x07, 0x80, 0x03, 0xE0, 0xF0, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x1F, 0x07, 0x80, 0x03, 0xC1,
-    0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F,
-    0x87, 0xC0, 0x07, 0xC1, 0xF0, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x0F, 0x83, 0xC0, 0x07, 0x83,
-    0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F,
-    0xC3, 0xC0, 0x07, 0x87, 0xE0, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x07, 0xE1, 0xE0, 0x07, 0x0F,
-    0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
-    0xF0, 0xE0, 0x0F, 0x0F, 0x80, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x01, 0xF8, 0xF0, 0x0E, 0x1F,
-    0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
-    0xF8, 0x70, 0x1C, 0x3F, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0xFC, 0x30, 0x18, 0x7E,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x7F, 0x18, 0x30, 0xFC, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x1F, 0x88, 0x21, 0xF0,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x0F, 0xC4, 0x47, 0xE0, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x03, 0xE0, 0x0F, 0x80,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0xF8, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0xE0, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
-    0x00, 0x00, 0x6C, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x02, 0x00, 0x06, 0x00, 0x00, 0x6C, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x06,
-    0x00, 0x00, 0x60, 0x00, 0x7E, 0x3F, 0x0F, 0xC3,
-    0xF0, 0xFA, 0x0F, 0xDF, 0xE1, 0x9F, 0xEC, 0x7E,
-    0xE6, 0x73, 0x9C, 0xE7, 0x39, 0xCE, 0x1C, 0xDF,
-    0xE1, 0xB9, 0xEC, 0xE7, 0xE0, 0x61, 0xD8, 0x66,
-    0x1B, 0x86, 0x1C, 0x06, 0x61, 0xB0, 0x6D, 0xC3,
-    0x7C, 0x7F, 0xFF, 0xFF, 0xFF, 0x06, 0x0F, 0x86,
-    0x61, 0xB0, 0x6D, 0x83, 0x3E, 0x7F, 0xFF, 0xFF,
-    0xFF, 0x06, 0x07, 0xC6, 0x61, 0xB0, 0x6D, 0x83,
-    0xC3, 0x61, 0x18, 0x46, 0x03, 0x86, 0x18, 0x66,
-    0x61, 0xB0, 0x6D, 0xC3, 0xFE, 0x7F, 0x9F, 0xE7,
-    0xF9, 0xFE, 0x1F, 0xE6, 0x3F, 0x9F, 0xEC, 0xFE,
-    0x7E, 0x3F, 0x0F, 0xC3, 0xF0, 0xFA, 0x0F, 0xC6,
-    0x3F, 0x9F, 0xEC, 0x7E, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x00,
-    0x00, 0x20, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x44, 0x00, 0x00, 0x20, 0x82, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6C, 0xF3,
-    0xCF, 0x70, 0x9E, 0x79, 0xE7, 0x80, 0x00, 0x00,
-    0x00, 0x00, 0x7D, 0x9E, 0x68, 0x20, 0xB2, 0xC8,
-    0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x9E,
-    0x6F, 0x20, 0xB2, 0xF9, 0xE7, 0x80, 0x00, 0x00,
-    0x00, 0x00, 0x46, 0x9A, 0x61, 0x20, 0xB2, 0xCB,
-    0x60, 0x80, 0x00, 0x00, 0x00, 0x00, 0x7C, 0xF3,
-    0xCF, 0x30, 0x9E, 0x79, 0xE7, 0x90, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x7C, 0x02, 0x00, 0x00, 0x82, 0x60, 0x00, 0x00,
-    0xF8, 0x00, 0x00, 0x40, 0x40, 0x02, 0x00, 0x00,
-    0x83, 0x60, 0x00, 0x00, 0x8C, 0x00, 0x00, 0x40,
-    0x60, 0xB7, 0x79, 0xE7, 0x81, 0xC7, 0x92, 0x70,
-    0x89, 0xE7, 0x9E, 0x78, 0x7C, 0xE2, 0xC9, 0x2C,
-    0x81, 0xCC, 0xD2, 0x40, 0xFB, 0x21, 0xB2, 0x48,
-    0x40, 0x62, 0xF9, 0x2C, 0x80, 0x8C, 0xD2, 0x40,
-    0x8B, 0xE7, 0xB0, 0x48, 0x40, 0xE2, 0xC9, 0x2C,
-    0x80, 0x84, 0xD2, 0x40, 0x8B, 0x2D, 0x92, 0x48,
-    0x7D, 0xB3, 0x79, 0x27, 0x80, 0x87, 0x9E, 0x40,
-    0x8D, 0xE7, 0x9E, 0x48, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
-
-    SeeedLogo = upmLCD.uint8Array(len(logoArr))
-
-    for x in range(len(logoArr)):
-        SeeedLogo.__setitem__(x, logoArr[x])
-
-    # If you don't set the display to be white, the seeed logo will appear jagged
-    myLCD.setGrayLevel(12)
-    myLCD.draw(SeeedLogo, 96 * 96 / 8);
-
-    for i in range(12):
-        myLCD.setCursor(i, 0)
-        myLCD.setGrayLevel(i)
-        myLCD.write('Hello World')
-
-    print("Exiting")
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/otp538u.py b/examples/python/otp538u.py
deleted file mode 100755
index 5013da8..0000000
--- a/examples/python/otp538u.py
+++ /dev/null
@@ -1,61 +0,0 @@
-#!/usr/bin/env python
-# Author: Zion Orent <zorent@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_otp538u as upmOtp538u
-
-def main():
-    # analog voltage, usually 3.3 or 5.0
-    OTP538U_AREF = 5.0
-
-    # Instantiate a OTP538U on analog pins A0 and A1
-    # A0 is used for the Ambient Temperature and A1 is used for the
-    # Object temperature.
-    myTempIR = upmOtp538u.OTP538U(0, 1, OTP538U_AREF)
-
-    ## Exit handlers ##
-    # This stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This lets you run code on exit, including functions from myTempIR
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    while(1):
-        outputStr = ("Ambient temp: {0}"
-        " C, Object temp: {1}"
-        " C".format(myTempIR.ambientTemperature(),
-        myTempIR.objectTemperature()))
-        print(outputStr)
-
-        time.sleep(1)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/ozwdump.py b/examples/python/ozwdump.py
deleted file mode 100755
index 8f765fb..0000000
--- a/examples/python/ozwdump.py
+++ /dev/null
@@ -1,104 +0,0 @@
-#!/usr/bin/env python
-# Author: Jon Trulson <jtrulson@ics.com>
-# Copyright (c) 2015-2016 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_ozw as sensorObj
-
-def main():
-    # Instantiate an OZW instance
-    sensor = sensorObj.OZWDUMP()
-
-    # This function lets you run code on exit
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-
-    defaultDev = "/dev/ttyACM0"
-    if (len(sys.argv) > 1):
-        defaultDev = sys.argv[1]
-
-    # The first thing to do is create options, then lock them when done.
-    sensor.optionsCreate()
-    sensor.optionsLock()
-
-    # Next, initialize it.
-    print("Initializing, this may take awhile depending on your ZWave network")
-
-    sensor.init(defaultDev)
-
-    print("Initialization complete")
-
-    print("Dumping nodes...")
-
-    sensor.dumpNodes(True)
-
-    # The following is example output of dumpNodes:
-    #
-    # Dumping nodes...
-    # Node 1: Z-Stick Gen5
-    # Node 2: Smart Switch 6
-    #    Index:  0, Type: bool, Label: Switch, Value: False
-    #    Index:  2, Type: float, Label: Energy, Value: 1.190 kWh
-    #    Index:  3, Type: float, Label: Previous Reading, Value: 1.190 kWh
-    #    Index:  4, Type: int32, Label: Interval, Value: 1521 seconds
-    #    Index:  5, Type: float, Label: Power, Value: 0.000 W
-    #    Index:  6, Type: float, Label: Voltage, Value: 121.256 V
-    #    Index:  7, Type: float, Label: Current, Value: 0.000 A
-    #    Index:  8, Type: bool, Label: Exporting, Value: False
-    #    Index: 45, Type: list, Label: Day, Value: Friday
-    #    Index: 46, Type: byte, Label: Hour, Value: 5
-    #    Index: 47, Type: byte, Label: Minute, Value: 53
-    # Node 3: Multi Sensor
-    #    Index:  0, Type: bool, Label: Sensor, Value: True
-    #    Index:  1, Type: float, Label: Temperature, Value: 72.8 F
-    #    Index:  2, Type: float, Label: Luminance, Value: 4 lux
-    #    Index:  3, Type: float, Label: Relative Humidity, Value: 22 %
-    #    Index: 17, Type: byte, Label: Battery Level, Value: 98 %
-    # Node 5: Minimote
-    # Node 6: Smart Energy Switch
-    #    Index:  0, Type: bool, Label: Switch, Value: False
-    #    Index:  2, Type: float, Label: Power, Value: 0.000 W
-    #    Index:  3, Type: float, Label: Energy, Value: 1.609 kWh
-    #    Index:  4, Type: float, Label: Previous Reading, Value: 1.609 kWh
-    #    Index:  5, Type: int32, Label: Interval, Value: 1521 seconds
-    #    Index:  6, Type: float, Label: Power, Value: 0.000 W
-    #    Index:  7, Type: float, Label: Previous Reading, Value: 1.609 W
-    #    Index:  8, Type: int32, Label: Interval, Value: 1521 seconds
-    #    Index:  9, Type: bool, Label: Exporting, Value: False
-    # Node 7: Smart Energy Switch
-    #    Index:  0, Type: bool, Label: Switch, Value: False
-    #    Index:  2, Type: float, Label: Power, Value: 0.000 W
-    #    Index:  3, Type: float, Label: Energy, Value: 0.000 kWh
-    #    Index:  4, Type: float, Label: Previous Reading, Value: 0.000 kWh
-    #    Index:  5, Type: int32, Label: Interval, Value: 1521 seconds
-    #    Index:  6, Type: float, Label: Power, Value: 0.000 W
-    #    Index:  7, Type: float, Label: Previous Reading, Value: 0.000 W
-    #    Index:  8, Type: int32, Label: Interval, Value: 1521 seconds
-    #    Index:  9, Type: bool, Label: Exporting, Value: False
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/p9813.py b/examples/python/p9813.py
deleted file mode 100755
index b2ecea7..0000000
--- a/examples/python/p9813.py
+++ /dev/null
@@ -1,48 +0,0 @@
-#!/usr/bin/env python
-# Author: Sergey Kiselev <sergey.kiselev@intel.com>
-# Copyright (c) 2016 Sergey Kiselev
-# Based on the apa102 driver writen by Yannick Adam <yannick.adam@gmail.com>
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_p9813 as mylib
-
-def main():
-    # Instantiate a chain of 2 LEDs using pin 2 for clock and pin 3 for data
-    ledChain = mylib.P9813(2, 2, 3)
-
-    ## Exit handlers ##
-    # This stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # Register exit handlers
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    print("Setting all LEDs to Green")
-    ledChain.setAllLeds(0, 255, 0)
-
-    print("Setting LED 1 to Blue")
-    ledChain.setLed(1, 0, 0, 255)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/pn532-writeurl.py b/examples/python/pn532-writeurl.py
deleted file mode 100755
index 5216ac9..0000000
--- a/examples/python/pn532-writeurl.py
+++ /dev/null
@@ -1,109 +0,0 @@
-#!/usr/bin/env python
-# Author: Jon Trulson <jtrulson@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_pn532 as upmPn532
-
-def main():
-    # Instantiate an PN532 on I2C bus 0 (default) using gpio 3 for the
-    # IRQ, and gpio 2 for the reset pin.
-    myNFC = upmPn532.PN532(3, 2)
-
-    ## Exit handlers ##
-    # This stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This lets you run code on exit
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    if (not myNFC.init()):
-        print("init() failed")
-        sys.exit(0)
-
-    vers = myNFC.getFirmwareVersion()
-
-    if (vers):
-        print("Got firmware version: %08x" % vers)
-    else:
-        print("Could not identify PN532")
-        sys.exit(0)
-
-    # Now scan and identify any cards that come in range (1 for now)
-
-    # Retry forever
-    myNFC.setPassiveActivationRetries(0xff)
-
-    myNFC.SAMConfig()
-
-    uidSize = upmPn532.uint8Array(0)
-    uid = upmPn532.uint8Array(7)
-
-    # the URL we want to add as an NDEF record
-    # NOTE: this cannot exceed 34 characters.
-    url = "iotdk.intel.com"
-
-    foundCard = False
-
-    while (not foundCard):
-        for i in range(7):
-            uid.__setitem__(i, 0)
-        if (myNFC.readPassiveTargetID(upmPn532.PN532.BAUD_MIFARE_ISO14443A,
-                                      uid, uidSize, 2000)):
-            # found a card
-            print("Found a card: UID len", uidSize.__getitem__(0))
-            print("UID: ", end=' ')
-            for i in range(uidSize.__getitem__(0)):
-                print("%02x" % uid.__getitem__(i), end=' ')
-            print()
-            print("SAK: %02x" % myNFC.getSAK())
-            print("ATQA: %04x" % myNFC.getATQA())
-            print()
-            foundCard = True
-        else:
-            print("Waiting for a card...\n")
-
-    if (uidSize.__getitem__(0) != 7):
-        print("This example will only write an NDEF URI to preformatted")
-        print("Mifare Ultralight or NTAG2XX tags")
-        sys.exit(1)
-
-    # 48 bytes is maximum data area on ultralight cards, so we use that
-    # as the maximum datasize here.  Obviously if you have a bigger
-    # card, you can write more data.
-    if (not myNFC.ntag2xx_WriteNDEFURI(upmPn532.PN532.NDEF_URIPREFIX_HTTP, url, 48)):
-        # failure
-        print("Failed to write NDEF record tag.")
-        sys.exit(1)
-
-    print("Success, URL record written to tag.")
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/pn532.py b/examples/python/pn532.py
deleted file mode 100755
index 48b9a96..0000000
--- a/examples/python/pn532.py
+++ /dev/null
@@ -1,88 +0,0 @@
-#!/usr/bin/env python
-# Author: Zion Orent <zorent@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_pn532 as upmPn532
-
-def main():
-    # Instantiate an PN532 on I2C bus 0 (default) using gpio 3 for the
-    # IRQ, and gpio 2 for the reset pin.
-    myNFC = upmPn532.PN532(3, 2)
-
-    ## Exit handlers ##
-    # This stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This lets you run code on exit
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    if (not myNFC.init()):
-        print("init() failed")
-        sys.exit(0)
-
-    vers = myNFC.getFirmwareVersion()
-
-    if (vers):
-        print("Got firmware version: %08x" % vers)
-    else:
-        print("Could not identify PN532")
-        sys.exit(0)
-
-    # Now scan and identify any cards that come in range (1 for now)
-
-    # Retry forever
-    myNFC.setPassiveActivationRetries(0xff)
-
-    myNFC.SAMConfig()
-
-    uidSize = upmPn532.uint8Array(0)
-    uid = upmPn532.uint8Array(7)
-
-    while (1):
-        for i in range(7):
-            uid.__setitem__(i, 0)
-        if (myNFC.readPassiveTargetID(upmPn532.PN532.BAUD_MIFARE_ISO14443A,
-                                      uid, uidSize, 2000)):
-            # found a card
-            print("Found a card: UID len", uidSize.__getitem__(0))
-            print("UID: ", end=' ')
-            for i in range(uidSize.__getitem__(0)):
-                print("%02x" % uid.__getitem__(i), end=' ')
-            print()
-            print("SAK: %02x" % myNFC.getSAK())
-            print("ATQA: %04x" % myNFC.getATQA())
-            print()
-            time.sleep(1)
-        else:
-            print("Waiting for a card...\n")
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/ppd42ns.py b/examples/python/ppd42ns.py
deleted file mode 100755
index dee9912..0000000
--- a/examples/python/ppd42ns.py
+++ /dev/null
@@ -1,59 +0,0 @@
-#!/usr/bin/env python
-# Author: Zion Orent <zorent@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_ppd42ns as upmPpd42ns
-
-def main():
-    # Instantiate a dust sensor on digital pin D8
-    myDustSensor = upmPpd42ns.PPD42NS(8)
-
-    ## Exit handlers ##
-    # This function stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit, including functions from myDustSensor
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    notice = ("This program will give readings "
-    "every 30 seconds until you stop it")
-    print(notice)
-
-    while(1):
-        data = myDustSensor.getData()
-        # we need to sleep for a bit for the data to print out
-        time.sleep(.1)
-        print("Low pulse occupancy: " + str(data.lowPulseOccupancy))
-        print("Ratio: " + str(data.ratio))
-        print("Concentration: " + str(data.concentration))
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/relay.py b/examples/python/relay.py
deleted file mode 100755
index b51e308..0000000
--- a/examples/python/relay.py
+++ /dev/null
@@ -1,50 +0,0 @@
-#!/usr/bin/env python
-from __future__ import print_function
-# Author: Sarah Knepper <sarah.knepper@intel.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-import time
-from upm import pyupm_grove as grove
-
-def main():
-    # Create the relay switch object using GPIO pin 0
-    relay = grove.Relay(0)
-
-    # Close and then open the relay switch 3 times,
-    # waiting one second each time.  The LED on the relay switch
-    # will light up when the switch is on (closed).
-    # The switch will also make a noise between transitions.
-    for i in range (0,3):
-        relay.on()
-        if relay.isOn():
-            print(relay.name(), 'is on')
-        time.sleep(1)
-        relay.off()
-        if relay.isOff():
-            print(relay.name(), 'is off')
-        time.sleep(1)
-
-    # Delete the relay switch object
-    del relay
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/rfr359f.py b/examples/python/rfr359f.py
deleted file mode 100755
index 602673a..0000000
--- a/examples/python/rfr359f.py
+++ /dev/null
@@ -1,55 +0,0 @@
-#!/usr/bin/env python
-# Author: Zion Orent <zorent@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_rfr359f as upmRfr359f
-
-def main():
-    # Instantiate an RFR359F digital pin D2
-    # This was tested on the Grove IR Distance Interrupter
-    myDistInterrupter = upmRfr359f.RFR359F(2)
-
-    ## Exit handlers ##
-    # This function stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit, including functions from myDistInterrupter
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    while(1):
-        if (myDistInterrupter.objectDetected()):
-            print("Object detected")
-        else:
-            print("Area is clear")
-        time.sleep(.1)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/rgbringcoder.py b/examples/python/rgbringcoder.py
deleted file mode 100755
index 6e79bb0..0000000
--- a/examples/python/rgbringcoder.py
+++ /dev/null
@@ -1,94 +0,0 @@
-#!/usr/bin/env python
-# Author: Jon Trulson <jtrulson@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_rgbringcoder as upmRGBRingCoder
-
-def main():
-    # There are a lot of pins to hook up.  These pins are valid for the
-    # Edison board, but may need to be adjusted for other platforms.
-
-    # In order:
-    # enable      - 4
-    # latch       - 10
-    # clear       - 11
-    # clock       - 2
-    # data        - 9
-    # switch      - 7
-
-    # red pwm     - 3
-    # green pwm   - 5
-    # blue pwm    - 6
-
-    # encA        - 12
-    # encB        - 13
-    ringCoder = upmRGBRingCoder.RGBRingCoder(4, 10, 11, 2, 9, 7, 12, 13, 3,
-                                             5, 6)
-
-    ## Exit handlers ##
-    # This stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit,
-    # including functions from ringCoder
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    spin = 0x0001;
-    oldState = False;
-    oldPos = 0;
-
-    # Lets go green
-    ringCoder.setRGBLED(0.99, 0.01, 0.99);
-
-    while(1):
-        # you spin me round...
-        if ((spin & 0xffff) == 0):
-            spin = 0x0001
-
-        ringCoder.setRingLEDS(spin)
-        spin <<= 1
-
-        # check button state
-        bstate = ringCoder.getButtonState()
-        if (bstate != oldState):
-            print("Button state changed from", oldState, " to ", bstate)
-            oldState = bstate
-
-        # check encoder position
-        epos = ringCoder.getEncoderPosition()
-        if (epos != oldPos):
-            print("Encoder position changed from", oldPos, "to", epos)
-            oldPos = epos
-
-        time.sleep(0.1)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/rhusb.py b/examples/python/rhusb.py
deleted file mode 100755
index 2416584..0000000
--- a/examples/python/rhusb.py
+++ /dev/null
@@ -1,74 +0,0 @@
-#!/usr/bin/env python
-# Author: Jon Trulson <jtrulson@ics.com>
-# Copyright (c) 2016 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_rhusb as sensorObj
-
-def main():
-    ## Exit handlers ##
-    # This function stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit
-    def exitHandler():
-        print("Exiting...")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    defaultDev = "/dev/ttyUSB0"
-
-    # if an argument was specified, use it as the device instead
-    if (len(sys.argv) > 1):
-        defaultDev = sys.argv[1]
-
-    print("Using device", defaultDev)
-    print("Initializing...")
-
-    # Instantiate an RHUSB instance on defaultDev
-    sensor = sensorObj.RHUSB(defaultDev)
-
-    # output the firmware ID
-    print("Firmware ID:", sensor.getFirmwareID())
-    print()
-
-    # update and print available values every second
-    while (1):
-        # update our values from the sensor
-        sensor.update()
-
-        # we show both C and F for temperature
-        print("Temperature:", sensor.getTemperature(), "C /", end=' ')
-        print(sensor.getTemperature(True), "F")
-
-        print("Humidity:", sensor.getHumidity(), "%")
-
-        print()
-        time.sleep(1)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/rn2903-p2p-rx.py b/examples/python/rn2903-p2p-rx.py
deleted file mode 100755
index d0845d2..0000000
--- a/examples/python/rn2903-p2p-rx.py
+++ /dev/null
@@ -1,108 +0,0 @@
-#!/usr/bin/env python
-# Author: Jon Trulson <jtrulson@ics.com>
-# Copyright (c) 2017 Intel Corporation.
-#
-# The MIT License
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_rn2903 as sensorObj
-
-def main():
-    ## Exit handlers ##
-    # This function stops python from printing a stacktrace when you
-    # hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    defaultDev = "/dev/ttyUSB0"
-    if (len(sys.argv) > 1):
-        defaultDev = sys.argv[1]
-    print("Using device", defaultDev)
-
-    # Instantiate a RN2903 sensor on defaultDev at 57600 baud.
-    sensor = sensorObj.RN2903(defaultDev,
-                              sensorObj.RN2903_DEFAULT_BAUDRATE)
-
-    # To use an internal UART understood by MRAA, use the following
-    # to inititialize rather than the above, which by default uses a
-    # tty path.
-    #
-    # sensor = sensorObj.RN2903(0,
-    #                           sensorObj.RN2903_DEFAULT_BAUDRATE)
-
-    # enable debugging
-    # sensor.setDebug(True)
-
-    # get version
-    if (sensor.command("sys get ver")):
-        print("Failed to retrieve device version string")
-        sys.exit(1)
-
-    print("Firmware version: " + sensor.getResponse())
-
-    print("Hardware EUI: " + sensor.getHardwareEUI())
-
-    # For this example, we will just try to receive a packet
-    # transmitted by the p2p-tx rn2903 example.  We reset the
-    # device to defaults, and we do not make any adjustments to the
-    # radio configuration.  You will probably want to do so for a
-    # real life application.
-
-    # The first thing to do is to suspend the LoRaWAN stack on the device.
-    sensor.macPause();
-
-    # We will use continuous mode (window_size 0), though the default
-    # radio watch dog timer will expire every 15 seconds.  We will
-    # just loop here.
-
-    while (True):
-        print("Waiting for packet...")
-        rv = sensor.radioRx(0);
-        if (rv):
-            print("radioRx() failed with code " + str(rv))
-        else:
-            resp = sensor.getResponse();
-            payload = sensor.getRadioRxPayload();
-            if (not len(payload)):
-                print("Got response: '", end='')
-                print(resp, end="")
-                print("'")
-            else:
-                print("Got payload: '", end='')
-                print(sensor.fromHex(payload), end='')
-                print("'")
-
-        print()
-
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/rn2903-p2p-tx.py b/examples/python/rn2903-p2p-tx.py
deleted file mode 100755
index 9270ddf..0000000
--- a/examples/python/rn2903-p2p-tx.py
+++ /dev/null
@@ -1,114 +0,0 @@
-#!/usr/bin/env python
-# Author: Jon Trulson <jtrulson@ics.com>
-# Copyright (c) 2017 Intel Corporation.
-#
-# The MIT License
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_rn2903 as sensorObj
-
-def main():
-    ## Exit handlers ##
-    # This function stops python from printing a stacktrace when you
-    # hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    defaultDev = "/dev/ttyUSB0"
-    if (len(sys.argv) > 1):
-        defaultDev = sys.argv[1]
-    print("Using device", defaultDev)
-
-    # Instantiate a RN2903 sensor on defaultDev at 57600 baud.
-    sensor = sensorObj.RN2903(defaultDev,
-                              sensorObj.RN2903_DEFAULT_BAUDRATE)
-
-    # To use an internal UART understood by MRAA, use the following
-    # to inititialize rather than the above, which by default uses a
-    # tty path.
-    #
-    # sensor = sensorObj.RN2903(0,
-    #                           sensorObj.RN2903_DEFAULT_BAUDRATE)
-
-    # enable debugging
-    # sensor.setDebug(True)
-
-    # get version
-    if (sensor.command("sys get ver")):
-        print("Failed to retrieve device version string")
-        sys.exit(1)
-
-    print("Firmware version: " + sensor.getResponse())
-
-    print("Hardware EUI: " + sensor.getHardwareEUI())
-
-    # For this example, we will just try transmitting a packet over
-    # LoRa.  We reset the device to defaults, and we do not make any
-    # adjustments to the radio configuration.  You will probably want
-    # to do so for a real life application.
-
-    # The first thing to do is to suspend the LoRaWAN stack on the device.
-    sensor.macPause();
-
-    # the default radio watchdog timer is set for 15 seconds, so we
-    # will send a packet every 10 seconds.  In reality, local
-    # restrictions limit the amount of time on the air, so in a real
-    # implementation, you would not want to send packets that
-    # frequently.
-
-    count = 0;
-
-    while (True):
-        output = "Ping " + str(count)
-        count += 1
-        # All payloads must be hex encoded
-        payload = sensor.toHex(output);
-
-        print("Transmitting a packet, data: '", end='')
-        print(output, end='')
-        print("' -> hex: '", end='')
-        print(payload, end='')
-        print("'")
-
-        rv = sensor.radioTx(payload);
-
-        if (rv == sensorObj.RN2903_RESPONSE_OK):
-            print("Transmit successful.")
-        else:
-            print("Transmit failed with code " + str(rv))
-
-        print()
-        time.sleep(10)
-
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/rn2903.py b/examples/python/rn2903.py
deleted file mode 100755
index 0f4e3af..0000000
--- a/examples/python/rn2903.py
+++ /dev/null
@@ -1,129 +0,0 @@
-#!/usr/bin/env python
-# Author: Jon Trulson <jtrulson@ics.com>
-# Copyright (c) 2017 Intel Corporation.
-#
-# The MIT License
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_rn2903 as sensorObj
-
-def main():
-    ## Exit handlers ##
-    # This function stops python from printing a stacktrace when you
-    # hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    defaultDev = "/dev/ttyUSB0"
-    if (len(sys.argv) > 1):
-        defaultDev = sys.argv[1]
-    print("Using device", defaultDev)
-
-    # Instantiate a RN2903 sensor on defaultDev at 57600 baud.
-    sensor = sensorObj.RN2903(defaultDev,
-                              sensorObj.RN2903_DEFAULT_BAUDRATE)
-
-    # To use an internal UART understood by MRAA, use the following
-    # to inititialize rather than the above, which by default uses a
-    # tty path.
-    #
-    # sensor = sensorObj.RN2903(0,
-    #                           sensorObj.RN2903_DEFAULT_BAUDRATE)
-
-    # enable debugging
-    # sensor.setDebug(True)
-
-    # get version
-    if (sensor.command("sys get ver")):
-        print("Failed to retrieve device version string")
-        sys.exit(1)
-
-    print("Firmware version: " + sensor.getResponse())
-
-    print("Hardware EUI: " + sensor.getHardwareEUI())
-
-    # we can support two types of join, OTAA and ABP. Each requires
-    # that certain parameters be set first.  We will only attempt ABP
-    # joining with this example since it's the only one that can
-    # succeed without actual configuration.  In both cases, if you
-    # are actually attempting to join a real LoRaWAN network, you
-    # must change the parameters below to match the network you are
-    # attempting to join.
-
-    # For OTAA, you need to supply valid Device EUI, Application EUI,
-    # and Application key:
-    #
-    # sensor.setDeviceEUI("0011223344556677")
-    # sensor.setApplicationEUI("0011223344556677")
-    # sensor.setApplicationKey("01234567012345670123456701234567")
-    #
-    # rv = sensor.join(RN2903_JOIN_TYPE_OTAA)
-    # A successful join will return RN2903_JOIN_STATUS_ACCEPTED (0).
-
-    # Try an ABP join.  Note, these parameters are made up.  For a
-    # real network, you will want to use the correct values
-    # obviously.  For an ABP join, you need to supply the Device
-    # Address, Network Session Key, and the Application Session Key.
-
-    sensor.setDeviceAddr("00112233")
-    sensor.setNetworkSessionKey("00112233001122330011223300112233")
-    sensor.setApplicationSessionKey("00112233001122330011223300112233")
-
-    rv = sensor.join(sensorObj.RN2903_JOIN_TYPE_ABP)
-
-    if (rv == sensorObj.RN2903_JOIN_STATUS_ACCEPTED):
-        print("Join successful.")
-
-        # All transmit payloads must be hex encoded strings, so
-        # pretend we have a temperature sensor that gave us a value
-        # of 25.6 C, and we want to transmit it.
-        faketemp = "25.6"
-        print("Transmitting a packet...")
-
-        trv = sensor.macTx(sensorObj.RN2903_MAC_MSG_TYPE_UNCONFIRMED,
-                           1, # port number
-                           sensor.toHex(faketemp))
-
-        if (trv == sensorObj.RN2903_MAC_TX_STATUS_TX_OK):
-            print("Transmit successful.")
-        else:
-            # check to see if we got a downlink packet
-            if (trv == sensor.Obj.RN2903_MAC_TX_STATUS_RX_RECEIVED):
-                print("Transmit successful, downlink packet received:", end=' ')
-                print(sensor.getResponse())
-            else:
-                print("Transmit failed with code " + str(trv))
-    else:
-        print("Join failed with code " + str(rv))
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/rotary.py b/examples/python/rotary.py
deleted file mode 100755
index 8042a77..0000000
--- a/examples/python/rotary.py
+++ /dev/null
@@ -1,50 +0,0 @@
-#!/usr/bin/env python
-from __future__ import print_function
-# Author: Mihai Tudor Panu <mihai.tudor.panu@intel.com>
-# Copyright (c) 2014 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from time import sleep
-from upm import pyupm_grove as grove
-
-def main():
-    # New knob on AIO pin 0
-    knob = grove.Rotary(0)
-
-    # Loop indefinitely
-    while True:
-        # Read values
-        abs = knob.abs_value()
-        absdeg = knob.abs_deg()
-        absrad = knob.abs_rad()
-
-        rel = knob.rel_value()
-        reldeg = knob.rel_deg()
-        relrad = knob.rel_rad()
-
-        print("Abs values: %4d" % int(abs) , " raw %4d" % int(absdeg), "deg = %5.2f" % absrad , " rad ", end=' ')
-        print("Rel values: %4d" % int(rel) , " raw %4d" % int(reldeg), "deg = %5.2f" % relrad , " rad")
-
-        # Sleep for 2.5 s
-        sleep(2.5)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/rotaryencoder.py b/examples/python/rotaryencoder.py
deleted file mode 100755
index 534faa4..0000000
--- a/examples/python/rotaryencoder.py
+++ /dev/null
@@ -1,52 +0,0 @@
-#!/usr/bin/env python
-# Author: Zion Orent <zorent@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_rotaryencoder as upmRotaryEncoder
-
-def main():
-    # Instantiate a Grove Rotary Encoder, using signal pins D2 and D3
-    myRotaryEncoder = upmRotaryEncoder.RotaryEncoder(2, 3);
-
-    ## Exit handlers ##
-    # This function stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit, including functions from myRotaryEncoder
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    # Read the value every second and detect motion
-    while(1):
-        print("Position: {0}".format(myRotaryEncoder.position()))
-        time.sleep(.1)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/rpr220.py b/examples/python/rpr220.py
deleted file mode 100755
index cdc57ae..0000000
--- a/examples/python/rpr220.py
+++ /dev/null
@@ -1,59 +0,0 @@
-#!/usr/bin/env python
-# Author: Zion Orent <zorent@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_rpr220 as upmRpr220
-
-def main():
-    # This example uses a simple method to determine current status
-
-    # Instantiate an RPR220 digital pin D2
-    # This was tested on the Grove IR Reflective Sensor
-    myReflectiveSensor = upmRpr220.RPR220(2)
-
-    ## Exit handlers ##
-    # This stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This lets you run code on exit,
-    # including functions from myReflectiveSensor
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    while(1):
-        if (myReflectiveSensor.blackDetected()):
-            print("Black detected")
-        else:
-            print("Black NOT detected")
-
-        time.sleep(.1)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/rsc.py b/examples/python/rsc.py
deleted file mode 100755
index 237bf38..0000000
--- a/examples/python/rsc.py
+++ /dev/null
@@ -1,60 +0,0 @@
-#!/usr/bin/env python
-# Author: Abhishek Malik <abhishek.malik@intel.com>
-# Copyright (c) 2017 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_rsc as rsc
-
-# Since CI loads each python example, the following would fail if the types
-# from rsc_regs.h are NOT exposed in the pyupm_rsc module
-mode = rsc.NORMAL_MODE
-dr = rsc.N_DR_20_SPS
-
-def main():
-    # Instantiate a Honeywell RSC Pressure sensor on the SPI bus 0
-    rsc_sensor = rsc.RSC(0, 9, 8);
-
-    ## Exit handlers ##
-    # This function stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit, including functions from abpdrrt005pg2a5
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    # Read the value every second and detect the pressure
-    print("Sensor Name: {0}".format(rsc_sensor.getSensorName()))
-    print("Sensor Serial Number: {0}".format(rsc_sensor.getSensorSerialNumber()))
-    while(1):
-        print("Pressure {0}: {1}".format(rsc_sensor.getPressureUnit(), rsc_sensor.getPressure()))
-        print("Temperature C: {0}".format(rsc_sensor.getTemperature()))
-        time.sleep(1)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/scam.py b/examples/python/scam.py
deleted file mode 100755
index 039be26..0000000
--- a/examples/python/scam.py
+++ /dev/null
@@ -1,66 +0,0 @@
-#!/usr/bin/env python
-#
-# Author: Jon Trulson <jtrulson@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import sys
-from upm import pyupm_scam as upmscam
-
-def main():
-    # Instantiate a Serial Camera on UART 0
-    camera = upmscam.SCAM(0)
-
-    # make sure port is initialized properly. 115200 baud is the default.
-    if (not camera.setupTty()):
-        print("Failed to setup tty port parameters")
-        sys.exit(1)
-
-    if (camera.init()):
-        print("Initialized...")
-    else:
-        print("init() failed")
-
-    if (camera.preCapture()):
-        print("preCapture succeeded...")
-    else:
-        print("preCapture failed.")
-
-    if (camera.doCapture()):
-        print("doCapture succeeded...")
-    else:
-        print("doCapture failed.")
-
-    print("Image size is", camera.getImageSize(), "bytes")
-
-    if (camera.getImageSize() > 0):
-        print("Storing image.jpg...")
-        if (camera.storeImage("image.jpg")):
-            print("storeImage succeeded...")
-        else:
-            print("storeImage failed.")
-
-    print("Exiting.")
-    sys.exit(0)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/sensortemplate.py b/examples/python/sensortemplate.py
deleted file mode 100755
index 93173b5..0000000
--- a/examples/python/sensortemplate.py
+++ /dev/null
@@ -1,40 +0,0 @@
-#!/usr/bin/env python
-# The MIT License (MIT)
-#
-# Author: Your Full Name <your@email.address>
-# Copyright (c) <year> <copyright holder>
-#
-# Permission is hereby granted, free of charge, to any person obtaining a copy of
-# this software and associated documentation files (the "Software"), to deal in
-# the Software without restriction, including without limitation the rights to
-# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
-# the Software, and to permit persons to whom the Software is furnished to do so,
-# subject to the following conditions:
-#
-# The above copyright notice and this permission notice shall be included in all
-# copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-
-from __future__ import print_function
-import time
-from upm import pyupm_sensortemplate
-
-def main():
-    # Create an instance of SensorTemplate
-    sensor = pyupm_sensortemplate.SensorTemplate(0)
-
-    while True:
-        print("SensorTemplate says: %s" % sensor.helloWorld)
-
-        # Repeat every 2 seconds
-        sleep(2)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/sht1x.py b/examples/python/sht1x.py
deleted file mode 100755
index b3c7076..0000000
--- a/examples/python/sht1x.py
+++ /dev/null
@@ -1,58 +0,0 @@
-#!/usr/bin/env python
-# Author: Jon Trulson <jtrulson@ics.com>
-# Copyright (c) 2016 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_sht1x as sensorObj
-
-def main():
-    # Instantiate a SHT1X sensor using D2 as the clock, and D3 as the
-    # data pin.
-    sensor = sensorObj.SHT1X(2, 3)
-
-    ## Exit handlers ##
-    # This function stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    # Every 2 seconds, update and print values
-    while (True):
-        sensor.update()
-
-        print("Temperature:", sensor.getTemperature(), "C")
-        print("Humidity:   ", sensor.getHumidity(), "RH")
-        print()
-
-        time.sleep(2)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/si114x.py b/examples/python/si114x.py
deleted file mode 100755
index 7a83ea6..0000000
--- a/examples/python/si114x.py
+++ /dev/null
@@ -1,69 +0,0 @@
-#!/usr/bin/env python
-# Author: Zion Orent <zorent@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_si114x as upmSi114x
-
-def main():
-    # Instantiate a SI114x UV Sensor on I2C bus 0
-    myUVSensor = upmSi114x.SI114X(0)
-
-    ## Exit handlers ##
-    # This stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit,
-    # including functions from myUVSensor
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    # First initialize it
-    myUVSensor.initialize()
-
-    print("UV Index Scale:")
-    print("---------------")
-    print("11+        Extreme")
-    print("8-10       Very High")
-    print("6-7        High")
-    print("3-5        Moderate")
-    print("0-2        Low\n")
-
-    # update every second and print the currently measured UV Index
-    while (1):
-        # update current value(s)
-        myUVSensor.update()
-
-        # print detected value
-        print("UV Index:", myUVSensor.getUVIndex())
-
-        time.sleep(1)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/slide.py b/examples/python/slide.py
deleted file mode 100755
index a30c086..0000000
--- a/examples/python/slide.py
+++ /dev/null
@@ -1,44 +0,0 @@
-#!/usr/bin/env python
-from __future__ import print_function
-# Author: Mihai Tudor Panu <mihai.tudor.panu@intel.com>
-# Copyright (c) 2014 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from time import sleep
-from upm import pyupm_slide as slide
-
-def main():
-    # New Grove Slider on AIO pin 0
-    slider = slide.Slide(0)
-
-    # Loop indefinitely
-    while True:
-        # Read values
-        raw = slider.raw_value()
-        volts = slider.voltage_value()
-
-        print("Slider value: ", raw , " = %.2f" % volts , " V")
-
-        # Sleep for 2.5 s
-        sleep(2.5)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/sm130.py b/examples/python/sm130.py
deleted file mode 100755
index 84797e8..0000000
--- a/examples/python/sm130.py
+++ /dev/null
@@ -1,68 +0,0 @@
-#!/usr/bin/env python
-# Author: Jon Trulson <jtrulson@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_sm130 as sensorObj
-
-def main():
-    # Instantiate a UART based SM130 RFID Module using defaults
-    sensor = sensorObj.SM130()
-
-    ## Exit handlers ##
-    # This stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    # Set the baud rate, 19200 baud is the default.
-    if (sensor.setBaudRate(19200)):
-        print("Failed to set baud rate")
-        sys.exit(0)
-
-    print("Resetting...")
-    sensor.reset()
-
-    print("Firmware revision: " + sensor.getFirmwareVersion())
-
-    print("Waiting up to 5 seconds for a tag...")
-
-    if (sensor.waitForTag(5000)):
-        print("Found tag, UID:", end=' ')
-        print(sensor.string2HexString(sensor.getUID()))
-        print("Tag Type:", end=' ')
-        print(sensor.tag2String(sensor.getTagType()))
-    else:
-        # error
-        print("waitForTag failed: " + sensor.getLastErrorString())
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/speaker.py b/examples/python/speaker.py
deleted file mode 100755
index 855fb16..0000000
--- a/examples/python/speaker.py
+++ /dev/null
@@ -1,38 +0,0 @@
-#!/usr/bin/env python
-# Author: Zion Orent <zorent@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-import time, sys, signal, atexit
-from upm import pyupm_speaker as upmspeaker
-
-def main():
-    # Instantiate a Speaker on digital pin D2
-    mySpeaker = upmspeaker.Speaker(2)
-
-    # Play all 7 of the lowest notes
-    mySpeaker.playAll()
-
-    # Play a medium C-sharp
-    mySpeaker.playSound('c', True, "med")
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/speaker_pwm.py b/examples/python/speaker_pwm.py
deleted file mode 100755
index bae810e..0000000
--- a/examples/python/speaker_pwm.py
+++ /dev/null
@@ -1,44 +0,0 @@
-#!/usr/bin/env python
-# Author: Jon Trulson <jtrulson@ics.com>
-# Copyright (c) 2017 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-import time, sys, signal, atexit
-from upm import pyupm_speaker as upmspeaker
-
-def main():
-    # Instantiate a Speaker (PWM) pin D3 in PWM mode
-    speaker = upmspeaker.Speaker(3, True)
-
-    # emit a series of frequencies for 500ms each
-    speaker.emit(50, 500);
-    speaker.emit(75, 500);
-    speaker.emit(125, 500);
-    speaker.emit(250, 500);
-    speaker.emit(500, 500);
-    speaker.emit(1000, 500);
-    speaker.emit(2000, 500);
-    speaker.emit(3000, 500);
-    speaker.emit(5000, 500);
-    speaker.emit(10000, 500);
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/stepmotor.py b/examples/python/stepmotor.py
deleted file mode 100755
index d11bc52..0000000
--- a/examples/python/stepmotor.py
+++ /dev/null
@@ -1,68 +0,0 @@
-#!/usr/bin/env python
-# Author:  Mihai Tudor Panu <mihai.tudor.panu@intel.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_stepmotor as mylib
-
-def main():
-    # Instantiate a StepMotor object on pins 2 (dir) and 3 (step)
-    stepper = mylib.StepMotor(2, 3)
-
-    ## Exit handlers ##
-    # This stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This lets you run code on exit
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    print("Rotating 1 revolution forward and back at 60 rpm.")
-    stepper.setSpeed(60)
-    stepper.stepForward(200)
-    time.sleep(1)
-    stepper.stepBackward(200)
-    time.sleep(1)
-
-    print("Rotating 1 revolution forward and back at 150 rpm.")
-    stepper.setSpeed(150)
-    stepper.stepForward(200)
-    time.sleep(1)
-    stepper.stepBackward(200)
-    time.sleep(1)
-
-    print("Rotating 1 revolution forward and back at 300 rpm.")
-    stepper.setSpeed(300)
-    stepper.stepForward(200)
-    time.sleep(1)
-    stepper.stepBackward(200)
-    time.sleep(1)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/sx1276-fsk.py b/examples/python/sx1276-fsk.py
deleted file mode 100755
index 335adc3..0000000
--- a/examples/python/sx1276-fsk.py
+++ /dev/null
@@ -1,94 +0,0 @@
-#!/usr/bin/env python
-# Author: Jon Trulson <jtrulson@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_sx1276 as sensorObj
-
-def main():
-    # Instantiate an SX1276 using default parameters
-    sensor = sensorObj.SX1276()
-
-    ## Exit handlers ##
-    # This stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    print("Specify an argument to go into receive mode.  Default is transmit")
-
-    # 915Mhz
-    sensor.setChannel(915000000)
-
-    # FSK configuration (rx and tx must be configured the same):
-    # Tx output power = 14 dBm
-    # FSK freq deviation = 25000 Hz
-    # FSK bandwidth = 50000 bps
-    # FSK AFC bandwidth = 83333 Hz
-    # FSK datarate = 50000 bps
-    # FSK preamble len = 5
-    # FSK fixed length payload = false
-    # FSK CRC check = true
-    # FSK (rx) continuous Rx mode = False
-
-    sensor.setTxConfig(sensor.MODEM_FSK, 14, 25000, 0,
-                       50000, 0, 5, False, True, False, 0, False)
-
-    sensor.setRxConfig(sensor.MODEM_FSK, 50000, 50000,
-                       0, 83333, 5, 0, False, 0, True,
-                       False, 0, False, True)
-
-    count = 0
-
-    while True:
-        if (len(sys.argv) > 1):
-            # receive mode
-            print("Attempting to receive...")
-            rv = sensor.setRx(3000)
-            if (rv):
-                print("setRx returned ", rv)
-            else:
-                print("Received Buffer: ", sensor.getRxBufferStr());
-                # go back to sleep when done
-
-                sensor.setSleep()
-                time.sleep(.25)
-        else:
-            # transmit mode
-            buffer = "Ping " + str(count)
-            count += 1
-            print("Sending..." + buffer)
-            sensor.sendStr(buffer, 3000)
-            sensor.setSleep();
-            time.sleep(1);
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/sx1276-lora.py b/examples/python/sx1276-lora.py
deleted file mode 100755
index b6a936b..0000000
--- a/examples/python/sx1276-lora.py
+++ /dev/null
@@ -1,93 +0,0 @@
-#!/usr/bin/env python
-# Author: Jon Trulson <jtrulson@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_sx1276 as sensorObj
-
-def main():
-    # Instantiate an SX1276 using default parameters
-    sensor = sensorObj.SX1276()
-
-    ## Exit handlers ##
-    # This stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    print("Specify an argument to go into receive mode.  Default is transmit")
-
-    # 915Mhz
-    sensor.setChannel(915000000)
-
-    # LORA configuration (rx and tx must be configured the same):
-    # Tx output power = 14 dBm
-    # LORA bandwidth = 125000 (can also be 250K and 500K)
-    # LORA spreading factor = 7
-    # LORA coding rate = 1 (4/5)
-    # LORA preamble len = 8
-    # LORA symbol timeout = 5
-    # LORA fixed payload = false
-    # LORA IQ inversion = false
-    # LORA (rx) continuous Rx mode = true
-
-    sensor.setTxConfig(sensor.MODEM_LORA, 14, 0, 125000,
-                       7, 1, 8, False, True, False, 0, False)
-
-    sensor.setRxConfig(sensor.MODEM_LORA, 125000, 7,
-                       1, 0, 8, 5, False, 0, True, False, 0, False, True)
-
-    count = 0
-
-    while True:
-        if (len(sys.argv) > 1):
-            # receive mode
-            print("Attempting to receive...")
-            rv = sensor.setRx(3000)
-            if (rv):
-                print("setRx returned ", rv)
-            else:
-                print("Received Buffer: ", sensor.getRxBufferStr());
-                # go back to sleep when done
-
-                sensor.setSleep()
-                time.sleep(.25)
-        else:
-            # transmit mode
-            buffer = "Ping " + str(count)
-            count += 1
-            print("Sending..." + buffer)
-            sensor.sendStr(buffer, 3000)
-            sensor.setSleep();
-            time.sleep(1);
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/sx6119.py b/examples/python/sx6119.py
deleted file mode 100755
index 894f880..0000000
--- a/examples/python/sx6119.py
+++ /dev/null
@@ -1,55 +0,0 @@
-#!/usr/bin/env python
-# Author: Zion Orent <zorent@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import sys
-from upm import pyupm_sx6119 as upmSx6119
-
-def main():
-    # Instantiate a SX6119 on digital pins 2 (power) and 3 (seek)
-    # This example was tested on the Grove FM Receiver.
-    myFM_receiver_obj = upmSx6119.SX6119(2, 3)
-
-    # if an argument was specified (any argument), seek to the next
-    # station, else just toggle the power.
-
-    print("Supply any argument to the command line to seek to the")
-    print("next station.")
-    print("Running the example without an argument will toggle the")
-    print("power on or off.\n")
-
-    doSeek = False
-
-    if (len(sys.argv) > 1):
-        doSeek = True
-
-    # depending on what was selected, do it
-    if (doSeek):
-        myFM_receiver_obj.seek()
-    else:
-        myFM_receiver_obj.togglePower()
-
-    print("Exiting");
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/t3311.py b/examples/python/t3311.py
deleted file mode 100755
index 89fbcb8..0000000
--- a/examples/python/t3311.py
+++ /dev/null
@@ -1,95 +0,0 @@
-#!/usr/bin/env python
-# Author: Jon Trulson <jtrulson@ics.com>
-# Copyright (c) 2016 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_t3311 as sensorObj
-
-def main():
-    ## Exit handlers ##
-    # This function stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    defaultDev = "/dev/ttyUSB0"
-
-    # if an argument was specified, use it as the device instead
-    if (len(sys.argv) > 1):
-        defaultDev = sys.argv[1]
-
-    print("Initializing...")
-
-    # Instantiate an T3311 instance, using MODBUS slave address 1, and
-    # default comm parameters (9600, 8, N, 2)
-    sensor = sensorObj.T3311(defaultDev, 1)
-
-    # output the serial number and firmware revision
-    print("Serial Number:", sensor.getSerialNumber())
-    print("Firmware Revision: {0}.{1}".format(sensor.getFirmwareMajor(),
-                                              sensor.getFirmwareMinor()))
-    print()
-
-    # update and print available values every second
-    while (1):
-        # update our values from the sensor
-        sensor.update()
-
-        # we show both C and F for temperature
-        print("Temperature:", sensor.getTemperature(), "C /", end=' ')
-        print(sensor.getTemperature(True), "F")
-
-        print("Humidity:", sensor.getHumidity(), "%")
-
-        # this value depends on the sensor configuration -- by default
-        # it is the dew point temperature
-        print("Computed Value:", sensor.getComputedValue())
-
-        # with FW revisions > 2.44, extended computed data is available
-        if (sensor.extendedDataAvailable()):
-            print("Dew Point Temperature:", sensor.getDewPointTemperature(), end=' ')
-            print("C /", sensor.getDewPointTemperature(True), "F")
-
-            print("Absolute Humidity:", sensor.getAbsoluteHumidity(), "g/m3")
-
-            print("Specific Humidity:", sensor.getSpecificHumidity(), end=' ')
-            print("g/kg")
-
-            print("Mixing Ratio:", sensor.getMixingRatio(), "g/kg")
-
-            print("Specific Enthalpy:", sensor.getSpecificEnthalpy(), end=' ')
-            print("kJ/kg")
-
-        print()
-        time.sleep(1)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/t8100.py b/examples/python/t8100.py
deleted file mode 100755
index 6ca7c28..0000000
--- a/examples/python/t8100.py
+++ /dev/null
@@ -1,102 +0,0 @@
-#!/usr/bin/env python
-# Author: Jon Trulson <jtrulson@ics.com>
-# Copyright (c) 2016 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_t8100 as sensorObj
-
-def main():
-    ## Exit handlers ##
-    # This function stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit
-    def exitHandler():
-        print("Exiting...")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    # You will need to edit this example to conform to your site and your
-    # devices, specifically the Device Object Instance ID passed to the
-    # constructor, and the arguments to initMaster() that are
-    # appropriate for your BACnet network.
-
-    defaultDev = "/dev/ttyUSB0"
-
-    # if an argument was specified, use it as the device instead
-    if (len(sys.argv) > 1):
-        defaultDev = sys.argv[1]
-
-    print("Using device", defaultDev)
-    print("Initializing...")
-
-    # Instantiate an T8100 object for an T8100 device that has 568000
-    # as it's unique Device Object Instance ID.  NOTE: You will
-    # certainly want to change this to the correct value for your
-    # device(s).
-    sensor = sensorObj.T8100(568000)
-
-    # Initialize our BACnet master, if it has not already been
-    # initialized, with the device and baudrate, choosing 1000001 as
-    # our unique Device Object Instance ID, 2 as our MAC address and
-    # using default values for maxMaster and maxInfoFrames
-    sensor.initMaster(defaultDev, 38400, 1000001, 2)
-
-    # Uncomment to enable debugging output
-    # sensor.setDebug(True);
-
-    # output the serial number and firmware revision
-    print()
-    print("Device Description:", sensor.getDeviceDescription())
-    print("Device Location:", sensor.getDeviceLocation())
-    print()
-
-    # update and print available values every 5 seconds
-    while (1):
-        # update our values
-        sensor.update();
-
-        print("CO2 Concentration:", end=' ')
-        print(sensor.getCO2(), end=' ')
-        print("ppm")
-
-        # we show both C and F for temperature
-        print("Temperature:", sensor.getTemperature(), end=' ')
-        print("C /", sensor.getTemperature(True), "F")
-
-        print("Humidity:", end=' ')
-        print(sensor.getHumidity(), end=' ')
-        print("%RH")
-
-        print("Relay State:", end=' ')
-        print(sensor.getRelayState())
-
-        print()
-        time.sleep(5)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/ta12200.py b/examples/python/ta12200.py
deleted file mode 100755
index 5a381cc..0000000
--- a/examples/python/ta12200.py
+++ /dev/null
@@ -1,57 +0,0 @@
-#!/usr/bin/env python
-# Author: Zion Orent <zorent@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_ta12200 as upmTa12200
-
-def main():
-    # Instantiate a TA12-200 sensor on analog pin A0
-    myElectricitySensor = upmTa12200.TA12200(0)
-
-    ## Exit handlers ##
-    # This stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This lets you run code on exit,
-    # including functions from myElectricitySensor
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    # get the data every 50 milliseconds
-    while(1):
-        maxVal = myElectricitySensor.highestValue()
-        current = myElectricitySensor.milliAmps(maxVal)
-
-        outputStr = "Max ADC Value: %s, current: %smA" % (maxVal, current)
-        print(outputStr)
-        time.sleep(.1)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/tb7300.py b/examples/python/tb7300.py
deleted file mode 100755
index 10a8c40..0000000
--- a/examples/python/tb7300.py
+++ /dev/null
@@ -1,101 +0,0 @@
-#!/usr/bin/env python
-# Author: Jon Trulson <jtrulson@ics.com>
-# Copyright (c) 2016 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_tb7300 as sensorObj
-
-def main():
-    ## Exit handlers ##
-    # This function stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit
-    def exitHandler():
-        print("Exiting...")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    # You will need to edit this example to conform to your site and your
-    # devices, specifically the Device Object Instance ID passed to the
-    # constructor, and the arguments to initMaster() that are
-    # appropriate for your BACnet network.
-
-    defaultDev = "/dev/ttyUSB0"
-
-    # if an argument was specified, use it as the device instead
-    if (len(sys.argv) > 1):
-        defaultDev = sys.argv[1]
-
-    print("Using device", defaultDev)
-    print("Initializing...")
-
-    # Instantiate an TB7300 object for an TB7300 device that has 73001
-    # as it's unique Device Object Instance ID.  NOTE: You will
-    # certainly want to change this to the correct value for your
-    # device(s).
-    sensor = sensorObj.TB7300(73001)
-
-    # Initialize our BACnet master, if it has not already been
-    # initialized, with the device and baudrate, choosing 1000001 as
-    # our unique Device Object Instance ID, 2 as our MAC address and
-    # using default values for maxMaster and maxInfoFrames
-    sensor.initMaster(defaultDev, 38400, 1000001, 2)
-
-    # Uncomment to enable debugging output
-    # sensor.setDebug(True);
-
-    # output the serial number and firmware revision
-    print()
-    print("Device Name:", sensor.getDeviceName())
-    print("Device Description:", sensor.getDeviceDescription())
-    print("Device Location:", sensor.getDeviceLocation())
-    print()
-
-    print("Fan Mode:", sensor.getMultiStateValueText(sensorObj.TB7300.MV_Fan_Mode))
-    print("Fan Status:", end=' ')
-    print(sensor.getMultiStateValueText(sensorObj.TB7300.MV_Fan_Status))
-    print("System Mode:", end=' ')
-    print(sensor.getMultiStateValueText(sensorObj.TB7300.MV_System_Mode))
-    print("Service Alarm:", end=' ')
-    print(sensor.getBinaryInputText(sensorObj.TB7300.BI_Service_Alarm))
-    print()
-
-    # update and print the room temperature every 5 seconds
-    while (1):
-        # update our values
-        sensor.update();
-
-        # we show both C and F for temperature
-        print("Temperature:", sensor.getTemperature(), end=' ')
-        print("C /", sensor.getTemperature(True), "F")
-
-        print()
-        time.sleep(5)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/tcs3414cs.py b/examples/python/tcs3414cs.py
deleted file mode 100755
index 31d99f0..0000000
--- a/examples/python/tcs3414cs.py
+++ /dev/null
@@ -1,58 +0,0 @@
-#!/usr/bin/env python
-# Author: Zion Orent <zorent@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_tcs3414cs as upmTcs3414cs
-
-def main():
-    # Instantiate the color sensor on I2C
-    myColorSensor = upmTcs3414cs.TCS3414CS()
-
-    ## Exit handlers ##
-    # This stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This lets you run code on exit,
-    # including functions from myColorSensor
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    myrgb = upmTcs3414cs.tcs3414sc_rgb_t()
-
-    # Print out the r, g, b, and clr value every 0.5 seconds
-    while(1):
-        myColorSensor.readRGB(myrgb)
-        print("{0}, {1}, {2}, {3}".format(myrgb.r,
-        myrgb.g, myrgb.b, myrgb.clr))
-
-        time.sleep(.5)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/tcs37727.py b/examples/python/tcs37727.py
deleted file mode 100755
index 2cca245..0000000
--- a/examples/python/tcs37727.py
+++ /dev/null
@@ -1,63 +0,0 @@
-#!/usr/bin/env python
-# Author: Norbert Wesp <nwesp@phytec.de>
-# Copyright (c) 2017 Phytec Messtechnik GmbH.
-#
-# based on: tcs3414cs.py
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_tcs37727 as TCS37727
-
-def main():
-    # Instantiate the color sensor on I2C on bus 1
-    mySensor = TCS37727.TCS37727(1)
-
-    ## Exit handlers ##
-    # This stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This lets you run code on exit,
-    # including functions from mySensor
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    data = TCS37727.tcs37727_data_t()
-
-    # activate periodic measurements
-    mySensor.setActive();
-
-    # Print out the red, green, blue, clear, lux and color-temperature value
-    # every 0.5 seconds
-    while(1):
-        mySensor.getData(data, True)
-        print(data.red, data.green, data.blue, data.clear, data.lux, data.ct)
-
-        time.sleep(.5)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/teams.py b/examples/python/teams.py
deleted file mode 100755
index 18fdea2..0000000
--- a/examples/python/teams.py
+++ /dev/null
@@ -1,70 +0,0 @@
-#!/usr/bin/env python
-# Author: Jon Trulson <jtrulson@ics.com>
-# Copyright (c) 2016 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_teams as sensorObj
-
-def main():
-    ## Exit handlers ##
-    # This function stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    print("Initializing...")
-
-    # Instantiate an TEAMS instance, using A0 for temperature, and
-    # 165.0 ohms for the rResistor value (for the libelium 4-20ma
-    # interface)
-    sensor = sensorObj.TEAMS(0, 165.0)
-
-    # update and print available values every second
-    while (1):
-        # update our values from the sensor
-        sensor.update()
-
-        # is the sensor connected? (current >= 4ma)
-        print("Is Connected:", sensor.isConnected())
-
-        # print computed current on the loop.  This includes the offset,
-        # if one was set by setOffsetMilliamps().
-        print("Milliamps:", sensor.getRawMilliamps())
-
-        # we show both C and F for temperature
-        print("Temperature:", sensor.getTemperature(), "C /", end=' ')
-        print(sensor.getTemperature(True), "F")
-
-        print()
-        time.sleep(1)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/temperature.py b/examples/python/temperature.py
deleted file mode 100755
index 1009d9b..0000000
--- a/examples/python/temperature.py
+++ /dev/null
@@ -1,47 +0,0 @@
-#!/usr/bin/env python
-from __future__ import print_function
-# Author: Brendan Le Foll <brendan.le.foll@intel.com>
-# Contributions: Sarah Knepper <sarah.knepper@intel.com>
-# Copyright (c) 2014 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-import time
-from upm import pyupm_temperature as upm
-
-def main():
-    # Create the temperature sensor object using AIO pin 0
-    temp = upm.Temperature(0)
-    print(temp.name())
-
-    # Read the temperature ten times, printing both the Celsius and
-    # equivalent Fahrenheit temperature, waiting one second between readings
-    for i in range(0, 10):
-        celsius = temp.value()
-        fahrenheit = celsius * 9.0/5.0 + 32.0;
-        print("%d degrees Celsius, or %d degrees Fahrenheit" \
-            % (celsius, fahrenheit))
-        time.sleep(1)
-
-    # Delete the temperature sensor object
-    del temp
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/tex00.py b/examples/python/tex00.py
deleted file mode 100755
index 23af122..0000000
--- a/examples/python/tex00.py
+++ /dev/null
@@ -1,70 +0,0 @@
-#!/usr/bin/env python
-# Author: Jon Trulson <jtrulson@ics.com>
-# Copyright (c) 2016 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_tex00 as sensorObj
-
-def main():
-    ## Exit handlers ##
-    # This function stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    print("Initializing...")
-
-    # Instantiate an TEX00 instance, using A0 for the analog input.  In
-    # this example, we are using a 10K Ohm balance resistor and a TED
-    # (10k type 2) thermistor.
-    sensor = sensorObj.TEX00(0, 10000, sensorObj.TEX00.STYPE_THERMISTOR_TED)
-
-    print("Minimum temperature:", sensor.getTemperatureRangeMin(), "C")
-    print("Maximum temperature:", sensor.getTemperatureRangeMax(), "C")
-    print()
-
-    # update and print available values every second
-    while (1):
-        # update our values from the sensor
-        sensor.update()
-
-        if (sensor.isOutOfRange()):
-            print("Temperature out of range")
-        else:
-            # we show both C and F for temperature
-            print("Temperature:", sensor.getTemperature(), "C /", end=' ')
-            print(sensor.getTemperature(True), "F")
-
-        print()
-        time.sleep(1)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/tm1637.py b/examples/python/tm1637.py
deleted file mode 100755
index 6cb24a4..0000000
--- a/examples/python/tm1637.py
+++ /dev/null
@@ -1,60 +0,0 @@
-#!/usr/bin/env python
-from __future__ import print_function
-# Author: Mihai Tudor Panu <mihai.tudor.panu@intel.com>
-# Copyright (c) 2014 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-import time, signal
-from upm import pyupm_tm1637 as tm1637
-
-def main():
-    # Register exit handler for normal Ctrl+C exit
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    # Create a display object on pins 0 CLK and 1 DIO
-    display = tm1637.TM1637(0, 1)
-    dots = True
-
-    # Get local time
-    myTime = time.localtime(time.time())
-    print(time.strftime("System time: %H:%M", myTime))
-    print ("You can adjust your time zone by setting the TZ environment variable.")
-
-    # Draw a box for 3 seconds using 7-segment encoding
-    display.write(0x39, 0x09, 0x09, 0x0f)
-    time.sleep(3)
-
-    # Loop indefinitely
-    while True:
-        # Update and display time
-        timeString = time.strftime("%H%M", time.localtime(time.time()))
-        display.write(timeString)
-        # Toggle colon
-        display.setColon(dots)
-        dots = not dots
-
-        # Sleep for 1 s
-        time.sleep(1)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/tmp006.py b/examples/python/tmp006.py
deleted file mode 100755
index 07e5f25..0000000
--- a/examples/python/tmp006.py
+++ /dev/null
@@ -1,60 +0,0 @@
-#!/usr/bin/env python
-# Author: Norbert Wesp <nwesp@phytec.de>
-# Copyright (c) 2017 Phytec Messtechnik GmbH.
-#
-# based on: tcs3414cs.py
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_tmp006 as TMP006
-
-def main():
-    # Instantiate the Infrared-Thermopile Sensor on I2C on bus 1
-    mySensor = TMP006.TMP006(1)
-
-    ## Exit handlers ##
-    # This stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This lets you run code on exit,
-    # including functions from mySensor
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    # activate periodic measurements
-    mySensor.setActive();
-
-    # Print out temperature value and config-reg in hex every 0.5 seconds
-    while(1):
-        mySensor.getTemperature(True)
-        hex(mySensor.getConfig())
-
-        time.sleep(.5)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/tp401.py b/examples/python/tp401.py
deleted file mode 100755
index 81f4a81..0000000
--- a/examples/python/tp401.py
+++ /dev/null
@@ -1,59 +0,0 @@
-#!/usr/bin/env python
-from __future__ import print_function
-# Author: Mihai Tudor Panu <mihai.tudor.panu@intel.com>
-# Copyright (c) 2014 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from time import sleep
-from upm import pyupm_gas as TP401
-
-def main():
-    # Give a qualitative meaning to the value from the sensor
-    def airQuality(value):
-        if(value < 50): return "Fresh Air"
-        if(value < 200): return "Normal Indoor Air"
-        if(value < 400): return "Low Pollution"
-        if(value < 600): return "High Pollution - Action Recommended"
-        return "Very High Pollution - Take Action Immediately"
-
-    # New Grove Air Quality Sensor on AIO pin 0
-    airSensor = TP401.TP401(0)
-
-    # Wait for sensor to warm up
-    print("Sensor is warming up for 3 minutes...")
-    for i in range (1, 4):
-        sleep(60)
-        print(i, "minute(s) passed.")
-    print("Sensor is ready!")
-
-    # Loop indefinitely
-    while True:
-        # Read values (consecutive reads might vary slightly)
-        value = airSensor.getSample()
-        ppm = airSensor.getPPM()
-
-        print("raw: %4d" % value , " ppm: %5.2f   " % ppm , airQuality(value))
-
-        # Sleep for 2.5 s
-        sleep(2.5)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/tsl2561.py b/examples/python/tsl2561.py
deleted file mode 100755
index d7821f6..0000000
--- a/examples/python/tsl2561.py
+++ /dev/null
@@ -1,51 +0,0 @@
-#!/usr/bin/env python
-# Author: Zion Orent <zorent@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_tsl2561 as upmTsl2561
-
-def main():
-    # Instantiate a digital light sensor TSL2561 on I2C
-    myDigitalLightSensor = upmTsl2561.TSL2561()
-
-    ## Exit handlers ##
-    # This function stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit, including functions from myDigitalLightSensor
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    while(1):
-        print("Light value is " + str(myDigitalLightSensor.getLux()))
-        time.sleep(1)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/ttp223.py b/examples/python/ttp223.py
deleted file mode 100755
index 32135dc..0000000
--- a/examples/python/ttp223.py
+++ /dev/null
@@ -1,45 +0,0 @@
-#!/usr/bin/env python
-from __future__ import print_function
-# Author: Sarah Knepper <sarah.knepper@intel.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-import time
-from upm import pyupm_ttp223 as ttp223
-
-def main():
-    # Create the TTP223 touch sensor object using GPIO pin 0
-    touch = ttp223.TTP223(0)
-
-    # Check whether or not a finger is near the touch sensor and
-    # print accordingly, waiting one second between readings
-    while 1:
-        if touch.isPressed():
-            print(touch.name(), 'is pressed')
-        else:
-            print(touch.name(), 'is not pressed')
-        time.sleep(1)
-
-    # Delete the touch sensor object
-    del touch
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/tzemt400.py b/examples/python/tzemt400.py
deleted file mode 100755
index 6325f24..0000000
--- a/examples/python/tzemt400.py
+++ /dev/null
@@ -1,87 +0,0 @@
-#!/usr/bin/env python
-# Author: Jon Trulson <jtrulson@ics.com>
-# Copyright (c) 2016 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_ozw as sensorObj
-
-def main():
-    # This function lets you run code on exit
-    def exitHandler():
-        print("Exiting...")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-
-    defaultDev = "/dev/ttyACM0"
-    if (len(sys.argv) > 1):
-        defaultDev = sys.argv[1]
-    print("Using device", defaultDev)
-
-    # Instantiate a TZEMT400 instance, on device node 13.  You will
-    # almost certainly need to change this to reflect your own network.
-    # Use the ozwdump example to see what nodes are available.
-    sensor = sensorObj.TZEMT400(13)
-
-    # The first thing to do is create options, then lock them when done.
-    sensor.optionsCreate()
-    sensor.optionsLock()
-
-    # Next, initialize it.
-    print("Initializing, this may take awhile depending on your ZWave network")
-
-    sensor.init(defaultDev)
-    print("Initialization complete")
-
-    print("Querying data...")
-
-    while (True):
-        sensor.update()
-
-        print("Temperature:", sensor.getTemperature(), "C /", end=' ')
-        print(sensor.getTemperature(True), "F")
-
-        print("Mode:", end=' ')
-        print(sensor.getMode())
-
-        print("Operating State:", end=' ')
-        print(sensor.getOperatingState())
-
-        print("Heating Point:", sensor.getHeatingPointTemperature(), "C /", end=' ')
-        print(sensor.getHeatingPointTemperature(True), "F")
-
-        print("Cooling Point:", sensor.getCoolingPointTemperature(), "C /", end=' ')
-        print(sensor.getCoolingPointTemperature(True), "F")
-
-        print("Fan Mode:", end=' ')
-        print(sensor.getFanMode())
-
-        print("Fan State:", end=' ')
-        print(sensor.getFanState())
-
-        print()
-        time.sleep(5)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/uln200xa.py b/examples/python/uln200xa.py
deleted file mode 100755
index f4c7233..0000000
--- a/examples/python/uln200xa.py
+++ /dev/null
@@ -1,69 +0,0 @@
-#!/usr/bin/env python
-# Author:  Jon Trulson <jtrulson@ics.com>
-# Copyright (c) 2015-2016 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_uln200xa as upmULN200XA
-
-def main():
-    # Instantiate a Stepper motor on a ULN200XA Darlington Motor Driver
-    # This was tested with the Grove Geared Step Motor with Driver
-
-    # Instantiate a ULN2003XA stepper object
-    myUln200xa = upmULN200XA.ULN200XA(4096, 8, 9, 10, 11)
-
-    ## Exit handlers ##
-    # This stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This lets you run code on exit,
-    # including functions from myUln200xa
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    myUln200xa.setSpeed(5) # 5 RPMs
-    myUln200xa.setDirection(upmULN200XA.ULN200XA_DIR_CW)
-
-    print("Rotating 1 revolution clockwise.")
-    myUln200xa.stepperSteps(4096)
-
-    print("Sleeping for 2 seconds...")
-    time.sleep(2)
-
-    print("Rotating 1/2 revolution counter clockwise.")
-    myUln200xa.setDirection(upmULN200XA.ULN200XA_DIR_CCW)
-    myUln200xa.stepperSteps(2048)
-
-    # release
-    myUln200xa.release()
-
-    # exitHandler is called automatically
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/urm37-uart.py b/examples/python/urm37-uart.py
deleted file mode 100755
index d777547..0000000
--- a/examples/python/urm37-uart.py
+++ /dev/null
@@ -1,55 +0,0 @@
-#!/usr/bin/env python
-# Author: Jon Trulson <jtrulson@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_urm37 as sensorObj
-
-def main():
-    # Instantiate a URM37 sensor on UART 0, with the reset pin on D2
-    sensor = sensorObj.URM37(0, 2)
-
-    ## Exit handlers ##
-    # This function stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    # Every half a second, sample the URM37 and output the measured
-    # distance in cm, and temperature in degrees C
-
-    while (1):
-        print("Detected distance (cm):", sensor.getDistance())
-        print("Temperature (C):", sensor.getTemperature())
-        time.sleep(.5)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/urm37.py b/examples/python/urm37.py
deleted file mode 100755
index 19663eb..0000000
--- a/examples/python/urm37.py
+++ /dev/null
@@ -1,55 +0,0 @@
-#!/usr/bin/env python
-# Author: Jon Trulson <jtrulson@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_urm37 as sensorObj
-
-def main():
-    # Instantiate a URM37 sensor on analog pin A0, reset pin on D2,
-    # trigger pin on D3 with an analog reference voltage of 5.0
-    sensor = sensorObj.URM37(0, 2, 3, 5.0)
-
-    ## Exit handlers ##
-    # This function stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    # Every half a second, sample the URM37 and output the measured
-    # distance in cm.
-
-    while (1):
-        print("Detected distance (cm):", sensor.getDistance())
-        time.sleep(.5)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/vcap.py b/examples/python/vcap.py
deleted file mode 100755
index 7249b3d..0000000
--- a/examples/python/vcap.py
+++ /dev/null
@@ -1,71 +0,0 @@
-#!/usr/bin/env python
-# Author: Jon Trulson <jtrulson@ics.com>
-# Copyright (c) 2016 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_vcap as sensorObj
-
-def main():
-    ## Exit handlers ##
-    # This function stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit
-    def exitHandler():
-        print("Exiting...")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    defaultDev = "/dev/video0"
-
-    # if an argument was specified, use it as the device instead
-    if (len(sys.argv) > 1):
-        defaultDev = sys.argv[1]
-
-    print("Using device", defaultDev)
-    print("Initializing...")
-
-    # Instantiate an VCAP instance, using the specified video device
-    sensor = sensorObj.VCAP(defaultDev)
-
-    # enable some debug/verbose output
-    sensor.setDebug(True);
-
-    # This is just a hint.  The kernel can change this to a lower
-    # resolution that the hardware supports.  Use getWidth() and
-    # getHeight() methods to see what the kernel actually chose if you
-    # care.
-    sensor.setResolution(1920, 1080);
-
-    # capture an image
-    sensor.captureImage();
-
-    # convert and save it as a jpeg
-    sensor.saveImage("video-img1.jpg");
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/vdiv.py b/examples/python/vdiv.py
deleted file mode 100755
index 097822f..0000000
--- a/examples/python/vdiv.py
+++ /dev/null
@@ -1,57 +0,0 @@
-#!/usr/bin/env python
-# Author: Zion Orent <zorent@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_vdiv as upmvdiv
-
-def main():
-    # Instantiate a Voltage Divider sensor on analog pin A0
-    myVoltageDivider = upmvdiv.VDiv(0)
-
-    ## Exit handlers ##
-    # This stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit,
-    # including functions from myVoltageDivider
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    while(1):
-        val = myVoltageDivider.value(100)
-        gain3val = myVoltageDivider.computedValue(3, val)
-        gain10val = myVoltageDivider.computedValue(10, val)
-        print("ADC value: {0} Gain 3: {1}v Gain 10: {2}v".format(
-        val,  gain3val, gain10val))
-
-        time.sleep(1)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/veml6070.py b/examples/python/veml6070.py
deleted file mode 100755
index 0022238..0000000
--- a/examples/python/veml6070.py
+++ /dev/null
@@ -1,52 +0,0 @@
-#!/usr/bin/env python
-# Author: Abhishek Malik <abhishek.malik@intel.com>
-# Copyright (c) 2017 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_veml6070 as veml6070
-
-def main():
-    # Instantiate a Vishay UV Sensor on the I2C bus 0
-    veml6070_sensor = veml6070.VEML6070(0);
-
-    ## Exit handlers ##
-    # This function stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit, including functions from abpdrrt005pg2a5
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    # Read the value every second and detect the pressure
-    while(1):
-        print("UV Value: {0}".format(veml6070_sensor.getUVIntensity()))
-        time.sleep(1)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/water.py b/examples/python/water.py
deleted file mode 100755
index 5cad601..0000000
--- a/examples/python/water.py
+++ /dev/null
@@ -1,54 +0,0 @@
-#!/usr/bin/env python
-# Author: Zion Orent <zorent@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_water as upmwater
-
-def main():
-    # Instantiate a Water sensor on digital pin D2
-    myWaterSensor = upmwater.Water(2)
-
-    ## Exit handlers ##
-    # This function stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit, including functions from myWaterSensor
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    while(1):
-        if (myWaterSensor.isWet()):
-            print("Sensor is wet")
-        else:
-            print("Sensor is dry")
-        time.sleep(1)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/waterlevel.py b/examples/python/waterlevel.py
deleted file mode 100755
index 298d0e7..0000000
--- a/examples/python/waterlevel.py
+++ /dev/null
@@ -1,57 +0,0 @@
-#!/usr/bin/env python
-# Author: Zion Orent <zorent@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_waterlevel as upmWaterlevel
-
-def main():
-    # The was tested with the Water Level Sensor
-    # Instantiate a Water Level Sensor on digital pin D2
-    myWaterLevel = upmWaterlevel.WaterLevel(2)
-
-    ## Exit handlers ##
-    # This stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit,
-    # including functions from myWaterLevel
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    while(1):
-        if (myWaterLevel.isSubmerged()):
-            print("Sensor is submerged in liquid")
-        else:
-            print("Liquid is below water level sensor")
-
-        time.sleep(1)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/wfs.py b/examples/python/wfs.py
deleted file mode 100755
index 79bc131..0000000
--- a/examples/python/wfs.py
+++ /dev/null
@@ -1,68 +0,0 @@
-#!/usr/bin/env python
-# Author: Zion Orent <zorent@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_wfs as upmwfs
-
-def main():
-    # Instantiate a Water Flow Sensor on digital pin D2.  This must be
-    # an interrupt capable GPIO.
-    myWaterFlow = upmwfs.WFS(2)
-
-    ## Exit handlers ##
-    # This stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit,
-    # including functions from myWaterFlow
-    def exitHandler():
-        myWaterFlow.stopFlowCounter()
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    # set the flow counter to 0 and start counting
-    myWaterFlow.clearFlowCounter()
-    myWaterFlow.startFlowCounter()
-
-    while (1):
-        # we grab these (millis and flowCount) just for display
-        # purposes in this example
-        millis = myWaterFlow.getMillis()
-        flowCount = myWaterFlow.flowCounter()
-
-        fr = myWaterFlow.flowRate()
-
-        # output milliseconds passed, flow count, and computed flow rate
-        outputStr = "Millis: {0} Flow Count: {1} Flow Rate: {2} LPM".format(
-        millis, flowCount, fr)
-        print(outputStr)
-        time.sleep(2)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/wheelencoder.py b/examples/python/wheelencoder.py
deleted file mode 100755
index 41391aa..0000000
--- a/examples/python/wheelencoder.py
+++ /dev/null
@@ -1,55 +0,0 @@
-#!/usr/bin/env python
-# Author: Jon Trulson <jtrulson@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_wheelencoder as sensorObj
-
-def main():
-    # Instantiate a DFRobot Wheel Encoder on digital pin D2
-    sensor = sensorObj.WheelEncoder(2)
-
-    ## Exit handlers ##
-    # This function stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    # set the counter to 0 and start counting
-    sensor.clearCounter();
-    sensor.startCounter();
-
-    while (1):
-        print("Millis:", sensor.getMillis(), "Count:", sensor.counter())
-        time.sleep(1)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/wt5001.py b/examples/python/wt5001.py
deleted file mode 100755
index 6875fe5..0000000
--- a/examples/python/wt5001.py
+++ /dev/null
@@ -1,107 +0,0 @@
-#!/usr/bin/env python
-# Author: Zion Orent <zorent@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, signal, sys
-from upm import pyupm_wt5001 as upmWt5001
-
-def main():
-    # Instantiate a WT5001 serial MP3 player on uart 0.
-    # This example was tested on the Grove Serial MP3 module.
-    myMP3Player = upmWt5001.WT5001(0)
-
-    def printUsage(progname):
-        print ("Usage: python " + progname + " <command>\n"
-        "Commands:\n"
-        "0  - stop playing\n"
-        "1  - start playing track 1\n"
-        "2  - pause/un-pause playback\n"
-        "3  - next track\n"
-        "4  - previous track")
-
-    cmd = -1;
-    if (len(sys.argv) > 1):
-        cmd = int(sys.argv[1])
-
-    if (not myMP3Player.setupTty(upmWt5001.cvar.int_B9600)):
-        print("Failed to setup tty port parameters")
-        sys.exit(0)
-
-    if cmd == 0:
-        myMP3Player.stop()
-    elif cmd == 1:
-        myMP3Player.play(upmWt5001.WT5001.SD, 1)
-    elif cmd == 2:
-        myMP3Player.pause()
-    elif cmd == 3:
-        myMP3Player.next()
-    elif cmd == 4:
-        myMP3Player.previous()
-    else:
-        # nothing, just output usage, and info below
-        printUsage(sys.argv[0])
-
-    # print out some information
-    vol = upmWt5001.uint8Array(0)
-    myMP3Player.getVolume(vol)
-    print("The current volume is: " + str(vol.__getitem__(0)))
-
-    ps = upmWt5001.uint8Array(0)
-    myMP3Player.getPlayState(ps)
-    print("The current play state is: " + str(ps.__getitem__(0)))
-
-    numf = upmWt5001.uint16Array(0)
-    myMP3Player.getNumFiles(upmWt5001.WT5001.SD, numf)
-    print("The number of files on the SD card is: " + str(numf.__getitem__(0)))
-
-    curf = upmWt5001.uint16Array(0)
-    myMP3Player.getCurrentFile(curf)
-    print("The current file is: " + str(curf.__getitem__(0)))
-
-    # set the date
-    myMP3Player.setDate(2015, 3, 14)
-
-    # set the time
-    myMP3Player.setTime(9, 26, 53)
-
-    year = upmWt5001.uint16Array(0)
-    month = upmWt5001.uint8Array(0)
-    day = upmWt5001.uint8Array(0)
-
-    myMP3Player.getDate(year, month, day)
-    mp3date = str(month.__getitem__(0)) + "/"
-    mp3date += (str(day.__getitem__(0)) + "/")
-    mp3date += str(year.__getitem__(0))
-    print("The device date is: " + mp3date)
-
-    hour = upmWt5001.uint8Array(0)
-    minute = upmWt5001.uint8Array(0)
-    second = upmWt5001.uint8Array(0)
-    myMP3Player.getTime(hour, minute, second)
-    mp3time = str(hour.__getitem__(0)) + ":"
-    mp3time += (str(minute.__getitem__(0)) + ":")
-    mp3time += str(second.__getitem__(0))
-    print("The device time is: " + mp3time)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/xbee.py b/examples/python/xbee.py
deleted file mode 100755
index 00f8ce0..0000000
--- a/examples/python/xbee.py
+++ /dev/null
@@ -1,119 +0,0 @@
-#!/usr/bin/env python
-# Author: Jon Trulson <jtrulson@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_xbee as sensorObj
-
-def main():
-    # Instantiate a XBee Module on UART 0
-    sensor = sensorObj.XBee(0)
-
-    ## Exit handlers ##
-    # This stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    # Set the baud rate, 9600 baud is the default.
-    if (sensor.setBaudRate(9600)):
-        print("Failed to set baud rate")
-        sys.exit(0)
-
-    usageStr = ("Usage:\n"
-    "If an argument is supplied on the command line, that argument is\n"
-    "sent to the module and the response is printed out.\n\n"
-    "If no argument is used, then the firmware revision, serial number\n"
-    "and the current IP address (if set) are queried.\n\n")
-    print(usageStr)
-
-    # simple helper function to send a command and wait for a response
-    def sendCommand(sensor, cmd):
-        # commands need to be terminated with a carriage return
-        cmd += "\r"
-        sensor.writeDataStr(cmd)
-
-        resp = ""
-        while sensor.dataAvailable(2000):
-            resp += sensor.readDataStr(1024)
-
-        if not resp:
-            print("Timed out waiting for response")
-        else:
-            resp = sensor.stringCR2LF(resp)
-            print("Returned (", len(resp), "bytes):")
-            print(resp)
-
-    if (len(sys.argv) > 1):
-        # enable command mode
-        sensor.commandMode()
-        print("Sending command line argument (" + sys.argv[1] + ")...")
-        sendCommand(sensor, sys.argv[1])
-    else:
-        # enable command mode
-        sensor.commandMode()
-        # query the verbose firmware revision
-        print("Querying verbose firmware revision (ATVL)...")
-        sendCommand(sensor, "ATVL")
-        # query the number
-        print("Querying Serial Number High (ATSH)...")
-        sendCommand(sensor, "ATSH")
-        print("Querying Serial Number Low (ATSL)...")
-        sendCommand(sensor, "ATSL")
-
-        print("Querying address, if set (ATMY)...")
-        sendCommand(sensor, "ATMY");
-
-        # For the XBee WiFi S6B
-        # A comprehensive list of commands and command modes is
-        # available from the datasheet at:
-        # ftp1.digi.com/support/documentation/90002180_L.pdf
-
-        # For the XBee S1
-        # A comprehensive list of commands and command modes is
-        # available from the datasheet at:
-        # http://www.sparkfun.com/datasheets/Wireless/Zigbee/XBee-Datasheet.pdf
-
-        # For the XBee WiFi module:
-        # An example using AT commands to connect to an AP, with a
-        # private Key using WPA2:
-
-        # Connect to AP with SSID 'mySSID':
-        #  ATIDmySSID
-
-        # Provide the private key 'secret':
-        #  ATPKsecret
-
-        # Use WPA2 encryption
-        #  ATEE2
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/yg1006.py b/examples/python/yg1006.py
deleted file mode 100755
index 6c470cb..0000000
--- a/examples/python/yg1006.py
+++ /dev/null
@@ -1,55 +0,0 @@
-#!/usr/bin/env python
-# Author: Zion Orent <zorent@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_yg1006 as upmYG1006
-
-def main():
-    # Instantiate a flame sensor on digital pin D2
-    myFlameSensor = upmYG1006.YG1006(2)
-
-    ## Exit handlers ##
-    # This function stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit, including functions from myFlameSensor
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    while(1):
-        if (myFlameSensor.flameDetected()):
-            print("Flame detected.")
-        else:
-            print("No flame detected.")
-
-        time.sleep(1)
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/zfm20-register.py b/examples/python/zfm20-register.py
deleted file mode 100755
index a9ea339..0000000
--- a/examples/python/zfm20-register.py
+++ /dev/null
@@ -1,132 +0,0 @@
-#!/usr/bin/env python
-# Author: Zion Orent <zorent@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_zfm20 as upmZfm20
-
-def main():
-    # Instantiate a ZFM20 Fingerprint reader on UART 0
-    myFingerprintSensor = upmZfm20.ZFM20(0)
-
-    ## Exit handlers ##
-    # This stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit,
-    # including functions from myFingerprintSensor
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    # make sure port is initialized properly.  57600 baud is the default.
-    if (not myFingerprintSensor.setupTty(upmZfm20.cvar.int_B57600)):
-        print("Failed to setup tty port parameters")
-        sys.exit(1)
-
-    # This example demonstrates registering a fingerprint on the zfm20
-    # module.  The procedure is as follows:
-    #
-    # 1. get an image, store it in characteristics buffer 1
-    # 2. get another image, store it in characteristics buffer 2
-    # 3. store the image, assuming the two fingerprints match
-
-    # first, we need to register our address and password
-
-    myFingerprintSensor.setPassword(upmZfm20.ZFM20_DEFAULT_PASSWORD)
-    myFingerprintSensor.setAddress(upmZfm20.ZFM20_DEFAULT_ADDRESS)
-
-    # now verify the password.  If this fails, any other commands
-    # will be ignored, so we just bail.
-    if (myFingerprintSensor.verifyPassword()):
-        print("Password verified.")
-    else:
-        print("Password verification failed.")
-        sys.exit(1)
-
-    print(" ")
-
-    # get the first image
-    print("Place a finger on the sensor.")
-    while (myFingerprintSensor.generateImage() != upmZfm20.ZFM20.ERR_OK):
-        pass
-
-    # in theory, we have an image
-    print("Image captured, converting...")
-
-    rv = myFingerprintSensor.image2Tz(1)
-
-    if (rv != upmZfm20.ZFM20.ERR_OK):
-        print("Image conversion failed with error code %d" % rv)
-        sys.exit(1)
-
-    print("Image conversion succeeded, remove finger.")
-    time.sleep(1)
-
-    while (myFingerprintSensor.generateImage() != upmZfm20.ZFM20.ERR_NO_FINGER):
-        pass
-
-    print(" ")
-    print("Now place the same finger on the sensor.")
-
-    while (myFingerprintSensor.generateImage() == upmZfm20.ZFM20.ERR_NO_FINGER):
-        pass
-
-    print("Image captured, converting...")
-
-    # save this one in slot 2
-    rv = myFingerprintSensor.image2Tz(2)
-    if (rv != upmZfm20.ZFM20.ERR_OK):
-        print("Image conversion failed with error code %d" % rv)
-        sys.exit(1)
-
-    print("Image conversion succeeded, remove finger.")
-    print(" ")
-
-    print("Storing fingerprint at id 1")
-
-    # create the model
-    rv = myFingerprintSensor.createModel()
-    if (rv != upmZfm20.ZFM20.ERR_OK):
-        if (rv == upmZfm20.ZFM20.ERR_FP_ENROLLMISMATCH):
-            print("Fingerprints did not match.")
-        else:
-            print("createModel failed with error code %d" % rv)
-        sys.exit(1)
-
-    # now store it, we hard code the id (second arg) to 1 here
-    rv = myFingerprintSensor.storeModel(1, 1)
-    if (rv != upmZfm20.ZFM20.ERR_OK):
-        print("storeModel failed with error code %d" % rv)
-        sys.exit(1)
-
-    print(" ")
-    print("Fingerprint stored at id 1.")
-
-if __name__ == '__main__':
-    main()
diff --git a/examples/python/zfm20.py b/examples/python/zfm20.py
deleted file mode 100755
index 03d6138..0000000
--- a/examples/python/zfm20.py
+++ /dev/null
@@ -1,93 +0,0 @@
-#!/usr/bin/env python
-# Author: Zion Orent <zorent@ics.com>
-# Copyright (c) 2015 Intel Corporation.
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-from __future__ import print_function
-import time, sys, signal, atexit
-from upm import pyupm_zfm20 as upmZfm20
-
-def main():
-    # Instantiate a ZFM20 Fingerprint reader on UART 0
-    myFingerprintSensor = upmZfm20.ZFM20(0)
-
-    ## Exit handlers ##
-    # This stops python from printing a stacktrace when you hit control-C
-    def SIGINTHandler(signum, frame):
-        raise SystemExit
-
-    # This function lets you run code on exit,
-    # including functions from myFingerprintSensor
-    def exitHandler():
-        print("Exiting")
-        sys.exit(0)
-
-    # Register exit handlers
-    atexit.register(exitHandler)
-    signal.signal(signal.SIGINT, SIGINTHandler)
-
-    # make sure port is initialized properly.  57600 baud is the default.
-    if (not myFingerprintSensor.setupTty(upmZfm20.cvar.int_B57600)):
-        print("Failed to setup tty port parameters")
-        sys.exit(1)
-
-    # how many valid stored templates (fingerprints) do we have?
-    print("Total stored templates: %d" % myFingerprintSensor.getNumTemplates())
-    print(" ")
-
-    # now spin waiting for a fingerprint to successfully image
-    print("Waiting for finger print...")
-
-    while (myFingerprintSensor.generateImage() == upmZfm20.ZFM20.ERR_NO_FINGER):
-        pass
-
-    # in theory, we have an image
-    print("Image captured, converting...")
-
-    rv = myFingerprintSensor.image2Tz(1)
-    if (rv != upmZfm20.ZFM20.ERR_OK):
-        print("Image conversion failed with error code %d" % rv)
-        sys.exit(1)
-
-    print("Image conversion succeeded.")
-    print("Searching database...")
-
-    myid = upmZfm20.uint16Array(0)
-    myid.__setitem__(0, 0)
-    myscore = upmZfm20.uint16Array(0)
-    myscore.__setitem__(0, 0)
-
-    # we search for a print matching slot 1, where we stored our last
-    # converted fingerprint
-    rv = myFingerprintSensor.search(1, myid, myscore)
-    if (rv != upmZfm20.ZFM20.ERR_OK):
-        if (rv == upmZfm20.ZFM20.ERR_FP_NOTFOUND):
-            print("Finger Print not found")
-            sys.exit(0)
-        else:
-            print("Search failed with error code %d" % rv)
-            sys.exit(1)
-
-    print("Fingerprint found!")
-    print("ID: %d, Score: %d" % (myid.__getitem__(0), myscore.__getitem__(0)))
-
-if __name__ == '__main__':
-    main()
-- 
2.7.4

