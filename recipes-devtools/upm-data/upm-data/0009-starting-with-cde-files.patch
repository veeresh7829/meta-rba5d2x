From ecbd832684cfe59de9f272ed9440b1d9178ea3d3 Mon Sep 17 00:00:00 2001
From: Ganesh K <ganesh.k@phytec.in>
Date: Mon, 24 Jun 2019 18:14:10 +0530
Subject: [PATCH 9/9] starting with cde files

---
 src/cjq4435/CMakeLists.txt           |   8 -
 src/cjq4435/cjq4435.c                | 174 ---------
 src/cjq4435/cjq4435.cxx              |  91 -----
 src/cjq4435/cjq4435.h                | 136 -------
 src/cjq4435/cjq4435.hpp              | 129 -------
 src/cjq4435/cjq4435.json             |  46 ---
 src/collision/CMakeLists.txt         |   9 -
 src/collision/collision.c            |  66 ----
 src/collision/collision.cxx          |  53 ---
 src/collision/collision.h            |  75 ----
 src/collision/collision.hpp          |  73 ----
 src/collision/collision.json         |  45 ---
 src/collision/collision_fti.c        |  78 ----
 src/curieimu/CMakeLists.txt          |   7 -
 src/curieimu/curieimu.cpp            | 457 ------------------------
 src/curieimu/curieimu.hpp            | 307 ----------------
 src/curieimu/curieimu.i              |  58 ---
 src/curieimu/curieimu.json           |  38 --
 src/cwlsxxa/CMakeLists.txt           |   5 -
 src/cwlsxxa/cwlsxxa.cxx              | 183 ----------
 src/cwlsxxa/cwlsxxa.hpp              | 194 ----------
 src/cwlsxxa/cwlsxxa.i                |  14 -
 src/cwlsxxa/cwlsxxa.json             |  59 ---
 src/dfrec/CMakeLists.txt             |  14 -
 src/dfrec/dfrec.c                    | 286 ---------------
 src/dfrec/dfrec.cxx                  | 109 ------
 src/dfrec/dfrec.h                    | 226 ------------
 src/dfrec/dfrec.hpp                  | 191 ----------
 src/dfrec/dfrec.i                    |  17 -
 src/dfrec/dfrec.json                 |  39 --
 src/dfrec/dfrec_fti.c                | 105 ------
 src/dfrorp/CMakeLists.txt            |   9 -
 src/dfrorp/dfrorp.c                  | 171 ---------
 src/dfrorp/dfrorp.cxx                |  86 -----
 src/dfrorp/dfrorp.h                  | 166 ---------
 src/dfrorp/dfrorp.hpp                | 164 ---------
 src/dfrorp/dfrorp.i                  |  17 -
 src/dfrorp/dfrorp.json               |  39 --
 src/dfrorp/dfrorp_fti.c              |  99 -----
 src/dfrph/CMakeLists.txt             |   9 -
 src/dfrph/dfrph.c                    | 117 ------
 src/dfrph/dfrph.cxx                  |  76 ----
 src/dfrph/dfrph.h                    | 120 -------
 src/dfrph/dfrph.hpp                  | 145 --------
 src/dfrph/dfrph.json                 |  40 ---
 src/dfrph/dfrph_fti.c                | 118 ------
 src/ds1307/CMakeLists.txt            |   5 -
 src/ds1307/ds1307.cxx                | 200 -----------
 src/ds1307/ds1307.hpp                | 194 ----------
 src/ds1307/ds1307.i                  |  17 -
 src/ds1307/ds1307.json               |  41 ---
 src/ds1808lc/CMakeLists.txt          |   5 -
 src/ds1808lc/ds1808lc.cxx            | 133 -------
 src/ds1808lc/ds1808lc.hpp            |  80 -----
 src/ds1808lc/ds1808lc.i              |  33 --
 src/ds1808lc/ds1808lc.json           |  39 --
 src/ds1808lc/mraa-utils.cxx          |  75 ----
 src/ds1808lc/mraa-utils.hpp          |  37 --
 src/ds18b20/CMakeLists.txt           |  11 -
 src/ds18b20/ds18b20.c                | 396 --------------------
 src/ds18b20/ds18b20.cxx              | 120 -------
 src/ds18b20/ds18b20.h                | 148 --------
 src/ds18b20/ds18b20.hpp              | 219 ------------
 src/ds18b20/ds18b20.i                |  18 -
 src/ds18b20/ds18b20.json             |  39 --
 src/ds18b20/ds18b20_defs.h           |  63 ----
 src/ds18b20/ds18b20_fti.c            | 120 -------
 src/ds2413/CMakeLists.txt            |   7 -
 src/ds2413/ds2413.cxx                | 165 ---------
 src/ds2413/ds2413.hpp                | 175 ---------
 src/ds2413/ds2413.i                  |  16 -
 src/ds2413/ds2413.json               |  39 --
 src/e50hx/CMakeLists.txt             |   8 -
 src/e50hx/e50hx.cxx                  | 129 -------
 src/e50hx/e50hx.hpp                  | 321 -----------------
 src/e50hx/e50hx.i                    |  30 --
 src/e50hx/e50hx.json                 |  41 ---
 src/ecezo/CMakeLists.txt             |   9 -
 src/ecezo/ecezo.c                    | 674 -----------------------------------
 src/ecezo/ecezo.cxx                  | 146 --------
 src/ecezo/ecezo.h                    | 267 --------------
 src/ecezo/ecezo.hpp                  | 241 -------------
 src/ecezo/ecezo.i                    |  16 -
 src/ecezo/ecezo.json                 |  43 ---
 src/ecezo/ecezo_defs.h               |  45 ---
 src/ecezo/ecezo_fti.c                |  88 -----
 src/ecs1030/CMakeLists.txt           |   5 -
 src/ecs1030/ecs1030.cxx              | 100 ------
 src/ecs1030/ecs1030.hpp              | 129 -------
 src/ecs1030/ecs1030.i                |  14 -
 src/ecs1030/ecs1030.json             |  39 --
 src/ehr/CMakeLists.txt               |   5 -
 src/ehr/ehr.cxx                      | 130 -------
 src/ehr/ehr.hpp                      | 126 -------
 src/ehr/ehr.i                        |  16 -
 src/ehr/ehr.json                     |  40 ---
 src/eldriver/CMakeLists.txt          |   5 -
 src/eldriver/eldriver.cxx            |  62 ----
 src/eldriver/eldriver.hpp            |  78 ----
 src/eldriver/eldriver.json           |  40 ---
 src/electromagnet/CMakeLists.txt     |   5 -
 src/electromagnet/electromagnet.cxx  |  62 ----
 src/electromagnet/electromagnet.hpp  |  77 ----
 src/electromagnet/electromagnet.json |  41 ---
 src/emg/CMakeLists.txt               |   8 -
 src/emg/emg.c                        | 136 -------
 src/emg/emg.cxx                      |  69 ----
 src/emg/emg.h                        | 141 --------
 src/emg/emg.hpp                      |  83 -----
 src/emg/emg.json                     |  38 --
 src/emg/emg_fti.c                    | 119 -------
 src/enc03r/CMakeLists.txt            |   9 -
 src/enc03r/enc03r.c                  | 159 ---------
 src/enc03r/enc03r.cxx                |  79 ----
 src/enc03r/enc03r.h                  | 159 ---------
 src/enc03r/enc03r.hpp                | 140 --------
 src/enc03r/enc03r.json               |  40 ---
 src/enc03r/enc03r_fti.c              | 102 ------
 118 files changed, 11377 deletions(-)
 delete mode 100644 src/cjq4435/CMakeLists.txt
 delete mode 100644 src/cjq4435/cjq4435.c
 delete mode 100644 src/cjq4435/cjq4435.cxx
 delete mode 100644 src/cjq4435/cjq4435.h
 delete mode 100644 src/cjq4435/cjq4435.hpp
 delete mode 100644 src/cjq4435/cjq4435.json
 delete mode 100644 src/collision/CMakeLists.txt
 delete mode 100644 src/collision/collision.c
 delete mode 100644 src/collision/collision.cxx
 delete mode 100644 src/collision/collision.h
 delete mode 100644 src/collision/collision.hpp
 delete mode 100644 src/collision/collision.json
 delete mode 100644 src/collision/collision_fti.c
 delete mode 100644 src/curieimu/CMakeLists.txt
 delete mode 100644 src/curieimu/curieimu.cpp
 delete mode 100644 src/curieimu/curieimu.hpp
 delete mode 100644 src/curieimu/curieimu.i
 delete mode 100644 src/curieimu/curieimu.json
 delete mode 100644 src/cwlsxxa/CMakeLists.txt
 delete mode 100644 src/cwlsxxa/cwlsxxa.cxx
 delete mode 100644 src/cwlsxxa/cwlsxxa.hpp
 delete mode 100644 src/cwlsxxa/cwlsxxa.i
 delete mode 100644 src/cwlsxxa/cwlsxxa.json
 delete mode 100644 src/dfrec/CMakeLists.txt
 delete mode 100644 src/dfrec/dfrec.c
 delete mode 100644 src/dfrec/dfrec.cxx
 delete mode 100644 src/dfrec/dfrec.h
 delete mode 100644 src/dfrec/dfrec.hpp
 delete mode 100644 src/dfrec/dfrec.i
 delete mode 100644 src/dfrec/dfrec.json
 delete mode 100644 src/dfrec/dfrec_fti.c
 delete mode 100644 src/dfrorp/CMakeLists.txt
 delete mode 100644 src/dfrorp/dfrorp.c
 delete mode 100644 src/dfrorp/dfrorp.cxx
 delete mode 100644 src/dfrorp/dfrorp.h
 delete mode 100644 src/dfrorp/dfrorp.hpp
 delete mode 100644 src/dfrorp/dfrorp.i
 delete mode 100644 src/dfrorp/dfrorp.json
 delete mode 100644 src/dfrorp/dfrorp_fti.c
 delete mode 100644 src/dfrph/CMakeLists.txt
 delete mode 100644 src/dfrph/dfrph.c
 delete mode 100644 src/dfrph/dfrph.cxx
 delete mode 100644 src/dfrph/dfrph.h
 delete mode 100644 src/dfrph/dfrph.hpp
 delete mode 100644 src/dfrph/dfrph.json
 delete mode 100644 src/dfrph/dfrph_fti.c
 delete mode 100644 src/ds1307/CMakeLists.txt
 delete mode 100644 src/ds1307/ds1307.cxx
 delete mode 100644 src/ds1307/ds1307.hpp
 delete mode 100644 src/ds1307/ds1307.i
 delete mode 100644 src/ds1307/ds1307.json
 delete mode 100644 src/ds1808lc/CMakeLists.txt
 delete mode 100644 src/ds1808lc/ds1808lc.cxx
 delete mode 100644 src/ds1808lc/ds1808lc.hpp
 delete mode 100644 src/ds1808lc/ds1808lc.i
 delete mode 100644 src/ds1808lc/ds1808lc.json
 delete mode 100644 src/ds1808lc/mraa-utils.cxx
 delete mode 100644 src/ds1808lc/mraa-utils.hpp
 delete mode 100644 src/ds18b20/CMakeLists.txt
 delete mode 100644 src/ds18b20/ds18b20.c
 delete mode 100644 src/ds18b20/ds18b20.cxx
 delete mode 100644 src/ds18b20/ds18b20.h
 delete mode 100644 src/ds18b20/ds18b20.hpp
 delete mode 100644 src/ds18b20/ds18b20.i
 delete mode 100644 src/ds18b20/ds18b20.json
 delete mode 100644 src/ds18b20/ds18b20_defs.h
 delete mode 100644 src/ds18b20/ds18b20_fti.c
 delete mode 100644 src/ds2413/CMakeLists.txt
 delete mode 100644 src/ds2413/ds2413.cxx
 delete mode 100644 src/ds2413/ds2413.hpp
 delete mode 100644 src/ds2413/ds2413.i
 delete mode 100644 src/ds2413/ds2413.json
 delete mode 100644 src/e50hx/CMakeLists.txt
 delete mode 100644 src/e50hx/e50hx.cxx
 delete mode 100644 src/e50hx/e50hx.hpp
 delete mode 100644 src/e50hx/e50hx.i
 delete mode 100644 src/e50hx/e50hx.json
 delete mode 100644 src/ecezo/CMakeLists.txt
 delete mode 100644 src/ecezo/ecezo.c
 delete mode 100644 src/ecezo/ecezo.cxx
 delete mode 100644 src/ecezo/ecezo.h
 delete mode 100644 src/ecezo/ecezo.hpp
 delete mode 100644 src/ecezo/ecezo.i
 delete mode 100644 src/ecezo/ecezo.json
 delete mode 100644 src/ecezo/ecezo_defs.h
 delete mode 100644 src/ecezo/ecezo_fti.c
 delete mode 100644 src/ecs1030/CMakeLists.txt
 delete mode 100644 src/ecs1030/ecs1030.cxx
 delete mode 100644 src/ecs1030/ecs1030.hpp
 delete mode 100644 src/ecs1030/ecs1030.i
 delete mode 100644 src/ecs1030/ecs1030.json
 delete mode 100644 src/ehr/CMakeLists.txt
 delete mode 100644 src/ehr/ehr.cxx
 delete mode 100644 src/ehr/ehr.hpp
 delete mode 100644 src/ehr/ehr.i
 delete mode 100644 src/ehr/ehr.json
 delete mode 100644 src/eldriver/CMakeLists.txt
 delete mode 100644 src/eldriver/eldriver.cxx
 delete mode 100644 src/eldriver/eldriver.hpp
 delete mode 100644 src/eldriver/eldriver.json
 delete mode 100644 src/electromagnet/CMakeLists.txt
 delete mode 100644 src/electromagnet/electromagnet.cxx
 delete mode 100644 src/electromagnet/electromagnet.hpp
 delete mode 100644 src/electromagnet/electromagnet.json
 delete mode 100644 src/emg/CMakeLists.txt
 delete mode 100644 src/emg/emg.c
 delete mode 100644 src/emg/emg.cxx
 delete mode 100644 src/emg/emg.h
 delete mode 100644 src/emg/emg.hpp
 delete mode 100644 src/emg/emg.json
 delete mode 100644 src/emg/emg_fti.c
 delete mode 100644 src/enc03r/CMakeLists.txt
 delete mode 100644 src/enc03r/enc03r.c
 delete mode 100644 src/enc03r/enc03r.cxx
 delete mode 100644 src/enc03r/enc03r.h
 delete mode 100644 src/enc03r/enc03r.hpp
 delete mode 100644 src/enc03r/enc03r.json
 delete mode 100644 src/enc03r/enc03r_fti.c

diff --git a/src/cjq4435/CMakeLists.txt b/src/cjq4435/CMakeLists.txt
deleted file mode 100644
index a225477..0000000
--- a/src/cjq4435/CMakeLists.txt
+++ /dev/null
@@ -1,8 +0,0 @@
-upm_mixed_module_init (NAME cjq4435
-    DESCRIPTION "MOSFET"
-    C_HDR cjq4435.h
-    C_SRC cjq4435.c
-    CPP_HDR cjq4435.hpp
-    CPP_SRC cjq4435.cxx
-    CPP_WRAPS_C
-    REQUIRES mraa utilities-c)
diff --git a/src/cjq4435/cjq4435.c b/src/cjq4435/cjq4435.c
deleted file mode 100644
index 140b126..0000000
--- a/src/cjq4435/cjq4435.c
+++ /dev/null
@@ -1,174 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2017 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <assert.h>
-#include <upm_utilities.h>
-
-#include "cjq4435.h"
-
-
-cjq4435_context cjq4435_init(int pin)
-{
-    // make sure MRAA is initialized
-    int mraa_rv;
-    if ((mraa_rv = mraa_init()) != MRAA_SUCCESS)
-    {
-        printf("%s: mraa_init() failed (%d).\n", __FUNCTION__, mraa_rv);
-        return NULL;
-    }
-
-    cjq4435_context dev =
-        (cjq4435_context)malloc(sizeof(struct _cjq4435_context));
-
-    if (!dev)
-        return NULL;
-
-    // zero out context
-    memset((void *)dev, 0, sizeof(struct _cjq4435_context));
-
-    if ( !(dev->pwm = mraa_pwm_init(pin)) )
-    {
-        printf("%s: mraa_pwm_init() failed.\n", __FUNCTION__);
-
-        cjq4435_close(dev);
-        return NULL;
-    }
-
-    dev->enabled = false;
-
-    return dev;
-}
-
-void cjq4435_close(const cjq4435_context dev)
-{
-    assert(dev != NULL);
-
-    if (dev->pwm)
-    {
-        if (dev->enabled)
-            mraa_pwm_enable(dev->pwm, 0);
-
-        mraa_pwm_close(dev->pwm);
-    }
-
-    free(dev);
-}
-
-upm_result_t cjq4435_set_period_us(const cjq4435_context dev, int us)
-{
-    assert(dev != NULL);
-
-    if (mraa_pwm_period_us(dev->pwm, us))
-    {
-        printf("%s: period specified is not supported\n", __FUNCTION__);
-        return UPM_ERROR_OPERATION_FAILED;
-    }
-
-    return UPM_SUCCESS;
-}
-
-upm_result_t cjq4435_set_period_ms(const cjq4435_context dev, int ms)
-{
-    assert(dev != NULL);
-
-    if (mraa_pwm_period_ms(dev->pwm, ms))
-    {
-        printf("%s: period specified is not supported\n", __FUNCTION__);
-        return UPM_ERROR_OPERATION_FAILED;
-    }
-
-    return UPM_SUCCESS;
-}
-
-upm_result_t cjq4435_set_period_seconds(const cjq4435_context dev,
-                                        float seconds)
-{
-    assert(dev != NULL);
-
-    if (mraa_pwm_period(dev->pwm, seconds))
-    {
-        printf("%s: period specified is not supported\n", __FUNCTION__);
-        return UPM_ERROR_OPERATION_FAILED;
-    }
-
-    return UPM_SUCCESS;
-}
-
-upm_result_t cjq4435_enable(const cjq4435_context dev, bool enable)
-{
-    assert(dev != NULL);
-
-    dev->enabled = enable;
-    if (mraa_pwm_enable(dev->pwm, ((enable) ? 1 : 0)))
-    {
-        printf("%s: mraa_pwm_enable() failed\n", __FUNCTION__);
-        return UPM_ERROR_OPERATION_FAILED;
-    }
-
-    return UPM_SUCCESS;
-}
-
-upm_result_t cjq4435_set_duty_cycle(const cjq4435_context dev,
-                                    float dutyCycle)
-{
-    assert(dev != NULL);
-
-    if (dutyCycle < 0.0)
-        dutyCycle = 0.0;
-
-    if (dutyCycle > 1.0)
-        dutyCycle = 1.0;
-
-    if (mraa_pwm_write(dev->pwm, dutyCycle))
-    {
-        printf("%s: mraa_pwm_write() failed\n", __FUNCTION__);
-        return UPM_ERROR_OPERATION_FAILED;
-    }
-
-    return UPM_SUCCESS;
-}
-
-void cjq4435_on(const cjq4435_context dev)
-{
-    assert(dev != NULL);
-
-    // set a 1 millisecond period, with 100% duty cycle
-
-    cjq4435_enable(dev, false);
-    cjq4435_set_period_us(dev, 1000);
-    cjq4435_set_duty_cycle(dev, 1.0);
-    cjq4435_enable(dev, true);
-}
-
-void cjq4435_off(const cjq4435_context dev)
-{
-    assert(dev != NULL);
-
-    // set a 1 millisecond period, with 100% duty cycle
-
-    cjq4435_enable(dev, false);
-    cjq4435_set_period_us(dev, 1000);
-    cjq4435_set_duty_cycle(dev, 0.0);
-    cjq4435_enable(dev, true);
-}
diff --git a/src/cjq4435/cjq4435.cxx b/src/cjq4435/cjq4435.cxx
deleted file mode 100644
index 0e04e72..0000000
--- a/src/cjq4435/cjq4435.cxx
+++ /dev/null
@@ -1,91 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2015-2017 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <iostream>
-#include <string>
-#include <stdexcept>
-
-#include "cjq4435.hpp"
-
-using namespace upm;
-using namespace std;
-
-CJQ4435::CJQ4435(int pin) :
-    m_cjq4435(cjq4435_init(pin))
-{
-    if (!m_cjq4435)
-        throw std::runtime_error(std::string(__FUNCTION__) +
-                                 ": cjq4435_init() failed");
-}
-
-CJQ4435::~CJQ4435()
-{
-    cjq4435_close(m_cjq4435);
-}
-
-void CJQ4435::setPeriodUS(int us)
-{
-    if (cjq4435_set_period_us(m_cjq4435, us))
-        throw std::runtime_error(std::string(__FUNCTION__) +
-                                 ": cjq4435_set_period_us() failed");
-}
-
-void CJQ4435::setPeriodMS(int ms)
-{
-    if (cjq4435_set_period_ms(m_cjq4435, ms))
-        throw std::runtime_error(std::string(__FUNCTION__) +
-                                 ": cjq4435_set_period_ms() failed");
-}
-
-void CJQ4435::setPeriodSeconds(float seconds)
-{
-    if (cjq4435_set_period_seconds(m_cjq4435, seconds))
-        throw std::runtime_error(std::string(__FUNCTION__) +
-                                 ": cjq4435_set_period_seconds() failed");
-}
-
-void CJQ4435::enable(bool enable)
-{
-    if (cjq4435_enable(m_cjq4435, enable))
-        throw std::runtime_error(std::string(__FUNCTION__) +
-                                 ": cjq4435_enable() failed");
-}
-
-void CJQ4435::setDutyCycle(float dutyCycle)
-{
-    if (cjq4435_set_duty_cycle(m_cjq4435, dutyCycle))
-        throw std::runtime_error(std::string(__FUNCTION__) +
-                                 ": cjq4435_set_duty_cycle() failed");
-}
-
-void CJQ4435::on()
-{
-    cjq4435_on(m_cjq4435);
-}
-
-void CJQ4435::off()
-{
-    cjq4435_off(m_cjq4435);
-}
-
diff --git a/src/cjq4435/cjq4435.h b/src/cjq4435/cjq4435.h
deleted file mode 100644
index fdc32cc..0000000
--- a/src/cjq4435/cjq4435.h
+++ /dev/null
@@ -1,136 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2017 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#pragma once
-
-#include <stdlib.h>
-#include <unistd.h>
-#include <string.h>
-
-#include <mraa/pwm.h>
-#include <upm.h>
-
-#ifdef __cplusplus
-extern "C" {
-#endif
-
-    /**
-     * @file cjq4435.h
-     * @library cjq4435
-     * @brief API CJQ4435 MOSFET
-     *
-     * @include cjq4435.c
-     */
-
-    /**
-     * Device context
-     */
-    typedef struct _cjq4435_context {
-        mraa_pwm_context pwm;
-
-        bool enabled;
-    } *cjq4435_context;
-
-    /**
-     * CJQ4435 initializer
-     *
-     * @param pin Digital pin to use; this pin must be PWM-capable
-     * @return Initialized device context, or NULL on error.
-     */
-    cjq4435_context cjq4435_init(int pin);
-
-    /**
-     * CJQ4435 destructor
-     *
-     * @param dev Device context
-     */
-    void cjq4435_close(cjq4435_context dev);
-
-    /**
-     * Sets a period in microseconds
-     *
-     * @param dev Device context
-     * @param us Period in microseconds
-     * @return UPM result
-     */
-    upm_result_t cjq4435_set_period_us(const cjq4435_context dev, int us);
-
-    /**
-     * Sets a period in milliseconds
-     *
-     * @param dev Device context
-     * @param ms Period in milliseconds
-     * @return UPM result
-     */
-    upm_result_t cjq4435_set_period_ms(const cjq4435_context dev, int us);
-
-    /**
-     * Sets a period in seconds
-     *
-     * @param dev Device context
-     * @param seconds Period in seconds
-     * @return UPM result
-     */
-    upm_result_t cjq4435_set_period_seconds(const cjq4435_context dev,
-                                            float seconds);
-
-    /**
-     * Enables output
-     *
-     * @param dev Device context
-     * @param enable Enables PWM output if true, disables otherwise
-     * @return UPM result
-     */
-    upm_result_t cjq4435_enable(const cjq4435_context dev, bool enable);
-
-    /**
-     * Sets a duty cycle. Duty cycle is a floating-point number
-     * between 0.0 (always off) and 1.0 (always on). It represents a
-     * proportion of time, per period, during which the output is
-     * driven high.
-     *
-     * @param dev Device context
-     * @param dutyCycle Duty cycle to use
-     * @return UPM result
-     */
-    upm_result_t cjq4435_set_duty_cycle(const cjq4435_context dev,
-                                        float dutyCycle);
-
-    /**
-     * Shortcut to turn the output to continuous on (high)
-     *
-     * @param dev Device context
-     */
-    void cjq4435_on(const cjq4435_context dev);
-
-    /**
-     * Shortcut to turn the output to continuous off (low)
-     *
-     * @param dev Device context
-     */
-    void cjq4435_off(const cjq4435_context dev);
-
-
-#ifdef __cplusplus
-}
-#endif
diff --git a/src/cjq4435/cjq4435.hpp b/src/cjq4435/cjq4435.hpp
deleted file mode 100644
index 0b7cf5e..0000000
--- a/src/cjq4435/cjq4435.hpp
+++ /dev/null
@@ -1,129 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2015-2017 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#pragma once
-
-#include "cjq4435.h"
-
-namespace upm {
-    /**
-     * @brief CJQ4435 MOSFET
-     * @defgroup cjq4435 libupm-cjq4435
-     * @ingroup seeed gpio pwm electric robok
-     */
-
-    /**
-     * @library cjq4435
-     * @sensor cjq4435
-     * @comname MOSFET
-     * @altname CJQ4435
-     * @type electric
-     * @man seeed
-     * @con gpio pwm
-     * @kit robok
-     *
-     * @brief API for the CJQ4435 MOSFET
-     *
-     * UPM module for the CJQ4435 MOSFET. It was developed using the
-     * Grove MOSFET module, but could be used with any MOSFET.  A
-     * MOSFET is like a switch, but it can switch much faster than a
-     * mechanical relay.  Here, we implement support via MRAA pulse
-     * width modulation (PWM) functions.  Note: available periods vary
-     * depending on the capabilities of your platform.
-     *
-     * @image html cjq4435.jpg
-     * @snippet cjq4435.cxx Interesting
-     */
-    class CJQ4435 {
-    public:
-        /**
-         * CJQ4435 constructor
-         *
-         * @param pin Digital pin to use; this pin must be PWM-capable
-         */
-        CJQ4435(int pin);
-
-        /**
-         * CJQ4435 destructor
-         */
-        ~CJQ4435();
-
-        /**
-         * Sets a period in microseconds
-         *
-         * @param us Period in microseconds
-         */
-        void setPeriodUS(int us);
-
-        /**
-         * Sets a period in milliseconds
-         *
-         * @param ms Period in milliseconds
-         */
-        void setPeriodMS(int ms);
-
-        /**
-         * Sets a period in seconds
-         *
-         * @param seconds Period in seconds
-         */
-        void setPeriodSeconds(float seconds);
-
-        /**
-         * Enables output
-         *
-         * @param enable Enables PWM output if true, disables otherwise
-         */
-        void enable(bool enable);
-
-        /**
-         * Sets a duty cycle. Duty cycle is a floating-point number
-         * between 0.0 (always off) and 1.0 (always on). It represents a
-         * proportion of time, per period, during which the output is
-         * driven high.
-         *
-         * @param dutyCycle Duty cycle to use
-         */
-        void setDutyCycle(float dutyCycle);
-
-        /**
-         * Shortcut to turn the output to continuous on (high)
-         */
-        void on();
-
-        /**
-         * Shortcut to turn the output to continuous off (low)
-         */
-        void off();
-
-    protected:
-        cjq4435_context m_cjq4435;
-
-    private:
-        /* Disable implicit copy and assignment operators */
-        CJQ4435(const CJQ4435&) = delete;
-        CJQ4435 &operator=(const CJQ4435&) = delete;
-    };
-}
-
-
diff --git a/src/cjq4435/cjq4435.json b/src/cjq4435/cjq4435.json
deleted file mode 100644
index 95ed2f3..0000000
--- a/src/cjq4435/cjq4435.json
+++ /dev/null
@@ -1,46 +0,0 @@
-{
-    "Library": "cjq4435",
-    "Description": "API for the CJQ4435 MOSFET",
-    "Sensor Class":
-    {
-        "CJQ4435":
-        {
-            "Name": "CJQ4435 MOSFET",
-            "Description": "UPM module for the CJQ4435 MOSFET. It was developed using the Grove MOSFET module, but could be used with any MOSFET.  A MOSFET is like a switch, but it can switch much faster than a mechanical relay.  Here, we implement support via MRAA pulse width modulation (PWM) functions.  Note: available periods vary depending on the capabilities of your platform.",
-            "Aliases": ["cjq4435"],
-            "Categories": ["electric"],
-            "Connections": ["gpio", "pwm"],
-            "Project Type": ["prototyping", "robotics"],
-            "Manufacturers": ["seeed"],
-            "Kits": ["robok"],
-            "Image": "cjq4435.jpg",
-            "Examples":
-            {
-                "Java": ["CJQ4435_Example.java"],
-                "Python": ["cjq4435.py"],
-                "Node.js": ["cjq4435.js"],
-                "C++": ["cjq4435.cxx"],
-                "C": ["cjq4435.c"]
-            },
-            "Specifications":
-            {
-                "Trigger Voltage": {"unit": "V", "typ" : 5},
-                "Working Voltage" : {"unit": "V", "low" : 5, "high": 15}
-            },
-            "Platforms":
-            {
-                "Intel Joule Module":
-                {
-                    "Notes": ["Requires pull-up resistors with carrier board"],
-                    "Images": [""]
-                }
-            },
-            "Urls" :
-            {
-                "Product Pages": ["https://www.seeedstudio.com/Grove-MOSFET-p-1594.html", "http://wiki.seeed.cc/Grove-MOSFET/"],
-                "Datasheets": ["https://raw.githubusercontent.com/SeeedDocument/Grove-MOSFET/master/res/CJQ4435.pdf"],
-                "Schematics": ["https://github.com/SeeedDocument/Grove-MOSFET/raw/master/res/Grove%20-%20MOSFET%20.pdf"]
-            }
-        }
-    }
-}
diff --git a/src/collision/CMakeLists.txt b/src/collision/CMakeLists.txt
deleted file mode 100644
index fe3d712..0000000
--- a/src/collision/CMakeLists.txt
+++ /dev/null
@@ -1,9 +0,0 @@
-upm_mixed_module_init (NAME collision
-    DESCRIPTION "Collision Sensor"
-    C_HDR collision.h
-    C_SRC collision.c
-    CPP_HDR collision.hpp
-    CPP_SRC collision.cxx
-    FTI_SRC collision_fti.c
-    CPP_WRAPS_C
-    REQUIRES mraa)
diff --git a/src/collision/collision.c b/src/collision/collision.c
deleted file mode 100644
index 3896e3e..0000000
--- a/src/collision/collision.c
+++ /dev/null
@@ -1,66 +0,0 @@
-/*
- * Author: Zion Orent <sorent@ics.com>
- *         Abhishek Malik <abhishek.malik@intel.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#include "collision.h"
-
-collision_context collision_init(int pin) {
-    // make sure MRAA is initialized
-    int mraa_rv;
-    if ((mraa_rv = mraa_init()) != MRAA_SUCCESS)
-    {
-        printf("%s: mraa_init() failed (%d).\n", __FUNCTION__, mraa_rv);
-        return NULL;
-    }
-
-    collision_context dev =
-      (collision_context)malloc(sizeof(struct _collision_context));
-
-    if (!dev)
-      return NULL;
-
-    dev->gpio = mraa_gpio_init(pin);
-
-    if(mraa_gpio_dir(dev->gpio, MRAA_GPIO_IN) != MRAA_SUCCESS)
-      {
-        free(dev);
-        return NULL;
-      }
-
-    return dev;
-}
-
-void collision_close(collision_context dev){
-    free(dev);
-}
-
-upm_result_t collision_is_colliding(collision_context dev, bool* collision_val){
-    int value = mraa_gpio_read(dev->gpio);
-
-    if(!value)
-        *collision_val = true;
-    else
-        *collision_val = false;
-
-    return UPM_SUCCESS;
-}
diff --git a/src/collision/collision.cxx b/src/collision/collision.cxx
deleted file mode 100644
index 5d79f9e..0000000
--- a/src/collision/collision.cxx
+++ /dev/null
@@ -1,53 +0,0 @@
-/*
- * Author: Zion Orent <sorent@ics.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <string>
-#include <stdexcept>
-
-#include "collision.hpp"
-
-using namespace upm;
-
-Collision::Collision(int pin)
-{
-    
-    if ( !(m_gpio = mraa_gpio_init(pin)) ) 
-      {
-        throw std::invalid_argument(std::string(__FUNCTION__) +
-                                    ": mraa_gpio_init() failed, invalid pin?");
-        return;
-      }
-    mraa_gpio_dir(m_gpio, MRAA_GPIO_IN);
-}
-
-Collision::~Collision()
-{
-    mraa_gpio_close(m_gpio);
-}
-
-bool Collision::isColliding()
-{
-	// Collisions cause 0; no collision is 1
-	return (!(bool)mraa_gpio_read(m_gpio));
-}
diff --git a/src/collision/collision.h b/src/collision/collision.h
deleted file mode 100644
index 42ac154..0000000
--- a/src/collision/collision.h
+++ /dev/null
@@ -1,75 +0,0 @@
-/*
- * Author: Zion Orent <sorent@ics.com>
- *         Abhishek Malik <abhishek.malik@intel.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#ifndef COLLISION_H_
-#define COLLISION_H_
-
-#include <stdlib.h>
-#include <unistd.h>
-#include <string.h>
-
-#include "upm.h"
-#include "mraa/gpio.h"
-
-/**
- * @file collision.h
- * @library collision
- * @brief C API for the MVS0608 Digital Collision Sensor
- *
- * @include collision.c
- */
-
-/**
- * device context
- */
-typedef struct _collision_context {
-    mraa_gpio_context        gpio;
-} *collision_context;
-
-/**
- * Collision Initialization function
- *
- * @param pin number
- * @return void* pointer to the sensor struct
- */
-collision_context collision_init(int pin);
-
-/**
- * Collision Initialization function
- *
- * @param void* pointer to the sensor struct
- */
-void collision_close(collision_context dev);
-
-/**
- * This function tells you whether the sensor has
- * collided with something or not.
- *
- * @param void* pointer to the sensor struct
- * @param bool* pointer to hold the collision value
- * @return upm_result_t UPM success/error code
- */
-upm_result_t collision_is_colliding(collision_context dev, bool* collision_val);
-
-#endif /* COLLISION_H_ */
diff --git a/src/collision/collision.hpp b/src/collision/collision.hpp
deleted file mode 100644
index 2501a9c..0000000
--- a/src/collision/collision.hpp
+++ /dev/null
@@ -1,73 +0,0 @@
-/*
- * Author: Zion Orent <sorent@ics.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#pragma once
-
-#include <mraa/gpio.h>
-
-namespace upm {
-  /**
-   * @brief Collision Sensor
-   * @defgroup collision libupm-collision
-   * @ingroup seeed gpio accelerometer
-   */
-
-  /**
-   * @library collision
-   * @sensor collision
-   * @comname Collision Sensor
-   * @altname Grove Collision Sensor
-   * @type accelerometer
-   * @man seeed
-   * @con gpio
-   *
-   * @brief API for the Collision Sensor
-   * 
-   * The Collision Sensor can detect whether any
-   * collision movement or vibration happens.
-   * It outputs a low pulse signal when vibration is detected. 
-   *
-   * @image html collision.jpg
-   * @snippet collision.cxx Interesting
-   */
-  class Collision {
-  public:
-    /**
-     * Collision sensor constructor
-     *
-     * @param pin Digital pin to use
-     */
-    Collision(int pin);
-    /**
-     * Collision destructor
-     */
-    ~Collision();
-    /**
-     * @return bool  Defines whether something is colliding with sensor
-     */
-     bool isColliding();
-
-  private:
-        mraa_gpio_context m_gpio;
-	};
-}
diff --git a/src/collision/collision.json b/src/collision/collision.json
deleted file mode 100644
index b29c316..0000000
--- a/src/collision/collision.json
+++ /dev/null
@@ -1,45 +0,0 @@
-{
-    "Library": "collision",
-    "Description": "API for the Collision Sensor",
-    "Sensor Class":
-    {
-        "Collision":
-        {
-            "Name": "Grove Collision Sensor",
-            "Description": "The Collision Sensor can detect whether any collision movement or vibration happens. It outputs a low pulse signal when vibration is detected.",
-            "Aliases": ["collision"],
-            "Categories": ["collision", "accelerometer"],
-            "Connections": ["gpio"],
-            "Project Type": ["prototyping", "robotics"],
-            "Manufacturers": ["seeed"],
-            "Kits": [],
-            "Image": "collision.jpg",
-            "Examples":
-            {
-                "Java": ["Collision_Example.java"],
-                "Python": ["collision.py"],
-                "Node.js": ["collision.js"],
-                "C++": ["collision.cxx"],
-                "C": ["collision.c"]
-            },
-            "Specifications":
-            {
-                "Vsource": {"unit": "V", "low" : 3.3, "high": 5}
-            },
-            "Platforms":
-            {
-                "Intel Joule Module":
-                {
-                    "Notes": ["Requires pull-up resistors with carrier board"],
-                    "Images": [""]
-                }
-            },
-            "Urls" :
-            {
-                "Product Pages": ["https://www.seeedstudio.com/Grove-Collision-Sensor-p-1132.html", "http://wiki.seeed.cc/Grove-Collision_Sensor/"],
-                "Datasheets": ["https://raw.githubusercontent.com/SeeedDocument/Grove-Collision_Sensor/master/res/DataSheet-MVS0608_02-v2_1.pdf"],
-                "Schematics": []
-            }
-        }
-    }
-}
diff --git a/src/collision/collision_fti.c b/src/collision/collision_fti.c
deleted file mode 100644
index bee3516..0000000
--- a/src/collision/collision_fti.c
+++ /dev/null
@@ -1,78 +0,0 @@
-/*
- * Author: Zion Orent <sorent@ics.com>
- *         Abhishek Malik <abhishek.malik@intel.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#include "collision.h"
-#include "upm_fti.h"
-
-/** 
- * This file implements the Function Table Interface (FTI) for this sensor
- */
-
-const char upm_collision_name[] = "Collision";
-const char upm_collision_description[] = "Collision sensor";
-const upm_protocol_t upm_collision_protocol[] = {UPM_GPIO};
-const upm_sensor_t upm_collision_category[] = {UPM_ELECTRICITY};
-
-// forward declarations
-const upm_sensor_descriptor_t upm_collision_get_descriptor();
-const void* upm_collision_get_ft(upm_sensor_t sensor_type);
-void* upm_collision_init_name();
-void upm_collision_close(void* dev);
-
-const upm_sensor_descriptor_t upm_collision_get_descriptor(){
-    upm_sensor_descriptor_t usd;
-    usd.name = upm_collision_name;
-    usd.description = upm_collision_description;
-    usd.protocol_size = 1;
-    usd.protocol = upm_collision_protocol;
-    usd.category_size = 1;
-    usd.category = upm_collision_category;
-    return usd;
-}
-
-static const upm_sensor_ft ft =
-{
-    .upm_sensor_init_name = &upm_collision_init_name,
-    .upm_sensor_close = &upm_collision_close,
-    .upm_sensor_get_descriptor = &upm_collision_get_descriptor
-};
-
-const void* upm_collision_get_ft(upm_sensor_t sensor_type){
-    if(sensor_type == UPM_SENSOR){
-        return &ft;
-    }
-    return NULL;
-}
-
-void* upm_collision_init_name(){
-    return NULL;
-}
-
-void upm_collision_close(void* dev){
-    collision_close((collision_context)dev);
-}
-
-upm_result_t upm_collision_is_colliding(void* dev, bool* collision_val){
-    return collision_is_colliding((collision_context)dev, collision_val);
-}
\ No newline at end of file
diff --git a/src/curieimu/CMakeLists.txt b/src/curieimu/CMakeLists.txt
deleted file mode 100644
index 2a4d66d..0000000
--- a/src/curieimu/CMakeLists.txt
+++ /dev/null
@@ -1,7 +0,0 @@
-if (MRAA_FIRMATA_FOUND)
-  set (libname "curieimu")
-  set (libdescription "Curie IMU Sensor using Firmata")
-  set (module_src ${libname}.cpp)
-  set (module_hpp ${libname}.hpp)
-  upm_module_init(mraa ${CMAKE_THREAD_LIBS_INIT})
-endif ()
diff --git a/src/curieimu/curieimu.cpp b/src/curieimu/curieimu.cpp
deleted file mode 100644
index 7721e9f..0000000
--- a/src/curieimu/curieimu.cpp
+++ /dev/null
@@ -1,457 +0,0 @@
-/*
- * Author: Brendan Le Foll <brendan.le.foll@intel.com>
- * Author: Ron Evans (@deadprogram)
- * Author: Justin Zemlyansky (@JustInDevelopment)
- * Copyright (c) 2016 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <iostream>
-#include <string>
-#include <string.h>
-#include <stdexcept>
-#include <unistd.h>
-#include <stdlib.h>
-
-#include "curieimu.hpp"
-
-using namespace upm;
-
-static CurieImu* awaitingReponse;
-
-CurieImu::CurieImu (int subplatformoffset)
-{
-    m_firmata = mraa_firmata_init(FIRMATA_CURIE_IMU);
-    if (m_firmata == NULL) {
-        throw std::invalid_argument(std::string(__FUNCTION__) +
-                                    ": mraa_firmata_init() failed");
-        return;
-    }
-
-    if (pthread_mutex_init(&m_responseLock, NULL)) {
-        throw std::runtime_error(std::string(__FUNCTION__) +
-                                 ": pthread_mutex_init(m_responseLock) failed");
-        return;
-    }
-
-    if (pthread_cond_init(&m_responseCond, NULL)) {
-        throw std::runtime_error(std::string(__FUNCTION__) +
-                                 ": pthread_cond_init(m_responseCond) failed");
-        return;
-    }
-}
-
-CurieImu::~CurieImu()
-{
-    pthread_mutex_destroy(&m_responseLock);
-    pthread_cond_destroy(&m_responseCond);
-}
-
-void
-CurieImu::lock()
-{
-    pthread_mutex_lock(&m_responseLock);
-}
-
-void
-CurieImu::unlock()
-{
-    pthread_mutex_unlock(&m_responseLock);
-}
-
-void
-CurieImu::waitForResponse()
-{
-    awaitingReponse = this;
-    pthread_cond_wait(&m_responseCond, &m_responseLock);
-}
-
-void
-CurieImu::proceed()
-{
-    pthread_cond_broadcast(&m_responseCond);
-}
-
-void
-CurieImu::setResults(uint8_t* buf, int length)
-{
-    m_results = new char(length);
-    memcpy((void*)m_results, (void*)buf, length);
-}
-
-/*
-* Handles a single syncronous response being returned from Firmata
-*
-* @param buffer the data beinig returned from Firmata
-* @param length length of results buffer
-*/
-static void
-handleSyncResponse(uint8_t* buf, int length)
-{
-    awaitingReponse->setResults(buf, length);
-    awaitingReponse->proceed();
-}
-
-/*
-* Handles asyncronous responses being returned from Firmata
-*
-* @param buffer the data beinig returned from Firmata
-* @param length length of results buffer
-*/
-static void
-handleAsyncResponses(uint8_t* buf, int length)
-{
-    awaitingReponse->setResults(buf, length);
-    awaitingReponse->processResponse();
-}
-
-void
-CurieImu::processResponse()
-{
-    switch(m_results[2]) {
-        case FIRMATA_CURIE_IMU_SHOCK_DETECT:
-        {
-            IMUDataItem* item = new IMUDataItem();
-            item->axis = m_results[3];
-            item->direction = m_results[4];
-            m_shockData.push(item);
-            break;
-        }
-        case FIRMATA_CURIE_IMU_STEP_COUNTER:
-        {
-            int count = ((m_results[3] & 0x7f) | ((m_results[4] & 0x7f) << 7));
-            m_stepData.push(count);
-            break;
-        }
-        case FIRMATA_CURIE_IMU_TAP_DETECT:
-        {
-            IMUDataItem* item = new IMUDataItem();
-            item->axis = m_results[3];
-            item->direction = m_results[4];
-            m_tapData.push(item);
-            break;
-        }
-    }
-
-    return;
-}
-
-int16_t*
-CurieImu::getAccel()
-{
-    return &m_accel[0];
-}
-
-int16_t
-CurieImu::getAccelX()
-{
-  return m_accel[X];
-}
-
-int16_t
-CurieImu::getAccelY()
-{
-  return m_accel[Y];
-}
-
-int16_t
-CurieImu::getAccelZ()
-{
-  return m_accel[Z];
-}
-
-int16_t*
-CurieImu::getGyro()
-{
-    return &m_gyro[0];
-}
-
-int16_t
-CurieImu::getGyroX()
-{
-  return m_gyro[X];
-}
-
-int16_t
-CurieImu::getGyroY()
-{
-  return m_gyro[Y];
-}
-
-int16_t
-CurieImu::getGyroZ()
-{
-  return m_gyro[Z];
-}
-
-int16_t*
-CurieImu::getMotion()
-{
-    return &m_motion[0];
-}
-
-void
-CurieImu::updateAccel()
-{
-    char message[4];
-    message[0] = FIRMATA_START_SYSEX;
-    message[1] = FIRMATA_CURIE_IMU;
-    message[2] = FIRMATA_CURIE_IMU_READ_ACCEL;
-    message[3] = FIRMATA_END_SYSEX;
-
-    lock();
-
-    mraa_firmata_response_stop(m_firmata);
-    mraa_firmata_response(m_firmata, handleSyncResponse);
-    mraa_firmata_write_sysex(m_firmata, &message[0], 4);
-
-    waitForResponse();
-
-    m_accel[0] = ((m_results[3] & 0x7f) | ((m_results[4] & 0x7f) << 7));
-    m_accel[1] = ((m_results[5] & 0x7f) | ((m_results[6] & 0x7f) << 7));
-    m_accel[2] = ((m_results[7] & 0x7f) | ((m_results[8] & 0x7f) << 7));
-
-    delete m_results;
-    unlock();
-
-    return;
-}
-
-void
-CurieImu::updateGyro()
-{
-    char message[4];
-    message[0] = FIRMATA_START_SYSEX;
-    message[1] = FIRMATA_CURIE_IMU;
-    message[2] = FIRMATA_CURIE_IMU_READ_GYRO;
-    message[3] = FIRMATA_END_SYSEX;
-
-    lock();
-
-    mraa_firmata_response_stop(m_firmata);
-    mraa_firmata_response(m_firmata, handleSyncResponse);
-    mraa_firmata_write_sysex(m_firmata, &message[0], 4);
-
-    waitForResponse();
-
-    m_gyro[0] = ((m_results[3] & 0x7f) | ((m_results[4] & 0x7f) << 7));
-    m_gyro[1] = ((m_results[5] & 0x7f) | ((m_results[6] & 0x7f) << 7));
-    m_gyro[2] = ((m_results[7] & 0x7f) | ((m_results[8] & 0x7f) << 7));
-
-    delete m_results;
-    unlock();
-
-    return;
-}
-
-void
-CurieImu::updateMotion()
-{
-    char message[4];
-    message[0] = FIRMATA_START_SYSEX;
-    message[1] = FIRMATA_CURIE_IMU;
-    message[2] = FIRMATA_CURIE_IMU_READ_MOTION;
-    message[3] = FIRMATA_END_SYSEX;
-
-    lock();
-
-    mraa_firmata_response_stop(m_firmata);
-    mraa_firmata_response(m_firmata, handleSyncResponse);
-    mraa_firmata_write_sysex(m_firmata, &message[0], 4);
-
-    waitForResponse();
-
-    m_motion[0] = ((m_results[3] & 0x7f) | ((m_results[4] & 0x7f) << 7));
-    m_motion[1] = ((m_results[5] & 0x7f) | ((m_results[6] & 0x7f) << 7));
-    m_motion[2] = ((m_results[7] & 0x7f) | ((m_results[8] & 0x7f) << 7));
-    m_motion[3] = ((m_results[9] & 0x7f) | ((m_results[10] & 0x7f) << 7));
-    m_motion[4] = ((m_results[11] & 0x7f) | ((m_results[12] & 0x7f) << 7));
-    m_motion[5] = ((m_results[13] & 0x7f) | ((m_results[13] & 0x7f) << 7));
-
-    for (int i=0; i<3; i++)
-      m_accel[i] = m_motion[i];
-
-    for (int i=0; i<3; i++)
-      m_gyro[i] = m_motion[i+3];
-
-    delete m_results;
-    unlock();
-
-    return;
-}
-
-int16_t
-CurieImu::getTemperature()
-{
-    char message[4];
-    message[0] = FIRMATA_START_SYSEX;
-    message[1] = FIRMATA_CURIE_IMU;
-    message[2] = FIRMATA_CURIE_IMU_READ_TEMP;
-    message[3] = FIRMATA_END_SYSEX;
-
-    lock();
-
-    mraa_firmata_response_stop(m_firmata);
-    mraa_firmata_response(m_firmata, handleSyncResponse);
-    mraa_firmata_write_sysex(m_firmata, &message[0], 4);
-
-    waitForResponse();
-
-    int16_t result;
-    result = ((m_results[3] & 0x7f) | ((m_results[4] & 0x7f) << 7));
-    result += ((m_results[5] & 0x7f) | ((m_results[6] & 0x7f) << 7)) << 8;
-
-    delete m_results;
-    unlock();
-
-    return result;
-}
-
-int16_t
-CurieImu::getAxis()
-{
-  return m_axis;
-}
-
-int16_t
-CurieImu::getDirection()
-{
-  return m_direction;
-}
-
-void
-CurieImu::enableShockDetection(bool enable)
-{
-    char message[5];
-    message[0] = FIRMATA_START_SYSEX;
-    message[1] = FIRMATA_CURIE_IMU;
-    message[2] = FIRMATA_CURIE_IMU_SHOCK_DETECT;
-    message[3] = enable;
-    message[4] = FIRMATA_END_SYSEX;
-
-    lock();
-
-    mraa_firmata_response_stop(m_firmata);
-    mraa_firmata_response(m_firmata, handleAsyncResponses);
-    mraa_firmata_write_sysex(m_firmata, &message[0], 5);
-
-    awaitingReponse = this;
-    unlock();
-
-    return;
-}
-
-bool
-CurieImu::isShockDetected()
-{
-    return (m_shockData.size() > 0);
-}
-
-void
-CurieImu::getNextShock()
-{
-  if (m_shockData.size() > 0) {
-      IMUDataItem* item = m_shockData.front();
-      m_axis = item->axis;
-      m_direction = item->direction;
-      m_shockData.pop();
-      delete item;
-  }
-}
-
-void
-CurieImu::enableStepCounter(bool enable)
-{
-    char message[5];
-    message[0] = FIRMATA_START_SYSEX;
-    message[1] = FIRMATA_CURIE_IMU;
-    message[2] = FIRMATA_CURIE_IMU_STEP_COUNTER;
-    message[3] = enable;
-    message[4] = FIRMATA_END_SYSEX;
-
-    lock();
-
-    mraa_firmata_response_stop(m_firmata);
-    mraa_firmata_response(m_firmata, handleAsyncResponses);
-    mraa_firmata_write_sysex(m_firmata, &message[0], 5);
-
-    awaitingReponse = this;
-    unlock();
-
-    return;
-}
-
-bool
-CurieImu::isStepDetected()
-{
-    return (m_stepData.size() > 0);
-}
-
-int16_t
-CurieImu::getStepCount()
-{
-    int16_t count = 0;
-    if (m_stepData.size() > 0) {
-        count = m_stepData.front();
-        m_stepData.pop();
-    }
-    return count;
-}
-
-void
-CurieImu::enableTapDetection(bool enable)
-{
-    char message[5];
-    message[0] = FIRMATA_START_SYSEX;
-    message[1] = FIRMATA_CURIE_IMU;
-    message[2] = FIRMATA_CURIE_IMU_TAP_DETECT;
-    message[3] = enable;
-    message[4] = FIRMATA_END_SYSEX;
-
-    lock();
-
-    mraa_firmata_response_stop(m_firmata);
-    mraa_firmata_response(m_firmata, handleAsyncResponses);
-    mraa_firmata_write_sysex(m_firmata, &message[0], 5);
-
-    awaitingReponse = this;
-    unlock();
-
-    return;
-}
-
-bool
-CurieImu::isTapDetected()
-{
-    return (m_tapData.size() > 0);
-}
-
-void
-CurieImu::getNextTap()
-{
-  if (m_tapData.size() > 0) {
-      IMUDataItem* item = m_tapData.front();
-      m_axis = item->axis;
-      m_direction = item->direction;
-      m_tapData.pop();
-      delete item;
-  }
-}
diff --git a/src/curieimu/curieimu.hpp b/src/curieimu/curieimu.hpp
deleted file mode 100644
index c9a556d..0000000
--- a/src/curieimu/curieimu.hpp
+++ /dev/null
@@ -1,307 +0,0 @@
-/*
- * Author: Brendan Le Foll <brendan.le.foll@intel.com>
- * Author: Ron Evans (@deadprogram)
- * Author: Justin Zemlyansky (@JustInDevelopment)
- * Copyright (c) 2016 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#pragma once
-
-#include <mraa/firmata.h>
-#include <pthread.h>
-#include <queue>
-
-#define FIRMATA_START_SYSEX                 0xF0
-#define FIRMATA_END_SYSEX                   0xF7
-#define FIRMATA_CURIE_IMU                   0x11
-#define FIRMATA_CURIE_IMU_READ_ACCEL        0x00
-#define FIRMATA_CURIE_IMU_READ_GYRO         0x01
-#define FIRMATA_CURIE_IMU_READ_TEMP         0x02
-#define FIRMATA_CURIE_IMU_SHOCK_DETECT      0x03
-#define FIRMATA_CURIE_IMU_STEP_COUNTER      0x04
-#define FIRMATA_CURIE_IMU_TAP_DETECT        0x05
-#define FIRMATA_CURIE_IMU_READ_MOTION       0x06
-
-#define X 0
-#define Y 1
-#define Z 2
-
-namespace upm {
-/**
- * @brief CurieIMU Library for Arduino/Genuino 101 Running Firmata
- * @defgroup curieimu libupm-curieimu
- * @ingroup uart serial accelerometer compass bosch
- */
-
-struct IMUDataItem {
-    int axis;
-    int direction;
-};
-
-/**
- * @library curieimu
- * @sensor curieimu
- * @comname Curie IMU Sensor using Firmata
- * @altname Curie IMU Sensor for Arduino/Genuino 101 running Firmata
- * @type serial accelerometer compass
- * @man bosch
- * @con uart
- *
- * @brief API for the Curie IMU via Firmata
- *
- * Curie IMU is a 6-axis accelerometer
- *
- * This module has been tested on an Arduino/Genuino 101 running
- * ConfigurableFirmata with CurieIMU
- *
- * @snippet curieimu.cxx Interesting
- */
-class CurieImu {
-    public:
-
-      /**
-      * Instantiates a CurieImu object
-      *
-      * @param subplatform_offset Subplatform offset
-      */
-      CurieImu (int subplatform_offset=512);
-
-      /**
-      * Destructor for CurieImu object
-      */
-      ~CurieImu();
-
-      /**
-       * Updates the latest accelerometer readings by calling Firmata
-       */
-      void updateAccel();
-
-      /**
-       * Updates the latest gyroscope readings by calling Firmata
-       */
-      void updateGyro();
-
-      /**
-       * Updates the both the latest accelerometer & gyroscope readings
-       * by calling Firmata
-       */
-      void updateMotion();
-
-      /**
-       * Returns last accelerometer reading X, Y, and Z axis
-       *
-       * @return pointer to array with X-axis, Y-axis & Z-axis value
-       */
-      int16_t* getAccel();
-
-      /**
-       * Returns last accelerometer reading X axis
-       *
-       * @return X-axis value
-       */
-      int16_t getAccelX();
-
-      /**
-       * Returns last accelerometer reading Y axis
-       *
-       * @return Y-axis value
-       */
-      int16_t getAccelY();
-
-      /**
-       * Returns last accelerometer reading Z axis
-       *
-       * @return Z-axis value
-       */
-      int16_t getAccelZ();
-
-      /**
-       * Read gyroscope X, Y, and Z axis
-       *
-       * @return pointer to array with X-axis, Y-axis & Z-axis value
-       */
-      int16_t* getGyro();
-
-      /**
-       * Returns last gyroscope reading X axis
-       *
-       * @return X-axis value
-       */
-      int16_t getGyroX();
-
-      /**
-       * Returns last gyroscope reading Y axis
-       *
-       * @return Y-axis value
-       */
-      int16_t getGyroY();
-
-      /**
-       * Returns last gyroscope reading Z axis
-       *
-       * @return Z-axis value
-       */
-      int16_t getGyroZ();
-
-      /**
-       * Reads the internal temperature
-       *
-       * @return 16-bit integer containing the scaled temperature reading
-       */
-      int16_t getTemperature();
-
-      /**
-       * Reads the X, Y, and Z axis of both gyroscope and accelerometer
-       *
-       * @return pointer to array with X-axis, Y-axis & Z-axis values for
-       * accelerometer, and then X-axis, Y-axis & Z-axis values for
-       * gyroscope
-       */
-      int16_t* getMotion();
-
-      /**
-       * Returns last shock or tap axis reading
-       *
-       * @return axis value
-       */
-      int16_t getAxis();
-
-      /**
-       * Returns last shock or tap direction reading
-       *
-       * @return direction value
-       */
-      int16_t getDirection();
-
-      /**
-       * Turns shock detection notifications on/off
-       *
-       * @param enable enables/disables notifications
-       */
-      void enableShockDetection(bool enable);
-
-      /**
-       * Has there been a shock detected?
-       *
-       * @return true if any unprocessed shock notifications are in the queue
-       */
-      bool isShockDetected();
-
-      /**
-       * Gets shock detect data from queue. Then m_axis gets axis data, and
-       * m_direction gets direction data
-       */
-      void getNextShock();
-
-      /**
-       * Turns step counter notifications on/off
-       *
-       * @param enable enables/disables notifications
-       */
-      void enableStepCounter(bool enable);
-
-      /**
-       * Has there been a step detected?
-       *
-       * @return true if any unprocessed step notifications are in the queue
-       */
-      bool isStepDetected();
-
-      /**
-       * Gets step count data from queue
-       *
-       * @return the total number of steps taken
-       */
-      int16_t getStepCount();
-
-      /**
-       * Turns tap detection notifications on/off
-       *
-       * @param enable enables/disables notifications
-       */
-      void enableTapDetection(bool enable);
-
-      /**
-       * Has there been a tap detected?
-       *
-       * @return true if any unprocessed tap notifications are in the queue
-       */
-      bool isTapDetected();
-
-      /**
-       * Gets tap detect data from queue. Then m_axis gets axis data, and
-       * m_direction gets direction data
-       */
-      void getNextTap();
-
-      /**
-       * Locks responses from Firmata
-       */
-      void lock();
-
-      /**
-       * Unlocks responses from Firmata
-       */
-      void unlock();
-
-      /**
-       * Wait for a response from Firmata before proceeding
-       */
-      void waitForResponse();
-
-      /**
-       * Proceed with original function call now that response
-       * from Firmata has been received
-       */
-      void proceed();
-
-      /**
-       * Set results being returned from Firmata for processing
-       *
-       * @param buf is the buffer
-       * @param length is the length of results buffer
-       */
-      void setResults(uint8_t* buf, int length);
-
-      /**
-       * Processes asyncronous responses returned from Firmata
-       */
-      void processResponse();
-
-    private:
-        mraa_firmata_context m_firmata;
-        pthread_mutex_t m_responseLock;
-        pthread_cond_t m_responseCond;
-        char* m_results;
-
-        std::queue<IMUDataItem*> m_shockData;
-        std::queue<int> m_stepData;
-        std::queue<IMUDataItem*> m_tapData;
-
-        int16_t m_accel[3];
-        int16_t m_gyro[3];
-        int16_t m_motion[6];
-
-        int16_t m_axis;
-        int16_t m_direction;
-};
-
-}
diff --git a/src/curieimu/curieimu.i b/src/curieimu/curieimu.i
deleted file mode 100644
index fb92fe6..0000000
--- a/src/curieimu/curieimu.i
+++ /dev/null
@@ -1,58 +0,0 @@
-%include "../common_top.i"
-
-/* BEGIN Java syntax  ------------------------------------------------------- */
-#ifdef SWIGJAVA
-%typemap(jni) int16_t* "jshortArray"
-%typemap(jstype) int16_t* "short[]"
-%typemap(jtype) int16_t* "short[]"
-
-%typemap(javaout) int16_t* {
-    return $jnicall;
-}
-
-%typemap(out) int16_t *getAccel {
-    $result = JCALL1(NewShortArray, jenv, 3);
-    JCALL4(SetShortArrayRegion, jenv, $result, 0, 3, (jshort*)$1);
-}
-
-%typemap(out) int16_t *getGyro {
-    $result = JCALL1(NewShortArray, jenv, 3);
-    JCALL4(SetShortArrayRegion, jenv, $result, 0, 3, (jshort*)$1);
-}
-
-%typemap(out) int16_t *getMotion {
-    $result = JCALL1(NewShortArray, jenv, 6);
-    JCALL4(SetShortArrayRegion, jenv, $result, 0, 6, (jshort*)$1);
-}
-
-JAVA_JNI_LOADLIBRARY(javaupm_curieimu)
-#endif
-/* END Java syntax */
-
-/* BEGIN Javascript syntax  ------------------------------------------------- */
-#ifdef SWIGJAVASCRIPT
-%include "../carrays_int16_t.i"
-
-// Adding this typemap because SWIG is converting int16 into a short by default
-// This forces SWIG to convert it correctly
-%typemap(out) int16_t* {
-        jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_int16Array, 0 |  0 );
-}
-#endif
-/* END Javascript syntax */
-
-/* BEGIN Python syntax  ----------------------------------------------------- */
-#ifdef SWIGPYTHON
-%include "../carrays_int16_t.i"
-%typemap(out) int16_t* {
-  $result = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_int16Array, 0 |  0 );
-}
-#endif
-/* END Python syntax */
-
-/* BEGIN Common SWIG syntax ------------------------------------------------- */
-%{
-#include "curieimu.hpp"
-%}
-%include "curieimu.hpp"
-/* END Common SWIG syntax */
diff --git a/src/curieimu/curieimu.json b/src/curieimu/curieimu.json
deleted file mode 100644
index 40d96d4..0000000
--- a/src/curieimu/curieimu.json
+++ /dev/null
@@ -1,38 +0,0 @@
-{
-    "Library": "curieimu",
-    "Description": "Bosch Atmospheric Sensor Library",
-    "Sensor Class":
-    {
-        "CurieImu":
-        {
-            "Name": "Digital Humidity, Pressure, and Temperature Sensor",
-            "Description": "Curie IMU is a 6-axis accelerometer.",
-            "Aliases": ["curieimu"],
-            "Categories": ["IMU", "accelerometer", "compass"],
-            "Connections": ["firmata"],
-            "Project Type": ["prototyping", "industrial"],
-            "Manufacturers": ["bosch"],
-            "Kits": [],
-            "Examples":
-            {
-                "Java": [],
-                "Python": ["curieimu.py"],
-                "Node.js": ["curieimu.js"],
-                "C++": ["curieimu.cxx"],
-                "C": []
-            },
-            "Specifications":
-            {
-                
-            },
-            "Platforms":
-            {},
-            "Urls" :
-            {
-                "Product Pages": [],
-                "Datasheets": [],
-                "Schematics": []
-            }
-        }
-    }
-}
diff --git a/src/cwlsxxa/CMakeLists.txt b/src/cwlsxxa/CMakeLists.txt
deleted file mode 100644
index 9dcfe7f..0000000
--- a/src/cwlsxxa/CMakeLists.txt
+++ /dev/null
@@ -1,5 +0,0 @@
-set (libname "cwlsxxa")
-set (libdescription "Veris CWLSXXA CO2/Temperature/Humidity Transmitter")
-set (module_src ${libname}.cxx)
-set (module_hpp ${libname}.hpp)
-upm_module_init(mraa)
diff --git a/src/cwlsxxa/cwlsxxa.cxx b/src/cwlsxxa/cwlsxxa.cxx
deleted file mode 100644
index 1369ab8..0000000
--- a/src/cwlsxxa/cwlsxxa.cxx
+++ /dev/null
@@ -1,183 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2016 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <iostream>
-
-#include "cwlsxxa.hpp"
-
-using namespace upm;
-using namespace std;
-
-// for current loop reads that seems a little noisy, we average over
-// several aio reads.
-static const int maxSamples = 50;
-
-// conversion from celsius to fahrenheit
-
-static float c2f(float c)
-{
-  return (c * (9.0 / 5.0) + 32.0);
-}
-
-
-CWLSXXA::CWLSXXA(int gPin, int hPin, int tPin, float rResistor, float aref) :
-  m_aioCO2(gPin), m_aioHum(0), m_aioTemp(0)
-{
-  m_hasHum = (hPin >= 0) ? true : false;
-  m_hasTemp = (tPin >= 0) ? true : false;
-
-  if (m_hasTemp)
-    {
-      m_aioTemp = new mraa::Aio(tPin);
-      m_aResTemp = (1 << m_aioTemp->getBit());
-    }
-  else
-    m_aResTemp = 0;
-
-  if (m_hasHum)
-    {
-      m_aioHum = new mraa::Aio(hPin);
-      m_aResHum = (1 << m_aioHum->getBit());
-    }
-  else
-    m_aResHum = 0;
-
-  m_aResCO2 = (1 << m_aioCO2.getBit());
-
-  m_temperature = 0.0;
-  m_humidity = 0.0;
-  m_co2 = 0.0;
-
-  m_aref = aref;
-  m_rResistor = rResistor;
-}
-
-CWLSXXA::~CWLSXXA()
-{
-  if (m_aioHum)
-    delete m_aioHum;
-  if (m_aioTemp)
-    delete m_aioTemp;
-}
-
-void CWLSXXA::update()
-{
-  // temperature
-  int val;
-  float volts;
-  float milliamps = 0.0;
-
-  int samples;
-  if (m_rResistor)
-    samples = maxSamples;
-  else
-    samples = 1;
-
-
-  // temperature
-  if (m_hasTemp)
-    {
-      // fortunately, this sensor always reports temperatures in C,
-      // regardless of the configuration of the LCD display (for
-      // models that have an LCD display)
-
-      val = average(m_aioTemp, samples);
-
-      volts = (float(val) * (m_aref / m_aResTemp));
-
-      // valid range is 10-35C, current loop range is 16ma (20ma - 4ma)
-      if (!m_rResistor)
-        m_temperature = ((volts / m_aref) * 25.0) + 10.0;
-      else
-        {
-          milliamps = ((volts / m_rResistor * 1000.0) - 4.0);
-          if (milliamps < 0.0) // not connected
-            milliamps = 0.0;
-          m_temperature = (milliamps * (25.0 / 16.0)) + 10.0;
-        }
-    }
-
-  // humidity
-  if (m_hasHum)
-    {
-      val = average(m_aioHum, samples);
-      volts = (float(val) * (m_aref / m_aResHum));
-
-      // range is 0-100
-      if (!m_rResistor)
-        m_humidity = ((volts / m_aref) * 100.0);
-      else
-        {
-          milliamps = ((volts / m_rResistor * 1000.0) - 4.0);
-          if (milliamps < 0.0) // not connected
-            milliamps = 0.0;
-          m_humidity = milliamps * (100.0 / 16.0);
-        }
-    }
-
-  // CO2
-  val = average(&m_aioCO2, samples);
-  volts = (float(val) * (m_aref / m_aResCO2));
-  
-  // CO2 range is 0-2000ppm
-  if (!m_rResistor)
-    m_co2 = ((volts / m_aref) * 2000.0);
-  else
-    {
-      milliamps = ((volts / m_rResistor * 1000.0) - 4.0);
-      if (milliamps < 0.0) // not connected
-        milliamps = 0.0;
-      m_co2 = milliamps * (2000.0 / 16.0);
-    }
-}
-
-float CWLSXXA::getTemperature(bool fahrenheit)
-{
-  if (fahrenheit)
-    return c2f(m_temperature);
-  else
-    return m_temperature;
-}
-
-float CWLSXXA::getHumidity()
-{
-  return m_humidity;
-}
-
-float CWLSXXA::getCO2()
-{
-  return m_co2;
-}
-
-int CWLSXXA::average(mraa::Aio *aio, int samples)
-{
-  if (samples <= 0)
-    samples = 1;
-
-  int avg = 0;
-  for (int i=0; i<samples; i++)
-    avg += aio->read();
-
-  return (avg / samples);
-}
diff --git a/src/cwlsxxa/cwlsxxa.hpp b/src/cwlsxxa/cwlsxxa.hpp
deleted file mode 100644
index 2741901..0000000
--- a/src/cwlsxxa/cwlsxxa.hpp
+++ /dev/null
@@ -1,194 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2016 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#pragma once
-
-#include <string>
-#include <iostream>
-
-#include <mraa/aio.hpp>
-
-// Unlikey to be changable without external circuitry (voltage divider)
-#define CWLSXXA_DEFAULT_AREF 5.0
-
-namespace upm {
-    /**
-     * @brief Veris CWLSXXA CO2 Sensors
-     * @defgroup cwlsxxa libupm-cwlsxxa
-     * @ingroup veris analog temp gaseous
-     */
-
-    /**
-     * @library cwlsxxa
-     * @sensor cwlsxxa
-     * @comname CO2/temperature/humidity Transmitter
-     * @type temp gaseous
-     * @man veris
-     * @con analog
-     * @web http://www.veris.com/Item/CWLSHTA.aspx
-     *
-     * @brief API for the Veris CWLSXXA CO2 Sensor Family
-     *
-     * The driver was developed using the CWLSHTA CO2 Gas sensor.  The
-     * 'T' variant supports a temperature transmitter, and the 'H'
-     * variant supports a humidity sensor.  All 3 signals are provided
-     * by the device as analog 0-5Vdc, 0-10Vdc, or 4-20ma loop current
-     * outputs.  For devices supporting temperature, the valid
-     * temperature range is 10C to 50C.  The humidity ranges from 0%
-     * to 100% (non-condensing).  The CO2 sensor ranges from 0 to 2000
-     * ppm.
-     *
-     * This driver was developed using the 5Vdc outputs and the 4-20ma
-     * outputs.  For voltage outputs, your MCU must be configured for
-     * 5V operation.  In addition, you must configure the sensor (via
-     * it's configuration switches) to output 0-5VDC only.  Using any
-     * other analog reference voltage will require the appropriate
-     * external circuitry (such as a voltage divider) in order to
-     * interface safely with your MCU.
-     *
-     * In addition, the sensor can be configured for 4-20ma usage, by
-     * specifying the correct receiver resistance (in ohms) in the
-     * constructor.  This sensor was tested with a Cooking Hacks
-     * (Libelium) 4-channel 4-20ma Arduino interface shield.  For this
-     * interface, the receiver resistance was specified as 165.0 ohms.
-     *
-     * For devices which do not support temperature, use '-1' as the
-     * temperature pin number in the object constructor.  If
-     * temperature measurement is disabled, getTemperature() will always
-     * return 0C/32F.
-     *
-     * For devices which do not support humidity, use '-1' as the
-     * temperature pin number in the object constructor.  If
-     * humidity measurement is disabled, getHumidity() will always
-     * return 0.
-     *
-     * @snippet cwlsxxa.cxx Interesting
-     */
-
-  class CWLSXXA {
-  public:
-
-    /**
-     * CWLSXXA object constructor
-     *
-     * @param gPin Analog pin to use for the CO2 measurement
-     * @param hPin Analog pin to use for the humidity measurement.  If
-     * your device does not support humidity, use -1 as the value so
-     * that humidity will not be queried and an analog pin won't be
-     * wasted.
-     * @param tPin Analog pin to use for temperature.  If your device
-     * does not support temperature, use -1 as the value so that
-     * temperature will not be queried and an analog pin won't be
-     * wasted.
-     * @param rResistor The receiver resistance in ohms, when using a
-     * 4-20ma current loop interface.  When specified, this value will
-     * be used in computing the current based on the voltage read when
-     * scaling the return values.  Default is 0.0, for standard
-     * scaling based on voltage output rather than current (4-20ma
-     * mode).
-     * @param aref The analog reference voltage, default 5.0
-     */
-    CWLSXXA(int gPin, int hPin, int tPin, float rResistor=0.0,
-            float aref=CWLSXXA_DEFAULT_AREF);
-
-    /**
-     * CWLSXXA object destructor
-     */
-    ~CWLSXXA();
-
-    /**
-     * Read current values from the sensor and update internal stored
-     * values.  This method must be called prior to querying any
-     * values, such as CO2, temperature, or humidity.
-     */
-    void update();
-
-    /**
-     * Get the current temperature.  update() must have been called
-     * prior to calling this method.  If temperature measurement was
-     * disabled (by passing -1 as the temperature pin in the
-     * constructor) then this function will always return 0C/32F.
-     *
-     * @param fahrenheit true to return the temperature in degrees
-     * fahrenheit, false to return the temperature in degrees celsius.
-     * The default is false (degrees Celsius).
-     * @return The last temperature reading in Celsius or Fahrenheit
-     */
-    float getTemperature(bool fahrenheit=false);
-
-    /**
-     * Get the current relative humidity.  update() must have been called
-     * prior to calling this method. If humidity measurement was
-     * disabled (by passing -1 as the te pin in the
-     * constructor) then this function will always return 0.
-     *
-     * @return The last humidity reading
-     */
-    float getHumidity();
-
-    /**
-     * Get the current CO2 concentration in Parts Per Million (PPM).
-     * update() must have been called prior to calling this method.
-     *
-     * @return The last CO2 reading
-     */
-    float getCO2();
-
-
-  protected:
-    // CO2 reporting is always supported
-    mraa::Aio m_aioCO2;
-
-    // temperature and humidity are optional features of this transmitter
-    mraa::Aio *m_aioHum;
-    mraa::Aio *m_aioTemp;
-
-
-  private:
-    /* Disable implicit copy and assignment operators */
-    CWLSXXA(const CWLSXXA&) = delete;
-    CWLSXXA &operator=(const CWLSXXA&) = delete;
-
-    float m_aref;
-    float m_rResistor;
-    int m_aResTemp;
-    int m_aResHum;
-    int m_aResCO2;
-
-    // does this sensor support temperature and/or humidity reporting?
-    bool m_hasTemp;
-    bool m_hasHum;
-
-    // in Celsius
-    float m_temperature;
-
-    float m_humidity;
-
-    // in PPM
-    float m_co2;
-
-    int average(mraa::Aio *aio, int samples);
-  };
-}
-
-
diff --git a/src/cwlsxxa/cwlsxxa.i b/src/cwlsxxa/cwlsxxa.i
deleted file mode 100644
index f233e3c..0000000
--- a/src/cwlsxxa/cwlsxxa.i
+++ /dev/null
@@ -1,14 +0,0 @@
-%include "../common_top.i"
-
-/* BEGIN Java syntax  ------------------------------------------------------- */
-#ifdef SWIGJAVA
-JAVA_JNI_LOADLIBRARY(javaupm_cwlsxxa)
-#endif
-/* END Java syntax */
-
-/* BEGIN Common SWIG syntax ------------------------------------------------- */
-%{
-#include "cwlsxxa.hpp"
-%}
-%include "cwlsxxa.hpp"
-/* END Common SWIG syntax */
diff --git a/src/cwlsxxa/cwlsxxa.json b/src/cwlsxxa/cwlsxxa.json
deleted file mode 100644
index 9784ccf..0000000
--- a/src/cwlsxxa/cwlsxxa.json
+++ /dev/null
@@ -1,59 +0,0 @@
-{
-    "Library": "cwlsxxa",
-    "Description": "API for the Veris CWLSXXA CO2 Sensor Family",
-    "Sensor Class":
-    {
-        "CWLXSSA":
-        {
-            "Name": "Veris CWLSXXA CO2 Sensor",
-            "Description": "The driver was developed using the CWLSHTA CO2 Gas sensor.  The 'T' variant supports a temperature transmitter, and the 'H' variant supports a humidity sensor.  All 3 signals are provided by the device as analog 0-5Vdc, 0-10Vdc, or 4-20ma loop current outputs.  For devices supporting temperature, the valid temperature range is 10C to 50C.  The humidity ranges from 0% to 100% (non-condensing).  The CO2 sensor ranges from 0 to 2000 ppm. This driver was developed using the 5Vdc outputs and the 4-20ma outputs.  For voltage outputs, your MCU must be configured for 5V operation.  In addition, you must configure the sensor (via it's configuration switches) to output 0-5VDC only.  Using any other analog reference voltage will require the appropriate external circuitry (such as a voltage divider) in order to interface safely with your MCU. In addition, the sensor can be configured for 4-20ma usage, by specifying the correct receiver resistance (in ohms) in the constructor.  This sensor was tested with a Cooking Hacks (Libelium) 4-channel 4-20ma Arduino interface shield.  For this interface, the receiver resistance was specified as 165.0 ohms. For devices which do not support temperature, use '-1' as the temperature pin number in the object constructor.  If temperature measurement is disabled, getTemperature() will always return 0C/32F. For devices which do not support humidity, use '-1' as the temperature pin number in the object constructor.  If humidity measurement is disabled, getHumidity() will always return 0.",
-            "Aliases": ["cwlsxxa"],
-            "Categories": ["temp", "gaseous"],
-            "Connections": ["analog"],
-            "Project Type": ["industrial"],
-            "Manufacturers": ["veris"],
-            "Kits": [],
-            "Examples":
-            {
-                "Java": ["CWLSXXA_Example.java"],
-                "Python": ["cwlsxxa.py"],
-                "Node.js": ["cwlsxxa.js"],
-                "C++": ["cwlsxxa.cxx"],
-                "C": []
-            },
-            "Specifications":
-            {
-                "Vsource (DC)": {"unit": "VDC", "low": 20, "high": 30},
-                "Vsource (AC)": {"unit": "VAC", "typ": 24},
-
-                "CO2 Measurement Range": {"unit": "ppm", "low": 0, "high": 5000},
-                "CO2 Accuracy": {"unit": "ppm ±", "typ": 30},
-                "CO2 Repeatability": {"unit": "ppm ±", "typ": 20},
-                "CO2 Response Time": {"unit": "s", "max": 60},
-
-                "RH Measurement Range": {"unit": "%", "low": 0, "high": 100},
-                "RH Operating Temperature Range": {"unit": "degC", "low": 10, "high": 35},
-                "RH Accuracy": {"unit": "%", "typ": 2},
-                "RH Stability": {"unit": "%", "typ": 1},
-
-                "Temperature Accuracy": {"unit": "degC", "typ": 0.5},
-                "Temperature Resolution": {"unit": "degC", "typ": 0.1},
-                "Temperature Range": {"unit": "degC", "low": 10, "high": 35}
-            },
-            "Platforms":
-            {
-                "Intel Joule Module":
-                {
-                    "Notes": ["Requires pull-up resistors with carrier board"],
-                    "Images": [""]
-                }
-            },
-            "Urls" :
-            {
-                "Product Pages": ["http://www.veris.com/Item/CWLSHTA.aspx"],
-                "Datasheets": ["http://www.veris.com/docs/Datasheets/CDL_CDW_d0117.pdf"],
-                "Schematics": []
-            }
-        }
-    }
-}
diff --git a/src/dfrec/CMakeLists.txt b/src/dfrec/CMakeLists.txt
deleted file mode 100644
index 54d55c2..0000000
--- a/src/dfrec/CMakeLists.txt
+++ /dev/null
@@ -1,14 +0,0 @@
-if (MRAA_OW_FOUND)
-    upm_mixed_module_init (NAME dfrec
-        DESCRIPTION "Analog Electrical Conductivity (EC) Sensor"
-        C_HDR dfrec.h
-        C_SRC dfrec.c
-        CPP_HDR dfrec.hpp
-        CPP_SRC dfrec.cxx
-        FTI_SRC dfrec_fti.c
-        CPP_WRAPS_C
-        REQUIRES ds18b20 mraa utilities-c)
-    # make sure the C library has the appropriate dependency on the UPM
-    # DS18B20 C library
-    target_link_libraries(${libnamec} ds18b20-c)
-endif (MRAA_OW_FOUND)
diff --git a/src/dfrec/dfrec.c b/src/dfrec/dfrec.c
deleted file mode 100644
index fd73e33..0000000
--- a/src/dfrec/dfrec.c
+++ /dev/null
@@ -1,286 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2016 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <string.h>
-#include <assert.h>
-
-#include "dfrec.h"
-
-#include "upm_utilities.h"
-
-#define DFREC_NUM_SAMPLES 10
-
-// taken from the DFRobot example code
-#define TEMPERATURE_COEFF (1.0 + 0.0185)
-
-static float average(const dfrec_context dev, int samples)
-{
-  int sum = 0;
-
-  if (samples < 1)
-    samples = 1;
-
-  int i;
-  for (i=0; i< samples; i++)
-    {
-      int j = mraa_aio_read(dev->aio);
-      if (j < 0)
-        {
-          printf("%s: mraa_aio_read() failed.\n", __FUNCTION__);
-          return -1.0;
-        }
-      sum += j;
-      upm_delay_ms(20);
-    }
-
-  return (float)(sum / samples);
-}
-
-dfrec_context dfrec_init(unsigned int apin, unsigned int uart_ow,
-                         unsigned int device_idx, float a_ref)
-{
-  // make sure MRAA is initialized
-  int mraa_rv;
-  if ((mraa_rv = mraa_init()) != MRAA_SUCCESS)
-  {
-      printf("%s: mraa_init() failed (%d).\n", __FUNCTION__, mraa_rv);
-      return NULL;
-  }
-
-  dfrec_context dev =
-    (dfrec_context)malloc(sizeof(struct _dfrec_context));
-
-  if (!dev)
-    return NULL;
-
-  // zero out context
-  memset((void *)dev, 0, sizeof(struct _dfrec_context));
-
-  dev->aio = NULL;
-  dev->ds18b20 = NULL;
-  dev->device_idx = device_idx;
-
-  dev->a_ref = a_ref;
-
-  dev->offset = 0.0;
-  dev->scale = 1.0;
-
-  // init the defaults based on the DFRobot code example
-  dev->thres_min = 150;
-  dev->thres_max = 3300;
-
-  dev->thres_1 = 448;
-  dev->scale_1 = 6.84;
-  dev->offset_1 = -64.32;
-
-  dev->thres_2 = 1457;
-  dev->scale_2 = 6.98;
-  dev->offset_2 = -127;
-
-  dev->scale_3 = 5.3;
-  dev->offset_3 = 2278;
-
-  // initialize the AIO context
-
-  if (!(dev->aio = mraa_aio_init(apin)))
-    {
-      printf("%s: mraa_aio_init() failed.\n", __FUNCTION__);
-      dfrec_close(dev);
-      return NULL;
-    }
-
-  // set our analog resolution
-  dev->a_res = (float)(1 << mraa_aio_get_bit(dev->aio)) - 1;
-
-  // inistialize our ds18b20 context
-  if (!(dev->ds18b20 = ds18b20_init(uart_ow)))
-    {
-      printf("%s: ds18b20_init() failed.\n", __FUNCTION__);
-      dfrec_close(dev);
-      return NULL;
-    }
-
-  // make sure the device index exists...
-  if (dev->device_idx >= ds18b20_devices_found(dev->ds18b20))
-    {
-      printf("%s: ds18b20 device index %d does not exist. Max index is %d\n",
-             __FUNCTION__, dev->device_idx,
-             ds18b20_devices_found(dev->ds18b20) - 1);
-      dfrec_close(dev);
-      return NULL;
-    }
-
-  return dev;
-}
-
-void dfrec_close(dfrec_context dev)
-{
-  assert(dev != NULL);
-
-  if (dev->aio)
-    mraa_aio_close(dev->aio);
-
-  if (dev->ds18b20)
-    ds18b20_close(dev->ds18b20);
-
-  free(dev);
-}
-
-void dfrec_set_offset(const dfrec_context dev, float offset)
-{
-  assert(dev != NULL);
-
-  dev->offset = offset;
-}
-
-void dfrec_set_scale(const dfrec_context dev, float scale)
-{
-  assert(dev != NULL);
-
-  dev->scale = scale;
-}
-
-upm_result_t dfrec_update(const dfrec_context dev)
-{
-  assert(dev != NULL);
-
-  // update temperature
-  ds18b20_update(dev->ds18b20, dev->device_idx);
-  dev->temperature = ds18b20_get_temperature(dev->ds18b20, dev->device_idx);
-
-  float sample = average(dev, DFREC_NUM_SAMPLES);
-
-  if (sample == -1.0)
-    return UPM_ERROR_OPERATION_FAILED;
-
-  dev->normalized = sample / dev->a_res;
-  dev->volts = dev->normalized * dev->a_ref;
-
-  float mVolts = dev->volts * 1000.0;
-  float tempCoefficient = TEMPERATURE_COEFF * (dev->temperature - 25.0);
-  float voltageCoefficient = mVolts / tempCoefficient;
-
-  if (voltageCoefficient < dev->thres_min)
-    {
-      printf("%s: Not in solution (voltageCoefficient %f < %f).\n",
-             __FUNCTION__, voltageCoefficient, dev->thres_min);
-      dev->ec = 0.0;
-      return UPM_ERROR_OUT_OF_RANGE;
-    }
-  else if (voltageCoefficient > dev->thres_max)
-    {
-      printf("%s: Out of range (voltageCoefficient %f > %f).\n",
-             __FUNCTION__, voltageCoefficient, dev->thres_max);
-      dev->ec = 0.0;
-      return UPM_ERROR_OUT_OF_RANGE;
-    }
-  else
-    {
-      if (voltageCoefficient <= dev->thres_1)
-        {
-          // 1ms/cm<EC<=3ms/cm
-          dev->ec = dev->scale_1 * voltageCoefficient + dev->offset_1;
-        }
-      else if (voltageCoefficient <= dev->thres_2)
-        {
-          // 3ms/cm<EC<=10ms/cm
-          dev->ec = dev->scale_2 * voltageCoefficient + dev->offset_2;
-        }
-      else
-        {
-          // 10ms/cm<EC<20ms/cm
-          dev->ec = dev->scale_3 * voltageCoefficient + dev->offset_3;
-        }
-
-      // convert us/cm to ms/cm
-      dev->ec /= 1000.0;
-    }
-
-  return UPM_SUCCESS;
-}
-
-float dfrec_get_ec(const dfrec_context dev)
-{
-  assert(dev != NULL);
-
-  return dev->ec * dev->scale + (dev->offset * dev->scale);
-}
-
-float dfrec_get_temperature(const dfrec_context dev)
-{
-  assert(dev != NULL);
-
-  return dev->temperature;
-}
-
-float dfrec_get_volts(const dfrec_context dev)
-{
-  assert(dev != NULL);
-
-  return dev->volts;
-}
-
-float dfrec_get_normalized(const dfrec_context dev)
-{
-  assert(dev != NULL);
-
-  return dev->normalized;
-}
-
-void dfrec_set_threshold_min_max(const dfrec_context dev, float min,
-                                 float max)
-{
-  assert(dev != NULL);
-
-  dev->thres_min = min;
-  dev->thres_max = max;
-}
-
-void dfrec_set_threshold_1(const dfrec_context dev, float thres,
-                           float scale, float offset)
-{
-  assert(dev != NULL);
-
-  dev->thres_1 = thres;
-  dev->scale_1 = scale;
-  dev->offset_1 = scale;
-}
-
-void dfrec_set_threshold_2(const dfrec_context dev, float thres,
-                           float scale, float offset)
-{
-  assert(dev != NULL);
-
-  dev->thres_2 = thres;
-  dev->scale_2 = scale;
-  dev->offset_2 = scale;
-}
-
-void dfrec_set_threshold_3(const dfrec_context dev, float scale, float offset)
-{
-  assert(dev != NULL);
-
-  dev->scale_3 = scale;
-  dev->offset_3 = scale;
-}
diff --git a/src/dfrec/dfrec.cxx b/src/dfrec/dfrec.cxx
deleted file mode 100644
index 1c89962..0000000
--- a/src/dfrec/dfrec.cxx
+++ /dev/null
@@ -1,109 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2016 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <iostream>
-#include <string>
-#include <stdexcept>
-
-#include "dfrec.hpp"
-
-using namespace upm;
-using namespace std;
-
-DFREC::DFREC(unsigned int apin, unsigned int uart_ow,
-             unsigned int device_idx,
-             float a_ref) :
-  m_dfrec(dfrec_init(apin, uart_ow, device_idx, a_ref))
-{
-  if (!m_dfrec)
-    throw std::runtime_error(string(__FUNCTION__)
-                             + ": dfrec_init() failed");
-}
-
-DFREC::~DFREC()
-{
-  dfrec_close(m_dfrec);
-}
-void DFREC::update()
-{
-  upm_result_t rv = dfrec_update(m_dfrec);
-
-  // we only want to throw on "real" fatal errors
-  if (!(rv == UPM_ERROR_OUT_OF_RANGE || rv == UPM_SUCCESS))
-    {
-      throw std::runtime_error(string(__FUNCTION__)
-                               + ": dfrec_update() failed with UPM error "
-                               + std::to_string(int(rv)) );
-    }
-}
-
-void DFREC::setOffset(float offset)
-{
-  dfrec_set_offset(m_dfrec, offset);
-}
-
-void DFREC::setScale(float scale)
-{
-  dfrec_set_scale(m_dfrec, scale);
-}
-
-float DFREC::getEC()
-{
-  return dfrec_get_ec(m_dfrec);
-}
-
-float DFREC::getVolts()
-{
-  return dfrec_get_volts(m_dfrec);
-}
-
-float DFREC::getNormalized()
-{
-  return dfrec_get_normalized(m_dfrec);
-}
-
-float DFREC::getTemperature()
-{
-  return dfrec_get_temperature(m_dfrec);
-}
-
-void DFREC::setThresholdMinMax(float min, float max)
-{
-  dfrec_set_threshold_min_max(m_dfrec, min, max);
-}
-
-void DFREC::setThreshold1(float thres, float scale, float offset)
-{
-  dfrec_set_threshold_1(m_dfrec, thres, scale, offset);
-}
-
-void DFREC::setThreshold2(float thres, float scale, float offset)
-{
-  dfrec_set_threshold_2(m_dfrec, thres, scale, offset);
-}
-
-void DFREC::setThreshold3(float scale, float offset)
-{
-  dfrec_set_threshold_3(m_dfrec, scale, offset);
-}
diff --git a/src/dfrec/dfrec.h b/src/dfrec/dfrec.h
deleted file mode 100644
index 25dc57e..0000000
--- a/src/dfrec/dfrec.h
+++ /dev/null
@@ -1,226 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2016 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#pragma once
-
-#include <stdint.h>
-#include "upm.h"
-#include "mraa/aio.h"
-
-#include "ds18b20.h"
-
-#ifdef __cplusplus
-extern "C" {
-#endif
-
-  /**
-   * @file dfrec.h
-   * @library dfrec
-   * @brief C API for the DFRobot EC Meter
-   *
-   * @include dfrec.c
-   */
-
-  /**
-   * Device context
-   */
-  typedef struct _dfrec_context {
-    mraa_aio_context    aio;
-
-    // ds18b20 context (for temperature measurement
-    ds18b20_context     ds18b20;
-    unsigned int        device_idx;
-
-    // analog ADC resolution
-    float               a_res;
-
-    // analog reference voltage
-    float               a_ref;
-
-    // for external offset and scaling of the results
-    float               offset;
-    float               scale;
-
-    // volts
-    float               volts;
-
-    // normalized ADC
-    float               normalized;
-
-    // the EC value
-    float               ec;
-
-    // EC threshold min/max (mV)
-    float               thres_min; // 150
-    float               thres_max; // 3300
-
-    // the temperature read from the ds18b29
-    float               temperature;
-
-    // thresholds, scales, and offsets taken from the DFRobot code
-    float               thres_1;   // 448
-    float               scale_1;   // 6.84
-    float               offset_1;  // -64.32
-
-    float               thres_2;   // 1457
-    float               scale_2;   // 6.98
-    float               offset_2;  // -127.0
-
-    float               scale_3;   // 5.3
-    float               offset_3;  // +2278.0
-  } *dfrec_context;
-
-  /**
-   * DFREC Initializer
-   *
-   * @param apin Analog pin to use.
-   * @param uart_ow The UART that the ds10b20 temperature sensor is
-   * connected to.
-   * @param device_idx The device index of the ds18b20 sensor to use.
-   * If you only have 1 ds18b20 sensor on your DS one wire bus, you
-   * would pass 0 here.
-   * @param a_ref The analog reference voltage in use
-   * @return dfrec context
-   */
-  dfrec_context dfrec_init(unsigned int apin, unsigned int uart_ow,
-                           unsigned int device_idx,
-                           float a_ref);
-
-  /**
-   * DFREC sensor close function
-   */
-  void dfrec_close(dfrec_context dev);
-
-  /**
-   * Read the sensor status and update internal state.  dfrec_update()
-   * must have been called before calling any of the other
-   * dfrec_get*() functions
-   *
-   * @param dev sensor context
-   * @return UPM result
-   */
-  upm_result_t dfrec_update(const dfrec_context dev);
-
-  /**
-   * Set sensor offset.  This offset is applied to the EC value
-   * before scaling.  Default is 0.0.
-   *
-   * @param dev sensor context pointer
-   * @param offset Offset to apply to the computed EC value
-   */
-  void dfrec_set_offset(const dfrec_context dev, float offset);
-
-  /**
-   * Set sensor scale.  The EC return value is scaled by this value
-   * before the offset is applied.  Default is 1.0.
-   *
-   * @param dev sensor context pointer
-   * @param scale The scale to apply to the computed EC value
-   */
-  void dfrec_set_scale(const dfrec_context dev, float scale);
-
-  /**
-   * Get computed EC (in ms/cm) value from the sensor. dfrec_update()
-   * must have been called prior to calling this function.
-   *
-   * @param dev sensor context pointer
-   * @return EC value in millivolts
-   */
-  float dfrec_get_ec(const dfrec_context dev);
-
-  /**
-   * Get the raw measured volts from the sensor. dfrec_update() must
-   * have been called prior to calling this function.
-   *
-   * @param dev sensor context pointer
-   * @return Voltage read from the sensor
-   */
-  float dfrec_get_volts(const dfrec_context dev);
-
-  /**
-   * Get the measured temperature from the temperature sensor.  The
-   * return value will be in Celsius.
-   *
-   * @param dev sensor context pointer
-   * @return Temperature read from the sensor in Celsius.
-   */
-  float dfrec_get_temperature(const dfrec_context dev);
-
-  /**
-   * Get the raw normalized ADC values from the sensor.
-   * dfrec_update() must have been called prior to calling this
-   * function.
-   *
-   * @param dev sensor context pointer
-   * @return Normalized ADC value read from the sensor
-   */
-  float dfrec_get_normalized(const dfrec_context dev);
-
-  /**
-   * Set the global threshold min and max values.  See the DFRobot
-   * wiki for details.
-   *
-   * @param dev sensor context pointer
-   * @param min Minimum threshold to be valid.  Default 150.
-   * @param max Maximum threshold to be valid.  Default 3300.
-   */
-  void dfrec_set_threshold_min_max(const dfrec_context dev, float min,
-                                   float max);
-
-  /**
-   * Set the threshold 1 values.  See the DFRobot wiki for details.
-   *
-   * @param dev sensor context pointer
-   * @param thres Threshold maximum for value section 1.  Default 448.
-   * @param scale Scale for value section 1.  Default 6.64.
-   * @param offset Offset for value section 1.  Default -64.32.
-   */
-  void dfrec_set_threshold_1(const dfrec_context dev, float thres,
-                             float scale, float offset);
-
-  /**
-   * Set the threshold 2 values.  See the DFRobot wiki for details.
-   *
-   * @param dev sensor context pointer
-   * @param thres Threshold maximum for value section 2.  Default 1457.
-   * @param scale Scale for value section 2.  Default 6.98.
-   * @param offset Offset for value section 2.  Default -127.0.
-   */
-  void dfrec_set_threshold_2(const dfrec_context dev, float thres,
-                             float scale, float offset);
-
-  /**
-   * Set the threshold 3 values.  See the DFRobot wiki for details.
-   *
-   * @param dev sensor context pointer
-   * @param scale Scale for value section 3.  Default 5.3.
-   * @param offset Offset for value section 3.  Default 2278.
-   */
-  void dfrec_set_threshold_3(const dfrec_context dev, float scale,
-                             float offset);
-
-
-#ifdef __cplusplus
-}
-#endif
diff --git a/src/dfrec/dfrec.hpp b/src/dfrec/dfrec.hpp
deleted file mode 100644
index c62e935..0000000
--- a/src/dfrec/dfrec.hpp
+++ /dev/null
@@ -1,191 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2016 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#pragma once
-
-#include <string>
-#include <iostream>
-
-#include <stdlib.h>
-#include <unistd.h>
-#include <string.h>
-
-#include "dfrec.h"
-
-namespace upm {
-  /**
-   * @brief DFRobot EC Meter
-   * @defgroup dfrec libupm-dfrec
-   * @ingroup dfrobot analog uart liquid
-   */
-
-  /**
-   * @library dfrec
-   * @sensor dfrec
-   * @comname Analog Electrical Conductivity (EC) Sensor
-   * @type liquid
-   * @man dfrobot
-   * @con analog uart
-   * @web https://www.dfrobot.com/index.php?route=product/product&product_id=1123&search=DFR0300&description=true#.Vx49p-_n-M8
-   *
-   * @brief DFRobot EC Meter
-   *
-   * The driver was tested with the DFRobot EC Analog Sensor.
-   *
-   * This device measure the electrical conductivity of an aqueous
-   * solution.  The included probe is a K=1 model.
-   *
-   * Calibration is somewhat complicated - see the DFRobot wiki for
-   * instructions on calibration.  Functions are provided to supply
-   * the appropriate values.  By default, the values used in the
-   * DFRobot arduino example are used.
-   *
-   * wiki: https://www.dfrobot.com/wiki/index.php/Analog_EC_Meter_SKU:DFR0300
-   *
-   * @snippet dfrec.cxx Interesting
-   */
-
-  class DFREC {
-  public:
-
-    /**
-     * DFREC object constructor
-     *
-     * @param apin Analog pin to use.
-     * @param uart_ow The UART that the ds10b20 temperature sensor is
-     * connected to.
-     * @param device_idx The device index of the ds18b20 sensor to use.
-     * If you only have 1 ds18b20 sensor on your DS one wire bus, you
-     * would pass 0 here.
-     * @param a_ref The analog reference voltage in use
-     * @return dfrec context
-     */
-    DFREC(unsigned int apin, unsigned int uart_ow,
-                           unsigned int device_idx,
-                           float a_ref);
-
-    /**
-     * DFREC object destructor
-     */
-    ~DFREC();
-
-    /**
-     * Read the sensor status and update internal state.
-     * dfrec_update() must have been called before calling any of the
-     * other get*() functions.
-     */
-    void update();
-
-    /**
-     * Set sensor offset.  This offset is applied to the return EC
-     * value before scaling.  Default is 0.0.
-     *
-     * @param offset The offset to apply.
-     */
-    void setOffset(float offset);
-
-    /**
-     * Set sensor scale.  The return EC value is scaled by this value
-     * before the offset is applied.  Default is 1.0.
-     *
-     * @param scale The scale to apply.
-     */
-    void setScale(float scale);
-
-    /**
-     * Get computed EC (ms/cm) value from the sensor. update() must
-     * have been called prior to calling this function.
-     *
-     * @return EC value in ms/cm.
-     */
-    float getEC();
-
-    /**
-     * Get the measured volts from the sensor. update() must have been
-     * called prior to calling this function.
-     *
-     * @return The voltage measurement.
-     */
-    float getVolts();
-
-    /**
-     * Get the normalized ADC value from the sensor.  update() must have
-     * been called prior to calling this function.
-     *
-     * @return The normalized ADC value.
-     */
-    float getNormalized();
-
-    /**
-     * Get the measured temperature from the temperature sensor.  The
-     * return value will be in Celsius.
-     *
-     * @return temperature read from the sensor in Celsius.
-     */
-    float getTemperature();
-
-    /**
-     * Set the global threshold min and max values.  See the DFRobot
-     * wiki for details.
-     *
-     * @param min Minimum threshold to be valid.  Default 150.
-     * @param max Maximum threshold to be valid.  Default 3300.
-     */
-    void setThresholdMinMax(float min, float max);
-
-    /**
-     * Set the threshold 1 values.  See the DFRobot wiki for details.
-     *
-     * @param thres Threshold maximum for value section 1.  Default 448.
-     * @param scale Scale for value section 1.  Default 6.64.
-     * @param offset Offset for value section 1.  Default -64.32.
-     */
-    void setThreshold1(float thres, float scale, float offset);
-
-    /**
-     * Set the threshold 2 values.  See the DFRobot wiki for details.
-     *
-     * @param thres Threshold maximum for value section 2.  Default 1457.
-     * @param scale Scale for value section 2.  Default 6.98.
-     * @param offset Offset for value section 2.  Default -127.0.
-     */
-    void setThreshold2(float thres, float scale, float offset);
-
-    /**
-     * Set the threshold 3 values.  See the DFRobot wiki for details.
-     *
-     * @param scale Scale for value section 3.  Default 5.3.
-     * @param offset Offset for value section 3.  Default 2278.
-     */
-    void setThreshold3(float scale, float offset);
-
-  protected:
-    // dfrec device context
-    dfrec_context m_dfrec;
-
-  private:
-    /* Disable implicit copy and assignment operators */
-    DFREC(const DFREC&) = delete;
-    DFREC &operator=(const DFREC&) = delete;
-  };
-}
diff --git a/src/dfrec/dfrec.i b/src/dfrec/dfrec.i
deleted file mode 100644
index 0af3b50..0000000
--- a/src/dfrec/dfrec.i
+++ /dev/null
@@ -1,17 +0,0 @@
-%include "../common_top.i"
-
-/* BEGIN Java syntax  ------------------------------------------------------- */
-#ifdef SWIGJAVA
-JAVA_JNI_LOADLIBRARY(javaupm_dfrec)
-#endif
-/* END Java syntax */
-
-/* BEGIN Common SWIG syntax ------------------------------------------------- */
-%pointer_functions(int, intp);
-%pointer_functions(float, floatp);
-
-%{
-#include "dfrec.hpp"
-%}
-%include "dfrec.hpp"
-/* END Common SWIG syntax */
diff --git a/src/dfrec/dfrec.json b/src/dfrec/dfrec.json
deleted file mode 100644
index 78e86e1..0000000
--- a/src/dfrec/dfrec.json
+++ /dev/null
@@ -1,39 +0,0 @@
-{
-    "Library": "dfrec",
-    "Description": "DFRobot EC Meter Library",
-    "Sensor Class":
-    {
-        "DFREC":
-        {
-            "Name": "Analog Electrical Conductivity (EC) Sensor",
-            "Description": "The driver was tested with the DFRobot EC Analog Sensor. This device measure the electrical conductivity of an aqueous solution.  The included probe is a K=1 model. Calibration is somewhat complicated - see the DFRobot wiki for instructions on calibration.  Functions are provided to supply the appropriate values.  By default, the values used in the DFRobot arduino example are used.",
-            "Aliases": ["dfrec"],
-            "Categories": ["ec", "conductivity"],
-            "Connections": ["analog", "uart"],
-            "Project Type": ["industrial"],
-            "Manufacturers": ["dfrobot"],
-            "Kits": [],
-            "Examples":
-            {
-                "Java": ["DFREC_Example.java"],
-                "Python": ["dfrec.py"],
-                "Node.js": ["dfrec.js"],
-                "C++": ["dfrec.cxx"],
-                "C": ["dfrec.c"]
-            },
-            "Specifications":
-            {
-                "Operating Voltage": {"unit": "V", "Typ": 5},
-                "Measurement Range": {"unit": "mS/cm", "low": 1, "high": 20},
-                "Operating Temperature": {"unit": "degC", "low": 5, "high": 40}
-
-            },
-            "Urls" :
-            {
-                "Product Pages": ["https://www.dfrobot.com/product-1123.html"],
-                "Datasheets": [""],
-                "Schematics": ["http://image.dfrobot.com/image/data/DFR0300/DFR0300_v1.0_schematic.pdf"]
-            }
-        }
-    }
-}
diff --git a/src/dfrec/dfrec_fti.c b/src/dfrec/dfrec_fti.c
deleted file mode 100644
index c1bc9d7..0000000
--- a/src/dfrec/dfrec_fti.c
+++ /dev/null
@@ -1,105 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2016 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include "dfrec.h"
-#include "upm_fti.h"
-
-/**
- * This file implements the Function Table Interface (FTI) for this sensor
- */
-
-const char upm_dfrec_name[] = "DFREC";
-const char upm_dfrec_description[] = "DFRobot Analog EC Sensor";
-const upm_protocol_t upm_dfrec_protocol[] = {UPM_ANALOG};
-const upm_sensor_t upm_dfrec_category[] = {UPM_EC};
-
-// forward declarations
-const void* upm_dfrec_get_ft(upm_sensor_t sensor_type);
-void* upm_dfrec_init_name();
-void upm_dfrec_close(void *dev);
-upm_result_t upm_dfrec_get_value(const void *dev, float *value);
-upm_result_t upm_dfrec_set_scale(const void *dev, float scale);
-upm_result_t upm_dfrec_set_offset(const void *dev, float offset);
-
-static const upm_sensor_ft ft =
-{
-    .upm_sensor_init_name = &upm_dfrec_init_name,
-    .upm_sensor_close = &upm_dfrec_close,
-};
-
-static const upm_ec_ft ecft =
-{
-    .upm_ec_set_offset = upm_dfrec_set_offset,
-    .upm_ec_set_scale = upm_dfrec_set_scale,
-    .upm_ec_get_value = upm_dfrec_get_value
-};
-
-const void* upm_dfrec_get_ft(upm_sensor_t sensor_type)
-{
-  switch(sensor_type)
-    {
-    case UPM_SENSOR:
-      return &ft;
-
-    case UPM_EC:
-      return &ecft;
-
-    default:
-      return NULL;
-    }
-}
-
-void* upm_dfrec_init_name()
-{
-    return NULL;
-}
-
-void upm_dfrec_close(void *dev)
-{
-    dfrec_close((dfrec_context)dev);
-}
-
-upm_result_t upm_dfrec_set_scale(const void *dev, float scale)
-{
-  dfrec_set_scale((dfrec_context)dev, scale);
-  return UPM_SUCCESS;
-}
-
-upm_result_t upm_dfrec_set_offset(const void *dev, float offset)
-{
-  dfrec_set_offset((dfrec_context)dev, offset);
-  return UPM_SUCCESS;
-}
-
-upm_result_t upm_dfrec_get_value(const void *dev, float *value)
-{
-  upm_result_t rv;
-
-  if ((rv = dfrec_update((dfrec_context)dev)))
-    return rv;
-
-  *value = dfrec_get_ec((dfrec_context)dev);
-
-  return UPM_SUCCESS;
-}
diff --git a/src/dfrorp/CMakeLists.txt b/src/dfrorp/CMakeLists.txt
deleted file mode 100644
index b365a51..0000000
--- a/src/dfrorp/CMakeLists.txt
+++ /dev/null
@@ -1,9 +0,0 @@
-upm_mixed_module_init (NAME dfrorp
-    DESCRIPTION "Analog Oxidation Reduction Potential (ORP) Sensor"
-    C_HDR dfrorp.h
-    C_SRC dfrorp.c
-    CPP_HDR dfrorp.hpp
-    CPP_SRC dfrorp.cxx
-    FTI_SRC dfrorp_fti.c
-    CPP_WRAPS_C
-    REQUIRES mraa utilities-c)
diff --git a/src/dfrorp/dfrorp.c b/src/dfrorp/dfrorp.c
deleted file mode 100644
index 0939efe..0000000
--- a/src/dfrorp/dfrorp.c
+++ /dev/null
@@ -1,171 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2016 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <string.h>
-#include <assert.h>
-
-#include "dfrorp.h"
-
-#include "upm_utilities.h"
-
-#define DFRORP_NUM_SAMPLES 10
-// Resistor R2 value in schematic, in KOhms
-#define DFRORP_R2 30.0
-// Resistor R3 value in schematic, in KOhms
-#define DFRORP_R3 75.0
-
-static float average(const dfrorp_context dev, int samples)
-{
-  int sum = 0;
-
-  if (samples < 1)
-    samples = 1;
-
-  int i;
-  for (i=0; i< samples; i++)
-    {
-      int j = mraa_aio_read(dev->aio);
-      if (j < 0)
-        {
-          printf("%s: mraa_aio_read() failed.\n", __FUNCTION__);
-          return -1.0;
-        }
-      sum += j;
-      upm_delay_ms(20);
-    }
-
-  return (float)(sum / samples);
-}
-
-dfrorp_context dfrorp_init(unsigned int apin, float a_ref)
-{
-  // make sure MRAA is initialized
-  int mraa_rv;
-  if ((mraa_rv = mraa_init()) != MRAA_SUCCESS)
-  {
-      printf("%s: mraa_init() failed (%d).\n", __FUNCTION__, mraa_rv);
-      return NULL;
-  }
-
-  dfrorp_context dev =
-    (dfrorp_context)malloc(sizeof(struct _dfrorp_context));
-
-  if (!dev)
-    return NULL;
-
-  // zero out context
-  memset((void *)dev, 0, sizeof(struct _dfrorp_context));
-
-  dev->aio = NULL;
-
-  dev->a_ref = a_ref;
-
-  dev->offset = 0.0;
-  dev->scale = 1.0;
-
-  // initialize the MRAA context
-
-  if (!(dev->aio = mraa_aio_init(apin)))
-    {
-      printf("%s: mraa_aio_init() failed.\n", __FUNCTION__);
-      dfrorp_close(dev);
-      return NULL;
-    }
-
-  // set our analog resolution
-  dev->a_res = (float)(1 << mraa_aio_get_bit(dev->aio)) - 1;
-
-  return dev;
-}
-
-void dfrorp_close(dfrorp_context dev)
-{
-  assert(dev != NULL);
-
-  if (dev->aio)
-    mraa_aio_close(dev->aio);
-
-  free(dev);
-}
-
-void dfrorp_set_offset(const dfrorp_context dev, float offset)
-{
-  assert(dev != NULL);
-
-  dev->offset = offset;
-}
-
-void dfrorp_set_scale(const dfrorp_context dev, float scale)
-{
-  assert(dev != NULL);
-
-  dev->scale = scale;
-}
-
-upm_result_t dfrorp_update(const dfrorp_context dev)
-{
-  assert(dev != NULL);
-
-  float sample = average(dev, DFRORP_NUM_SAMPLES);
-  if (sample == -1.0)
-    return UPM_ERROR_OPERATION_FAILED;
-
-  dev->normalized = sample / dev->a_res;
-  dev->volts = dev->normalized * dev->a_ref;
-
-  // From the DFRobot site
-  dev->orp = ( (DFRORP_R2 * dev->a_ref * 1000.0) -
-               (DFRORP_R3 * sample * dev->a_ref * 1000.0 / dev->a_res) ) /
-    DFRORP_R3 - dev->orp_cal_offset;
-
-  return UPM_SUCCESS;
-}
-
-float dfrorp_get_orp(const dfrorp_context dev)
-{
-  assert(dev != NULL);
-
-  return dev->orp * dev->scale + (dev->offset * dev->scale);
-}
-
-float dfrorp_get_volts(const dfrorp_context dev)
-{
-  assert(dev != NULL);
-
-  return dev->volts;
-}
-
-float dfrorp_get_normalized(const dfrorp_context dev)
-{
-  assert(dev != NULL);
-
-  return dev->normalized;
-}
-
-void dfrorp_set_calibration_offset(const dfrorp_context dev, float offset)
-{
-  assert(dev != NULL);
-
-  dev->orp_cal_offset = offset;
-}
diff --git a/src/dfrorp/dfrorp.cxx b/src/dfrorp/dfrorp.cxx
deleted file mode 100644
index 1eeaf38..0000000
--- a/src/dfrorp/dfrorp.cxx
+++ /dev/null
@@ -1,86 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2016 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <iostream>
-#include <stdexcept>
-
-#include "dfrorp.hpp"
-
-using namespace upm;
-using namespace std;
-
-DFRORP::DFRORP(int apin, float a_ref) :
-  m_dfrorp(dfrorp_init(apin, a_ref))
-{
-  if (!m_dfrorp)
-    throw std::runtime_error(string(__FUNCTION__)
-                             + ": dfrorp_init() failed");
-}
-
-DFRORP::~DFRORP()
-{
-  dfrorp_close(m_dfrorp);
-}
-
-void DFRORP::update()
-{
-  upm_result_t rv;
-
-  if ((rv = dfrorp_update(m_dfrorp)))
-    {
-      throw std::runtime_error(string(__FUNCTION__)
-                               + ": dfrorp_update() failed with UPM error "
-                               + to_string(int(rv)) );
-    }
-}
-
-void DFRORP::setOffset(float offset)
-{
-  dfrorp_set_offset(m_dfrorp, offset);
-}
-
-void DFRORP::setScale(float scale)
-{
-  dfrorp_set_scale(m_dfrorp, scale);
-}
-
-void DFRORP::setCalibrationOffset(float offset)
-{
-  dfrorp_set_calibration_offset(m_dfrorp, offset);
-}
-
-float DFRORP::getORP()
-{
-  return dfrorp_get_orp(m_dfrorp);
-}
-
-float DFRORP::getVolts()
-{
-  return dfrorp_get_volts(m_dfrorp);
-}
-
-float DFRORP::getNormalized()
-{
-  return dfrorp_get_normalized(m_dfrorp);
-}
diff --git a/src/dfrorp/dfrorp.h b/src/dfrorp/dfrorp.h
deleted file mode 100644
index b98f589..0000000
--- a/src/dfrorp/dfrorp.h
+++ /dev/null
@@ -1,166 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2016 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#pragma once
-
-#include <stdint.h>
-#include "upm.h"
-#include "mraa/aio.h"
-#include "mraa/gpio.h"
-
-#ifdef __cplusplus
-extern "C" {
-#endif
-
-  /**
-   * @file dfrorp.h
-   * @library dfrorp
-   * @brief C API for the DFRobot ORP (Oxidation/Reduction Potential) Sensor
-   *
-   * @include dfrorp.c
-   */
-
-  /**
-   * Device context
-   */
-  typedef struct _dfrorp_context {
-    mraa_aio_context    aio;
-
-    // analog ADC resolution
-    float               a_res;
-
-    // analog reference voltage
-    float               a_ref;
-
-    // for external offset and scaling of the results
-    float               offset;
-    float               scale;
-
-    // For sensor interface board calibration
-    float               orp_cal_offset;
-
-    // our measurements
-
-    // ORP measurement (mV)
-    float               orp;
-
-    // volts
-    float               volts;
-
-    // normalized ADC
-    float               normalized;
-  } *dfrorp_context;
-
-  /**
-   * DFRORP Initializer
-   *
-   * @param apin Analog pin to use.
-   * @param a_ref The analog reference voltage in use
-   */
-  dfrorp_context dfrorp_init(unsigned int apin, float a_ref);
-
-  /**
-   * DFRORP sensor close function
-   */
-  void dfrorp_close(dfrorp_context dev);
-
-  /**
-   * Read the sensor status and update internal state.  dfrorp_update()
-   * must have been called before calling dfrorp_get_orp(),
-   * dfrorp_get_normalized(), or dfrorp_get_volts().
-   *
-   * @param dev sensor context
-   * @return UPM result
-   */
-  upm_result_t dfrorp_update(const dfrorp_context dev);
-
-  /**
-   * Set sensor offset.  This offset is applied to the ORP value
-   * before scaling.  Default is 0.0.
-   *
-   * @param dev sensor context pointer
-   * @param offset Offset to apply to the computed ORP value
-   */
-  void dfrorp_set_offset(const dfrorp_context dev, float offset);
-
-  /**
-   * Set sensor scale.  The ORP return value is scaled by this value
-   * before the offset is applied.  Default is 1.0.
-   *
-   * @param dev sensor context pointer
-   * @param scale The scale to apply to the computed ORP value
-   */
-  void dfrorp_set_scale(const dfrorp_context dev, float scale);
-
-  /**
-   * Get computed ORP (in millivolts) value from the
-   * sensor. dfrorp_update() must have been called prior to calling
-   * this function.
-   *
-   * @param dev sensor context pointer
-   * @return ORP value in millivolts
-   */
-  float dfrorp_get_orp(const dfrorp_context dev);
-
-  /**
-   * Set the calibration offset for the device.  This is
-   * determined by disconnecting the sensor probe (but leaving the
-   * sensor interface board connected).  Then run one of the examples
-   * while holding down the 'calibrate' button on the device.  Read
-   * the ORP value reported.
-   *
-   * This (low) ORP value is what you should supply to this function.
-   * Then reconnect the probe to the interface board and you should be
-   * ready to go.
-   *
-   * DO NOT press the calibrate button on the interface board while
-   * the probe is attached or you can permanently damage the probe.
-   *
-   * @param dev sensor context pointer
-   * @param offset The ORP offset obtained during calibration.
-   */
-  void dfrorp_set_calibration_offset(const dfrorp_context dev, float offset);
-
-  /**
-   * Get the raw measured volts from the sensor. dfrorp_update() must
-   * have been called prior to calling this function.
-   *
-   * @param dev sensor context pointer
-   * @return voltage read from the sensor
-   */
-  float dfrorp_get_volts(const dfrorp_context dev);
-
-  /**
-   * Get the raw normalized ADC values from the sensor.
-   * dfrorp_update() must have been called prior to calling this
-   * function.
-   *
-   * @param dev sensor context pointer
-   * @return normalized ADC value read from the sensor
-   */
-  float dfrorp_get_normalized(const dfrorp_context dev);
-
-#ifdef __cplusplus
-}
-#endif
diff --git a/src/dfrorp/dfrorp.hpp b/src/dfrorp/dfrorp.hpp
deleted file mode 100644
index d56ddba..0000000
--- a/src/dfrorp/dfrorp.hpp
+++ /dev/null
@@ -1,164 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2016 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#pragma once
-
-#include <string>
-#include <iostream>
-
-#include <stdlib.h>
-#include <unistd.h>
-#include <string.h>
-
-#include "dfrorp.h"
-
-namespace upm {
-  /**
-   * @brief DFRobot ORP (Oxidation/Reduction Potential) Sensor
-   * @defgroup dfrorp libupm-dfrorp
-   * @ingroup dfrobot analog liquid
-   */
-
-  /**
-   * @library dfrorp
-   * @sensor dfrorp
-   * @comname Analog Oxidation Reduction Potential (ORP) Sensor
-   * @type liquid
-   * @man dfrobot
-   * @con ainput
-   * @web http://www.dfrobot.com/index.php?route=product/product&path=36&product_id=1071#.V8Wywt9ytNJ
-   *
-   * @brief API for the DFRobot ORP (Oxidation/Reduction Potential) Sensor
-   *
-   * This library was tested with the DFRobot ORP (Oxidation/Reduction
-   * Potential) Sensor.
-   *
-   * To calibrate:
-   *
-   * Disconnect the sensor probe (but leave the sensor interface board
-   * connected).  Then run one of the examples while holding down the
-   * 'calibrate' button on the device.  Read the ORP value reported
-   * (it should be fairly small).
-   *
-   * This value is what you should supply to
-   * setCalibrationOffset().  Then reconnect the probe to the
-   * interface board and you should be ready to go.
-   *
-   * DO NOT press the calibrate button on the interface board while
-   * the probe is attached or you can permanently damage the probe.
-   *
-   * @snippet dfrorp.cxx Interesting
-   */
-
-  class DFRORP {
-  public:
-
-    /**
-     * DFRORP object constructor
-     *
-     * @param apin Analog pin to use
-     * @param a_ref The analog reference voltage in use.  Default 5.0.
-     */
-    DFRORP(int apin, float a_ref=5.0);
-
-    /**
-     * DFRORP object destructor
-     */
-    ~DFRORP();
-
-    /**
-     * Read the sensor status an update internal state.
-     * update() must have been called before calling
-     * getORP(), getNormalized(), or getVolts().
-     */
-    void update();
-
-    /**
-     * Set sensor offset.  This offset is applied to the return ORP
-     * value before scaling.  Default is 0.0.
-     *
-     * @param offset The offset to apply.
-     */
-    void setOffset(float offset);
-
-    /**
-     * Set sensor scale.  The return ORP value is scaled by this value
-     * before the offset is applied.  Default is 1.0.
-     *
-     * @param scale The scale to apply.
-     */
-    void setScale(float scale);
-
-    /**
-     * Get computed ORP (in millivolts) value from the
-     * sensor. update() must have been called prior to calling this
-     * function.
-     *
-     * @return ORP value in millivolts
-     */
-    float getORP();
-
-    /**
-     * Set the calibration offset for the device.  This is
-     * determined by disconnecting the sensor probe (but leaving the
-     * sensor interface board connected).  Then run one of the examples
-     * while holding down the 'calibrate' button on the device.  Read
-     * the ORP value reported.
-     *
-     * This (low) ORP value is what you should supply to this function.
-     * Then reconnect the probe to the interface board and you should be
-     * ready to go.
-     *
-     * DO NOT press the calibrate button on the interface board while
-     * the probe is attached or you can permanently damage the probe.
-     *
-     * @param offset The ORP offset obtained during calibration.
-     */
-    void setCalibrationOffset(float offset);
-
-    /**
-     * Get the measured volts from the sensor. update() must have been
-     * called prior to calling this function.
-     *
-     * @return The voltage measurement.
-     */
-    float getVolts();
-
-    /**
-     * Get the normalized ADC value from the sensor.  update() must have
-     * been called prior to calling this function.
-     *
-     * @return The normalized ADC value.
-     */
-    float getNormalized();
-
-  protected:
-    // dfrorp device context
-    dfrorp_context m_dfrorp;
-
-  private:
-    /* Disable implicit copy and assignment operators */
-    DFRORP(const DFRORP&) = delete;
-    DFRORP &operator=(const DFRORP&) = delete;
-  };
-}
diff --git a/src/dfrorp/dfrorp.i b/src/dfrorp/dfrorp.i
deleted file mode 100644
index 04000a3..0000000
--- a/src/dfrorp/dfrorp.i
+++ /dev/null
@@ -1,17 +0,0 @@
-%include "../common_top.i"
-
-/* BEGIN Java syntax  ------------------------------------------------------- */
-#ifdef SWIGJAVA
-JAVA_JNI_LOADLIBRARY(javaupm_dfrorp)
-#endif
-/* END Java syntax */
-
-/* BEGIN Common SWIG syntax ------------------------------------------------- */
-%pointer_functions(int, intp);
-%pointer_functions(float, floatp);
-
-%{
-#include "dfrorp.hpp"
-%}
-%include "dfrorp.hpp"
-/* END Common SWIG syntax */
diff --git a/src/dfrorp/dfrorp.json b/src/dfrorp/dfrorp.json
deleted file mode 100644
index 7166feb..0000000
--- a/src/dfrorp/dfrorp.json
+++ /dev/null
@@ -1,39 +0,0 @@
-{
-    "Library": "dfrorp",
-    "Description": "UPM C++ API for the DFRobot ORP (Oxidation/Reduction Potential)",
-    "Sensor Class":
-    {
-        "DFRORP":
-        {
-            "Name": "Analog Oxidation Reduction Potential (ORP) Sensor",
-            "Description": "This library was tested with the DFRobot ORP (Oxidation/Reduction Potential) Sensor. To calibrate: Disconnect the sensor probe (but leave the sensor interface board connected).  Then run one of the examples while holding down the 'calibrate' button on the device.  Read the ORP value reported (it should be fairly small). This value is what you should supply to setCalibrationOffset().  Then reconnect the probe to the interface board and you should be ready to go. DO NOT press the calibrate button on the interface board while the probe is attached or you can permanently damage the probe.",
-            "Aliases": ["dfrorp"],
-            "Categories": ["orp", "liquid"],
-            "Connections": ["analog"],
-            "Project Type": ["industrial"],
-            "Manufacturers": ["dfrobot"],
-            "Kits": [],
-            "Examples":
-            {
-                "Java": ["DFRORP_Example.java"],
-                "Python": ["dfrorp.py"],
-                "Node.js": ["dfrorp.js"],
-                "C++": ["dfrorp.cxx"],
-                "C": ["dfrorp.c"]
-            },
-            "Specifications":
-            {
-                "Operating Voltage": {"unit": "V", "Typ": 5},
-                "Measurement Range": {"unit": "V", "low": -2, "high": 2},
-                "Operating Temperature": {"unit": "degC", "low": 5, "high": 70}
-
-            },
-            "Urls" :
-            {
-                "Product Pages": ["https://www.dfrobot.com/product-1071.html"],
-                "Datasheets": ["https://www.dfrobot.com/wiki/index.php/Analog_ORP_Meter(SKU:SEN0165)"],
-                "Schematics": ["http://image.dfrobot.com/image/data/SEN0165/OPR%20meter%20V1.0%20Schematic.pdf"]
-            }
-        }
-    }
-}
diff --git a/src/dfrorp/dfrorp_fti.c b/src/dfrorp/dfrorp_fti.c
deleted file mode 100644
index be88415..0000000
--- a/src/dfrorp/dfrorp_fti.c
+++ /dev/null
@@ -1,99 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2016 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include "dfrorp.h"
-#include "upm_fti.h"
-
-/**
- * This file implements the Function Table Interface (FTI) for this sensor
- */
-
-const char upm_dfrorp_name[] = "DFRORP";
-const char upm_dfrorp_description[] = "DFRobot Analog ORP Sensor";
-const upm_protocol_t upm_dfrorp_protocol[] = {UPM_ANALOG};
-const upm_sensor_t upm_dfrorp_category[] = {UPM_ORP};
-
-// forward declarations
-const void* upm_dfrorp_get_ft(upm_sensor_t sensor_type);
-void* upm_dfrorp_init_name();
-void upm_dfrorp_close(void *dev);
-upm_result_t upm_dfrorp_get_value(const void *dev, float *value);
-upm_result_t upm_dfrorp_set_scale(const void *dev, float scale);
-upm_result_t upm_dfrorp_set_offset(const void *dev, float offset);
-
-static const upm_sensor_ft ft =
-{
-    .upm_sensor_init_name = &upm_dfrorp_init_name,
-    .upm_sensor_close = &upm_dfrorp_close,
-};
-
-static const upm_orp_ft orpft =
-{
-    .upm_orp_set_offset = upm_dfrorp_set_offset,
-    .upm_orp_set_scale = upm_dfrorp_set_scale,
-    .upm_orp_get_value = upm_dfrorp_get_value
-};
-
-const void* upm_dfrorp_get_ft(upm_sensor_t sensor_type)
-{
-  switch(sensor_type)
-    {
-    case UPM_SENSOR:
-      return &ft;
-
-    case UPM_ORP:
-      return &orpft;
-
-    default:
-      return NULL;
-    }
-}
-
-void* upm_dfrorp_init_name()
-{
-    return NULL;
-}
-
-void upm_dfrorp_close(void *dev)
-{
-    dfrorp_close((dfrorp_context)dev);
-}
-
-upm_result_t upm_dfrorp_set_scale(const void *dev, float scale)
-{
-  dfrorp_set_scale((dfrorp_context)dev, scale);
-  return UPM_SUCCESS;
-}
-
-upm_result_t upm_dfrorp_set_offset(const void *dev, float offset)
-{
-  dfrorp_set_offset((dfrorp_context)dev, offset);
-  return UPM_SUCCESS;
-}
-
-upm_result_t upm_dfrorp_get_value(const void *dev, float *value)
-{
-  *value = dfrorp_get_orp((dfrorp_context)dev);
-  return UPM_SUCCESS;
-}
diff --git a/src/dfrph/CMakeLists.txt b/src/dfrph/CMakeLists.txt
deleted file mode 100644
index 8017429..0000000
--- a/src/dfrph/CMakeLists.txt
+++ /dev/null
@@ -1,9 +0,0 @@
-upm_mixed_module_init (NAME dfrph
-    DESCRIPTION "Analog pH Sensor"
-    C_HDR dfrph.h
-    C_SRC dfrph.c
-    CPP_HDR dfrph.hpp
-    CPP_SRC dfrph.cxx
-    FTI_SRC dfrph_fti.c
-    CPP_WRAPS_C
-    REQUIRES mraa)
diff --git a/src/dfrph/dfrph.c b/src/dfrph/dfrph.c
deleted file mode 100644
index 6aac1ec..0000000
--- a/src/dfrph/dfrph.c
+++ /dev/null
@@ -1,117 +0,0 @@
-/*
- * Author: Noel Eck <noel.eck@intel.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <string.h>
-#include <stdlib.h>
-
-#include "dfrph.h"
-
-dfrph_context dfrph_init(int16_t pin)
-{
-    // make sure MRAA is initialized
-    int mraa_rv;
-    if ((mraa_rv = mraa_init()) != MRAA_SUCCESS)
-    {
-        printf("%s: mraa_init() failed (%d).\n", __FUNCTION__, mraa_rv);
-        return NULL;
-    }
-
-    dfrph_context dev =
-      (dfrph_context) malloc(sizeof(struct _dfrph_context));
-
-    if(dev == NULL) return NULL;
-
-    /* Init aio pin */
-    dev->aio = mraa_aio_init(pin);
-
-    /* Set the ref, offset, and scale */
-    dev->m_aref = 5.0;
-    dev->m_offset = 0.0;
-    dev->m_scale = 1.0;
-
-    if(dev->aio == NULL) {
-        free(dev);
-        return NULL;
-    }
-
-    return dev;
-}
-
-void dfrph_close(dfrph_context dev)
-{
-    mraa_aio_close(dev->aio);
-    free(dev);
-}
-
-upm_result_t dfrph_set_aref(const dfrph_context dev, float aref)
-{
-    dev->m_aref = aref;
-    return UPM_SUCCESS;
-}
-
-float dfrph_get_aref(const dfrph_context dev)
-{
-    return dev->m_aref;
-}
-
-upm_result_t dfrph_set_offset(const dfrph_context dev, float offset)
-{
-    dev->m_offset = offset;
-    return UPM_SUCCESS;
-}
-
-upm_result_t dfrph_set_scale(const dfrph_context dev, float scale)
-{
-    dev->m_scale = scale;
-    return UPM_SUCCESS;
-}
-
-upm_result_t dfrph_get_raw_volts(const dfrph_context dev, float *volts)
-{
-    *volts = mraa_aio_read_float(dev->aio);
-    if (*volts == -1.0) return UPM_ERROR_OPERATION_FAILED;
-
-    /* Scale by aref */
-    *volts *= dev->m_aref;
-
-    return UPM_SUCCESS;
-}
-
-upm_result_t dfrph_get_ph(const dfrph_context dev, float *value)
-{
-    /* Read normalized */
-    *value = mraa_aio_read_float(dev->aio);
-    if (*value < 0.0) return UPM_ERROR_OPERATION_FAILED;
-
-    /* Apply scale */
-    *value *= dev->m_scale;
-
-    /* Vmax for sensor is 0.8 * Vref, so scale by 1/0.8 = 1.25 */
-    *value *= 1.25 * 14; /* Convert to pH */
-
-    /* Apply offset in pH */
-    *value += dev->m_offset;
-
-    return UPM_SUCCESS;
-}
diff --git a/src/dfrph/dfrph.cxx b/src/dfrph/dfrph.cxx
deleted file mode 100644
index 88cd112..0000000
--- a/src/dfrph/dfrph.cxx
+++ /dev/null
@@ -1,76 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <iostream>
-#include <stdexcept>
-
-#include "dfrph.hpp"
-
-using namespace upm;
-
-DFRPH::DFRPH(int pin, float vref) : _dev(dfrph_init(pin))
-{
-    if (_dev == NULL)
-        throw std::invalid_argument(std::string(__FUNCTION__) +
-                ": dfrph_init() failed, invalid pin?");
-}
-
-DFRPH::~DFRPH()
-{
-    dfrph_close(_dev);
-}
-
-void DFRPH::setOffset(float offset)
-{
-    dfrph_set_offset(_dev, offset);
-}
-
-void DFRPH::setScale(float scale)
-{
-    dfrph_set_scale(_dev, scale);
-}
-
-float DFRPH::volts()
-{
-    float volts = 0.0;
-    dfrph_get_raw_volts(_dev, &volts);
-    return volts;
-}
-
-float DFRPH::pH(unsigned int samples)
-{
-    float ph_avg = 0.0;
-
-    // Read at least 1 sample
-    if (samples == 0) samples = 1;
-
-    float ph = 0.0;
-    for (unsigned int i = 0; i < samples; i++)
-    {
-        dfrph_get_ph(_dev, &ph);
-        ph_avg += ph;
-    }
-
-    return ph_avg/samples;
-}
diff --git a/src/dfrph/dfrph.h b/src/dfrph/dfrph.h
deleted file mode 100644
index 30aea71..0000000
--- a/src/dfrph/dfrph.h
+++ /dev/null
@@ -1,120 +0,0 @@
-/*
- * Author: Noel Eck <noel.eck@intel.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#pragma once
-
-#include "upm.h"
-#include "mraa/aio.h"
-
-#ifdef __cplusplus
-extern "C" {
-#endif
-
-/**
- * @file dfrph.h
- * @library dfrph
- * @brief C API for the DFRobot pH Sensors
- *
- * @include dfrph.c
- */
-
-/**
- * device context
- */
-typedef struct _dfrph_context {
-    /* mraa aio pin context */
-    mraa_aio_context aio;
-    /* ADC reference */
-    float m_aref;
-    /* Raw count offset */
-    float m_offset;
-    /* Raw count scale */
-    float m_scale;
-} *dfrph_context;
-
-/**
- * Initialize analog sensor
- * @param pin is Analog pin
- * @return sensor context as void pointer
- */
-dfrph_context dfrph_init(int16_t pin);
-
-/**
- * Analog sensor destructor
- * @param sensor context pointer deallocate memory
- */
-void dfrph_close(dfrph_context dev);
-
-/**
- * Set ADC reference voltage
- * @param dev sensor context pointer
- * @param aref ADC reference voltage
- * @return Function result code
- */
-upm_result_t dfrph_set_aref(const dfrph_context dev, float aref);
-
-/**
- *  Get sensor aref
- *  @param dev sensor context pointer
- *  @return Sensor ADC reference voltage
- */
-float dfrph_get_aref(const dfrph_context dev);
-
-/**
- * Set sensor offset.  This offset is applied to the return value:
- *     counts = counts + offset
- * @param dev sensor context pointer
- * @param offset count offset value used
- * @return Function result code
- */
-upm_result_t dfrph_set_offset(const dfrph_context dev, float offset);
-
-/**
- * Set sensor scale.  This scale is applied to the return value:
- *     counts = counts * scale
- * @param dev sensor context pointer
- * @param scale count scale value used
- * @return Function result code
- */
-upm_result_t dfrph_set_scale(const dfrph_context dev, float scale);
-
-/**
- * Get raw volts
- * @param dev sensor context pointer
- * @param volts Raw sensor voltage
- * @return Function result code
- */
-upm_result_t dfrph_get_raw_volts(const dfrph_context dev, float *volts);
-
-/**
- * Read value from sensor
- * @param dev sensor context pointer
- * @param value pointer to returned pH value from sensor
- * @return Function result code
- */
-upm_result_t dfrph_get_ph(const dfrph_context dev, float *value);
-
-#ifdef __cplusplus
-}
-#endif
diff --git a/src/dfrph/dfrph.hpp b/src/dfrph/dfrph.hpp
deleted file mode 100644
index d6658d5..0000000
--- a/src/dfrph/dfrph.hpp
+++ /dev/null
@@ -1,145 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#pragma once
-
-#include <iostream>
-#include <string>
-
-#include "dfrph.h"
-
-namespace upm {
-  /**
-   * @brief DFRobot pH Sensors
-   * @defgroup dfrph libupm-dfrph
-   * @ingroup dfrobot liquid analog
-   */
-
-  /**
-   * @library dfrph
-   * @sensor dfrph
-   * @comname Analog pH Sensor
-   * @type liquid
-   * @man dfrobot 
-   * @web http://www.dfrobot.com/index.php?route=product/product&product_id=1110
-   * @con analog
-   *
-   * @brief API for the DFRobot pH Sensors
-   *
-   * This sensor family returns an analog voltage proportional to the
-   * acidity or alkalinity of a liquid -- it's pH value.
-   *
-   * This driver was developed using the DFRobot Analog pH meter and
-   * the DFRobot Analog pH Meter Pro.
-   *
-   *
-   * Calibration instructions, taken and slightly reworded from the
-   *  DFRobot wiki at:
-   *  http://dfrobot.com/wiki/index.php/PH_meter%28SKU:_SEN0161%29
-   *
-   *  1) Connect equipment: the pH electrode is connected to the BNC
-   *  connector on the pH meter board, and then the pH meter board is
-   *  connected to the analog port 0 of the controller. When the
-   *  controller gets power, you will see the blue LED on board is on.
-   *
-   *  2) Put the pH electrode into the standard solution whose pH
-   *  value is 7.00.  Run the dfrph example and note the pH output
-   *  value.  Compare the value with 7.00, and calculate the
-   *  difference.  This is the value you should supply to the
-   *  setOffset() method.
-   *
-   *  3) Put the pH electrode into the pH standard solution whose
-   *  value is 4.00. Then wait about one minute, and adjust the
-   *  potentiometer on the interface board.  Let the value stabilise
-   *  at around 4.00. At this time,the acidic calibration has been
-   *  completed and you can measure the pH value of an acidic
-   *  solution.
-   *
-   *  4) According to the linear characteristics of pH electrode
-   *  itself, after the above calibration,you can directly measure the
-   *  pH value of the alkaline solution. If you want to get better
-   *  accuracy, you can recalibrate it. Alkaline calibration use the
-   *  standard solution whose pH value is 9.18.  Also adjust the
-   *  potentiometer and let the value stabilise at around 9.18. After
-   *  this calibration, you can measure the pH value of an alkaline
-   *  solution.
-   *
-   * @image html dfrph.jpg
-   * @snippet dfrph.cxx Interesting
-   */
-
-  class DFRPH {
-  public:
-
-    /**
-     * DFRPH constructor
-     *
-     * @param pin Analog pin to use
-     * @param vref Analog reference voltage; default is 5.0 V
-     */
-    DFRPH(int pin, float vref = 5.0);
-
-    /**
-     * DFRPH destructor
-     */
-    ~DFRPH();
-
-    /**
-     * Specifies the offset determined from calibration.  The default
-     * is 0.0.
-     *
-     * @param offset The offset value to use
-     */
-    void setOffset(float offset);
-
-    /**
-     * Specifies the scale determined from calibration.  The default
-     * is 1.0.
-     *
-     * @param scale The scale value to use
-     */
-    void setScale(float scale);
-
-    float volts();
-
-    /**
-     * Take a number of samples and return the detected pH value.  The
-     * default number of samples is 15.
-     *
-     * @param samples The number of samples to average over, default 15
-     * @return The pH value detected
-     */
-    float pH(unsigned int samples = 15);
-
-  private:
-    /**
-     * Don't allow copies of this class
-     */
-    DFRPH(const DFRPH&) {}
-    DFRPH &operator=(const DFRPH &) {return *this;}
-
-    dfrph_context _dev;
-  };
-}
-
-
diff --git a/src/dfrph/dfrph.json b/src/dfrph/dfrph.json
deleted file mode 100644
index c3edf9e..0000000
--- a/src/dfrph/dfrph.json
+++ /dev/null
@@ -1,40 +0,0 @@
-{
-    "Library": "dfrph",
-    "Description": "API for the DFRobot pH Sensors",
-    "Sensor Class":
-    {
-        "DFRPH":
-        {
-            "Name": "Analog pH Sensor",
-            "Description": "TThis sensor family returns an analog voltage proportional to the acidity or alkalinity of a liquid -- it's pH value. This driver was developed using the DFRobot Analog pH meter and the DFRobot Analog pH Meter Pro. Calibration instructions, taken and slightly reworded from the DFRobot wiki at: http://dfrobot.com/wiki/index.php/PH_meter%28SKU:_SEN0161%29 1) Connect equipment: the pH electrode is connected to the BNC connector on the pH meter board, and then the pH meter board is connected to the analog port 0 of the controller. When the controller gets power, you will see the blue LED on board is on. 2) Put the pH electrode into the standard solution whose pH value is 7.00.  Run the dfrph example and note the pH output value.  Compare the value with 7.00, and calculate the difference.  This is the value you should supply to the setOffset() method. 3) Put the pH electrode into the pH standard solution whose value is 4.00. Then wait about one minute, and adjust the potentiometer on the interface board.  Let the value stabilise at around 4.00. At this time,the acidic calibration has been completed and you can measure the pH value of an acidic solution. 4) According to the linear characteristics of pH electrode itself, after the above calibration,you can directly measure the pH value of the alkaline solution. If you want to get better accuracy, you can recalibrate it. Alkaline calibration use the standard solution whose pH value is 9.18.  Also adjust the potentiometer and let the value stabilise at around 9.18. After this calibration, you can measure the pH value of an alkaline solution.",
-            "Aliases": ["dfrph"],
-            "Categories": ["pH", "liquid"],
-            "Connections": ["analog"],
-            "Project Type": ["industrial"],
-            "Manufacturers": ["dfrobot"],
-            "Kits": [],
-            "Image": "dfrph.jpg",
-            "Examples":
-            {
-                "Java": [],
-                "Python": ["dfrph.py"],
-                "Node.js": ["dfrph.js"],
-                "C++": ["dfrph.cxx"],
-                "C": ["dfrph.c"]
-            },
-            "Specifications":
-            {
-                "Operating Voltage": {"unit": "V", "Typ": 5},
-                "Measurement Range": {"unit": "pH", "low": 0, "high": 14},
-                "Operating Temperature": {"unit": "degC", "low": 0, "high": 60}
-
-            },
-            "Urls" :
-            {
-                "Product Pages": ["https://www.dfrobot.com/product-1110.html"],
-                "Datasheets": ["https://www.dfrobot.com/wiki/index.php/PH_meter(SKU:_SEN0161)"],
-                "Schematics": ["http://image.dfrobot.com/image/data/SEN0161/pH%20meter%20V1.0%20SCH.pdf"]
-            }
-        }
-    }
-}
diff --git a/src/dfrph/dfrph_fti.c b/src/dfrph/dfrph_fti.c
deleted file mode 100644
index d68c213..0000000
--- a/src/dfrph/dfrph_fti.c
+++ /dev/null
@@ -1,118 +0,0 @@
-/*
- * Author: Noel Eck <noel.eck@intel.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <string.h>
-#include <stdlib.h>
-
-#include "dfrph.h"
-#include "upm_fti.h"
-#include "fti/upm_sensor.h"
-
-/** 
- * This file implements the Function Table Interface (FTI) for this sensor
- */
-
-const char upm_dfrph_name[] = "DFRPH";
-const char upm_dfrph_description[] = "Analog pH Meter Pro";
-const upm_protocol_t upm_dfrph_protocol[] = {UPM_ANALOG};
-const upm_sensor_t upm_dfrph_category[] = {UPM_PH};
-
-// forward declarations
-const void* upm_dfrph_get_ft(upm_sensor_t sensor_type);
-void* upm_dfrph_init_str(const char* protocol, const char* params);
-void upm_dfrph_close(void* dev);
-const upm_sensor_descriptor_t upm_dfrph_get_descriptor();
-upm_result_t upm_dfrph_set_offset(const void* dev, float offset);
-upm_result_t upm_dfrph_set_scale(const void* dev, float scale);
-upm_result_t upm_dfrph_get_value(const void* dev, float *value);
-
-/* This sensor implementes 2 function tables */
-/* 1. Generic base function table */
-static const upm_sensor_ft ft_gen =
-{
-    .upm_sensor_init_name = &upm_dfrph_init_str,
-    .upm_sensor_close = &upm_dfrph_close,
-    .upm_sensor_get_descriptor = &upm_dfrph_get_descriptor
-};
-
-/* 2. PH function table */
-static const upm_ph_ft ft_ph =
-{
-    .upm_ph_set_offset = &upm_dfrph_set_offset,
-    .upm_ph_set_scale = &upm_dfrph_set_scale,
-    .upm_ph_get_value = &upm_dfrph_get_value
-};
-
-const void* upm_dfrph_get_ft(upm_sensor_t sensor_type)
-{
-    switch(sensor_type)
-    {
-        case UPM_SENSOR:
-            return &ft_gen;
-        case UPM_PH:
-            return &ft_ph;
-        default:
-            return NULL;
-    }
-}
-
-void* upm_dfrph_init_str(const char* protocol, const char* params)
-{
-    fprintf(stderr, "String initialization - not implemented, using ain0: %s\n", __FILENAME__);
-    return dfrph_init(0);
-}
-
-void upm_dfrph_close(void* dev)
-{
-    dfrph_close(dev);
-}
-
-const upm_sensor_descriptor_t upm_dfrph_get_descriptor()
-{
-    /* Fill in the descriptor */
-    upm_sensor_descriptor_t usd;
-    usd.name = upm_dfrph_name;
-    usd.description = upm_dfrph_description;
-    usd.protocol_size = 1;
-    usd.protocol = upm_dfrph_protocol;
-    usd.category_size = 1;
-    usd.category = upm_dfrph_category;
-
-    return usd;
-}
-
-upm_result_t upm_dfrph_set_offset(const void* dev, float offset)
-{
-    return dfrph_set_offset((dfrph_context)dev, offset);
-}
-
-upm_result_t upm_dfrph_set_scale(const void* dev, float scale)
-{
-    return dfrph_set_scale((dfrph_context)dev, scale);
-}
-
-upm_result_t upm_dfrph_get_value(const void* dev, float *value)
-{
-    return dfrph_get_ph((dfrph_context)dev, value);
-}
diff --git a/src/ds1307/CMakeLists.txt b/src/ds1307/CMakeLists.txt
deleted file mode 100644
index a5f08c3..0000000
--- a/src/ds1307/CMakeLists.txt
+++ /dev/null
@@ -1,5 +0,0 @@
-set (libname "ds1307")
-set (libdescription "Real Time Clock (RTC) Module")
-set (module_src ${libname}.cxx)
-set (module_hpp ${libname}.hpp)
-upm_module_init(mraa)
diff --git a/src/ds1307/ds1307.cxx b/src/ds1307/ds1307.cxx
deleted file mode 100644
index b7095db..0000000
--- a/src/ds1307/ds1307.cxx
+++ /dev/null
@@ -1,200 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2014 Intel Corporation.
- *
- * Adapted from Seeed Studio library:
- * https://github.com/Seeed-Studio/RTC_DS1307
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <iostream>
-#include <string>
-#include <stdexcept>
-
-#include "ds1307.hpp"
-
-using namespace upm;
-using namespace std;
-
-
-DS1307::DS1307(int bus) : m_i2c(bus)
-{
-  // setup our i2c link
-  mraa::Result ret = m_i2c.address(DS1307_I2C_ADDR);
-  if (ret != mraa::SUCCESS){
-    throw std::invalid_argument(std::string(__FUNCTION__) +
-                                  ": i2c.address() failed");
-    return;
-  }
-}
-
-mraa::Result DS1307::writeBytes(uint8_t reg, uint8_t *buffer, int len)
-{
-  if (!len || !buffer)
-    return mraa::ERROR_INVALID_PARAMETER;
-
-  // create a buffer 1 byte larger than the supplied buffer,
-  // store the register in the first byte
-  uint8_t buf2[len + 1];
-
-  buf2[0] = reg;
-
-  // copy in the buffer after the reg byte
-  for (int i=1; i<(len + 1); i++)
-    buf2[i] = buffer[i-1];
-
-  return m_i2c.write(buf2, len + 1);
-}
-
-int DS1307::readBytes(uint8_t reg, uint8_t *buffer, int len)
-{
-  if (!len || !buffer)
-    return 0;
-
-  m_i2c.writeByte(reg);
-
-  return m_i2c.read(buffer, len);
-}
-
-bool DS1307::loadTime()
-{
-  // read the first 7 registers
-  uint8_t buffer[7];
-  int bytesRead = readBytes(0, buffer, 7);
-
-  if (bytesRead != 7)
-    { 
-      // problem
-      throw std::runtime_error(std::string(__FUNCTION__) +
-                               ": failed to read expected 7 bytes from device");
-      return false;
-    }
-
-  // We need to mask some control bits off of some of these values
-  // and convert the result to decimal from BCD.  We also need to account
-  // for format (AM/PM or 24hr), and if AM/PM, whether PM should be set.
-  
-  // first bit here is the oscillator enable/disable bit
-  seconds = bcdToDec(buffer[0] & 0x7f);
-  minutes = bcdToDec(buffer[1]);
-
-  // check AM/PM or 24hr mode
-  if (buffer[2] & 0x40)
-    {
-      // We are in AM/PM mode
-      hours = bcdToDec(buffer[2] & 0x1f);
-      amPmMode = true;
-      pm = (buffer[2] & 0x20) ? true : false;
-    }
-  else
-    {
-      // 24hr mode
-      hours = bcdToDec(buffer[2] & 0x3f);
-      amPmMode = false;
-      pm = false;
-    }
-
-  dayOfWeek = bcdToDec(buffer[3]);
-  dayOfMonth = bcdToDec(buffer[4]);
-  month = bcdToDec(buffer[5]);
-  year = bcdToDec(buffer[6]);
-
-  return true;
-}
-
-bool DS1307::setTime()
-{
-  uint8_t buffer[7];
-
-  // seconds
-  // we need to read in seconds first to preserve the osc enable bit
-  uint8_t tmpbuf;
-
-  readBytes(0, &tmpbuf, 1);
-  buffer[0] = decToBcd(seconds) | (tmpbuf & 0x80);
-
-  // minutes 
-  buffer[1] = decToBcd(minutes);
-
-  // hours
-  if (amPmMode)
-    {
-      buffer[2] = decToBcd(hours) | 0x40;
-      if (pm)
-        buffer[2] |= 0x20;
-    }
-  else
-    buffer[2] = decToBcd(hours);
-
-  // day of week
-  buffer[3] = decToBcd(dayOfWeek);
-
-  // day of month
-  buffer[4] = decToBcd(dayOfMonth);
-
-  // month
-  buffer[5] = decToBcd(month);
-
-  // year
-  buffer[6] = decToBcd(year);
-
-  return writeBytes(0, buffer, 7);
-}
-
-mraa::Result DS1307::enableClock()
-{
-  // the oscillator enable bit is the high bit of reg 0
-  // so read it, clear it, and write it back.
-
-  uint8_t buf;
-  readBytes(0, &buf, 1);
-
-  buf &= ~0x80;
-
-  return writeBytes(0, &buf, 1);
-}
-
-mraa::Result DS1307::disableClock()
-{
-  // the oscillator enable bit is the high bit of reg 0
-  // so read it, set it, and write it back.
-
-  uint8_t buf;
-  readBytes(0, &buf, 1);
-
-  buf |= 0x80;
-
-  return writeBytes(0, &buf, 1);
-}
-
-
-// Convert decimal to BCD
-uint8_t DS1307::decToBcd(unsigned int val)
-{
-  return ( (val/10*16) + (val%10) );
-}
-
-// Convert BCD to decimal
-unsigned int DS1307::bcdToDec(uint8_t val)
-{
-  return ( (val/16*10) + (val%16) );
-}
-
diff --git a/src/ds1307/ds1307.hpp b/src/ds1307/ds1307.hpp
deleted file mode 100644
index d5d205c..0000000
--- a/src/ds1307/ds1307.hpp
+++ /dev/null
@@ -1,194 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2014 Intel Corporation.
- *
- * Adapted from Seeed Studio library:
- * https://github.com/Seeed-Studio/RTC_DS1307
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#pragma once
-
-#include <string>
-#include <mraa/i2c.hpp>
-
-#define DS1307_I2C_BUS     0
-#define DS1307_I2C_ADDR    0x68
-
-// Days of the week
-#define DS1307_DAY_MON 1
-#define DS1307_DAY_TUE 2
-#define DS1307_DAY_WED 3
-#define DS1307_DAY_THU 4
-#define DS1307_DAY_FRI 5
-#define DS1307_DAY_SAT 6
-#define DS1307_DAY_SUN 7
-
-namespace upm {
-  /**
-   * @brief DS1307 Real-Time Clock
-   * @defgroup ds1307 libupm-ds1307
-   * @ingroup seeed i2c time
-   */
-
-  /**
-   * @library ds1307
-   * @sensor ds1307
-   * @comname Real Time Clock (RTC) Module
-   * @altname DS1307 RTC
-   * @type time
-   * @man seeed
-   * @con i2c
-   * @web https://www.maximintegrated.com/en/products/digital/real-time-clocks/DS1307.html
-   *
-   * @brief API for the DS1307 Real-Time CLock
-   *
-   * UPM module for the DS1307-based real-time clock. The clock can provide information
-   * about seconds, minutes, hours, day of the week, day of the month,
-   * month, and year. It can operate in either a 24-hour or a 12-hour format.
-   * This device can also output a square wave at 1Khz, 4Khz, 8Khz, and 32Khz.
-   * However, this capability is not implemented in this module.
-   *
-   * @image html ds1307.jpg
-   * @snippet ds1307.cxx Interesting
-   */
-  class DS1307 {
-  public:
-    /**
-     * DS1307 constructor
-     *
-     * @param bus I2C bus to use
-     */
-    DS1307(int bus);
-
-    /**
-     * Loads all the time values
-     *
-     * @return True if time data loaded successfully
-     */
-    bool loadTime();
-
-    /**
-     * Sets the time. You should call loadTime() beforehand to
-     * maintain consistency
-     *
-     * @return True if time is set successfully
-     */
-    bool setTime();
-
-    /**
-     * Enables an oscillator on the clock.
-     *
-     * @return 0 (mraa::SUCCESS) if successful; non-zero otherwise
-     */
-    mraa::Result enableClock();
-
-    /**
-     * Disables the oscillator on the clock. This prevents the clock
-     * from updating any time/date values
-     *
-     * @return 0 (mraa::SUCCESS) if successful; non-zero otherwise
-     */
-    mraa::Result disableClock();
-
-    /**
-     * Writes value(s) into registers
-     *
-     * @param reg Register location to start writing into
-     * @param buffer Buffer for data storage
-     * @param len Number of bytes to write
-     * @return 0 (mraa::SUCCESS) if successful; non-zero otherwise
-     */
-    mraa::Result writeBytes(uint8_t reg, uint8_t *buffer, int len);
-
-    /**
-     * Reads value(s) from registers
-     *
-     * @param reg Register location to start reading from
-     * @param buffer Buffer for data storage
-     * @param len Number of bytes to read
-     * @return Number of bytes read
-     */
-    int readBytes(uint8_t reg, uint8_t *buffer, int len);
-
-    /**
-     * Converts a BCD value into decimal
-     *
-     * @param val BCD value to convert
-     * @return Converted decimal value 
-     */
-    unsigned int bcdToDec(uint8_t val);
-
-    /**
-     * Converts a decimal value into BCD
-     *
-     * @param val Decimal value to convert
-     * @return Converted BCD value
-     */
-    uint8_t decToBcd(unsigned int val);
-
-    // These variables store the time data loaded with loadTime(), and
-    // are the source of data when setTime() is called.  It is a
-    // good idea to call loadTime() to set up the current values before
-    // calling setTime() to ensure RTC data is consistent
-
-    /**
-     * Holds seconds
-     */
-    unsigned int seconds;
-    /**
-     * Holds minutes
-     */
-    unsigned int minutes;
-    /**
-     * Holds hours; 1-12 in the am/pm format, 0-23 otherwise
-     */
-    unsigned int hours;
-    /**
-     * Holds a day of the week; 1-7, where 1 is Sunday
-     */
-    unsigned int dayOfWeek;
-    /**
-     * Holds a day of the month, 1-31
-     */
-    unsigned int dayOfMonth;
-    /**
-     * Holds a month, 1-12
-     */
-    unsigned int month;
-    /**
-     * Holds a year, 0-99
-     */
-    unsigned int year;
-    /**
-     * True if the am/pm format is used, false otherwise
-     */
-    bool amPmMode;
-    /**
-     * For the am/pm format, it is true if it's pm, false otherwise
-     */
-    bool pm;
-
-  private:
-    mraa::I2c m_i2c;
-  };
-}
-
-
diff --git a/src/ds1307/ds1307.i b/src/ds1307/ds1307.i
deleted file mode 100644
index 914dfa4..0000000
--- a/src/ds1307/ds1307.i
+++ /dev/null
@@ -1,17 +0,0 @@
-%include "../common_top.i"
-
-/* BEGIN Java syntax  ------------------------------------------------------- */
-#ifdef SWIGJAVA
-%include "arrays_java.i";
-%include "../java_buffer.i"
-
-JAVA_JNI_LOADLIBRARY(javaupm_ds1307)
-#endif
-/* END Java syntax */
-
-/* BEGIN Common SWIG syntax ------------------------------------------------- */
-%{
-#include "ds1307.hpp"
-%}
-%include "ds1307.hpp"
-/* END Common SWIG syntax */
diff --git a/src/ds1307/ds1307.json b/src/ds1307/ds1307.json
deleted file mode 100644
index 01fce03..0000000
--- a/src/ds1307/ds1307.json
+++ /dev/null
@@ -1,41 +0,0 @@
-{
-    "Library": "ds1307",
-    "Description": "DS1307 Real-Time Clock library",
-    "Sensor Class":
-    {
-        "DS1307":
-        {
-            "Name": "DS1307 Real Time Clock (RTC) Module",
-            "Description": "UPM module for the DS1307-based real-time clock. The clock can provide information about seconds, minutes, hours, day of the week, day of the month, month, and year. It can operate in either a 24-hour or a 12-hour format. This device can also output a square wave at 1Khz, 4Khz, 8Khz, and 32Khz. However, this capability is not implemented in this module.",
-            "Aliases": ["ds1307"],
-            "Categories": ["RTC", "timekeeping"],
-            "Connections": ["i2c"],
-            "Project Type": ["prototyping", "industrial"],
-            "Manufacturers": ["seeed", "maxim"],
-            "Kits": [],
-            "Image": "ds1307.jpg",
-            "Examples":
-            {
-                "Java": ["DS1307_Example.java"],
-                "Python": ["ds1307.py"],
-                "Node.js": ["ds1307.js"],
-                "C++": ["ds1307.cxx"],
-                "C": []
-            },
-            "Specifications":
-            {
-                "Operating Voltage": {"unit": "V", "low": 4.5, "high": 5.5},
-                "Active Current": {"unit": "mA", "Typ": 1.5},
-                "Standby Current (Oscillator On)": {"unit": "nA", "low": 480, "high": 800},
-                "Operating Temperature": {"unit": "degC", "low": 0, "high": 70}
-
-            },
-            "Urls" :
-            {
-                "Product Pages": ["https://www.maximintegrated.com/en/products/digital/real-time-clocks/DS1307.html/tb_tab0"],
-                "Datasheets": ["https://datasheets.maximintegrated.com/en/ds/DS1307.pdf"],
-                "Schematics": []
-            }
-        }
-    }
-}
diff --git a/src/ds1808lc/CMakeLists.txt b/src/ds1808lc/CMakeLists.txt
deleted file mode 100644
index 70cf93b..0000000
--- a/src/ds1808lc/CMakeLists.txt
+++ /dev/null
@@ -1,5 +0,0 @@
-set (libname "ds1808lc")
-set (libdescription "Lighting Controller")
-set (module_src ${libname}.cxx mraa-utils.cxx)
-set (module_hpp ${libname}.hpp)
-upm_module_init(interfaces mraa)
diff --git a/src/ds1808lc/ds1808lc.cxx b/src/ds1808lc/ds1808lc.cxx
deleted file mode 100644
index 4e00110..0000000
--- a/src/ds1808lc/ds1808lc.cxx
+++ /dev/null
@@ -1,133 +0,0 @@
-#include <iostream>
-#include <unistd.h>
-#include <string.h>
-#include <cmath>
-#include "ds1808lc.hpp"
-#include "mraa-utils.hpp"
-
-#define DS1808_I2C_ADDR 0x28
-#define DS1808_POT2_OFFSET 0x40
-#define DS1808_MAX_POT_VALUE 0x20
-#define DS1808_LOW_VALUE 32 // Lowest pot value that the eye can differentiate from 0
-#define DS1808_HIGH_VALUE 51 // Highest pot value that the eye can differentiate from full
-
-
-namespace upm {
-DS1808LC::DS1808LC(int gpioPower, int i2cBus)
-{
-   mraa_set_log_level(7);
-   pinPower = gpioPower;
-   i2c = new mraa::I2c(i2cBus);
-   status = i2c->address(DS1808_I2C_ADDR);
-   getBrightness();
-}
-
-DS1808LC::~DS1808LC()
-{
-}
-
-bool DS1808LC::isPowered()
-{
-   return static_cast<bool>(MraaUtils::getGpio(pinPower));
-}
-
-void DS1808LC::setPowerOn()
-{
-   if (!isPowered())
-   {
-      MraaUtils::setGpio(pinPower, 1);
-      setBrightness(0);
-   }
-}
-
-void DS1808LC::setPowerOff()
-{
-   MraaUtils::setGpio(pinPower, 0);
-}
-
-
-int DS1808LC::getBrightness()
-{
-   uint8_t values[2];
-
-   if (i2c->read(values, 2) == 2) {
-      return getPercentBrightness(values[0], values[1]);
-   }
-   else
-      UPM_THROW("i2c read error");
-}
-
-
-void DS1808LC::setBrightness(int dutyPercent)
-{
-   uint8_t values[2];
-   values[0] = getPot1Value(dutyPercent);
-   values[1] = getPot2Value(dutyPercent);
-   status = i2c->write(values, 2);
-   if (status != mraa::SUCCESS)
-       UPM_THROW("i2c write error");
-}
-
-//
-// Helper Function
-//
-
-uint8_t DS1808LC::getPot1Value(int dutyPercent) {
-   uint8_t result = 0;
-   int scaledResistance = getScaledResistance(dutyPercent);
-
-   if (scaledResistance > DS1808_MAX_POT_VALUE)
-      result = DS1808_MAX_POT_VALUE;
-   else {
-      result = scaledResistance;
-   }
-
-   return result;
-}
-
-uint8_t DS1808LC::getPot2Value(int dutyPercent) {
-   uint8_t result = 0;
-   int scaledResistance = getScaledResistance(dutyPercent);
-
-   if (scaledResistance <= DS1808_MAX_POT_VALUE)
-      result = 0;
-   else {
-      result = scaledResistance - DS1808_MAX_POT_VALUE;
-   }
-
-   if (result > DS1808_MAX_POT_VALUE)
-      result = DS1808_MAX_POT_VALUE;
-
-   return result | DS1808_POT2_OFFSET;
-}
-
-int DS1808LC::getPercentBrightness(uint8_t val1, uint8_t val2) {
-   val2 = val2 & (~DS1808_POT2_OFFSET);
-   int scaledResistance = val1 + val2;
-   int percent;
-
-   if (scaledResistance < DS1808_LOW_VALUE)
-      percent = 100;
-   else if (scaledResistance > DS1808_HIGH_VALUE)
-      percent = 0;
-   else
-      percent = 100 - (((scaledResistance - DS1808_LOW_VALUE) * 100) / (DS1808_HIGH_VALUE - DS1808_LOW_VALUE));
-   return percent;
-}
-
-int DS1808LC::getScaledResistance(int dutyPercent) {
-   int scaledResistance;
-
-   if (dutyPercent == 0)
-      scaledResistance = 2 * DS1808_MAX_POT_VALUE;
-   else if (dutyPercent == 100)
-      scaledResistance = 0;
-   else
-      scaledResistance = (((100 - dutyPercent) * (DS1808_HIGH_VALUE - DS1808_LOW_VALUE)) / 100) + DS1808_LOW_VALUE;
-   return scaledResistance;
-}
-
-}
-
-
-
diff --git a/src/ds1808lc/ds1808lc.hpp b/src/ds1808lc/ds1808lc.hpp
deleted file mode 100644
index e6f3c7c..0000000
--- a/src/ds1808lc/ds1808lc.hpp
+++ /dev/null
@@ -1,80 +0,0 @@
-/*
- * Author: Henry Bruce <henry.bruce@intel.com>
- * Copyright (c) 2014 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include "iLightController.hpp"
-#include "mraa/i2c.hpp"
-
-namespace upm
-{
-/**
- * @brief DS1808LC Lighting Controller
- * @defgroup DS1808LC libupm-ds1808lc
- * @ingroup ds1808lc i2c maxim light ilightcontroller
- */
-
-/**
- * @library ds1808lc
- * @sensor ds1808lc
- * @comname Lighting Controller
- * @altname DS1808LC
- * @type light
- * @man maxim
- * @con i2c
- * @web http://www.maximintegrated.com/en/products/analog/data-converters/digital-potentiometers/DS1808.html
- *
- * @brief API for DS1808 Dual Log Digital Potentiometer as a Light Controller
- *
- * The Maxim Integrated
- * [DS1808](http://www.maximintegrated.com/en/products/analog/data-converters/digital-potentiometers/DS1808.html)
- * Dual Log Digital Potentiometer
- *
- * @snippet ds1808lc.cxx Interesting
- */
-class DS1808LC : public upm::ILightController
-{
-public:
-   DS1808LC(int gpioPower, int i2cBus);
-   ~DS1808LC();
-
-   const char* getModuleName() { return "ds1808lc"; }
-   bool isPowered();
-   void setPowerOn();
-   void setPowerOff();
-   int getBrightness();
-   void setBrightness(int dutyPercent);
-
-private:
-   int getPercentBrightness(uint8_t val1, uint8_t val2);
-   uint8_t getPot1Value(int dutyPercent);
-   uint8_t getPot2Value(int dutyPercent);
-   int getScaledResistance(int dutyPercent);
-
-   mraa::Result status;
-   mraa::I2c* i2c;
-   int pinPower;
-};
-
-
-}
-
diff --git a/src/ds1808lc/ds1808lc.i b/src/ds1808lc/ds1808lc.i
deleted file mode 100644
index e68e58b..0000000
--- a/src/ds1808lc/ds1808lc.i
+++ /dev/null
@@ -1,33 +0,0 @@
-%include "../common_top.i"
-
-/* BEGIN Java syntax  ------------------------------------------------------- */
-#ifdef SWIGJAVA
-%include "arrays_java.i";
-%include "../java_buffer.i"
-%typemap(javaimports) SWIGTYPE %{import upm_interfaces.*;%}
-%import "../interfaces/javaupm_iLightController.i"
-
-JAVA_JNI_LOADLIBRARY(javaupm_ds1808lc)
-#endif
-/* END Java syntax */
-
-/* BEGIN Javascript syntax  ------------------------------------------------- */
-#ifdef SWIGJAVASCRIPT
-%include "iModuleStatus.hpp"
-%include "iLightController.hpp"
-#endif
-/* END Javascript syntax */
-
-/* BEGIN Python syntax  ----------------------------------------------------- */
-#ifdef SWIGPYTHON
-%include "iModuleStatus.hpp"
-%include "iLightController.hpp"
-#endif
-/* END Python syntax */
-
-/* BEGIN Common SWIG syntax ------------------------------------------------- */
-%{
-#include "ds1808lc.hpp"
-%}
-%include "ds1808lc.hpp"
-/* END Common SWIG syntax */
diff --git a/src/ds1808lc/ds1808lc.json b/src/ds1808lc/ds1808lc.json
deleted file mode 100644
index 5c4d74b..0000000
--- a/src/ds1808lc/ds1808lc.json
+++ /dev/null
@@ -1,39 +0,0 @@
-{
-    "Library": "ds1808lc",
-    "Description": "API for DS1808 Dual Log Digital Potentiometer as a Light Controller",
-    "Sensor Class":
-    {
-        "DS1808LC":
-        {
-            "Name": "DS1808LC Lighting Controller",
-            "Description": "The Maxim Integrated [DS1808](http://www.maximintegrated.com/en/products/analog/data-converters/digital-potentiometers/DS1808.html) Dual Log Digital Potentiometer",
-            "Aliases": ["ds1808lc"],
-            "Categories": ["lighting"],
-            "Connections": ["i2c"],
-            "Project Type": ["prototyping", "industrial"],
-            "Manufacturers": ["maxim"],
-            "Kits": [],
-            "Examples":
-            {
-                "Java": [],
-                "Python": [],
-                "Node.js": [],
-                "C++": ["ds1808lc.cxx"],
-                "C": []
-            },
-            "Specifications":
-            {
-                "Operating Voltage": {"unit": "+-V", "Typ": 12},
-                "Voltage Range": {"unit": "+-%", "Typ": 10},
-                "Operating Temperature": {"unit": "degC", "low": -40, "high": 85}
-
-            },
-            "Urls" :
-            {
-                "Product Pages": ["https://www.maximintegrated.com/en/products/analog/data-converters/digital-potentiometers/DS1808.html"],
-                "Datasheets": ["https://datasheets.maximintegrated.com/en/ds/DS1808.pdf"],
-                "Schematics": [""]
-            }
-        }
-    }
-}
diff --git a/src/ds1808lc/mraa-utils.cxx b/src/ds1808lc/mraa-utils.cxx
deleted file mode 100644
index 369dce1..0000000
--- a/src/ds1808lc/mraa-utils.cxx
+++ /dev/null
@@ -1,75 +0,0 @@
-/*
- * Author: Henry Bruce <henry.bruce@intel.com>
- * Copyright (c) 2014 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <stdexcept>
-#include <string>
-
-#include "mraa-utils.hpp"
-#include "mraa/gpio.hpp"
-
-#define UPM_THROW(msg) throw std::runtime_error(std::string(__FUNCTION__) + ": " + (msg))
-
-void MraaUtils::setGpio(int pin, int level)
-{
-/*
-   mraa_result_t status = MRAA_ERROR_NO_RESOURCES; 
-   mraa_gpio_context gpio = mraa_gpio_init(pin);
-   if (gpio != NULL) 
-   {
-      mraa_gpio_dir(gpio, MRAA_GPIO_OUT);
-      status = mraa_gpio_write(gpio, level);
-      mraa_gpio_close(gpio);
-   } 
-   return status;
-*/
-   mraa::Gpio gpio(pin);
-   gpio.dir(mraa::DIR_OUT);
-   if (gpio.write(level) != mraa::SUCCESS)
-      UPM_THROW("gpio write failed");
-}
-
-
-int MraaUtils::getGpio(int pin)
-{
-/*
-   mraa_result_t status = MRAA_ERROR_NO_RESOURCES; 
-   mraa_gpio_context gpio = mraa_gpio_init(pin);
-   if (gpio != NULL) 
-   {
-      status = mraa_gpio_dir(gpio, MRAA_GPIO_IN);
-      int value = mraa_gpio_read(gpio);
-      if (value != -1)
-         *level = value;
-      else
-         status = MRAA_ERROR_NO_RESOURCES; 
-      mraa_gpio_close(gpio);
-   }
-   return status;       
-*/
-   mraa::Gpio gpio(pin);
-   gpio.dir(mraa::DIR_IN);
-   return gpio.read();
-}
-
-
diff --git a/src/ds1808lc/mraa-utils.hpp b/src/ds1808lc/mraa-utils.hpp
deleted file mode 100644
index f9e6acc..0000000
--- a/src/ds1808lc/mraa-utils.hpp
+++ /dev/null
@@ -1,37 +0,0 @@
-/*
- * Author: Henry Bruce <henry.bruce@intel.com>
- * Copyright (c) 2014 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#pragma once
-
-#include "mraa/types.h"
-
-class __attribute__ ((visibility("hidden"))) MraaUtils
-{
-public:
-   static void setGpio(int pin, int level);
-   static int getGpio(int pin);
-};
-
-
-
diff --git a/src/ds18b20/CMakeLists.txt b/src/ds18b20/CMakeLists.txt
deleted file mode 100644
index c3948cb..0000000
--- a/src/ds18b20/CMakeLists.txt
+++ /dev/null
@@ -1,11 +0,0 @@
-if (MRAA_OW_FOUND)
-    upm_mixed_module_init (NAME ds18b20
-        DESCRIPTION "Programmable Resolution 1-Wire Digital Thermometer"
-        C_HDR ds18b20.h ds18b20_defs.h
-        C_SRC ds18b20.c
-        CPP_HDR ds18b20.hpp
-        CPP_SRC ds18b20.cxx
-        FTI_SRC ds18b20_fti.c
-        CPP_WRAPS_C
-        REQUIRES mraa utilities-c)
-endif (MRAA_OW_FOUND)
diff --git a/src/ds18b20/ds18b20.c b/src/ds18b20/ds18b20.c
deleted file mode 100644
index cc2fec9..0000000
--- a/src/ds18b20/ds18b20.c
+++ /dev/null
@@ -1,396 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2016-2017 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <assert.h>
-#include <upm_utilities.h>
-#include "ds18b20.h"
-
-// an internal struct we use to store information on the devices
-// found during initialization
-struct _ds18b20_info_t {
-    uint8_t id[MRAA_UART_OW_ROMCODE_SIZE];          // 8-byte romcode id
-    float temperature;
-    DS18B20_RESOLUTIONS_T resolution;
-};
-
-// internal utility function forward to read temperature from a single
-// device
-static float readSingleTemp(const ds18b20_context dev, unsigned int index);
-
-ds18b20_context ds18b20_init(unsigned int uart)
-{
-    // make sure MRAA is initialized
-    int mraa_rv;
-    if ((mraa_rv = mraa_init()) != MRAA_SUCCESS)
-    {
-        printf("%s: mraa_init() failed (%d).\n", __FUNCTION__, mraa_rv);
-        return NULL;
-    }
-
-    ds18b20_context dev =
-        (ds18b20_context)malloc(sizeof(struct _ds18b20_context));
-
-    if (!dev)
-        return NULL;
-
-    // zero out context
-    memset((void *)dev, 0, sizeof(struct _ds18b20_context));
-
-    dev->ow = NULL;
-
-    if (!(dev->ow = mraa_uart_ow_init(uart)))
-    {
-        printf("%s: mraa_uart_ow_init() failed.\n", __FUNCTION__);
-        ds18b20_close(dev);
-        return NULL;
-    }
-
-    // iterate through the bus and build up a list of detected DS18B20
-    // devices (only)
-
-    mraa_result_t rv;
-    if ((rv = mraa_uart_ow_reset(dev->ow)) != MRAA_SUCCESS)
-    {
-        printf("%s: mraa_uart_ow_reset() failed, no devices detected\n",
-               __FUNCTION__);
-        ds18b20_close(dev);
-        return NULL;
-    }
-
-    uint8_t id[MRAA_UART_OW_ROMCODE_SIZE];
-
-    rv = mraa_uart_ow_rom_search(dev->ow, 1, id);
-    if (rv == MRAA_ERROR_UART_OW_NO_DEVICES)
-    {
-        // shouldn't happen, but....
-        printf("%s: mraa_uart_ow_rom_search() failed, no devices detected\n",
-               __FUNCTION__);
-        ds18b20_close(dev);
-        return NULL;
-    }
-
-    if (rv == MRAA_ERROR_UART_OW_DATA_ERROR)
-    {
-        printf("%s: mraa_uart_ow_rom_search() failed, Bus/Data error\n",
-               __FUNCTION__);
-        ds18b20_close(dev);
-        return NULL;
-    }
-
-    while (rv == MRAA_SUCCESS)
-    {
-        // The first byte (id[0]]) is the device type (family) code.  We
-        // are only interested in the family code for these devices.
-
-        if ((uint8_t)id[0] == DS18B20_FAMILY_CODE)
-        {
-            ds18b20_info_t *dsPtr =
-                (ds18b20_info_t *)realloc((void *)dev->devices,
-                                          sizeof(ds18b20_info_t) *
-                                          (dev->numDevices + 1));
-
-            if (!dsPtr)
-            {
-                printf("%s: realloc(%zu) failed\n",
-                       __FUNCTION__,
-                       sizeof(ds18b20_info_t) * (dev->numDevices + 1));
-                ds18b20_close(dev);
-                return NULL;
-            }
-
-            dev->devices = dsPtr;
-            // copy in the romcode
-            memcpy(dev->devices[dev->numDevices].id, id,
-                   MRAA_UART_OW_ROMCODE_SIZE);
-            // set defaults for now
-            dev->devices[dev->numDevices].temperature = 0.0;
-            dev->devices[dev->numDevices].resolution =
-                DS18B20_RESOLUTION_12BITS;
-
-            dev->numDevices++;
-        }
-
-        // on to the next one
-        rv = mraa_uart_ow_rom_search(dev->ow, 0, id);
-    }
-
-    if (!dev->numDevices || !dev->devices)
-    {
-        printf("%s: no DS18B20 devices found on bus\n", __FUNCTION__);
-        ds18b20_close(dev);
-        return NULL;
-    }
-
-    // iterate through the found devices and query their resolutions
-    for (unsigned int i=0; i<dev->numDevices; i++)
-    {
-        // read only the first 5 bytes of the scratchpad
-        static const int numScratch = 5;
-        uint8_t scratch[numScratch];
-
-        mraa_uart_ow_command(dev->ow, DS18B20_CMD_READ_SCRATCHPAD,
-                             dev->devices[i].id);
-
-        int j;
-        for (j=0; j<numScratch; j++)
-            scratch[j] = (uint8_t)mraa_uart_ow_read_byte(dev->ow);
-
-        // config byte, shift the resolution to bit 0
-        scratch[4] >>= _DS18B20_CFG_RESOLUTION_SHIFT;
-
-        switch (scratch[4] & _DS18B20_CFG_RESOLUTION_MASK)
-        {
-        case 0: dev->devices[i].resolution = DS18B20_RESOLUTION_9BITS; break;
-        case 1: dev->devices[i].resolution = DS18B20_RESOLUTION_10BITS; break;
-        case 2: dev->devices[i].resolution = DS18B20_RESOLUTION_11BITS; break;
-        case 3: dev->devices[i].resolution = DS18B20_RESOLUTION_12BITS; break;
-        }
-
-        // reset the bus
-        mraa_uart_ow_reset(dev->ow);
-    }
-
-    return dev;
-}
-
-void ds18b20_close(ds18b20_context dev)
-{
-    assert(dev != NULL);
-
-    if (dev->devices)
-        free(dev->devices);
-    if (dev->ow)
-        mraa_uart_ow_stop(dev->ow);
-
-    free(dev);
-}
-
-void ds18b20_update(const ds18b20_context dev, int index)
-{
-    assert(dev != NULL);
-
-    if (index >= (int)dev->numDevices)
-    {
-        printf("%s: device index %d out of range\n", __FUNCTION__, index);
-        return;
-    }
-
-    // should we update all of them?
-    bool doAll = (index < 0) ? true : false;
-
-    if (doAll)
-    {
-        // if we want to update all of them, we will first send the
-        // convert command to all of them, then wait.  This will be
-        // faster, timey-wimey wise, then converting, sleeping, and
-        // reading each individual sensor.
-        for (unsigned int i=0; i<dev->numDevices; i++)
-            mraa_uart_ow_command(dev->ow, DS18B20_CMD_CONVERT, dev->devices[i].id);
-    }
-    else
-        mraa_uart_ow_command(dev->ow, DS18B20_CMD_CONVERT, dev->devices[index].id);
-
-    // wait for conversion(s) to finish
-    upm_delay_ms(750); // 750ms max
-
-    if (doAll)
-    {
-        for (unsigned int i=0; i<dev->numDevices; i++)
-            dev->devices[i].temperature = readSingleTemp(dev, i);
-    }
-    else
-        dev->devices[index].temperature = readSingleTemp(dev, index);
-}
-
-// utility function to read temp data from a single sensor
-static float readSingleTemp(const ds18b20_context dev, unsigned int index)
-{
-    assert(dev != NULL);
-
-    if (index >= dev->numDevices)
-    {
-        printf("%s: device index %d out of range\n", __FUNCTION__, index);
-        return 0.0;
-    }
-
-    static const int numScratch = 9;
-    uint8_t scratch[numScratch];
-
-    // read the 9-byte scratchpad
-    mraa_uart_ow_command(dev->ow, DS18B20_CMD_READ_SCRATCHPAD,
-                         dev->devices[index].id);
-    int i;
-    for (i=0; i<numScratch; i++)
-        scratch[i] = (uint8_t)mraa_uart_ow_read_byte(dev->ow);
-
-    // validate cksum -- if we get an error, we will warn and simply
-    // return the current (previously read) temperature
-    uint8_t crc = mraa_uart_ow_crc8(scratch, 8);
-
-    if (crc != scratch[8])
-    {
-        printf("%s: crc check failed for device %d.  Got %02x, expected %02x."
-               " Returning previously measured temperature\n",
-               __FUNCTION__, index, scratch[8], crc);
-        return dev->devices[index].temperature;
-    }
-
-    // check the sign bit(s)
-    bool negative = (scratch[1] & 0x80) ? true : false;
-
-    // shift everything into position
-    int16_t temp = (scratch[1] << 8) | scratch[0];
-
-    // grab the fractional
-    uint8_t frac = temp & 0x0f;
-
-    // depending on the resolution, some frac bits should be ignored, so
-    // we mask them off.  For 12bits, all bits are valid so we leve them
-    // alone.
-
-    switch (dev->devices[index].resolution)
-    {
-    case DS18B20_RESOLUTION_9BITS: frac &= 0x08; break;
-    case DS18B20_RESOLUTION_10BITS: frac &= 0x0c; break;
-    case DS18B20_RESOLUTION_11BITS: frac &= 0x0e; break;
-        // use all bits for 12b
-    case DS18B20_RESOLUTION_12BITS: break;
-    default:
-        printf("%s: Internal error, invalid resolution %d\n",
-               __FUNCTION__, (int)dev->devices[index].resolution);
-        break;
-    }
-
-    // remove the fractional with extreme prejudice
-    temp >>= 4;
-
-    // compensate for sign
-    if (negative)
-        temp -= 65536; // 2^^16
-
-    // convert
-    return ( (float)temp + ((float)frac * 0.0625) );
-}
-
-float ds18b20_get_temperature(const ds18b20_context dev, unsigned int index)
-{
-    assert(dev != NULL);
-
-    if (index >= dev->numDevices)
-    {
-        printf("%s: device index %d out of range\n", __FUNCTION__, index);
-        return 0.0;
-    }
-
-    return dev->devices[index].temperature;
-}
-
-void ds18b20_set_resolution(const ds18b20_context dev, unsigned int index,
-                            DS18B20_RESOLUTIONS_T res)
-{
-    assert(dev != NULL);
-
-    if (index >= dev->numDevices)
-    {
-        printf("%s: device index %d out of range\n", __FUNCTION__, index);
-        return;
-    }
-
-    static const int numScratch = 9;
-    uint8_t scratch[numScratch];
-
-    // read the 9-byte scratchpad
-    mraa_uart_ow_command(dev->ow, DS18B20_CMD_READ_SCRATCHPAD,
-                         dev->devices[index].id);
-    int i;
-    for (i=0; i<numScratch; i++)
-        scratch[i] = (uint8_t)mraa_uart_ow_read_byte(dev->ow);
-
-    // resolution is stored in byte 4
-    scratch[4] = ((scratch[4] & ~(_DS18B20_CFG_RESOLUTION_MASK <<
-                                  _DS18B20_CFG_RESOLUTION_SHIFT))
-                  | (res << _DS18B20_CFG_RESOLUTION_SHIFT));
-
-    // now, write back, we only write 3 bytes (2-4), no cksum.
-    mraa_uart_ow_command(dev->ow, DS18B20_CMD_WRITE_SCRATCHPAD,
-                         dev->devices[index].id);
-    for (i=0; i<3; i++)
-        mraa_uart_ow_write_byte(dev->ow, scratch[i+2]);
-}
-
-void ds18b20_copy_scratchpad(const ds18b20_context dev, unsigned int index)
-{
-    assert(dev != NULL);
-
-    if (index >= dev->numDevices)
-    {
-        printf("%s: device index %d out of range\n", __FUNCTION__, index);
-        return;
-    }
-
-    // issue the command
-    mraa_uart_ow_command(dev->ow, DS18B20_CMD_COPY_SCRATCHPAD,
-                         dev->devices[index].id);
-
-    upm_delay(1); // to be safe...
-}
-
-void ds18b20_recall_eeprom(const ds18b20_context dev, unsigned int index)
-{
-    assert(dev != NULL);
-
-    if (index >= dev->numDevices)
-    {
-        printf("%s: device index %d out of range\n", __FUNCTION__, index);
-        return;
-    }
-
-    // issue the command
-    mraa_uart_ow_command(dev->ow, DS18B20_CMD_RECALL_EEPROM,
-                         dev->devices[index].id);
-
-    // issue read timeslots until a '1' is read back, indicating completion
-    while (!mraa_uart_ow_bit(dev->ow, 1))
-        upm_delay_us(100);
-}
-
-unsigned int ds18b20_devices_found(const ds18b20_context dev)
-{
-    assert(dev != NULL);
-
-    return dev->numDevices;
-}
-
-const uint8_t *ds18b20_get_id(const ds18b20_context dev, unsigned int index)
-{
-    assert(dev != NULL);
-
-    if (index >= dev->numDevices)
-        return NULL;
-
-    static uint8_t id[MRAA_UART_OW_ROMCODE_SIZE];
-
-    memcpy(id, dev->devices[index].id, MRAA_UART_OW_ROMCODE_SIZE);
-    return id;
-}
diff --git a/src/ds18b20/ds18b20.cxx b/src/ds18b20/ds18b20.cxx
deleted file mode 100644
index 2c265c8..0000000
--- a/src/ds18b20/ds18b20.cxx
+++ /dev/null
@@ -1,120 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2016 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <iostream>
-#include <stdexcept>
-
-#include "ds18b20.hpp"
-
-using namespace upm;
-using namespace std;
-
-// conversion from celsius to fahrenheit
-static float c2f(float c)
-{
-    return (c * (9.0 / 5.0) + 32.0);
-}
-
-DS18B20::DS18B20(int uart) :
-    m_ds18b20(ds18b20_init(uart))
-{
-    if (!m_ds18b20)
-        throw std::runtime_error(string(__FUNCTION__)
-                                 + ": ds18b20_init() failed");
-}
-
-DS18B20::~DS18B20()
-{
-    ds18b20_close(m_ds18b20);
-}
-
-void DS18B20::init()
-{
-    // deprecated function.  Handled in ctor now.
-}
-
-void DS18B20::update(int index)
-{
-    if (index >= (int)ds18b20_devices_found(m_ds18b20))
-        throw std::out_of_range(string(__FUNCTION__)
-                                + ": Invalid index");
-
-    ds18b20_update(m_ds18b20, index);
-}
-
-float DS18B20::getTemperature(unsigned int index, bool fahrenheit)
-{
-    if (index >= ds18b20_devices_found(m_ds18b20))
-        throw std::out_of_range(string(__FUNCTION__)
-                                + ": Invalid index");
-
-    if (fahrenheit)
-        return c2f(ds18b20_get_temperature(m_ds18b20, index));
-    else
-        return ds18b20_get_temperature(m_ds18b20, index);
-}
-
-void DS18B20::setResolution(unsigned int index, DS18B20_RESOLUTIONS_T res)
-{
-    if (index >= ds18b20_devices_found(m_ds18b20))
-    {
-        throw std::out_of_range(std::string(__FUNCTION__) +
-                                ": device index out of range");
-    }
-
-    ds18b20_set_resolution(m_ds18b20, index, res);
-}
-
-void DS18B20::copyScratchPad(unsigned int index)
-{
-    if (index >= ds18b20_devices_found(m_ds18b20))
-    {
-        throw std::out_of_range(std::string(__FUNCTION__) +
-                                ": device index out of range");
-    }
-
-    ds18b20_copy_scratchpad(m_ds18b20, index);
-}
-
-void DS18B20::recallEEPROM(unsigned int index)
-{
-    if (index >= ds18b20_devices_found(m_ds18b20))
-    {
-        throw std::out_of_range(std::string(__FUNCTION__) +
-                                ": device index out of range");
-    }
-
-    ds18b20_recall_eeprom(m_ds18b20, index);
-}
-
-string DS18B20::getId(unsigned int index)
-{
-    if (index >= ds18b20_devices_found(m_ds18b20))
-    {
-        throw std::out_of_range(std::string(__FUNCTION__) +
-                                ": device index out of range");
-    }
-    return string((char *)ds18b20_get_id(m_ds18b20, index),
-                  MRAA_UART_OW_ROMCODE_SIZE);
-}
diff --git a/src/ds18b20/ds18b20.h b/src/ds18b20/ds18b20.h
deleted file mode 100644
index 15988c4..0000000
--- a/src/ds18b20/ds18b20.h
+++ /dev/null
@@ -1,148 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2016-2017 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#pragma once
-
-#include <stdlib.h>
-#include <unistd.h>
-#include <string.h>
-
-#include <mraa/uart_ow.h>
-#include <upm.h>
-#include "ds18b20_defs.h"
-
-#ifdef __cplusplus
-extern "C" {
-#endif
-
-    /**
-     * @file ds18b20.h
-     * @library ds18b20
-     * @brief C API for the DS18B20 1-Wire Temperature Sensor
-     *
-     * @include ds18b20.c
-     */
-
-    // forward declaration
-    typedef struct _ds18b20_info_t ds18b20_info_t;
-
-    /**
-     * Device context
-     */
-    typedef struct _ds18b20_context {
-        mraa_uart_ow_context ow;
-
-        // number of devices found
-        unsigned int numDevices;
-
-        // list of allocated ds18b20_info_t instances
-        ds18b20_info_t *devices;
-    } *ds18b20_context;
-
-    /**
-     * This function will initilaize and search the 1-wire bus and store
-     * information on each DS18B20 device detected on the bus.  If no
-     * devices are found, NULL is returned.  Once this function
-     * completes successfully, you can use ds18b20_devices_found() to
-     * determine how many devices were detected.
-     *
-     * @return device context, or NULL on error.
-     */
-    ds18b20_context ds18b20_init(unsigned int uart);
-
-    /**
-     * Close the device and deallocate all resources.
-     */
-    void ds18b20_close(ds18b20_context dev);
-
-    /**
-     * Update our stored temperature for a device.  This method must
-     * be called prior to ds18b20_get_temperature().
-     *
-     * @param index The device index to access (starts at 0).  Specify
-     * -1 to query all detected devices.  Default: -1
-     */
-    void ds18b20_update(const ds18b20_context dev, int index);
-
-    /**
-     * Get the current temperature.  ds18b20_update() must have been
-     * called prior to calling this method.
-     *
-     * @param index The device index to access (starts at 0).
-     * @return The last temperature reading in Celsius.
-     */
-    float ds18b20_get_temperature(const ds18b20_context dev,
-                                  unsigned int index);
-
-    /**
-     * Set the device resolution for a device.  These devices support
-     * 9, 10, 11, and 12 bits of resolution, with the default from the
-     * factory at 12 bits.
-     *
-     * @param index The device index to access (starts at 0).
-     * @param res One of the DS18B20_RESOLUTIONS_T values
-     */
-    void ds18b20_set_resolution(const ds18b20_context dev, unsigned int index,
-                                DS18B20_RESOLUTIONS_T res);
-
-    /**
-     * Copy the device's scratchpad memory to the EEPROM.  This
-     * includes the configuration byte (resolution).
-     *
-     * @param index The device index to access (starts at 0).
-     */
-    void ds18b20_copy_scratchpad(const ds18b20_context dev, unsigned int index);
-
-    /**
-     * Copy the device's EEPROM memory to the scratchpad.  This method
-     * will return when the copy completes.  This operation is
-     * performed by the device automatically on power up, so it is
-     * rarely needed.
-     *
-     * @param index The device index to access (starts at 0).
-     */
-    void ds18b20_recall_eeprom(const ds18b20_context dev, unsigned int index);
-
-    /**
-     * This method will return the number of DS18B20 devices that were
-     * found on the bus by ds18b20_init().
-     *
-     * @return number of DS18B20's that were found on the bus
-     */
-    unsigned int ds18b20_devices_found(const ds18b20_context dev);
-
-    /**
-     * Return an 8 byte string representing the unique device ID (1-wire
-     * romcode) for a given device index.  The pointer returned is
-     * statically allocated and will be overwritten on each call.
-     *
-     * @param index The device index to access (starts at 0).
-     * @return pointer to 8 byte DS18B20_ROMCODE_T representing the 1-wire
-     * device's unique romcode, or NULL on error.
-     */
-    const uint8_t *ds18b20_get_id(const ds18b20_context dev,
-                                  unsigned int index);
-
-#ifdef __cplusplus
-}
-#endif
diff --git a/src/ds18b20/ds18b20.hpp b/src/ds18b20/ds18b20.hpp
deleted file mode 100644
index fe254f6..0000000
--- a/src/ds18b20/ds18b20.hpp
+++ /dev/null
@@ -1,219 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2016-2017 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#pragma once
-
-#include <string>
-#include <iostream>
-#include <map>
-
-#include <stdlib.h>
-#include <unistd.h>
-#include <string.h>
-
-#include <mraa/common.hpp>
-#include <mraa/uart_ow.hpp>
-
-#include <ds18b20.h>
-
-#define DS18B20_DEFAULT_UART 0
-
-namespace upm {
-    /**
-     * @brief DS18B20 1-Wire Temperature Sensor
-     * @defgroup ds18b20 libupm-ds18b20
-     * @ingroup maxim uart
-     */
-
-    /**
-     * @library ds18b20
-     * @sensor ds18b20
-     * @comname Programmable Resolution 1-Wire Digital Thermometer
-     * @type uart
-     * @man maxim
-     * @con uart
-     * @web https://www.sparkfun.com/products/11050
-     *
-     * @brief API for the DS18B20 1-Wire Temperature Sensor
-     *
-     * This driver supports, and was tested with, a DS18B20 with
-     * external power.
-     *
-     * Multiple DS18B20 devices can be connected to this bus.  This
-     * module will identify all such devices connected, and allow you
-     * to access them using an index starting at 0.
-     *
-     * Parasitic power is not currently supported due
-     * to the very tight 10us limit on switching a GPIO properly to
-     * supply power during certain operations.  For this reason, you
-     * should use external power for your sensors.
-     *
-     * Setting the alarm values (Tl, Th) is also not supported, since
-     * this is only useful when doing a 1-wire device search looking
-     * for devices in an alarm state, a capability not yet supported
-     * in MRAA.  In reality, this is trivial to handle yourself in
-     * your application.
-     *
-     * This device requires the use of a TTL level UART (specifically
-     * through the UartOW MRAA context class) to provide access to a
-     * Dallas 1-wire bus. It is important to realize that the UART is
-     * only being used to provide an interface to devices on a Dallas
-     * 1-wire compliant bus.
-     *
-     * A circuit like the following should be used for the UART
-     * interface (ASCII schematic - best viewed in a fixed monospace
-     * font):
-     *
-     * -|
-     * U|      (D1)
-     * A| TX---|<--+
-     * R|          |
-     * T| RX-------o--------o  >to 1-wire data bus
-     * -|
-     *
-     *
-     *             Vcc
-     *              |
-     *              o------------+
-     *              |            |
-     *              R1           |
-     *              |            o(+)
-     * >1-wire------o--------o[DS18B20]
-     *                           o(-)
-     *                           |
-     *                          GND
-     *
-     * D1 = 1N4148
-     * R1 = 4.7K
-     *
-     * The cathode of D1 is connected to the UART TX.
-     *
-     * @snippet ds18b20.cxx Interesting
-     */
-
-  class DS18B20 {
-  public:
-
-      /**
-       * DS18B20 object constructor
-       *
-       * This method will search the 1-wire bus and store information on
-       * each device detected on the bus.  If no devices are found, an
-       * exception is thrown.  Once this function completes
-       * successfully, you can use devicesFound() to determine how many
-       * devices were detected.
-       *
-       * @param uart Default UART to use (0 or 1). Default is 0.
-       */
-      DS18B20(int uart=DS18B20_DEFAULT_UART);
-
-      /**
-       * DS18B20 object destructor
-       */
-      ~DS18B20();
-
-      /**
-       * @deprecated This method is deprecated.  It's functionality is
-       * handled in the constructor now.
-       */
-      void init();
-
-      /**
-       * Update our stored temperature for a device.  This method must
-       * be called prior to getTemperature().
-       *
-       * @param index The device index to access (starts at 0).  Specify
-       * -1 to query all detected devices.  Default: -1
-       */
-      void update(int index=-1);
-
-      /**
-       * Get the current temperature.  update() must have been called
-       * prior to calling this method.
-       *
-       * @param index The device index to access (starts at 0).
-       * @param fahrenheit true to return the temperature in degrees
-       * fahrenheit, false to return the temperature in degrees celsius.
-       * The default is false (degrees Celsius).
-       * @return The last temperature reading in Celsius or Fahrenheit
-       */
-      float getTemperature(unsigned int index, bool fahrenheit=false);
-
-      /**
-       * Set the device resolution for a device.  These devices support
-       * 9, 10, 11, and 12 bits of resolution, with the default from the
-       * factory at 12 bits.
-       *
-       * @param index The device index to access (starts at 0).
-       * @param res One of the RESOLUTIONS_T values
-       */
-      void setResolution(unsigned int index, DS18B20_RESOLUTIONS_T res);
-
-      /**
-       * Copy the device's scratchpad memory to the EEPROM.  This
-       * includes the configuration byte (resolution).
-       *
-       * @param index The device index to access (starts at 0).
-       */
-      void copyScratchPad(unsigned int index);
-
-      /**
-       * Copy the device's EEPROM memory to the scratchpad.  This method
-       * will return when the copy completes.  This operation is
-       * performed by the device automatically on power up, so it is
-       * rarely needed.
-       *
-       * @param index The device index to access (starts at 0).
-       */
-      void recallEEPROM(unsigned int index);
-
-      /**
-       * This method will return the number of DS18B20 devices that were
-       * found on the bus by init().
-       *
-       * @return number of DS18B20's that were found on the bus
-       */
-      int devicesFound()
-          {
-              return ds18b20_devices_found(m_ds18b20);
-          }
-
-      /**
-       * Return an 8 byte string representing the unique device ID
-       * (1-wire romcode) for a given device index.
-       *
-       * @param index The device index to access (starts at 0).
-       * @return 8 byte string representing the 1-wire device's unique
-       * romcode.
-       */
-      std::string getId(unsigned int index);
-
-  protected:
-      ds18b20_context m_ds18b20;
-
-  private:
-      /* Disable implicit copy and assignment operators */
-      DS18B20(const DS18B20&) = delete;
-      DS18B20 &operator=(const DS18B20&) = delete;
-  };
-}
diff --git a/src/ds18b20/ds18b20.i b/src/ds18b20/ds18b20.i
deleted file mode 100644
index 195623f..0000000
--- a/src/ds18b20/ds18b20.i
+++ /dev/null
@@ -1,18 +0,0 @@
-%include "../common_top.i"
-
-/* BEGIN Java syntax  ------------------------------------------------------- */
-#ifdef SWIGJAVA
-JAVA_JNI_LOADLIBRARY(javaupm_ds18b20)
-#endif
-/* END Java syntax */
-
-/* BEGIN Common SWIG syntax ------------------------------------------------- */
-%include "carrays.i"
-%{
-#include "ds18b20_defs.h"
-#include "ds18b20.hpp"
-%}
-%include "ds18b20_defs.h"
-%include "ds18b20.hpp"
-%array_class(char, charArray);
-/* END Common SWIG syntax */
diff --git a/src/ds18b20/ds18b20.json b/src/ds18b20/ds18b20.json
deleted file mode 100644
index 09a5d06..0000000
--- a/src/ds18b20/ds18b20.json
+++ /dev/null
@@ -1,39 +0,0 @@
-{
-    "Library": "ds18b20",
-    "Description": "API for the DS18B20 1-Wire Temperature Sensor",
-    "Sensor Class":
-    {
-        "DS18B20":
-        {
-            "Name": "DS18B20 1-Wire Temperature Sensor",
-            "Description": "The driver was tested with the DFRobot EC Analog Sensor. This device measure the electrical conductivity of an aqueous solution.  The included probe is a K=1 model. Calibration is somewhat complicated - see the DFRobot wiki for instructions on calibration.  Functions are provided to supply the appropriate values.  By default, the values used in the DFRobot arduino example are used.",
-            "Aliases": ["ds18b20"],
-            "Categories": ["ec", "conductivity"],
-            "Connections": ["uart"],
-            "Project Type": ["prototyping", "industrial"],
-            "Manufacturers": ["dallas"],
-            "Kits": [],
-            "Examples":
-            {
-                "Java": [""],
-                "Python": ["ds18b20.py"],
-                "Node.js": ["ds18b20.js"],
-                "C++": ["ds18b20.cxx"],
-                "C": ["ds18b20.c"]
-            },
-            "Specifications":
-            {
-                "Operating Voltage": {"unit": "V", "low": 3.0, "high": 5.5},
-                "Measurement Range": {"unit": "degC", "low": -55, "high": 125},
-                "+-.5degC Accuracy Range": {"unit": "degC", "low": -10, "high": 85}
-
-            },
-            "Urls" :
-            {
-                "Product Pages": ["https://www.sparkfun.com/products/11050"],
-                "Datasheets": ["http://cdn.sparkfun.com/datasheets/Sensors/Temp/DS18B20.pdf"],
-                "Schematics": [""]
-            }
-        }
-    }
-}
diff --git a/src/ds18b20/ds18b20_defs.h b/src/ds18b20/ds18b20_defs.h
deleted file mode 100644
index b7ba333..0000000
--- a/src/ds18b20/ds18b20_defs.h
+++ /dev/null
@@ -1,63 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2017 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#pragma once
-
-#ifdef __cplusplus
-extern "C" {
-#endif
-
-// The family code for these devices.  We handle all of them that
-// are found on the bus.
-#define DS18B20_FAMILY_CODE 0x28
-
-    // commands
-    typedef enum {
-        DS18B20_CMD_CONVERT                 = 0x44, // start a temp conversion
-        DS18B20_CMD_WRITE_SCRATCHPAD        = 0x4e,
-        DS18B20_CMD_READ_SCRATCHPAD         = 0xbe,
-        DS18B20_CMD_COPY_SCRATCHPAD         = 0x48, // copy scratchpad to EEPROM
-        DS18B20_CMD_RECALL_EEPROM           = 0xb8, // copy EEPROM to scratchpad
-        DS18B20_CMD_READ_POWER_SUPPLY       = 0xb4  // parasitically powered?
-    } DS18B20_CMD_T;
-
-    // config register (scratchpad[4])
-    typedef enum {
-        DS18B20_CFG_RESOLUTION_R0                   = 0x20,
-        DS18B20_CFG_RESOLUTION_R1                   = 0x40,
-        _DS18B20_CFG_RESOLUTION_MASK                = 3,
-        _DS18B20_CFG_RESOLUTION_SHIFT               = 5
-
-        // all other bits reserved and non-writable
-    } DS18B20_CFG_BITS_T;
-
-    typedef enum {
-        DS18B20_RESOLUTION_9BITS                    = 0, // 93.75ms (tconv/8)
-        DS18B20_RESOLUTION_10BITS                   = 1, // 187.5 (tconv/4)
-        DS18B20_RESOLUTION_11BITS                   = 2, // 375ms (tconv/2)
-        DS18B20_RESOLUTION_12BITS                   = 3  // 750ms (tconv)
-    } DS18B20_RESOLUTIONS_T;
-
-#ifdef __cplusplus
-}
-#endif
diff --git a/src/ds18b20/ds18b20_fti.c b/src/ds18b20/ds18b20_fti.c
deleted file mode 100644
index 5349808..0000000
--- a/src/ds18b20/ds18b20_fti.c
+++ /dev/null
@@ -1,120 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2017 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include "ds18b20.h"
-
-#include <stdio.h>
-#include <stdlib.h>
-
-#include "upm_fti.h"
-#include "fti/upm_sensor.h"
-
-/**
- * This file implements the Function Table Interface (FTI) for this sensor
- */
-
-const char upm_ds18b20_name[] = "DS18B20";
-const char upm_ds18b20_description[] = "DS18B20 DS 1-wire Temperature Sensor";
-const upm_protocol_t upm_ds18b20_protocol[] = {UPM_UART};
-const upm_sensor_t upm_ds18b20_category[] = {UPM_TEMPERATURE};
-
-// forward declarations
-const upm_sensor_descriptor_t upm_ds18b20_get_descriptor();
-const void* upm_ds18b20_get_ft(upm_sensor_t sensor_type);
-upm_result_t upm_ds18b20_get_value(void* dev, float* tempval,
-                                upm_temperature_u unit);
-void* upm_ds18b20_init_name();
-void upm_ds18b20_close(void* dev);
-
-const upm_sensor_descriptor_t upm_ds18b20_get_descriptor()
-{
-    upm_sensor_descriptor_t usd;
-    usd.name = upm_ds18b20_name;
-    usd.description = upm_ds18b20_description;
-    usd.protocol_size = 1;
-    usd.protocol = upm_ds18b20_protocol;
-    usd.category_size = 1;
-    usd.category = upm_ds18b20_category;
-    return usd;
-}
-
-static const upm_sensor_ft ft =
-{
-    .upm_sensor_init_name = &upm_ds18b20_init_name,
-    .upm_sensor_close = &upm_ds18b20_close,
-    .upm_sensor_get_descriptor = &upm_ds18b20_get_descriptor
-};
-
-static const upm_temperature_ft tft =
-{
-    .upm_temperature_get_value = &upm_ds18b20_get_value,
-};
-
-const void* upm_ds18b20_get_ft(upm_sensor_t sensor_type)
-{
-    if (sensor_type == UPM_SENSOR)
-        return &ft;
-
-    if (sensor_type == UPM_TEMPERATURE)
-        return &tft;
-
-    return NULL;
-}
-
-void* upm_ds18b20_init_name()
-{
-    return NULL;
-}
-
-void upm_ds18b20_close(void* dev)
-{
-    ds18b20_close((ds18b20_context)dev);
-}
-
-// FTI/temp has no way to indicate devices on a bus, so we always use
-// index 0 (the first detected device) for all queries.
-upm_result_t upm_ds18b20_get_value(void* dev, float* tempval,
-                                   upm_temperature_u unit)
-{
-    ds18b20_update((ds18b20_context)dev, 0);
-    // always returned in C
-    float temp = ds18b20_get_temperature((ds18b20_context)dev, 0);
-
-    switch (unit)
-        {
-        case CELSIUS:
-            *tempval = temp;
-            return UPM_SUCCESS;
-
-        case KELVIN:
-            *tempval = temp + 273.15;
-            return UPM_SUCCESS;
-
-        case FAHRENHEIT:
-            *tempval = temp * (9.0/5.0) + 32.0;
-            return UPM_SUCCESS;
-        }
-
-    return UPM_SUCCESS;
-}
diff --git a/src/ds2413/CMakeLists.txt b/src/ds2413/CMakeLists.txt
deleted file mode 100644
index c5aded6..0000000
--- a/src/ds2413/CMakeLists.txt
+++ /dev/null
@@ -1,7 +0,0 @@
-if (MRAA_OW_FOUND)
-    set (libname "ds2413")
-    set (libdescription "1-Wire Dual Channel Addressable Switch")
-    set (module_src ${libname}.cxx)
-    set (module_hpp ${libname}.hpp)
-    upm_module_init(mraa)
-endif (MRAA_OW_FOUND)
diff --git a/src/ds2413/ds2413.cxx b/src/ds2413/ds2413.cxx
deleted file mode 100644
index 24f2795..0000000
--- a/src/ds2413/ds2413.cxx
+++ /dev/null
@@ -1,165 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2016 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <iostream>
-#include <time.h>
-#include <stdexcept>
-
-#include "ds2413.hpp"
-
-using namespace upm;
-using namespace std;
-
-
-DS2413::DS2413(int uart) :
-  m_uart(uart)
-{
-  m_devicesFound = 0;
-
-  // check basic access to the 1-wire bus (presence detect)
-  mraa::Result rv;
-
-  if ((rv = m_uart.reset()) != mraa::SUCCESS)
-    {
-      throw std::runtime_error(std::string(__FUNCTION__) +
-                               ": reset() failed, no devices on bus?");
-      return;
-    }
-}
-
-DS2413::~DS2413()
-{
-}
-
-void DS2413::init()
-{
-  // iterate through the bus and build up a list of detected DS2413
-  // devices (only)
-
-  // empty the map, in case this method has already been run once
-  // before
-  m_devicesFound = 0;
-  m_deviceMap.clear();
-
-  // start the search from scratch
-  string id = m_uart.search(true);
-
-  if (id.empty())
-    {
-      throw std::runtime_error(std::string(__FUNCTION__) +
-                               ": no devices detected on bus");
-      return;
-    }
-
-  while (!id.empty())
-    {
-      // The first byte (id[0]]) is the device type (family) code.  We
-      // are only interested in the family code for this device (0x3a).
-
-      if ((uint8_t)id[0] == DS2413_FAMILY_CODE)
-        {
-          // we have a winner, add it to our map and continue searching
-
-          m_deviceMap[m_devicesFound] = id;
-          m_devicesFound++;
-        }
-
-      // continue search
-      id = m_uart.search(false);
-    }
-
-  if (!m_devicesFound)
-    {
-      throw std::runtime_error(std::string(__FUNCTION__) +
-                               ": no DS2413 devices found on bus");
-      return;
-    }
-}
-
-int DS2413::readGpios(int index)
-{
-  if (index < 0 || index >= m_devicesFound)
-    {
-      throw std::out_of_range(std::string(__FUNCTION__) +
-                              ": device index out of range");
-      return 0;
-    }
-
-  m_uart.command(ACCESS_READ, m_deviceMap[index]);
-
-  uint8_t value = m_uart.readByte();
-
-  // Validity is performed by taking the high nibble, inverting it, and
-  // copmpating it to the low nibble.  If they are equal, then the
-  // data is good.
-
-  if ( (value & 0x0f) != ((~value >> 4) & 0x0f) )
-    {
-      throw std::runtime_error(std::string(__FUNCTION__) +
-                              ": returned value failed integrity check");
-      return 0;
-    }
-
-  m_uart.reset();
-
-  // Only the 4 lsb's are relevant
-  return (value & 0x0f);
-}
-
-void DS2413::writeGpios(int index, int value)
-{
-  if (index < 0 || index >= m_devicesFound)
-    {
-      throw std::out_of_range(std::string(__FUNCTION__) +
-                              ": device index out of range");
-      return;
-    }
-
-  //  mask out everything but the first 2 bits
-  uint8_t val = (uint8_t)value & 0x03;
-
-  // the value must have the upper 8 bits written set to 1's
-  val |= 0xfc;
-
-  m_uart.command(ACCESS_WRITE, m_deviceMap[index]);
-
-  // first we write the new value, then the inverted value
-  m_uart.writeByte(val);
-  m_uart.writeByte(~val);
-
-  // now we read back a response indicating success or failure
-  uint8_t resp = m_uart.readByte();
-
-  if (resp != ACK_SUCCESS)
-    {
-      throw std::runtime_error(std::string(__FUNCTION__) +
-                               ": failed response validation");
-      return;
-    }
-
-  m_uart.reset();
-
-  return;
-
-}
diff --git a/src/ds2413/ds2413.hpp b/src/ds2413/ds2413.hpp
deleted file mode 100644
index f2d5834..0000000
--- a/src/ds2413/ds2413.hpp
+++ /dev/null
@@ -1,175 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2016 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#pragma once
-
-#include <string>
-#include <iostream>
-#include <map>
-
-#include <stdlib.h>
-#include <unistd.h>
-#include <string.h>
-
-#include <mraa/common.hpp>
-#include <mraa/uart_ow.hpp>
-
-#define DS2413_DEFAULT_UART 0
-
-namespace upm {
-    /**
-     * @brief DS2413 Modules Library
-     * @defgroup ds2413 libupm-ds2413
-     * @ingroup maxim uart gpio
-     */
-
-    /**
-     * @library ds2413
-     * @sensor ds2413
-     * @comname 1-Wire Dual Channel Addressable Switch
-     * @type gpio
-     * @man maxim
-     * @con uart
-     * @web https://learn.adafruit.com/adafruit-1-wire-gpio-breakout-ds2413/overview
-     *
-     * @brief API for the DS2413 1-Wire Dual Channel Addressable Switch
-     *
-     * The DS2413 is a dual-channel programmable I/O 1-Wire(r) chip. The
-     * PIO outputs are configured as open-drain and provide up to 20mA
-     * continuous sink capability and off-state operating voltage up
-     * to 28V.  Control and sensing of the PIO pins is performed with
-     * a dedicated device-level command protocol.
-     *
-     * This device requires the use of a UART to provide access to a
-     * Dallas 1-wire bus, via a new facility supported by MRAA (once
-     * the relevant PR is accepted), using the UartOW access class.
-     * It is important to realize that the UART is only being used to
-     * access and control a Dallas 1-wire compliant bus, it is not
-     * actually a UART device.
-     *
-     * Multiple DS2413 devices can be connected to this bus.  This
-     * module will identify all such devices connected, and allow you
-     * to access them using an index starting at 0.
-     *
-     * @snippet ds2413.cxx Interesting
-     */
-
-  class DS2413 {
-  public:
-
-    // The family code for these devices.  We handle all of them that
-    // are found on the bus.
-    static const uint8_t DS2413_FAMILY_CODE = 0x3a;
-
-    // commands
-    typedef enum {
-      ACCESS_READ                         = 0xf5,
-      ACCESS_WRITE                        = 0x5a
-    } DS2413_CMD_T;
-
-    // possible ack responses for gpio writes
-    typedef enum {
-      ACK_SUCCESS                         = 0xaa,
-      ACK_FAILURE                         = 0xff
-    } DS2413_ACK_T;
-
-    /**
-     * DS2413 object constructor
-     *
-     * @param uart Default UART to use (0 or 1). Default is 0.
-     */
-    DS2413(int uart=DS2413_DEFAULT_UART);
-
-    /**
-     * DS2413 object destructor
-     */
-    ~DS2413();
-
-    /**
-     * This method will search the 1-wire bus and store information on
-     * each device detected on the bus.  If no devices are found, an
-     * exception is thrown.  Once this function completes
-     * successfully, you can use devicesFound() to determine how many
-     * devices were detected.
-     */
-    void init();
-
-    /**
-     * This method will return the number of DS2413 devices that were
-     * found on the bus.
-     *
-     * @return number of DS2413's that were found on the bus
-     */
-    int devicesFound()
-    {
-      return m_devicesFound;
-    }
-
-    /**
-     * Read the GPIO latches and values for a given device.  Only the
-     * lower 4 bits of the return value have any meaning.  The bits
-     * are formatted as follows (from msb to lsb):
-     *  <gpioB latch> <gpioB value> <gpioA latch> <gpioA value>
-     *
-     * @param index The device index to access (starts at 0). Default
-     * is the first device (index = 0)
-     * @return the 4 bit status of the 2 gpios
-     */
-    int readGpios(int index=0);
-
-    /**
-     * Write the given values to the gpio latches for a given device.
-     * Only the lower 2 bits of the value have any meaning.  The lsb
-     * is gor gpioA and the next lsb is for gpioB:
-     *  <gpioB latch> <gpioA latch>
-     *
-     * @param index The device index to access (starts at 0).
-     * @param value the value to write to the gpio latches
-     */
-    void writeGpios(int index, int value);
-
-    /**
-     * Return an 8 byte string representing the unique device ID for a
-     * given device index.  If the index is invalid, an empty strig
-     * will be returned.
-     *
-     * @param index The device index to access (starts at 0).
-     * @return 8 byte string representing the 1-wire device's unique
-     * rom code.
-     */
-    std::string getId(int index)
-    {
-      return m_deviceMap[index];
-    }
-
-  protected:
-    mraa::UartOW m_uart;
-
-    // the total number of devices found
-    int m_devicesFound;
-
-    std::map<int, std::string> m_deviceMap;
-
-  private:
-  };
-}
diff --git a/src/ds2413/ds2413.i b/src/ds2413/ds2413.i
deleted file mode 100644
index e29979a..0000000
--- a/src/ds2413/ds2413.i
+++ /dev/null
@@ -1,16 +0,0 @@
-%include "../common_top.i"
-
-/* BEGIN Java syntax  ------------------------------------------------------- */
-#ifdef SWIGJAVA
-JAVA_JNI_LOADLIBRARY(javaupm_ds2413)
-#endif
-/* END Java syntax */
-
-/* BEGIN Common SWIG syntax ------------------------------------------------- */
-%include "carrays.i"
-%{
-#include "ds2413.hpp"
-%}
-%include "ds2413.hpp"
-%array_class(char, charArray);
-/* END Common SWIG syntax */
diff --git a/src/ds2413/ds2413.json b/src/ds2413/ds2413.json
deleted file mode 100644
index 21dd594..0000000
--- a/src/ds2413/ds2413.json
+++ /dev/null
@@ -1,39 +0,0 @@
-{
-    "Library": "ds2413",
-    "Description": "1-Wire Dual Channel Addressable Switch Library",
-    "Sensor Class":
-    {
-        "DS2413":
-        {
-            "Name": "1-Wire Dual Channel Addressable Switch",
-            "Description": "The DS2413 is a dual-channel programmable I/O 1-Wire(r) chip. The PIO outputs are configured as open-drain and provide up to 20mA continuous sink capability and off-state operating voltage up to 28V.  Control and sensing of the PIO pins is performed with a dedicated device-level command protocol. This device requires the use of a UART to provide access to a Dallas 1-wire bus, via a new facility supported by MRAA (once the relevant PR is accepted), using the UartOW access class. It is important to realize that the UART is only being used to access and control a Dallas 1-wire compliant bus, it is not actually a UART device. Multiple DS2413 devices can be connected to this bus.  This module will identify all such devices connected, and allow you to access them using an index starting at 0.",
-            "Aliases": ["ds2413"],
-            "Categories": ["switch"],
-            "Connections": ["uart"],
-            "Project Type": ["prototyping", "industrial"],
-            "Manufacturers": ["maxim", "adafruit"],
-            "Kits": [],
-            "Examples":
-            {
-                "Java": [],
-                "Python": ["ds2413.py"],
-                "Node.js": ["ds2413.js"],
-                "C++": ["ds2413.cxx"],
-                "C": []
-            },
-            "Specifications":
-            {
-                "Operating Voltage": {"unit": "V", "low": 2.8, "high": 5.5},
-                "Input Load Current": {"unit": "uA", "low": 3.5, "high": 950},
-                "Operating Temperature": {"unit": "degC", "low": 0, "high": 70}
-
-            },
-            "Urls" :
-            {
-                "Product Pages": ["http://www.maximintegrated.com/datasheet/index.mvp/id/4588", "https://learn.adafruit.com/adafruit-1-wire-gpio-breakout-ds2413/overview"],
-                "Datasheets": ["http://www.adafruit.com/datasheets/DS2413.pdf"],
-                "Schematics": ["https://learn.adafruit.com/assets/15639"]
-            }
-        }
-    }
-}
diff --git a/src/e50hx/CMakeLists.txt b/src/e50hx/CMakeLists.txt
deleted file mode 100644
index 2d8dccd..0000000
--- a/src/e50hx/CMakeLists.txt
+++ /dev/null
@@ -1,8 +0,0 @@
-if (BACNET_FOUND)
-  set (libname "e50hx")
-  set (libdescription "Veris E50HX (E50H2/E50H5) Energy Meter Module")
-  set (module_src ${libname}.cxx)
-  set (module_hpp ${libname}.hpp)
-
-  upm_module_init(bacnetmstp)
-endif ()
diff --git a/src/e50hx/e50hx.cxx b/src/e50hx/e50hx.cxx
deleted file mode 100644
index f382b72..0000000
--- a/src/e50hx/e50hx.cxx
+++ /dev/null
@@ -1,129 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2016 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <unistd.h>
-#include <assert.h>
-#include <errno.h>
-#include <iostream>
-#include <stdexcept>
-#include <string>
-
-#include "e50hx.hpp"
-
-using namespace upm;
-using namespace std;
-
-
-E50HX::E50HX(uint32_t targetDeviceObjectID) :
-  BACNETUTIL(targetDeviceObjectID)
-{
-  setDebug(false);
-
-  // we disable this by default for performance reasons
-  checkReliability(false);
-}
-
-E50HX::~E50HX()
-{
-}
-
-uint16_t E50HX::getAlarmBits()
-{
-  return uint16_t(getAnalogInput(AI_Alarm_Bitmap));
-}
-
-void E50HX::writeConfig(CFG_VALUES_T config)
-{
-  setAnalogValue(AV_Config, float(config));
-}
-
-void E50HX::writeSystemType(SYSTEM_TYPES_T systype)
-{
-  setAnalogValue(AV_System_Type, float(systype));
-}
-
-void E50HX::writeCTRatioPrimary(float ctRatio)
-{
-  if (ctRatio < 5 || ctRatio > 32000)
-    {
-      throw std::out_of_range(std::string(__FUNCTION__)
-                              + ": ctRatio must be between 5-32000");
-    }
-
-  setAnalogValue(AV_CT_Ratio_Primary, ctRatio);
-}
-
-void E50HX::writeCTRatioSecondary(CT_SECONDARY_T ctRatio)
-{
-  setAnalogValue(AV_CT_Ratio_Secondary, ctRatio);
-}
-
-void E50HX::writePTRatio(float ptRatio)
-{
-  if (ptRatio < 0.01 || ptRatio > 320.0)
-    {
-      throw std::out_of_range(std::string(__FUNCTION__)
-                              + ": ptRatio must be between 0.01-320.0");
-    }
-
-  setAnalogValue(AV_PT_Ratio, ptRatio);
-}
-
-void E50HX::writeSystemVoltage(float sysVolts)
-{
-  if (sysVolts < 82.0 || sysVolts > 32000.0)
-    {
-      throw std::out_of_range(std::string(__FUNCTION__)
-                              + ": sysVolts must be between 82.0-32000.0");
-    }
-
-  setAnalogValue(AV_System_Voltage, sysVolts);
-}
-
-void E50HX::writeDisplayUnits(DISP_UNITS_T dispUnits)
-{
-  setAnalogValue(AV_Display_Units, dispUnits);
-}
-
-void E50HX::writePhaseLossVT(float phaseLoss)
-{
-  if (phaseLoss < 1.0 || phaseLoss > 99.0)
-    {
-      throw std::out_of_range(std::string(__FUNCTION__)
-                              + ": phaseLoss must be between 1.0-99.0");
-    }
-
-  setAnalogValue(AV_Phase_Loss_Voltage_Threshold, phaseLoss);
-}
-
-void E50HX::writePhaseLossIT(float phaseLoss)
-{
-  if (phaseLoss < 1.0 || phaseLoss > 99.0)
-    {
-      throw std::out_of_range(std::string(__FUNCTION__)
-                              + ": phaseLoss must be between 1.0-99.0");
-    }
-
-  setAnalogValue(AV_Phase_Loss_Imbalance_Threshold, phaseLoss);
-}
diff --git a/src/e50hx/e50hx.hpp b/src/e50hx/e50hx.hpp
deleted file mode 100644
index b6c0b52..0000000
--- a/src/e50hx/e50hx.hpp
+++ /dev/null
@@ -1,321 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2016 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#pragma once
-
-#include <string>
-#include <map>
-
-#include "bacnetmstp.hpp"
-#include "bacnetutil.hpp"
-
-namespace upm {
-
-  /**
-   * @brief E50HX Energy Meter
-   * @defgroup e50hx libupm-e50hx
-   * @ingroup uart electric
-   */
-
-  /**
-   * @library e50hx
-   * @sensor e50hx
-   * @comname Veris E50HX (E50H2/E50H5) Energy Meter Module
-   * @type electric
-   * @man veris
-   * @con uart
-   * @web http://www.veris.com/Item/E50H5.aspx
-   *
-   * @brief UPM API for the Veris E50HX Energy Meter
-   *
-   * This module implements support for the Veris E50H2 and E50H5
-   * BACnet Energy Meters.
-   *
-   * From the datasheet: The E50H5 BACnet MS/TP DIN Rail Meter with
-   * Data Logging combines exceptional performance and easy
-   * installation to deliver a cost-effective solution for power
-   * monitoring applications. Native serial communication via BACnet
-   * MS/TP provides complete accessibility of all measurements to your
-   * Building Automation System The data logging capability protects
-   * data in the event of a power failure. The E50H5 can be easily
-   * installed on standard DIN rail, surface mounted or contained in
-   * an optional NEMA 4 enclosure, as needed. The front-panel LCD
-   * display makes device installation and setup easy and provides
-   * local access to the full set of detailed measurements.
-   *
-   * This module was developed using the upm::BACNETMSTP module, based
-   * on libbacnet-stack 0.8.3.  Both libbacnet 0.8.3 and the
-   * upm::BACNETMSTP libraries must be present in order to build this
-   * module.  This driver was developed on the E50H5.  The Trend Log
-   * functionality is not currently supported.
-   *
-   * The Binary Input Objects are also not supported as these are only
-   * used for the Alarm bits which are already available from Analog
-   * Input Object 52 as an alarm bitfield incorporating all of the
-   * supported alarm indicators.
-   *
-   * It was connected using an RS232->RS485 interface.  You cannot use
-   * the built in MCU TTL UART pins for accessing this device -- you
-   * must use a full Serial RS232->RS485 or USB-RS485 interface
-   * connected via USB.
-   *
-   * @snippet e50hx.cxx Interesting
-   */
-
-  class E50HX : public BACNETUTIL {
-  public:
-
-    // Supported Analog Value Objects.  These are readable and writable.
-    typedef enum : uint32_t {
-      AV_Config                               = 1, // always returns 0 on read
-      AV_System_Type                          = 2,
-      AV_CT_Ratio_Primary                     = 3,
-      AV_CT_Ratio_Secondary                   = 4,
-      AV_PT_Ratio                             = 5,
-      AV_System_Voltage                       = 6,
-      AV_Display_Units                        = 7,
-      AV_Phase_Loss_Voltage_Threshold         = 8,
-      AV_Phase_Loss_Imbalance_Threshold       = 9,
-      AV_Subintervals                         = 10,
-      AV_Subinterval_Length                   = 11
-    } ANALOG_VALUES_T;
-
-    // Supported Analog Input Objects.  These are read only.
-    typedef enum : uint32_t {
-      AI_Energy                               = 1,
-      AI_kW_Total                             = 2,
-      AI_kVAR_Total                           = 3,
-      AI_kVA_Total                            = 4,
-      AI_PF_Total                             = 5,
-      AI_Volts_LL_Avg                         = 6,
-      AI_Volts_LN_Avg                         = 7,
-      AI_Current_Avg                          = 8,
-      AI_kW_A                                 = 9,
-      AI_kW_B                                 = 10,
-      AI_kW_C                                 = 11,
-      AI_PF_A                                 = 12,
-      AI_PF_B                                 = 13,
-      AI_PF_C                                 = 14,
-      AI_Volts_AB                             = 15,
-      AI_Volts_BC                             = 16,
-      AI_Volts_AC                             = 17,
-      AI_Volts_AN                             = 18,
-      AI_Volts_BN                             = 19,
-      AI_Volts_CN                             = 20,
-      AI_Current_A                            = 21,
-      AI_Current_B                            = 22,
-      AI_Current_C                            = 23,
-      // AI24 is reserved
-      AI_Frequency                            = 25,
-      AI_kVAh                                 = 26, // units = kVAh, not kWH
-      AI_kVARh                                = 27, // units = kVAh, not kWH
-      AI_kVA_A                                = 28,
-      AI_kVA_B                                = 29,
-      AI_kVA_C                                = 30,
-      AI_kVAR_A                               = 31,
-      AI_kVAR_B                               = 32,
-      AI_kVAR_C                               = 33,
-      AI_KW_Present_Demand                    = 34,
-      AI_KVAR_Present_Demand                  = 35,
-      AI_KWA_Present_Demand                   = 36,
-      AI_KW_Max_Demand                        = 37,
-      AI_KVAR_Max_Demand                      = 38,
-      AI_KVA_Max_Demand                       = 39,
-      AI_Pulse_Count_1                        = 40, // H2 & H5
-      // AI41 is reserved on H2 variant
-      AI_Pulse_Count_2                        = 41, // only on H5 variant
-      AI_KWH_A                                = 42,
-      AI_KWH_B                                = 43,
-      AI_KWH_C                                = 44,
-      AI_Max_Power                            = 45, // theoretical max power
-      // AI46 reserved
-      AI_Energy_Resets                        = 47,
-      // AI48 and AI49 reserved
-      AI_Power_Up_Count                       = 50,
-      AI_Output_Config                        = 51, // H2 = 11, H5 = 10
-      AI_Alarm_Bitmap                         = 52
-    } ANALOG_INPUTS_T;
-
-    // Alarm bits (AI52)
-    typedef enum : uint16_t {
-      ALARM_Volts_Error_A                     = 0x0001,
-      ALARM_Volts_Error_B                     = 0x0002,
-      ALARM_Volts_Error_C                     = 0x0004,
-
-      ALARM_Current_Error_A                   = 0x0008,
-      ALARM_Current_Error_B                   = 0x0010,
-      ALARM_Current_Error_C                   = 0x0020,
-
-      ALARM_Frequency_Error                   = 0x0040,
-
-      ALARM_Reserved_0                        = 0x0080, // reserved
-
-      ALARM_Phase_Loss_A                      = 0x0100,
-      ALARM_Phase_Loss_B                      = 0x0200,
-      ALARM_Phase_Loss_C                      = 0x0400,
-
-      ALARM_Power_Factor_A                    = 0x0800,
-      ALARM_Power_Factor_B                    = 0x1000,
-      ALARM_Power_Factor_C                    = 0x2000,
-
-      ALARM_RTC_RESET                         = 0x4000 // H5 only
-    } ALARM_BITS_T;
-
-    // valid config values to write to AV1
-    typedef enum {
-      CFG_CLR_ENERGY_ACCUM          = 30078, // clear energy accumulators
-      CFG_NEW_DSI                   = 21211, // begin new demand subinterval
-      CFG_RESET_MAX_TO_PRESENT      = 21212, // reset max vals to present vals
-      CFG_CLEAR_PULSE_COUNTERS      = 16498  // clear the pulse counters
-    } CFG_VALUES_T;
-
-    // system type configuration
-    typedef enum {
-      SYSTYPE_SINGLE_PHASE_AN       = 10,
-      SYSTYPE_SINGLE_PHASE_AB       = 11,
-      SYSTYPE_SPLIT_PHASE_ABN       = 12,
-      SYSTYPE_3PHASE_ABC            = 31,
-      SYSTYPE_3PHASE_ABCN           = 40
-    } SYSTEM_TYPES_T;
-
-    // CT input ratio
-    typedef enum {
-      CT_RATIO_SECONDARY_1          = 1, // CT's w/ 1v outputs
-      CT_RATIO_SECONDARY_3          = 3  // CT's w/ 0.3v outputs
-    } CT_SECONDARY_T;
-
-    // LCD display units
-    typedef enum {
-      DISP_UNITS_IEC                = 0, // IEC display units
-      DISP_UNITS_IEEE               = 1  // IEEE display units
-    } DISP_UNITS_T;
-
-    /**
-     * E50HX constructor
-     *
-     * @param targetDeviceObjectID the unique Instance ID of the
-     * Device Object.  This number is used to uniquely identify
-     * devices on the BACnet network, and ranges from 1 to 4194302.
-     * This is not the device's MAC address, though on some devices,
-     * the MAC address may be used as part of this number.  On the
-     * E50HX, this number is randomly generated per device, and you
-     * can see this number (or change it) on the BACnet config screens
-     * on the LCD.
-     */
-    E50HX(uint32_t targetDeviceObjectID);
-
-    /**
-     * E50HX Destructor
-     */
-    ~E50HX();
-
-    /**
-     * Write one of several 'magic' numbers to the configuration
-     * object (AV1).  This is used to clear certain counters, reset
-     * the accumulated Energy consumption values, etc.  This method
-     * will throw on error.
-     *
-     * @param config One of the CFG_VALUES_T values
-     */
-    void writeConfig(CFG_VALUES_T config);
-
-    /**
-     * Set the System Type of the device.  This defines the voltage
-     * lines you have connected.  This method will throw on error.
-     *
-     * @param systype One of the SYSTEM_TYPES_T values.
-     */
-    void writeSystemType(SYSTEM_TYPES_T systype);
-
-    /**
-     * Set the Primary CT ratio.  See the datasheet for details.  This
-     * method will throw on error.
-     *
-     * @param ctRatio A floating point value between 5-32000
-     */
-    void writeCTRatioPrimary(float ctRatio);
-
-    /**
-     * Set the Secondary CT ratio.  See the datasheet for details.
-     * This method will throw on error.
-     *
-     * @param ctRatio One of the CT_SECONDARY_T values.
-     */
-    void writeCTRatioSecondary(CT_SECONDARY_T ctRatio);
-
-    /**
-     * Set the PT ratio.  See the datasheet for details.  This method
-     * will throw on error.
-     *
-     * @param ptRatio A floating point value between 0.01-320.0
-     */
-    void writePTRatio(float ptRatio);
-
-    /**
-     * Set the System Voltage parmeter.  See the datasheet for
-     * details.  This method will throw on error.
-     *
-     * @param sysVolts A floating point value between 82.0-32000.0
-     */
-    void writeSystemVoltage(float sysVolts);
-
-    /**
-     * Set the LCD Display Units in IEC or IEEE format.  This method
-     * will throw on error.
-     *
-     * @param dispUnits One of the DISP_UNITS_T values.
-     */
-    void writeDisplayUnits(DISP_UNITS_T dispUnits);
-
-    /**
-     * Set the Phase Loss Voltage Threshold.  See the datasheet for
-     * details.  This method will throw on error.
-     *
-     * @param phaseLoss A floating point value between 1.0-99.0
-     */
-    void writePhaseLossVT(float phaseLoss);
-
-    /**
-     * Set the Phase Loss Imbalance Threshold.  See the datasheet for
-     * details.  This method will throw on error.
-     *
-     * @param phaseLoss A floating point value between 1.0-99.0
-     */
-    void writePhaseLossIT(float phaseLoss);
-
-    /**
-     * Query the AI52 Object and return a bitmask of current Alarms.
-     * Compare against ALARM_BITS_T to determine what conditions are
-     * signaling an alarm.  Alarm conditions will clear on their own
-     * as soon as the cause is rectified.  This method will throw on
-     * error.
-     *
-     * @return A bitmask of values from ALARM_BITS_T indicating
-     * current alarm conditions.
-     */
-    uint16_t getAlarmBits();
-
-  protected:
-  private:
-  };
-}
diff --git a/src/e50hx/e50hx.i b/src/e50hx/e50hx.i
deleted file mode 100644
index cdbb414..0000000
--- a/src/e50hx/e50hx.i
+++ /dev/null
@@ -1,30 +0,0 @@
-%include "../common_top.i"
-
-/* BEGIN Java syntax  ------------------------------------------------------- */
-#ifdef SWIGJAVA
-%include "../carrays_uint32_t.i"
-
-// We need to use this method for enum wrapping since the enum typedefs used
-// by the derived classes (like ANALOG_VALUES_T) are passed to methods
-// in the base class which expect a uint32_t.  This is fine, and
-// works everywhere except Java.  Its type safety is a little too
-// stringent in these cases.  %javaconst(1) is generally recommended
-// as it avoids JNI calls to determine the enumerant values at
-// runtime.
-%include "enumtypeunsafe.swg"
-%javaconst(1);
-
-JAVA_JNI_LOADLIBRARY(javaupm_e50hx)
-#endif
-/* END Java syntax */
-
-/* BEGIN Common SWIG syntax ------------------------------------------------- */
-%{
-#include "bacnetmstp.hpp"
-#include "bacnetutil.hpp"
-#include "e50hx.hpp"
-%}
-%include "bacnetmstp.hpp"
-%include "bacnetutil.hpp"
-%include "e50hx.hpp"
-/* END Common SWIG syntax */
diff --git a/src/e50hx/e50hx.json b/src/e50hx/e50hx.json
deleted file mode 100644
index ebdbc39..0000000
--- a/src/e50hx/e50hx.json
+++ /dev/null
@@ -1,41 +0,0 @@
-{
-    "Library": "e50hx",
-    "Description": "UPM API for the Veris E50HX Energy Meter",
-    "Sensor Class":
-    {
-        "E50HX":
-        {
-            "Name": "Veris E50HX (E50H2/E50H5) Energy Meter Module",
-            "Description": "This module implements support for the Veris E50H2 and E50H5 BACnet Energy Meters. From the datasheet: The E50H5 BACnet MS/TP DIN Rail Meter with Data Logging combines exceptional performance and easy installation to deliver a cost-effective solution for power monitoring applications. Native serial communication via BACnet MS/TP provides complete accessibility of all measurements to your Building Automation System The data logging capability protects data in the event of a power failure. The E50H5 can be easily installed on standard DIN rail, surface mounted or contained in an optional NEMA 4 enclosure, as needed. The front-panel LCD display makes device installation and setup easy and provides local access to the full set of detailed measurements. This module was developed using the upm::BACNETMSTP module, based on libbacnet-stack 0.8.3.  Both libbacnet 0.8.3 and the upm::BACNETMSTP libraries must be present in order to build this module.  This driver was developed on the E50H5.  The Trend Log functionality is not currently supported. The Binary Input Objects are also not supported as these are only used for the Alarm bits which are already available from Analog Input Object 52 as an alarm bitfield incorporating all of the supported alarm indicators. It was connected using an RS232->RS485 interface.  You cannot use the built in MCU TTL UART pins for accessing this device -- you must use a full Serial RS232->RS485 or USB-RS485 interface connected via USB.",
-            "Aliases": ["e50hx"],
-            "Categories": ["energy"],
-            "Connections": ["rs485"],
-            "Project Type": ["industrial"],
-            "Manufacturers": ["veris"],
-            "Kits": [],
-            "Examples":
-            {
-                "Java": ["E50HX_Example.java"],
-                "Python": ["e50hx.py"],
-                "Node.js": ["e50hx.js"],
-                "C++": ["e50hx.cxx"],
-                "C": []
-            },
-            "Specifications":
-            {
-                "AC Operating Voltage": {"unit": "VAC", "low": 90, "high": 600},
-                "AC Power Usage": {"unit": "VA", "Max": 5},
-                "DC Operating Voltage": {"unit": "VDC", "low": 125, "high": 300},
-                "DC Power Usage": {"unit": "W", "Max": 3},
-                "Operating Temperature": {"unit": "degC", "low": -30, "high": 70}
-
-            },
-            "Urls" :
-            {
-                "Product Pages": ["http://www.veris.com/Item/E50H5.aspx"],
-                "Datasheets": ["http://www.veris.com/docs/Datasheets/E5x_d0117.pdf"],
-                "Schematics": []
-            }
-        }
-    }
-}
diff --git a/src/ecezo/CMakeLists.txt b/src/ecezo/CMakeLists.txt
deleted file mode 100644
index a23f899..0000000
--- a/src/ecezo/CMakeLists.txt
+++ /dev/null
@@ -1,9 +0,0 @@
-upm_mixed_module_init (NAME ecezo
-    DESCRIPTION "Electrical Conductivity (EC) Circuit"
-    C_HDR ecezo.h ecezo_defs.h
-    C_SRC ecezo.c
-    CPP_HDR ecezo.hpp
-    CPP_SRC ecezo.cxx
-    FTI_SRC ecezo_fti.c
-    CPP_WRAPS_C
-    REQUIRES mraa utilities-c)
diff --git a/src/ecezo/ecezo.c b/src/ecezo/ecezo.c
deleted file mode 100644
index 55e9571..0000000
--- a/src/ecezo/ecezo.c
+++ /dev/null
@@ -1,674 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2016 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <stdlib.h>
-#include <string.h>
-#include <assert.h>
-#include <ctype.h>
-
-#include <upm_utilities.h>
-
-#include "ecezo.h"
-
-// "Typical" command completion delay in ms
-#define CMD_DELAY (350)
-
-// uncomment for dubugging
-//#define ECEZO_DEBUG (1)
-
-// I2C read helper
-static int readBytes(const ecezo_context dev, uint8_t *buffer, int len)
-{
-    assert(dev != NULL);
-    assert(dev->i2c != NULL);
-
-    bool done = false;
-    int rv;
-    int retries = 10;
-
-    while (!done && (retries-- > 0))
-    {
-        if ((rv = mraa_i2c_read(dev->i2c, buffer, len)) < 0)
-        {
-            printf("%s: mraa_i2c_read(code) failed.\n", __FUNCTION__);
-            return rv;
-        }
-
-#if defined(ECEZO_DEBUG)
-        printf("CODE: %02x\n", buffer[0]);
-#endif
-
-        if (buffer[0] == 0xff || buffer[0] == 0x02)
-        {
-            // no data available, or error
-            return -1;
-        }
-        else if (buffer[0] == 0x01)
-        {
-            // data is ready
-            done = true;
-
-            // now we need to move the data one byte down so the rest
-            // of this driver can work as-is.
-            memmove(buffer, (buffer + 1), len - 1);
-        }
-        else
-        {
-            // buffer[0] 0xfe - data is pending. wait and loop again.
-            upm_delay_ms(CMD_DELAY);
-        }
-    }
-
-    if (retries <= 0)
-    {
-        printf("%s: timed out waiting for correct response.\n", __FUNCTION__);
-        return -1;
-    }
-
-#if defined(ECEZO_DEBUG)
-    printf("%s: Got %d bytes\n", __FUNCTION__, rv);
-
-    for (int i=0; i<rv; i++)
-    {
-        printf("%02x (%c) ", buffer[i],
-               isprint(buffer[i]) ? buffer[i] : '@');
-    }
-    printf("\n");
-#endif // ECEZO_DEBUG
-
-    return rv;
-}
-
-static upm_result_t generic_init(const ecezo_context dev)
-{
-    assert(dev != NULL);
-
-    // do some generic initialization
-    bool error = false;
-
-    // turn off response (*OK) codes (UART only)
-    if (dev->uart)
-    {
-        if (ecezo_send_command(dev, "Response,0", NULL, 0) < 0)
-            error = true;
-    }
-
-    // turn off continuous sampling
-    if (ecezo_set_continuous(dev, false))
-        error = true;
-
-    // make sure all parameters are enabled
-    if (ecezo_send_command(dev, "O,EC,1", NULL, 0) < 0)
-        error = true;
-    if (ecezo_send_command(dev, "O,TDS,1", NULL, 0) < 0)
-        error = true;
-    if (ecezo_send_command(dev, "O,S,1", NULL, 0) < 0)
-        error = true;
-    if (ecezo_send_command(dev, "O,SG,1", NULL, 0) < 0)
-        error = true;
-
-    if (error)
-        return UPM_ERROR_OPERATION_FAILED;
-    else
-        return UPM_SUCCESS;
-}
-
-static upm_result_t decode_report(const ecezo_context dev, char *data)
-{
-    assert(dev != NULL);
-
-    char *startptr = data;
-    char *endptr = NULL;
-    float val;
-
-    // the format of the data string should be: ec,tds,s,sg
-
-    // ec
-    val = strtof(startptr, &endptr);
-
-    if (startptr == endptr)
-    {
-        // error
-        return UPM_ERROR_OPERATION_FAILED;
-    }
-
-    dev->ec = val;
-    startptr = endptr + 1;
-
-    // tds
-    val = strtof(startptr, &endptr);
-
-    // error
-    if (startptr == endptr)
-        return UPM_ERROR_OPERATION_FAILED;
-
-    dev->tds = val;
-    startptr = endptr + 1;
-
-    // salinity
-    val = strtof(startptr, &endptr);
-
-    // error
-    if (startptr == endptr)
-        return UPM_ERROR_OPERATION_FAILED;
-
-    dev->salinity = val;
-    startptr = endptr + 1;
-
-    // sg
-    val = strtof(startptr, &endptr);
-
-    if (startptr == endptr)
-        return UPM_ERROR_OPERATION_FAILED;
-
-    dev->sg = val;
-
-    return UPM_SUCCESS;
-}
-
-static bool ecezo_data_available(const ecezo_context dev, unsigned int millis)
-{
-    assert(dev != NULL);
-
-    // i2c, we don't support this
-    if (dev->i2c)
-    {
-        return false;
-    }
-
-    // uart
-    if (mraa_uart_data_available(dev->uart, millis))
-        return true;
-    else
-        return false;
-}
-
-// uart init
-ecezo_context ecezo_uart_init(unsigned int uart, unsigned int baudrate)
-{
-    // make sure MRAA is initialized
-    int mraa_rv;
-    if ((mraa_rv = mraa_init()) != MRAA_SUCCESS)
-    {
-        printf("%s: mraa_init() failed (%d).\n", __FUNCTION__, mraa_rv);
-        return NULL;
-    }
-
-    ecezo_context dev =
-        (ecezo_context)malloc(sizeof(struct _ecezo_context));
-
-    if (!dev)
-        return NULL;
-
-    // zero out context
-    memset((void *)dev, 0, sizeof(struct _ecezo_context));
-
-    // initialize the MRAA contexts
-
-    // uart, default should be 8N1
-    if (!(dev->uart = mraa_uart_init(uart)))
-    {
-        printf("%s: mraa_uart_init() failed.\n", __FUNCTION__);
-        ecezo_close(dev);
-        return NULL;
-    }
-
-    if (mraa_uart_set_baudrate(dev->uart, baudrate))
-    {
-        printf("%s: mraa_uart_set_baudrate() failed.\n", __FUNCTION__);
-        ecezo_close(dev);
-        return NULL;
-    }
-
-    mraa_uart_set_flowcontrol(dev->uart, false, false);
-
-    if (generic_init(dev))
-    {
-        printf("%s: generic_init() failed.\n", __FUNCTION__);
-        ecezo_close(dev);
-        return NULL;
-    }
-
-    return dev;
-}
-
-// i2c ublox init
-ecezo_context ecezo_i2c_init(unsigned int bus, uint8_t addr)
-{
-    // make sure MRAA is initialized
-    int mraa_rv;
-    if ((mraa_rv = mraa_init()) != MRAA_SUCCESS)
-    {
-        printf("%s: mraa_init() failed (%d).\n", __FUNCTION__, mraa_rv);
-        return NULL;
-    }
-
-    ecezo_context dev =
-        (ecezo_context)malloc(sizeof(struct _ecezo_context));
-
-    if (!dev)
-        return NULL;
-
-    // zero out context
-    memset((void *)dev, 0, sizeof(struct _ecezo_context));
-
-    // initialize the MRAA contexts
-
-    if (!(dev->i2c = mraa_i2c_init(bus)))
-    {
-        printf("%s: mraa_i2c_init() failed.\n", __FUNCTION__);
-        ecezo_close(dev);
-        return NULL;
-    }
-
-    if (mraa_i2c_address(dev->i2c, addr))
-    {
-        printf("%s: mraa_i2c_address() failed.\n", __FUNCTION__);
-        ecezo_close(dev);
-        return NULL;
-    }
-
-    if (generic_init(dev))
-    {
-        printf("%s: generic_init() failed.\n", __FUNCTION__);
-        ecezo_close(dev);
-        return NULL;
-    }
-
-    return dev;
-}
-
-void ecezo_close(ecezo_context dev)
-{
-    assert(dev != NULL);
-
-    if (dev->uart)
-        mraa_uart_stop(dev->uart);
-    if (dev->i2c)
-        mraa_i2c_stop(dev->i2c);
-
-    free(dev);
-}
-
-upm_result_t ecezo_set_continuous(const ecezo_context dev, bool enable)
-{
-    int rv;
-
-    if (enable)
-        rv = ecezo_send_command(dev, "C,1", NULL, 0);
-    else
-        rv = ecezo_send_command(dev, "C,0", NULL, 0);
-
-    return ((rv < 0) ? UPM_ERROR_OPERATION_FAILED : UPM_SUCCESS);
-}
-
-upm_result_t ecezo_set_temperature(const ecezo_context dev, float temp)
-{
-    char buffer[ECEZO_MAX_BUFFER_LEN];
-
-    snprintf(buffer, ECEZO_MAX_BUFFER_LEN, "T,%f", temp);
-
-    int rv = ecezo_send_command(dev, buffer, NULL, 0);
-
-    return ((rv < 0) ? UPM_ERROR_OPERATION_FAILED : UPM_SUCCESS);
-}
-
-upm_result_t ecezo_set_led(const ecezo_context dev, bool enable)
-{
-    int rv;
-
-    if (enable)
-        rv = ecezo_send_command(dev, "L,1", NULL, 0);
-    else
-        rv = ecezo_send_command(dev, "L,0", NULL, 0);
-
-    return ((rv < 0) ? UPM_ERROR_OPERATION_FAILED : UPM_SUCCESS);
-}
-
-upm_result_t ecezo_set_k_value(const ecezo_context dev, float k)
-{
-    char buffer[ECEZO_MAX_BUFFER_LEN];
-
-    // the K value must be between 0.1 and 10.0
-    if (k < 0.1 || k > 10.0)
-    {
-        printf("%s: K value must be between 0.1 and 10.0\n", __FUNCTION__);
-        return UPM_ERROR_OUT_OF_RANGE;
-    }
-
-    snprintf(buffer, ECEZO_MAX_BUFFER_LEN, "K,%f", k);
-
-    int rv = ecezo_send_command(dev, buffer, NULL, 0);
-
-    return ((rv < 0) ? UPM_ERROR_OPERATION_FAILED : UPM_SUCCESS);
-}
-
-upm_result_t ecezo_set_sleep(const ecezo_context dev, bool enable)
-{
-    int rv = 0;
-
-    if (enable)
-        rv =  ecezo_send_command(dev, "SLEEP", NULL, 0);
-    else
-    {
-        // "WAKE" isn't a real command, but should wake the device up.
-        // We ignore the return value, as it will likely be an error
-        // anyway.
-        ecezo_send_command(dev, "WAKE", NULL, 0);
-    }
-
-    return ((rv < 0) ? UPM_ERROR_OPERATION_FAILED : UPM_SUCCESS);
-}
-
-int ecezo_read(const ecezo_context dev, char *buffer, size_t len)
-{
-    assert(dev != NULL);
-
-    upm_delay_ms(CMD_DELAY); // delay CMD_DELAY ms to make sure cmd completed
-
-    // i2c
-    if (dev->i2c)
-    {
-        return readBytes(dev, (uint8_t *)buffer, len);
-    }
-    else
-    {
-        // UART
-        size_t bytesRead = 0;
-
-        while(bytesRead < len)
-        {
-            // we read one byte at a time, exiting when either len is
-            // reached, or a '\r' is found indicating the end of a
-            // sentence. Most commands (except 'R') require a minimum
-            // of 300ms to execute, so we wait up to CMD_DELAY ms after all
-            // data (if any) is read.
-            if (ecezo_data_available(dev, CMD_DELAY))
-            {
-                int br = mraa_uart_read(dev->uart, &buffer[bytesRead], 1);
-
-                if (br <= 0)
-                    return br;
-
-                if (buffer[bytesRead] == '\r')
-                {
-                    // if we found a CR, replace it with a 0 byte
-                    buffer[bytesRead++] = 0;
-                    return bytesRead;
-                }
-                bytesRead++;
-            }
-            else
-            {
-                // timed out - ok with responses disabled
-                return 0;
-            }
-        }
-    }
-
-    // anything else is an error
-    return -1;
-}
-
-upm_result_t ecezo_write(const ecezo_context dev, char *buffer, size_t len)
-{
-    assert(dev != NULL);
-
-    if (dev->uart)
-    {
-        if (mraa_uart_write(dev->uart, buffer, len) != (int)len)
-        {
-            printf("%s: mraa_uart_write() failed.\n", __FUNCTION__);
-            return UPM_ERROR_OPERATION_FAILED;
-        }
-
-    }
-    else
-    {
-        // I2C
-        if (mraa_i2c_write(dev->i2c, (uint8_t *)buffer, len))
-        {
-            printf("%s: mraa_i2c_write() failed.\n", __FUNCTION__);
-            return UPM_ERROR_OPERATION_FAILED;
-        }
-    }
-
-    return UPM_SUCCESS;
-}
-
-int ecezo_send_command(const ecezo_context dev, char *cmd, char *buffer,
-                       int len)
-{
-    assert(dev != NULL);
-
-    if (!cmd)
-        return -1;
-
-    // Our local buffer in case one isn't supplied
-    char localBuffer[ECEZO_MAX_BUFFER_LEN];
-
-    // our read buffer ptr
-    char *readBuffer = NULL;
-
-    if (!buffer || !len)
-    {
-        readBuffer = localBuffer;
-        len = ECEZO_MAX_BUFFER_LEN;
-    }
-    else
-    {
-        readBuffer = buffer;
-    }
-
-#if defined(ECEZO_DEBUG)
-    printf("Command: %s\n", cmd);
-#endif // ECEZO_DEBUG
-
-    // our write buffer
-    char writeBuffer[ECEZO_MAX_BUFFER_LEN];
-
-    memcpy(writeBuffer, cmd, ECEZO_MAX_BUFFER_LEN - 1);
-    writeBuffer[ECEZO_MAX_BUFFER_LEN - 1] = 0;
-
-    int writelen = strlen(writeBuffer);
-
-    if (dev->uart)
-    {
-        if (strlen(writeBuffer) >= ECEZO_MAX_BUFFER_LEN - 2)
-        {
-            // too big.  Should never happen in real life.
-            printf("%s: cmd writeBuffer too big.\n", __FUNCTION__);
-            return -1;
-        }
-
-        strncat(writeBuffer, "\r", 2);
-    }
-
-    // for the uart this will now include the added CR, for I2C, this
-    // will now include the already existing \0 terminator.
-    writelen++;
-
-    // Let the games begin...
-    int retries = 10;
-
-    while (retries-- > 0)
-    {
-        if (ecezo_write(dev, writeBuffer, writelen))
-        {
-            printf("%s: ecezo_write() failed\n", __FUNCTION__);
-            return -1;
-        }
-
-        // we wait up to CMD_DELAY ms for an error response, which should be
-        // more than enough time.  No response is also ok, since we
-        // disable the "*OK" response in the init.
-
-        memset((void *)readBuffer, 0, len);
-        int bytesRead = 0;
-        if ((bytesRead = ecezo_read(dev, readBuffer, len)) < 0)
-        {
-            return -1;
-        }
-
-        // for I2C, we are done at this point
-        if (dev->i2c)
-            break;
-
-        // for UART, we need some more checks
-        if (bytesRead && strstr(readBuffer, "*ER"))
-        {
-            // need to retry the command
-#if defined(ECEZO_DEBUG)
-            printf("%s: *ER DETECTED, retry\n", __FUNCTION__);
-#endif // ECEZO_DEBUG
-            continue;
-        }
-        else if (bytesRead && strchr(readBuffer, '*'))
-        {
-            // Some other diagnostic code, output it.
-#if defined(ECEZO_DEBUG)
-            printf("%s: * diagnostic code detected (%s), retry\n",
-                   __FUNCTION__, buffer);
-#endif // ECEZO_DEBUG
-            continue;
-        }
-        else
-        {
-            // we are done here
-#if defined(ECEZO_DEBUG)
-            printf("%s: bytesRead = %d\n", __FUNCTION__, bytesRead);
-#endif // ECEZO_DEBUG
-
-            break;
-        }
-    }
-
-    if (retries <= 0)
-    {
-        printf("%s: read timed out and/or and retries exhausted\n",
-               __FUNCTION__);
-        return 0;
-    }
-
-    return len;
-}
-
-upm_result_t ecezo_update(const ecezo_context dev)
-{
-    assert(dev != NULL);
-
-    // first we send a 'R' command to get a reading (takes a minimum
-    // of 1 second), then we parse out the string values into the
-    // context variables.
-
-    char buffer[ECEZO_MAX_BUFFER_LEN];
-
-    // first issue the report command
-    int rv = ecezo_send_command(dev, "R", buffer, ECEZO_MAX_BUFFER_LEN);
-    if (rv == 0)
-    {
-        printf("%s: timed out waiting for data\n", __FUNCTION__);
-        return UPM_ERROR_OPERATION_FAILED;
-    }
-    else if (rv < 0)
-    {
-        printf("%s: error retrieving data\n", __FUNCTION__);
-        return UPM_ERROR_OPERATION_FAILED;
-    }
-
-    // decode
-    if (decode_report(dev, buffer))
-    {
-        printf("%s: decode_report() failed\n", __FUNCTION__);
-        return UPM_ERROR_OPERATION_FAILED;
-    }
-
-    return UPM_SUCCESS;
-}
-
-float ecezo_get_ec(const ecezo_context dev)
-{
-    assert(dev != NULL);
-
-    return dev->ec;
-}
-
-float ecezo_get_tds(const ecezo_context dev)
-{
-    assert(dev != NULL);
-
-    return dev->tds;
-}
-
-float ecezo_get_salinity(const ecezo_context dev)
-{
-    assert(dev != NULL);
-
-    return dev->salinity;
-}
-
-float ecezo_get_sg(const ecezo_context dev)
-{
-    assert(dev != NULL);
-
-    return dev->sg;
-}
-
-upm_result_t ecezo_calibrate(const ecezo_context dev, ECEZO_CALIBRATION_T cal,
-                             float ec)
-{
-    assert(dev != NULL);
-
-    char cmdBuffer[ECEZO_MAX_BUFFER_LEN];
-
-    switch(cal)
-    {
-    case ECEZO_CALIBRATE_CLEAR:
-        snprintf(cmdBuffer, ECEZO_MAX_BUFFER_LEN, "cal,clear");
-        break;
-
-    case ECEZO_CALIBRATE_DRY:
-        snprintf(cmdBuffer, ECEZO_MAX_BUFFER_LEN, "cal,dry");
-        break;
-
-    case ECEZO_CALIBRATE_ONE:
-        snprintf(cmdBuffer, ECEZO_MAX_BUFFER_LEN, "cal,one,%f", ec);
-        break;
-
-    case ECEZO_CALIBRATE_LOW:
-        snprintf(cmdBuffer, ECEZO_MAX_BUFFER_LEN, "cal,low,%f", ec);
-        break;
-
-    case ECEZO_CALIBRATE_HIGH:
-        snprintf(cmdBuffer, ECEZO_MAX_BUFFER_LEN, "cal,high,%f", ec);
-        break;
-
-    default:
-        // should be able to happen
-        printf("%s: invalid cal parameter\n", __FUNCTION__);
-        return UPM_ERROR_INVALID_PARAMETER;
-    }
-
-    return ecezo_send_command(dev, cmdBuffer, NULL, 0);
-}
diff --git a/src/ecezo/ecezo.cxx b/src/ecezo/ecezo.cxx
deleted file mode 100644
index 1bbcd81..0000000
--- a/src/ecezo/ecezo.cxx
+++ /dev/null
@@ -1,146 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2016 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <iostream>
-#include <stdexcept>
-
-#include "ecezo.hpp"
-
-using namespace upm;
-using namespace std;
-
-ECEZO::ECEZO(unsigned int bus, unsigned int addrBaud, bool isI2C) :
-    m_ecezo(nullptr)
-{
-    if (isI2C)
-        m_ecezo = ecezo_i2c_init(bus, addrBaud);
-    else
-        m_ecezo = ecezo_uart_init(bus, addrBaud);
-
-    if (!m_ecezo)
-        throw std::runtime_error(string(__FUNCTION__)
-                                 + ": ecezo_*_init() failed");
-}
-
-ECEZO::~ECEZO()
-{
-    ecezo_close(m_ecezo);
-}
-
-void ECEZO::update()
-{
-    if (ecezo_update(m_ecezo))
-        throw std::runtime_error(string(__FUNCTION__)
-                                 + ": ecezo_update() failed");
-}
-
-void ECEZO::setTemperature(float temp)
-{
-    if (ecezo_set_temperature(m_ecezo, temp))
-        throw std::runtime_error(string(__FUNCTION__)
-                                 + ": ecezo_set_temperature() failed");
-}
-
-void ECEZO::setKValue(float k)
-{
-    if (ecezo_set_k_value(m_ecezo, k))
-        throw std::runtime_error(string(__FUNCTION__)
-                                 + ": ecezo_set_k_value() failed");
-}
-
-void ECEZO::setSleep(bool enable)
-{
-    if (ecezo_set_sleep(m_ecezo, enable))
-        throw std::runtime_error(string(__FUNCTION__)
-                                 + ": ecezo_set_sleep() failed");
-}
-
-float ECEZO::getEC()
-{
-    return ecezo_get_ec(m_ecezo);
-}
-
-float ECEZO::getTDS()
-{
-    return ecezo_get_tds(m_ecezo);
-}
-
-float ECEZO::getSalinity()
-{
-    return ecezo_get_salinity(m_ecezo);
-}
-
-float ECEZO::getSG()
-{
-    return ecezo_get_sg(m_ecezo);
-}
-
-void ECEZO::calibrate(ECEZO_CALIBRATION_T cal, float ec)
-{
-    if (ecezo_calibrate(m_ecezo, cal, ec))
-        throw std::runtime_error(string(__FUNCTION__)
-                                 + ": ecezo_calibrate() failed");
-}
-
-void ECEZO::setContinuous(bool enable)
-{
-    if (ecezo_set_continuous(m_ecezo, enable))
-        throw std::runtime_error(string(__FUNCTION__)
-                                 + ": ecezo_set_continuous() failed");
-}
-
-string ECEZO::sendCommand(string cmd)
-{
-    char buffer[ECEZO_MAX_BUFFER_LEN];
-
-    int rv;
-
-    if ((rv = ecezo_send_command(m_ecezo, (char *)cmd.c_str(),
-                                 buffer, ECEZO_MAX_BUFFER_LEN)) < 0)
-        throw std::runtime_error(string(__FUNCTION__)
-                                 + ": ecezo_send_command() failed");
-
-    return string(buffer, rv);
-}
-
-string ECEZO::read()
-{
-    char buffer[ECEZO_MAX_BUFFER_LEN];
-
-    int rv;
-
-    if ((rv = ecezo_read(m_ecezo, buffer, ECEZO_MAX_BUFFER_LEN)) < 0)
-        throw std::runtime_error(string(__FUNCTION__)
-                                 + ": ecezo_read() failed");
-
-    return string(buffer, rv);
-}
-
-void ECEZO::write(std::string data)
-{
-    if (ecezo_write(m_ecezo, (char*)data.data(),
-                    data.size()))
-        throw std::runtime_error(string(__FUNCTION__)
-                                 + ": ecezo_write() failed");
-}
diff --git a/src/ecezo/ecezo.h b/src/ecezo/ecezo.h
deleted file mode 100644
index a6a738a..0000000
--- a/src/ecezo/ecezo.h
+++ /dev/null
@@ -1,267 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2016 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#pragma once
-
-#include <stdint.h>
-#include <upm.h>
-#include <mraa/uart.h>
-#include <mraa/i2c.h>
-#include <mraa/gpio.h>
-
-#include "ecezo_defs.h"
-
-#ifdef __cplusplus
-extern "C" {
-#endif
-
-    /**
-     * @file ecezo.h
-     * @library ecezo
-     * @brief C API for the EC-EZO EC Sensor
-     *
-     * @include ecezo.c
-     */
-
-    /**
-     * Device context
-     */
-    typedef struct _ecezo_context {
-        mraa_uart_context        uart;
-        mraa_i2c_context         i2c;
-
-        // our values
-        float                    ec;          // electrical conductivity
-        float                    tds;         // total dissolved solids
-        float                    salinity;
-        float                    sg;          // specific gravity
-
-    } *ecezo_context;
-
-    /**
-     * ECEZO Initializer for UART operation
-     *
-     * @param uart Specify which uart to use.
-     * @param baudrate Specify the baudrate to use.  The device defaults
-     * to 9600 baud, though the datasheet implies the default is 38400.
-     * @return an initialized device context on success, NULL on error.
-     */
-    ecezo_context ecezo_uart_init(unsigned int uart, unsigned int baudrate);
-
-    /**
-     * ECEZO Initializer for I2C operation
-     *
-     * @param bus Specify which the I2C bus to use.
-     * @param addr Specify the I2C address to use.  This is
-     * configurable on the device, so there is no default.
-     * @return an initialized device context on success, NULL on error.
-     */
-    ecezo_context ecezo_i2c_init(unsigned int bus, uint8_t addr);
-
-    /**
-     * ECEZO sensor close function
-     */
-    void ecezo_close(ecezo_context dev);
-
-    /**
-     * Query the device for a reading, parse the response, and store
-     * the read values into the device context.  This function must be
-     * called prior to calling any function that returns the data,
-     * like ecezo_get_ec().
-     *
-     * @param dev Device context
-     * @return UPM result
-     */
-    upm_result_t ecezo_update(const ecezo_context dev);
-
-    /**
-     * For accurate readings, the temperature of the liquid being
-     * measured should be known. This function allows you to specify
-     * the liquid's temperature (in Celsius) so that proper
-     * compensation can take place.  How you measure this temperature
-     * is up to you.  By default, the device will assume a temperature
-     * of 25C.
-     *
-     * @param dev Device context
-     * @param temp The temperature of the liquid being measured
-     * @return UPM result
-     */
-    upm_result_t ecezo_set_temperature(const ecezo_context dev, float temp);
-
-    /**
-     * Set the K value of the probe being used.  By default, this is
-     * 1.0. Valid values are between 0.1 and 10.0.
-     *
-     * @param dev Device context
-     * @param k The K value of the probe
-     * @return UPM result
-     */
-    upm_result_t ecezo_set_k_value(const ecezo_context dev, float k);
-
-    /**
-     * Enable or disable Sleep mode.
-     *
-     * @param dev Device context
-     * @param enable True to enable sleep mode, false to wake up
-     * @return UPM result
-     */
-    upm_result_t ecezo_set_sleep(const ecezo_context dev, bool enable);
-
-    /**
-     * Retrieve the last measured Electrical Conductivity (EC) value
-     * in microsiemens.  ecezo_update() must have been called before
-     * calling this function.
-     *
-     * @param dev Device context
-     * @return EC value in microsiemens
-     */
-    float ecezo_get_ec(const ecezo_context dev);
-
-    /**
-     * Retrieve the last measured Total Dissolved solids (TDS) value.
-     * ecezo_update() must have been called before calling this
-     * function.
-     *
-     * @param dev Device context
-     * @return TDS value
-     */
-    float ecezo_get_tds(const ecezo_context dev);
-
-    /**
-     * Retrieve the last measured Salinity value.  ecezo_update() must
-     * have been called before calling this function.
-     *
-     * @param dev Device context
-     * @return Salinity value
-     */
-    float ecezo_get_salinity(const ecezo_context dev);
-
-    /**
-     * Retrieve the last measured Specific Gravity (SG) value.
-     * ecezo_update() must have been called before calling this
-     * function.
-     *
-     * @param dev Device context
-     * @return SG value
-     */
-    float ecezo_get_sg(const ecezo_context dev);
-
-    /**
-     * Specify calibration data for calibrating the device.  See the
-     * datasheet for details on how calibration is performed.  This
-     * function provides a mechanism for clearing out, and setting
-     * calibration data.
-     *
-     * A simple one point calibration might work as follows:
-     *
-     * 1. CLEAR the calibration data
-     * 2. with a dry probe, set the DRY point.
-     * 3. with the probe immersed in a standardized solution, set the
-     * ONE parameter to the solution's known EC value in microsiemens.
-     *
-     * A two point calibration might work as follows:
-     *
-     * 1. CLEAR the calibration data
-     * 2. with a dry probe, set the DRY point.
-     * 3. with the probe immersed in the lowest EC standardized
-     * solution, set the LOW parameter to the solution's known EC
-     * value in microsiemens.
-     * 4. with the probe immersed in the highest EC standardized
-     * solution, set the HIGH parameter to the solution's known EC
-     * value in microsiemens.
-     *
-     * @param dev Device context
-     * @param cal One of the ECEZO_CALIBRATION_T values
-     * @param ec The EC value of the calibration fluid.  This
-     * parameter is ignored when cal is either ECEZO_CALIBRATE_CLEAR
-     * or ECEZO_CALIBRATE_DRY.
-     * @return UPM result
-     */
-    upm_result_t ecezo_calibrate(const ecezo_context dev,
-                                 ECEZO_CALIBRATION_T cal,
-                                 float ec);
-
-    /**
-     * Enable or disable "continuous" operation.  In continuous
-     * operation, the device will sample and emit readings every
-     * second.  The driver disables this mode by default.  If you wish
-     * to use continuous mode, you will be responsible for reading and
-     * parsing the returned data yourself.
-     *
-     * The functionality of this driver depends on continuous mode
-     * being disabled.  When disabled, the driver will manually
-     * request a reading when desired via ecezo_update().
-     *
-     * @param dev Device context
-     * @param enable true to enable continuous mode, false to disable.
-     * @return UPM result
-     */
-    upm_result_t ecezo_set_continuous(const ecezo_context dev, bool enable);
-
-    /**
-     * Directly send a command to the device and optionally get a
-     * response.  This is a low level function and should not be
-     * called unless you know what you are doing.
-     *
-     * @param dev Device context
-     * @param cmd command to send to the device.  See the datasheet
-     * for valid commands.
-     * @param buffer Optional buffer in which to return any data.
-     * NULL if you are not interested in any returned data.
-     * @param len Length of the buffer, or 0 if you are not interested
-     * in returned data
-     * @return Number of characters read back, 0 if a timeout or no
-     * data, -1 if an error
-     */
-    int ecezo_send_command(const ecezo_context dev, char *cmd,
-                           char *buffer, int len);
-
-    /**
-     * Read character data from the device.  This is a low level
-     * function and should not be called unless you know what you are
-     * doing.
-     *
-     * @param dev sensor context
-     * @param buffer The character buffer to read data into.
-     * @param len The maximum size of the buffer
-     * @return The number of bytes successfully read, or -1 on error
-     */
-    int ecezo_read(const ecezo_context dev, char *buffer, size_t len);
-
-    /**
-     * Write character data to the device.  This is a low level
-     * function and should not be called unless you know what you are
-     * doing.
-     *
-     * @param dev sensor context
-     * @param buffer The character buffer containing data to write.
-     * @param len The number of bytes to write.
-     * @return The number of bytes successfully written, or -1 on error.
-     */
-    upm_result_t ecezo_write(const ecezo_context dev, char *buffer, size_t len);
-
-
-#ifdef __cplusplus
-}
-#endif
diff --git a/src/ecezo/ecezo.hpp b/src/ecezo/ecezo.hpp
deleted file mode 100644
index 2d2e64f..0000000
--- a/src/ecezo/ecezo.hpp
+++ /dev/null
@@ -1,241 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2016 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#pragma once
-
-#include <string>
-#include <iostream>
-
-#include <stdlib.h>
-#include <unistd.h>
-
-#include "ecezo.h"
-
-namespace upm {
-    /**
-     * @brief EC-EZO Sensor
-     * @defgroup ecezo libupm-ecezo
-     * @ingroup uart i2c liquid
-     */
-
-    /**
-     * @library ecezo
-     * @sensor ecezo
-     * @comname Electrical Conductivity (EC) Circuit
-     * @type liquid
-     * @man sparkfun
-     * @con uart i2c
-     * @web https://www.sparkfun.com/products/12908
-     *
-     * @brief API for the EC-EZO EC Sensor
-     *
-     * This driver was tested with the Atlas Scientific Electrical
-     * Conductivity kit.
-     *
-     * This device can operate in either UART or I2C modes.
-     *
-     * @snippet ecezo.cxx Interesting
-     */
-
-    class ECEZO {
-    public:
-
-        /**
-         * ECEZO object constructor.  This can use either UART
-         * (default) or I2C communications.  For UART, specify the
-         * uart number as the bus parameter, the baudrate as the
-         * addrBaud parameter, and false for the isI2C parameter.
-         *
-         * For I2C, specify the bus parameter, the I2C address as the
-         * addrBaud parameter, and true for the isI2C parameter.
-         *
-         * @param bus Specify which uart or I2C bus to use
-         * @param addrBaud Specify the baudrate if using UART, or the
-         * I2C address of the device if using I2C.
-         * @param isI2C true if using I2C, false if using a UART
-         */
-        ECEZO(unsigned int bus=0, unsigned int addrBaud=9600,
-              bool isI2C=false);
-
-        /**
-         * ECEZO object destructor
-         */
-        ~ECEZO();
-
-        /**
-         * Query the device for a reading, parse the response, and store
-         * the read values into the device context.  This function must be
-         * called prior to calling any function that returns the data,
-         * like getEC().
-         */
-        void update();
-
-        /**
-         * For accurate readings, the temperature of the liquid being
-         * measured should be known. This function allows you to specify
-         * the liquid's temperature (in Celsius) so that proper
-         * compensation can take place.  How you measure this temperature
-         * is up to you.  By default, the device will assume a temperature
-         * of 25C.
-         *
-         * @param temp The temperature of the liquid being measured
-         * @return UPM result
-         */
-        void setTemperature(float temp);
-
-        /**
-         * Set the K value of the probe being used.  By default, this is
-         * 1.0. Valid values are between 0.1 and 10.0.
-         *
-         * @param k The K value of the probe
-          */
-        void setKValue(float k);
-
-        /**
-         * Enable or disable Sleep mode.
-         *
-         * @param enable True to enable sleep mode, false to wake up
-         */
-        void setSleep(bool enable);
-
-        /**
-         * Retrieve the last measured Electrical Conductivity (EC)
-         * value in microsiemens.  update() must have been called
-         * before calling this function.
-         *
-         * @return EC value in microsiemens
-         */
-        float getEC();
-
-        /**
-         * Retrieve the last measured Total Dissolved solids (TDS) value.
-         * update() must have been called before calling this
-         * function.
-         *
-         * @return TDS value
-         */
-        float getTDS();
-
-        /**
-         * Retrieve the last measured Salinity value.  update() must
-         * have been called before calling this function.
-         *
-         * @return Salinity value
-         */
-        float getSalinity();
-
-        /**
-         * Retrieve the last measured Specific Gravity (SG) value.
-         * update() must have been called before calling this
-         * function.
-         *
-         * @return SG value
-         */
-        float getSG();
-
-        /**
-         * Specify calibration data for calibrating the device.  See the
-         * datasheet for details on how calibration is performed.  This
-         * function provides a mechanism for clearing out, and setting
-         * calibration data.
-         *
-         * A simple one point calibration might work as follows:
-         *
-         * 1. CLEAR the calibration data
-         * 2. with a dry probe, set the DRY point.
-         * 3. with the probe immersed in a standardized solution, set the
-         * ONE parameter to the solution's known EC value in microsiemens.
-         *
-         * A two point calibration might work as follows:
-         *
-         * 1. CLEAR the calibration data
-         * 2. with a dry probe, set the DRY point.
-         * 3. with the probe immersed in the lowest EC standardized
-         * solution, set the LOW parameter to the solution's known EC
-         * value in microsiemens.
-         * 4. with the probe immersed in the highest EC standardized
-         * solution, set the HIGH parameter to the solution's known EC
-         * value in microsiemens.
-         *
-         * @param cal One of the ECEZO_CALIBRATION_T values
-         * @param ec The EC value of the calibration fluid.  This
-         * parameter is ignored when cal is either ECEZO_CALIBRATE_CLEAR
-         * or ECEZO_CALIBRATE_DRY.
-         */
-        void calibrate(ECEZO_CALIBRATION_T cal, float ec);
-
-
-    protected:
-        // ecezo device context
-        ecezo_context m_ecezo;
-
-        /**
-         * Enable or disable "continuous" operation.  In continuous
-         * operation, the device will sample and emit readings every
-         * second.  The driver disables this mode by default.  If you wish
-         * to use continuous mode, you will be responsible for reading and
-         * parsing the returned data yourself.
-         *
-         * The functionality of this driver depends on continuous mode
-         * being disabled.  When disabled, the driver will manually
-         * request a reading when desired via ecezo_update().
-         *
-         * @param enable true to enable continuous mode, false to disable.
-         */
-        void setContinuous(bool enable);
-
-        /**
-         * Directly send a command to the device and optionally get a
-         * response.  This is a low level function and should not be
-         * called unless you know what you are doing.
-         *
-         * @param cmd a String containing the command to send to the
-         * device.  See the datasheet for valid commands.
-         * @return The string response, if any
-         */
-        std::string sendCommand(std::string cmd);
-
-        /**
-         * Read character data from the device.  This is a low level
-         * function and should not be called unless you know what you are
-         * doing.
-         *
-         * @return A string containing the data read back, if any
-         */
-        std::string read();
-
-        /**
-         * Write character data to the device.  This is a low level
-         * function and should not be called unless you know what you are
-         * doing.
-         *
-         * @param data The string containing data to write.
-         */
-        void write(std::string data);
-
-    private:
-        /* Disable implicit copy and assignment operators */
-        ECEZO(const ECEZO&) = delete;
-        ECEZO &operator=(const ECEZO&) = delete;
-    };
-}
diff --git a/src/ecezo/ecezo.i b/src/ecezo/ecezo.i
deleted file mode 100644
index aee7694..0000000
--- a/src/ecezo/ecezo.i
+++ /dev/null
@@ -1,16 +0,0 @@
-%include "../common_top.i"
-
-/* BEGIN Java syntax  ------------------------------------------------------- */
-#ifdef SWIGJAVA
-JAVA_JNI_LOADLIBRARY(javaupm_ecezo)
-#endif
-/* END Java syntax */
-
-/* BEGIN Common SWIG syntax ------------------------------------------------- */
-%{
-#include "ecezo_defs.h"
-#include "ecezo.hpp"
-%}
-%include "ecezo_defs.h"
-%include "ecezo.hpp"
-/* END Common SWIG syntax */
diff --git a/src/ecezo/ecezo.json b/src/ecezo/ecezo.json
deleted file mode 100644
index e484614..0000000
--- a/src/ecezo/ecezo.json
+++ /dev/null
@@ -1,43 +0,0 @@
-{
-    "Library": "ecezo",
-    "Description": "API for the EC-EZO EC Sensor",
-    "Sensor Class":
-    {
-        "ECEZO":
-        {
-            "Name": "Electrical Conductivity (EC) Circuit",
-            "Description": "This driver was tested with the Atlas Scientific Electrical Conductivity kit. This device can operate in either UART or I2C modes.",
-            "Aliases": ["ecezo"],
-            "Categories": ["ec", "conductivity", "liquid"],
-            "Connections": ["i2c", "uart"],
-            "Project Type": ["industrial"],
-            "Manufacturers": ["atlas", "sparkfun"],
-            "Kits": [],
-            "Examples":
-            {
-                "Java": ["ECEZO_Example.java"],
-                "Python": ["ecezo.py"],
-                "Node.js": ["ecezo.js"],
-                "C++": ["ecezo.cxx"],
-                "C": ["ecezo.c"]
-            },
-            "Specifications":
-            {
-                "Operating Voltage": {"unit": "V", "low": 3.3, "high": 5},
-                "Operating Current": {"unit": "mA", "low": 19, "high": 50},
-                "Conductivity Probe Range": {"unit": "K", "low": 0.1, "high": 10},
-                "Accurate Reading Range (K=0.1)": {"unit": "uS", "low": 0.5, "high": 50000},
-                "Accurate Reading Range (K=1.0)": {"unit": "uS", "low": 5, "high": 200000},
-                "Accurate Reading Range (K=10.0)": {"unit": "uS", "low": 10, "high": 1000000},
-                "Operating Temperature": {"unit": "degC", "low": 1, "high": 35}
-
-            },
-            "Urls" :
-            {
-                "Product Pages": ["https://www.atlas-scientific.com/product_pages/kits/ec_k1_0_kit.html", "https://www.sparkfun.com/products/12908"],
-                "Datasheets": ["https://cdn.sparkfun.com/datasheets/Sensors/Biometric/EC_EZO_Datasheet.pdf"],
-                "Schematics": []
-            }
-        }
-    }
-}
diff --git a/src/ecezo/ecezo_defs.h b/src/ecezo/ecezo_defs.h
deleted file mode 100644
index 4773644..0000000
--- a/src/ecezo/ecezo_defs.h
+++ /dev/null
@@ -1,45 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2016 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#pragma once
-
-#ifdef __cplusplus
-extern "C" {
-#endif
-
-// our maximum buffer size
-#define ECEZO_MAX_BUFFER_LEN (64)
-
-    // calibration commands
-    typedef enum {
-        ECEZO_CALIBRATE_CLEAR            = 0, // clear calibration
-        ECEZO_CALIBRATE_DRY,                  // cal dry point
-        ECEZO_CALIBRATE_ONE,                  // single point cal EC value
-        ECEZO_CALIBRATE_LOW,                  // 2-point cal, LOW EC value
-        ECEZO_CALIBRATE_HIGH                  // 2-point cal, HIGH EC value
-    } ECEZO_CALIBRATION_T;
-
-#ifdef __cplusplus
-}
-#endif
diff --git a/src/ecezo/ecezo_fti.c b/src/ecezo/ecezo_fti.c
deleted file mode 100644
index 8038015..0000000
--- a/src/ecezo/ecezo_fti.c
+++ /dev/null
@@ -1,88 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2016 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include "ecezo.h"
-#include "upm_fti.h"
-
-/**
- * This file implements the Function Table Interface (FTI) for this sensor
- */
-
-const char upm_ecezo_name[] = "ECEZO";
-const char upm_ecezo_description[] = "EC-EZO EC sensor";
-const upm_protocol_t upm_ecezo_protocol[] = {UPM_UART, UPM_I2C};
-const upm_sensor_t upm_ecezo_category[] = {UPM_EC};
-
-// forward declarations
-const void* upm_ecezo_get_ft(upm_sensor_t sensor_type);
-void* upm_ecezo_init_name();
-void upm_ecezo_close(void *dev);
-upm_result_t upm_ecezo_get_value(const void *dev, float *value);
-
-static const upm_sensor_ft ft =
-{
-  .upm_sensor_init_name = &upm_ecezo_init_name,
-  .upm_sensor_close = &upm_ecezo_close,
-};
-
-static const upm_ec_ft ecft =
-{
-  .upm_ec_get_value = upm_ecezo_get_value
-};
-
-const void* upm_ecezo_get_ft(upm_sensor_t sensor_type)
-{
-  switch(sensor_type)
-    {
-    case UPM_SENSOR:
-      return &ft;
-
-    case UPM_EC:
-      return &ecft;
-
-    default:
-      return NULL;
-    }
-}
-
-void* upm_ecezo_init_name()
-{
-  return NULL;
-}
-
-void upm_ecezo_close(void *dev)
-{
-  ecezo_close((ecezo_context)dev);
-}
-
-upm_result_t upm_ecezo_get_value(const void *dev, float *value)
-{
-    upm_result_t rv;
-
-    if ((rv = ecezo_update((ecezo_context)dev)))
-        return rv;
-
-    *value = ecezo_get_ec((ecezo_context)dev);
-    return UPM_SUCCESS;
-}
diff --git a/src/ecs1030/CMakeLists.txt b/src/ecs1030/CMakeLists.txt
deleted file mode 100644
index 1c07138..0000000
--- a/src/ecs1030/CMakeLists.txt
+++ /dev/null
@@ -1,5 +0,0 @@
-set (libname "ecs1030")
-set (libdescription "Non-invasive Current Sensor")
-set (module_src ${libname}.cxx)
-set (module_hpp ${libname}.hpp)
-upm_module_init(mraa)
diff --git a/src/ecs1030/ecs1030.cxx b/src/ecs1030/ecs1030.cxx
deleted file mode 100644
index 4995f24..0000000
--- a/src/ecs1030/ecs1030.cxx
+++ /dev/null
@@ -1,100 +0,0 @@
-/*
- * Author: Yevgeniy Kiveisha <yevgeniy.kiveisha@intel.com>
- * Copyright (c) 2014 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <iostream>
-#include <unistd.h>
-#include <stdlib.h>
-#include <string>
-#include <stdexcept>
-
-#include "ecs1030.hpp"
-
-using namespace upm;
-
-ECS1030::ECS1030 (int pinNumber) {
-    m_dataPinCtx = mraa_aio_init(pinNumber);
-    if (m_dataPinCtx == NULL) {
-      throw std::invalid_argument(std::string(__FUNCTION__) + 
-                                  ": mraa_aio_init() failed");
-    }
-
-    m_calibration = 111.1;
-}
-
-ECS1030::~ECS1030 () {
-    mraa_result_t error = MRAA_SUCCESS;
-
-    error = mraa_aio_close (m_dataPinCtx);
-    if (error != MRAA_SUCCESS) {
-    }
-}
-
-double
-ECS1030::getCurrency_A () {
-    int     sensorValue  = 0;
-    float   volt         = 0;
-    float   rms          = 0;
-
-    for (int i = 0; i < NUMBER_OF_SAMPLES; i++) {
-        sensorValue = mraa_aio_read (m_dataPinCtx);
-        if (sensorValue == -1) throw std::runtime_error(std::string(__FUNCTION__) +
-                                                        ": Failed to do an aio read.");
-        volt = (VOLT_M * sensorValue) - 2.5;
-        volt = volt * volt;
-        rms = rms + volt;
-        usleep (DELAY_MS);
-    }
-
-    rms = rms / (float)NUMBER_OF_SAMPLES;
-    rms = sqrt(rms);
-    return rms / R_LOAD;
-}
-
-double
-ECS1030::getCurrency_B () {
-    double sumCurrency    = 0;
-
-    for (int i = 0; i < NUMBER_OF_SAMPLES; i++) {
-        m_lastSample = m_sample;
-        m_sample = mraa_aio_read (m_dataPinCtx);
-        if (m_sample == -1) throw std::runtime_error(std::string(__FUNCTION__) +
-                                                     ": Failed to do an aio read.");
-        m_lastFilter = m_filteredSample;
-        m_filteredSample = 0.996 * (m_lastFilter + m_sample - m_lastSample);
-        sumCurrency += (m_filteredSample * m_filteredSample);
-    }
-
-    double ratio = m_calibration * ((SUPPLYVOLTAGE / 1000.0) / (ADC_RESOLUTION));
-    return ( ratio * sqrt(sumCurrency / NUMBER_OF_SAMPLES) );
-}
-
-double
-ECS1030::getPower_A () {
-    return 220.0 * getCurrency_A ();
-}
-
-double
-ECS1030::getPower_B () {
-    return 220.0 * getCurrency_B ();
-}
diff --git a/src/ecs1030/ecs1030.hpp b/src/ecs1030/ecs1030.hpp
deleted file mode 100644
index 67ea0ee..0000000
--- a/src/ecs1030/ecs1030.hpp
+++ /dev/null
@@ -1,129 +0,0 @@
-/*
- * Author: Yevgeniy Kiveisha <yevgeniy.kiveisha@intel.com>
- * Copyright (c) 2014 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#pragma once
-
-#include <string>
-#include <math.h>
-#include <mraa/aio.h>
-#include <mraa/gpio.h>
-
-namespace upm {
-
-#define NUMBER_OF_SAMPLES  500
-#define ADC_RESOLUTION     1024
-#define SUPPLYVOLTAGE      5100
-#define CURRENT_RATIO      2000.0
-
-#define HIGH               1
-#define LOW                0
-
-#define TRUE               HIGH
-#define FALSE              LOW
-
-  /**
-   * @brief ECS1030 Electricity Sensor
-   * @defgroup ecs1030 libupm-ecs1030
-   * @ingroup sparkfun analog electric
-   */
-
-  /**
-   * @library ecs1030
-   * @sensor ecs1030
-   * @comname Non-invasive Current Sensor
-   * @type electric
-   * @man sparkfun
-   * @web https://www.sparkfun.com/products/11005
-   * @con analog
-   *
-   * @brief API for the ECS1030 Non-Invasive Current/Electricity Sensor
-   *
-   * This non-invasive current sensor can be clamped around the supply line of
-   * an electrical load to tell you how much current is passing through it. It
-   * does this by acting as an inductor and responding to the magnetic field
-   * around a current-carrying conductor. This particular current sensor
-   * measures a load up to 30 A, which makes it great for building your own
-   * energy monitors.
-   *
-   * @image html ecs1030.jpg
-   * <br><em>ECS1030 Sensor image provided by SparkFun* under
-   * <a href=https://creativecommons.org/licenses/by/2.0/>
-   * CC BY 2.0</a>.</em>
-   *
-   * @snippet ecs1030.cxx Interesting
-   */
-class ECS1030 {
-    public:
-        static const uint8_t DELAY_MS  = 20000 / NUMBER_OF_SAMPLES; /* 1/50Hz is 20ms period */
-        static const uint8_t VOLT_M    = 5.1 / 1023;
-        static const uint8_t R_LOAD    = 2000.0 / CURRENT_RATIO;
-
-        /**
-         * Instantiates an ECS1030 object
-         *
-         * @param pinNumber Number of the data pin
-         */
-        ECS1030 (int pinNumber);
-
-        /**
-         * ECS1030 object destructor; basically, it closes the GPIO.
-         */
-        ~ECS1030 ();
-
-        /**
-         * Returns electric current data for a sampled period
-         */
-        double getCurrency_A ();
-
-        /**
-         * Returns power data for a sampled period
-         */
-        double getPower_A ();
-
-        /**
-         * Returns electric current data for a sampled period
-         */
-        double getCurrency_B ();
-
-        /**
-         * Returns power data for a sampled period
-         */
-        double getPower_B ();
-
-        /**
-         * Returns the name of the component
-         */
-        std::string name() {
-            return m_name;
-        }
-    private:
-        std::string         m_name;
-        mraa_aio_context    m_dataPinCtx;
-
-        double              m_calibration;
-        int                 m_lastSample;
-        double              m_lastFilter;
-        int                 m_sample;
-        double              m_filteredSample;
-};
-}
diff --git a/src/ecs1030/ecs1030.i b/src/ecs1030/ecs1030.i
deleted file mode 100644
index ca189fd..0000000
--- a/src/ecs1030/ecs1030.i
+++ /dev/null
@@ -1,14 +0,0 @@
-%include "../common_top.i"
-
-/* BEGIN Java syntax  ------------------------------------------------------- */
-#ifdef SWIGJAVA
-JAVA_JNI_LOADLIBRARY(javaupm_ecs1030)
-#endif
-/* END Java syntax */
-
-/* BEGIN Common SWIG syntax ------------------------------------------------- */
-%{
-#include "ecs1030.hpp"
-%}
-%include "ecs1030.hpp"
-/* END Common SWIG syntax */
diff --git a/src/ecs1030/ecs1030.json b/src/ecs1030/ecs1030.json
deleted file mode 100644
index e659cd9..0000000
--- a/src/ecs1030/ecs1030.json
+++ /dev/null
@@ -1,39 +0,0 @@
-{
-    "Library": "ecs1030",
-    "Description": "ECS1030 Electricity Sensor Library",
-    "Sensor Class":
-    {
-        "ECS1030":
-        {
-            "Name": "Non-Invasive Current Sensor",
-            "Description": "This non-invasive current sensor can be clamped around the supply line of an electrical load to tell you how much current is passing through it. It does this by acting as an inductor and responding to the magnetic field around a current-carrying conductor. This particular current sensor measures a load up to 30 A, which makes it great for building your own energy monitors.",
-            "Aliases": ["ecs1030"],
-            "Categories": ["meter", "electric"],
-            "Connections": ["analog"],
-            "Project Type": ["industrial"],
-            "Manufacturers": ["sparkfun"],
-            "Kits": [],
-            "Image": "ecs1030.jpg",
-            "Examples":
-            {
-                "Java": [],
-                "Python": [],
-                "Node.js": [],
-                "C++": ["ecs1030.cxx"],
-                "C": []
-            },
-            "Specifications":
-            {
-                "Measurable Current": {"unit": "V", "low": 1, "nominal": 30, "maximum": 60},
-                "Operating Temperature": {"unit": "degC", "low": -40, "high": 65}
-
-            },
-            "Urls" :
-            {
-                "Product Pages": ["https://www.sparkfun.com/products/11005"],
-                "Datasheets": ["https://cdn.sparkfun.com/datasheets/Sensors/Current/ECS1030-L72-SPEC.pdf"],
-                "Schematics": []
-            }
-        }
-    }
-}
diff --git a/src/ehr/CMakeLists.txt b/src/ehr/CMakeLists.txt
deleted file mode 100644
index 5fc870d..0000000
--- a/src/ehr/CMakeLists.txt
+++ /dev/null
@@ -1,5 +0,0 @@
-upm_mixed_module_init (NAME ehr
-    DESCRIPTION "Ear-clip Heart Rate Sensor"
-    CPP_HDR ehr.hpp
-    CPP_SRC ehr.cxx
-    REQUIRES mraa)
diff --git a/src/ehr/ehr.cxx b/src/ehr/ehr.cxx
deleted file mode 100644
index bdab8a9..0000000
--- a/src/ehr/ehr.cxx
+++ /dev/null
@@ -1,130 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2014 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <iostream>
-#include <string>
-#include <stdexcept>
-
-#include "ehr.hpp"
-
-using namespace upm;
-using namespace std;
-
-EHR::EHR(int pin)
-{
-  if ( !(m_gpio = mraa_gpio_init(pin)) )
-    {
-      throw std::invalid_argument(std::string(__FUNCTION__) +
-                                  ": mraa_aio_init() failed, invalid pin?");
-      return;
-    }
-
-  mraa_gpio_dir(m_gpio, MRAA_GPIO_IN);
-
-  initClock();
-  m_beatCounter = 0;
-}
-
-EHR::~EHR()
-{
-  mraa_gpio_close(m_gpio);
-}
-
-void EHR::initClock()
-{
-  gettimeofday(&m_startTime, NULL);
-}
-
-uint32_t EHR::getMillis()
-{
-  struct timeval elapsed, now;
-  uint32_t elapse;
-
-  // get current time
-  gettimeofday(&now, NULL);
-
-  // compute the delta since m_startTime
-  if( (elapsed.tv_usec = now.tv_usec - m_startTime.tv_usec) < 0 ) 
-    {
-      elapsed.tv_usec += 1000000;
-      elapsed.tv_sec = now.tv_sec - m_startTime.tv_sec - 1;
-    } 
-  else 
-    {
-      elapsed.tv_sec = now.tv_sec - m_startTime.tv_sec;
-    }
-
-  elapse = (uint32_t)((elapsed.tv_sec * 1000) + (elapsed.tv_usec / 1000));
-
-  // never return 0
-  if (elapse == 0)
-    elapse = 1;
-
-  return elapse;
-}
-
-void EHR::clearBeatCounter()
-{
-  m_beatCounter = 0;
-}
-
-void EHR::startBeatCounter()
-{
-  // install our interrupt handler
-  mraa_gpio_isr(m_gpio, MRAA_GPIO_EDGE_RISING, 
-                &beatISR, this);
-}
-
-void EHR::stopBeatCounter()
-{
-  // remove the interrupt handler
-  mraa_gpio_isr_exit(m_gpio);
-}
-
-uint32_t EHR::beatCounter()
-{
-  return m_beatCounter;
-}
-
-void EHR::beatISR(void *ctx)
-{
-  upm::EHR *This = (upm::EHR *)ctx;
-  This->m_beatCounter++;
-}
-
-int EHR::heartRate()
-{
-  uint32_t millis = getMillis();
-  uint32_t beats = beatCounter();
-  
-  float heartRate = 0;
-  // wait at least 5 seconds before attempting to compute the
-  // heart rate
-  if (millis > 5000)
-    {
-      heartRate = (float(beats) / (float(millis) / 1000.0)) * 60.0;
-    }
-
-  return int(heartRate);
-}
diff --git a/src/ehr/ehr.hpp b/src/ehr/ehr.hpp
deleted file mode 100644
index e83cded..0000000
--- a/src/ehr/ehr.hpp
+++ /dev/null
@@ -1,126 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2014 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#pragma once
-
-#include <string>
-#include <stdint.h>
-#include <sys/time.h>
-#include <mraa/gpio.h>
-
-namespace upm {
-  /**
-   * @brief Ear-clip Heart Rate Sensor
-   * @defgroup ehr libupm-ehr
-   * @ingroup seeed gpio medical
-   */
-
-  /**
-   * @library ehr
-   * @sensor ehr
-   * @comname Ear-clip Heart Rate Sensor
-   * @type medical
-   * @man seeed
-   * @con gpio
-   *
-   * @brief API for the  Ear-clip Heart Rate Sensor
-   *
-   * UPM module for the  ear-clip heart rate sensor. It is used to measure your
-   * heart rate. 
-   *
-   * @image html ehr.jpg 
-   * @snippet ehr.cxx Interesting
-   */
-  class EHR {
-  public:
-    /**
-     * EHR constructor
-     *
-     * @param pin Digital pin to use
-     */
-    EHR(int pin);
-    /**
-     * EHR destructor
-     */
-    ~EHR();
-    /**
-     * Returns the time of milliseconds elapsed since initClock()
-     * was last called.
-     *
-     * @return Elapsed milliseconds
-     */
-    uint32_t getMillis();
-
-    /**
-     * Resets the clock
-     *
-     */
-    void initClock();
-
-    /**
-     * Resets the beat counter to 0. The beat counter should be
-     * stopped via stopBeatCounter() prior to calling this function.
-     *
-     */
-    void clearBeatCounter();
-
-    /**
-     * Starts the beat counter
-     *
-     */
-    void startBeatCounter();
-
-    /**
-     * Stops the beat counter
-     *
-     */
-    void stopBeatCounter();
-
-    /**
-     * Gets the beat Counter
-     *
-     * @return Beat counter
-     */
-    uint32_t beatCounter();
-
-    /**
-     * Computes the heart rate
-     *
-     * @return Computed heart rate
-     */
-    int heartRate();
-
-  private:
-    /**
-     * Beat interrupt service routine (ISR)
-     *
-     */
-    static void beatISR(void *ctx);
-    
-    volatile uint32_t m_beatCounter;
-    struct timeval m_startTime;
-    mraa_gpio_context m_gpio;
-  };
-}
-
-
diff --git a/src/ehr/ehr.i b/src/ehr/ehr.i
deleted file mode 100644
index 25c6349..0000000
--- a/src/ehr/ehr.i
+++ /dev/null
@@ -1,16 +0,0 @@
-%include "../common_top.i"
-
-/* BEGIN Java syntax  ------------------------------------------------------- */
-#ifdef SWIGJAVA
-%ignore beatISR;
-
-JAVA_JNI_LOADLIBRARY(javaupm_ehr)
-#endif
-/* END Java syntax */
-
-/* BEGIN Common SWIG syntax ------------------------------------------------- */
-%{
-#include "ehr.hpp"
-%}
-%include "ehr.hpp"
-/* END Common SWIG syntax */
diff --git a/src/ehr/ehr.json b/src/ehr/ehr.json
deleted file mode 100644
index adaf5e8..0000000
--- a/src/ehr/ehr.json
+++ /dev/null
@@ -1,40 +0,0 @@
-{
-    "Library": "ehr",
-    "Description": "API for the  Ear-clip Heart Rate Sensor",
-    "Sensor Class":
-    {
-        "EHR":
-        {
-            "Name": "Ear-clip Heart Rate Sensor",
-            "Description": "UPM module for the  ear-clip heart rate sensor. It is used to measure your heart rate.",
-            "Aliases": ["ehr"],
-            "Categories": ["heartrate"],
-            "Connections": ["gpio"],
-            "Project Type": ["medical", "wearables", "prototyping"],
-            "Manufacturers": ["seeed"],
-            "Kits": [],
-            "Image": "ehr.jpg",
-            "Examples":
-            {
-                "Java": ["EHR_Example.java"],
-                "Python": ["ehr.py"],
-                "Node.js": ["ehr.js"],
-                "C++": ["ehr.cxx"],
-                "C": []
-            },
-            "Specifications":
-            {
-                "Operating Voltage": {"unit": "V", "low": 3, "high": 5},
-                "Operating Current": {"unit": "mA", "typ": 6.5},
-                "Measurement Range": {"unit": "bpm", "min": 30}
-
-            },
-            "Urls" :
-            {
-                "Product Pages": ["https://www.seeedstudio.com/Grove-Ear-clip-Heart-Rate-Sensor-p-1116.html"],
-                "Datasheets": ["http://wiki.seeedstudio.com/wiki/Grove_-_Heart_rate_ear_clip_kit"],
-                "Schematics": []
-            }
-        }
-    }
-}
diff --git a/src/eldriver/CMakeLists.txt b/src/eldriver/CMakeLists.txt
deleted file mode 100644
index 1156885..0000000
--- a/src/eldriver/CMakeLists.txt
+++ /dev/null
@@ -1,5 +0,0 @@
-upm_mixed_module_init (NAME eldriver
-    DESCRIPTION "Electroluminescent Wire (EL) Driver"
-    CPP_HDR eldriver.hpp
-    CPP_SRC eldriver.cxx
-    REQUIRES mraa)
diff --git a/src/eldriver/eldriver.cxx b/src/eldriver/eldriver.cxx
deleted file mode 100644
index 796f18b..0000000
--- a/src/eldriver/eldriver.cxx
+++ /dev/null
@@ -1,62 +0,0 @@
-/*
- * Author: Zion Orent <sorent@ics.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <string>
-#include <stdexcept>
-
-#include "eldriver.hpp"
-
-using namespace upm;
-
-ElDriver::ElDriver(int pin)
-{
-    if ( !(m_gpio = mraa_gpio_init(pin)) ) 
-      {
-        throw std::invalid_argument(std::string(__FUNCTION__) +
-                                    ": mraa_gpio_init() failed, invalid pin?");
-        return;
-      }
-    mraa_gpio_dir(m_gpio, MRAA_GPIO_OUT);
-}
-
-ElDriver::~ElDriver()
-{
-    mraa_gpio_close(m_gpio);
-}
-
-void ElDriver::on()
-{
-	mraa_result_t error = MRAA_SUCCESS;
-	error = mraa_gpio_write (m_gpio, HIGH);
-	if (error != MRAA_SUCCESS)
-		mraa_result_print(error);
-}
-
-void ElDriver::off()
-{
-	mraa_result_t error = MRAA_SUCCESS;
-	error = mraa_gpio_write (m_gpio, LOW);
-	if (error != MRAA_SUCCESS)
-		mraa_result_print(error);
-}
diff --git a/src/eldriver/eldriver.hpp b/src/eldriver/eldriver.hpp
deleted file mode 100644
index 2491f91..0000000
--- a/src/eldriver/eldriver.hpp
+++ /dev/null
@@ -1,78 +0,0 @@
-/*
- * Author: Zion Orent <sorent@ics.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#pragma once
-
-#include <mraa/gpio.h>
-
-#define HIGH      1
-#define LOW       0
-
-namespace upm {
-  /**
-   * @brief EL Driver Module
-   * @defgroup eldriver libupm-eldriver
-   * @ingroup seeed gpio electric
-   */
-
-  /**
-   * @library eldriver
-   * @sensor eldriver
-   * @comname Electroluminescent Wire (EL) Driver
-   * @type electric
-   * @man seeed
-   * @con gpio
-   *
-   * @brief API for the  EL Driver Module
-   * 
-   * The  EL Driver allows you to easily light up an
-   * EL wire with just one single  cable.
-   *
-   * @image html eldriver.jpg 
-   * @snippet eldriver.cxx Interesting
-   */
-  class ElDriver {
-  public:
-    /**
-     *  EL Driver constructor
-     *
-     * @param pin Digital pin to use
-     */
-    ElDriver(int pin);
-    /**
-     *  EL Driver destructor
-     */
-    ~ElDriver();
-    /**
-     * Turns the EL wire on
-     */
-     void on();
-    /**
-     * Turns the EL wire off
-     */
-     void off();
-
-  private:
-        mraa_gpio_context m_gpio;
-	};
-}
diff --git a/src/eldriver/eldriver.json b/src/eldriver/eldriver.json
deleted file mode 100644
index 9376e75..0000000
--- a/src/eldriver/eldriver.json
+++ /dev/null
@@ -1,40 +0,0 @@
-{
-    "Library": "eldriver",
-    "Description": "API for the  EL Driver Module",
-    "Sensor Class":
-    {
-        "ElDriver":
-        {
-            "Name": "Electroluminescent Wire (EL) Driver",
-            "Description": "The  EL Driver allows you to easily light up an EL wire with just one single  cable.",
-            "Aliases": ["eldriver"],
-            "Categories": ["lighting"],
-            "Connections": ["gpio"],
-            "Project Type": ["prototyping", "commercial", "wearables"],
-            "Manufacturers": ["seeed"],
-            "Kits": [],
-            "Image": "eldriver.jpg",
-            "Examples":
-            {
-                "Java": [],
-                "Python": ["eldriver.py"],
-                "Node.js": ["eldriver.js"],
-                "C++": ["eldriver.cxx"],
-                "C": []
-            },
-            "Specifications":
-            {
-                "Operating Voltage": {"unit": "V", "low": 3.3, "high": 5},
-                "Operating Current": {"unit": "mA", "max": 300},
-                "Supported EL Capacitance": {"unit": "nF", "max": 15}
-
-            },
-            "Urls" :
-            {
-                "Product Pages": ["https://www.seeedstudio.com/Grove-EL-Driver-p-2269.html"],
-                "Datasheets": ["http://wiki.seeed.cc/Grove-EL_Driver/"],
-                "Schematics": ["https://raw.githubusercontent.com/SeeedDocument/Grove-EL_Driver/master/res/Grove-EL_Driver_v1.0.pdf"]
-            }
-        }
-    }
-}
diff --git a/src/electromagnet/CMakeLists.txt b/src/electromagnet/CMakeLists.txt
deleted file mode 100644
index 5dcebbb..0000000
--- a/src/electromagnet/CMakeLists.txt
+++ /dev/null
@@ -1,5 +0,0 @@
-upm_mixed_module_init (NAME electromagnet
-    DESCRIPTION "Electromagnet"
-    CPP_HDR electromagnet.hpp
-    CPP_SRC electromagnet.cxx
-    REQUIRES mraa)
diff --git a/src/electromagnet/electromagnet.cxx b/src/electromagnet/electromagnet.cxx
deleted file mode 100644
index e055b49..0000000
--- a/src/electromagnet/electromagnet.cxx
+++ /dev/null
@@ -1,62 +0,0 @@
-/*
- * Author: Zion Orent <sorent@ics.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <string>
-#include <stdexcept>
-
-#include "electromagnet.hpp"
-
-using namespace upm;
-
-Electromagnet::Electromagnet(int pin)
-{
-    if ( !(m_gpio = mraa_gpio_init(pin)) ) 
-      {
-        throw std::invalid_argument(std::string(__FUNCTION__) +
-                                    ": mraa_gpio_init() failed, invalid pin?");
-        return;
-      }
-    mraa_gpio_dir(m_gpio, MRAA_GPIO_OUT);
-}
-
-Electromagnet::~Electromagnet()
-{
-    mraa_gpio_close(m_gpio);
-}
-
-void Electromagnet::on()
-{
-	mraa_result_t error = MRAA_SUCCESS;
-	error = mraa_gpio_write (m_gpio, HIGH);
-	if (error != MRAA_SUCCESS)
-		mraa_result_print(error);
-}
-
-void Electromagnet::off()
-{
-	mraa_result_t error = MRAA_SUCCESS;
-	error = mraa_gpio_write (m_gpio, LOW);
-	if (error != MRAA_SUCCESS)
-		mraa_result_print(error);
-}
diff --git a/src/electromagnet/electromagnet.hpp b/src/electromagnet/electromagnet.hpp
deleted file mode 100644
index abd41bf..0000000
--- a/src/electromagnet/electromagnet.hpp
+++ /dev/null
@@ -1,77 +0,0 @@
-/*
- * Author: Zion Orent <sorent@ics.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#pragma once
-
-#include <mraa/gpio.h>
-
-#define HIGH      1
-#define LOW       0
-
-namespace upm {
-  /**
-   * @brief Electromagnet Library
-   * @defgroup electromagnet libupm-electromagnet
-   * @ingroup seeed gpio electric
-   */
-
-  /**
-   * @library electromagnet
-   * @sensor electromagnet
-   * @comname Electromagnet
-   * @type electric
-   * @man seeed
-   * @con gpio
-   *
-   * @brief API for the  Electromagnet
-   * 
-   * The  Electromagnet can hold up to 1 kg (approximately 2.2 lbs)
-   *
-   * @image html electromagnet.jpg
-   * @snippet electromagnet.cxx Interesting
-   */
-  class Electromagnet {
-  public:
-    /**
-     *  Electromagnet constructor
-     *
-     * @param pin Digital pin to use
-     */
-    Electromagnet(int pin);
-    /**
-     *  Electromagnet destructor
-     */
-    ~Electromagnet();
-    /**
-     * Turns the magnet on
-     */
-     void on();
-    /**
-     * Turns the magnet off
-     */
-     void off();
-
-  private:
-        mraa_gpio_context m_gpio;
-	};
-}
diff --git a/src/electromagnet/electromagnet.json b/src/electromagnet/electromagnet.json
deleted file mode 100644
index 6ef4a9f..0000000
--- a/src/electromagnet/electromagnet.json
+++ /dev/null
@@ -1,41 +0,0 @@
-{
-    "Library": "electromagnet",
-    "Description": "Electromagnet Library",
-    "Sensor Class":
-    {
-        "Electromagnet":
-        {
-            "Name": "API for the  Electromagnet",
-            "Description": "The  Electromagnet can hold up to 1 kg (approximately 2.2 lbs)",
-            "Aliases": ["electromagnet"],
-            "Categories": ["electric", "magnetic"],
-            "Connections": ["gpio"],
-            "Project Type": ["prototyping"],
-            "Manufacturers": ["seeed"],
-            "Kits": [],
-            "Image": "electromagnet.jpg",
-            "Examples":
-            {
-                "Java": [],
-                "Python": ["electromagnet.py"],
-                "Node.js": ["electromagnet.js"],
-                "C++": ["electromagnet.cxx"],
-                "C": []
-            },
-            "Specifications":
-            {
-                "Operating Voltage": {"unit": "V", "typ": 5},
-                "Operating Current": {"unit": "mA", "typ": 400},
-                "Standby Current": {"unit": "uA", "typ": 200},
-                "Max Load Weight": {"unit": "kgs", "typ": 1}
-
-            },
-            "Urls" :
-            {
-                "Product Pages": ["https://www.seeedstudio.com/Grove-Electromagnet-p-1820.html"],
-                "Datasheets": ["https://raw.githubusercontent.com/SeeedDocument/Grove-Electromagnet/master/res/ZYE1-P20-15.pdf", "http://wiki.seeed.cc/Grove-Electromagnet/"],
-                "Schematics": []
-            }
-        }
-    }
-}
diff --git a/src/emg/CMakeLists.txt b/src/emg/CMakeLists.txt
deleted file mode 100644
index be9eca7..0000000
--- a/src/emg/CMakeLists.txt
+++ /dev/null
@@ -1,8 +0,0 @@
-upm_mixed_module_init (NAME emg
-    DESCRIPTION "Electromyography (EMG) Sensor"
-    C_HDR emg.h
-    C_SRC emg.c
-    CPP_HDR emg.hpp
-    CPP_SRC emg.cxx
-    FTI_SRC emg_fti.c
-    REQUIRES mraa)
diff --git a/src/emg/emg.c b/src/emg/emg.c
deleted file mode 100644
index 87315d8..0000000
--- a/src/emg/emg.c
+++ /dev/null
@@ -1,136 +0,0 @@
-/*
- * Author: Noel Eck <noel.eck@intel.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <string.h>
-#include <stdlib.h>
-
-#include "emg.h"
-
-emg_context emg_init(int16_t pin)
-{
-    // make sure MRAA is initialized
-    int mraa_rv;
-    if ((mraa_rv = mraa_init()) != MRAA_SUCCESS)
-    {
-        printf("%s: mraa_init() failed (%d).\n", __FUNCTION__, mraa_rv);
-        return NULL;
-    }
-
-    emg_context dev = (emg_context) malloc(sizeof(struct _emg_context));
-
-    if (dev == NULL)
-      return NULL;
-
-    /* Init aio pin */
-    dev->aio = mraa_aio_init(pin);
-
-    if (dev->aio == NULL) {
-        free(dev);
-        return NULL;
-    }
-
-    /* Set the ADC ref, scale, and offset defaults */
-    dev->m_aRef = 5.0;
-    dev->m_scale = 1.0;
-    dev->m_offset = 0.0;
-
-    return dev;
-}
-
-void emg_close(emg_context dev)
-{
-    mraa_aio_close(dev->aio);
-    free(dev);
-}
-
-upm_result_t emg_set_aref(const emg_context dev, float aref)
-{
-    dev->m_aRef = aref;
-    return UPM_SUCCESS;
-}
-
-upm_result_t emg_set_scale(const emg_context dev, float scale)
-{
-    dev->m_scale = scale;
-    return UPM_SUCCESS;
-}
-
-upm_result_t emg_set_offset(const emg_context dev, float offset)
-{
-    dev->m_offset = offset;
-    return UPM_SUCCESS;
-}
-
-float emg_get_aref(const emg_context dev)
-{
-    return dev->m_aRef;
-}
-
-float emg_get_scale(const emg_context dev)
-{
-    return dev->m_scale;
-}
-
-float emg_get_offset(const emg_context dev)
-{
-    return dev->m_offset;
-}
-
-upm_result_t emg_get_normalized(const emg_context dev, float *value)
-{
-    *value = mraa_aio_read_float(dev->aio);
-    if (*value < 0)
-        return UPM_ERROR_OPERATION_FAILED;
-    return UPM_SUCCESS;
-}
-
-upm_result_t emg_get_raw_volts(const emg_context dev, float *value)
-{
-    *value = mraa_aio_read_float(dev->aio);
-    if (*value < 0)
-        return UPM_ERROR_OPERATION_FAILED;
-
-    /* Scale by the ADC reference voltage */
-    *value *= dev->m_aRef;
-
-    return UPM_SUCCESS;
-}
-
-upm_result_t emg_get_volts(const emg_context dev, float *value)
-{
-    *value = mraa_aio_read_float(dev->aio);
-    if (*value < 0)
-        return UPM_ERROR_OPERATION_FAILED;
-
-     /* Apply raw scale */
-    *value *= dev->m_scale;
-
-     /* Scale to aRef */
-    *value *= dev->m_aRef;
-
-    /* Apply the offset in volts */
-    *value += dev->m_offset;
-
-    return UPM_SUCCESS;
-}
diff --git a/src/emg/emg.cxx b/src/emg/emg.cxx
deleted file mode 100644
index d33f56f..0000000
--- a/src/emg/emg.cxx
+++ /dev/null
@@ -1,69 +0,0 @@
-/*
- * Author: Zion Orent <zorent@ics.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <iostream>
-#include <string>
-#include <stdexcept>
-
-#include "emg.hpp"
-
-using namespace upm;
-using namespace std;
-
-EMG::EMG(int pin)
-{
-    if ( !(m_aio = mraa_aio_init(pin)) )
-    {
-      throw std::invalid_argument(std::string(__FUNCTION__) +
-                                  ": mraa_aio_init() failed, invalid pin?");
-      return;
-    }
-}
-
-EMG::~EMG()
-{
-  mraa_aio_close(m_aio);
-}
-
-void EMG::calibrate()
-{
-	int val, sum = 0;
-
-	for (int i=0; i<1100; i++)
-	{
-		val = mraa_aio_read(m_aio);
-                if (val != -1) throw std::runtime_error(std::string(__FUNCTION__) +
-                                                        ": Failed to do an aio read.");
-		sum += val;
-		usleep(1000);
-	}
-	sum /= 1100;
-	cout << "Static analog data = " << sum << endl;
-}
-
-int EMG::value()
-{
-	int val = mraa_aio_read(m_aio);
-	return val;
-}
diff --git a/src/emg/emg.h b/src/emg/emg.h
deleted file mode 100644
index 36a51d2..0000000
--- a/src/emg/emg.h
+++ /dev/null
@@ -1,141 +0,0 @@
-/*
- * Author: Noel Eck <noel.eck@intel.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#pragma once
-
-#include "upm.h"
-#include "mraa/aio.h"
-
-#ifdef __cplusplus
-extern "C" {
-#endif
-
-/**
- * @file emg.h
- * @library emg
- * @brief C API for the EMG Sensor
- *
- * @include emg.c
- */
-
-/**
- * driver context
- */
-typedef struct _emg_context {
-    /* mraa aio pin context */
-    mraa_aio_context aio;
-    /* Analog voltage reference */
-    float m_aRef;
-    /* Scale */
-    float m_scale;
-    /* Offset in sensor units */
-    float m_offset;
-} *emg_context;
-
-/**
- * Initialize analog sensor
- * @param pin Analog pin
- * @return sensor context
- */
-emg_context emg_init(int16_t pin);
-
-/**
- * Analog sensor destructor
- * @param sensor context pointer
- */
-void emg_close(emg_context dev);
-
-/**
- * Set ADC reference voltage
- * @param dev sensor context pointer
- * @param aref ADC reference voltage
- * @return Function result code
- */
-upm_result_t emg_set_aref(const emg_context dev, float aref);
-
-/**
- * Set sensor scale.  This scale is applied to the return value:
- *     counts = counts * scale
- * @param dev sensor context pointer
- * @param scale count scale value used
- * @return Function result code
- */
-upm_result_t emg_set_scale(const emg_context dev, float scale);
-
-/**
- * Set sensor offset.  This offset is applied to the return value:
- *     value = value + offset
- * @param dev sensor context pointer
- * @param offset count offset value used
- * @return Function result code
- */
-upm_result_t emg_set_offset(const emg_context dev, float offset);
-
-/**
- * Get sensor aref
- * @param dev sensor context pointer
- * @return Sensor ADC reference voltage
- */
-float emg_get_aref(const emg_context dev);
-
-/**
- * Get sensor scale
- * @param dev sensor context pointer
- * @return Sensor scale
- */
-float emg_get_scale(const emg_context dev);
-
-/**
- * Get sensor offset
- * @param dev sensor context pointer
- * @return Sensor offset
- */
-float emg_get_offset(const emg_context dev);
-
-/**
- * Read normalized value for sensor
- * @param dev sensor context pointer
- * @param *value Normalized value (0.0 -> 1.0)
- * @return Function result code
- */
-upm_result_t emg_get_normalized(const emg_context dev, float *value);
-
-/**
- * Read raw voltage from the sensor
- * @param dev sensor context pointer
- * @param *value Raw sensor voltage
- * @return Function result code
- */
-upm_result_t emg_get_raw_volts(const emg_context dev, float *value);
-
-/**
- * Read scaled/offset voltage from the sensor
- * @param dev sensor context pointer
- * @param *value Adjusted sensor voltage
- * @return Function result code
- */
-upm_result_t emg_get_volts(const emg_context dev, float *value);
-#ifdef __cplusplus
-}
-#endif
diff --git a/src/emg/emg.hpp b/src/emg/emg.hpp
deleted file mode 100644
index bc9c3e3..0000000
--- a/src/emg/emg.hpp
+++ /dev/null
@@ -1,83 +0,0 @@
-/*
- * Author: Zion Orent <zorent@ics.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#pragma once
-
-#include <string>
-#include <mraa/aio.h>
-
-namespace upm {
-  /**
-   * @brief EMG Muscle Signal Reader
-   * @defgroup emg libupm-emg
-   * @ingroup seeed analog electric
-   */
-
-  /**
-   * @library emg
-   * @sensor emg
-   * @comname Electromyography (EMG) Sensor
-   * @altname Grove EMG Sensor
-   * @type electric
-   * @man seeed
-   * @con analog
-   *
-   * @brief API for the Grove EMG Muscle Signal Reader
-   * 
-   * Grove EMG muscle signal reader gathers small muscle signals,
-   * then processes them, and returns the result
-   *
-   * @image html emg.jpg
-   * @snippet emg.cxx Interesting
-   */
-  class EMG {
-  public:
-    /**
-     * Grove EMG reader constructor
-     *
-     * @param pin Analog pin to use
-     */
-    EMG(int pin);
-    /**
-     * EMG destructor
-     */
-    ~EMG();
-
-    /**
-     * Calibrates the Grove EMG reader
-     */
-    void calibrate();
-
-    /**
-     * Measures muscle signals from the reader
-     *
-     * @return Muscle output as analog voltage
-     */
-    int value();
-
-  private:
-    mraa_aio_context m_aio;
-  };
-}
-
-
diff --git a/src/emg/emg.json b/src/emg/emg.json
deleted file mode 100644
index 7bab83f..0000000
--- a/src/emg/emg.json
+++ /dev/null
@@ -1,38 +0,0 @@
-{
-    "Library": "emg",
-    "Description": "Grove EMG Muscle Signal Reader Library",
-    "Sensor Class":
-    {
-        "EMG":
-        {
-            "Name": "Electromyography (EMG) Sensor",
-            "Description": "Grove EMG muscle signal reader gathers small muscle signals, then processes them, and returns the result.",
-            "Aliases": ["emg"],
-            "Categories": ["electromyography", "medical"],
-            "Connections": ["analog"],
-            "Project Type": ["wearables", "computer interfacing", "prototyping"],
-            "Manufacturers": ["seeed"],
-            "Kits": [],
-            "Image": "emg.jpg",
-            "Examples":
-            {
-                "Java": ["Emg_Example.java"],
-                "Python": ["emg.py"],
-                "Node.js": ["emg.js"],
-                "C++": ["emg.cxx"],
-                "C": ["emg.c"]
-            },
-            "Specifications":
-            {
-                "Operating Voltage": {"unit": "V", "low": 3.3, "high": 5}
-
-            },
-            "Urls" :
-            {
-                "Product Pages": ["https://www.seeedstudio.com/Grove-EMG-Detector-p-1737.html"],
-                "Datasheets": ["http://wiki.seeed.cc/Grove-EMG_Detector/"],
-                "Schematics": ["https://raw.githubusercontent.com/SeeedDocument/Grove-EMG_Detector/master/res/Grove-EMG_Sensor_v1.1_SCH.pdf"]
-            }
-        }
-    }
-}
diff --git a/src/emg/emg_fti.c b/src/emg/emg_fti.c
deleted file mode 100644
index c6ac337..0000000
--- a/src/emg/emg_fti.c
+++ /dev/null
@@ -1,119 +0,0 @@
-/*
- * Author: Noel Eck <noel.eck@intel.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <string.h>
-#include <stdlib.h>
-
-#include "emg.h"
-#include "upm_fti.h"
-#include "fti/upm_sensor.h"
-#include "fti/upm_raw.h"
-
-/** 
- * This file implements the Function Table Interface (FTI) for this sensor
- */
-
-const char upm_emg_name[] = "EMG";
-const char upm_emg_description[] = "Analog emg sensor";
-const upm_protocol_t upm_emg_protocol[] = {UPM_ANALOG};
-const upm_sensor_t upm_emg_category[] = {UPM_RAW};
-
-// forward declarations
-const void* upm_emg_get_ft(upm_sensor_t sensor_type);
-void* upm_emg_init_str(const char* protocol, const char* params);
-void upm_emg_close(void* dev);
-const upm_sensor_descriptor_t upm_emg_get_descriptor();
-upm_result_t upm_emg_set_offset(const void* dev, float offset);
-upm_result_t upm_emg_set_scale(const void* dev, float scale);
-upm_result_t upm_emg_get_value(const void* dev, float *value);
-
-/* This sensor implementes 2 function tables */
-/* 1. Generic base function table */
-static const upm_sensor_ft ft_gen =
-{
-    .upm_sensor_init_name = &upm_emg_init_str,
-    .upm_sensor_close = &upm_emg_close,
-    .upm_sensor_get_descriptor = &upm_emg_get_descriptor
-};
-
-/* 2. RAW function table */
-static const upm_raw_ft ft_raw =
-{
-    .upm_raw_set_offset = &upm_emg_set_offset,
-    .upm_raw_set_scale = &upm_emg_set_scale,
-    .upm_raw_get_value = &upm_emg_get_value
-};
-
-const void* upm_emg_get_ft(upm_sensor_t sensor_type)
-{
-    switch(sensor_type)
-    {
-        case UPM_SENSOR:
-            return &ft_gen;
-        case UPM_RAW:
-            return &ft_raw;
-        default:
-            return NULL;
-    }
-}
-
-void* upm_emg_init_str(const char* protocol, const char* params)
-{
-    fprintf(stderr, "String initialization - not implemented, using ain0: %s\n", __FILENAME__);
-    return emg_init(0);
-}
-
-void upm_emg_close(void* dev)
-{
-    emg_close((emg_context)dev);
-}
-
-const upm_sensor_descriptor_t upm_emg_get_descriptor()
-{
-    /* Fill in the descriptor */
-    upm_sensor_descriptor_t usd;
-    usd.name = upm_emg_name;
-    usd.description = upm_emg_description;
-    usd.protocol_size = 1;
-    usd.protocol = upm_emg_protocol;
-    usd.category_size = 1;
-    usd.category = upm_emg_category;
-
-    return usd;
-}
-
-upm_result_t upm_emg_set_offset(const void* dev, float offset)
-{
-    return emg_set_offset((emg_context)dev, offset);
-}
-
-upm_result_t upm_emg_set_scale(const void* dev, float scale)
-{
-    return emg_set_scale((emg_context)dev, scale);
-}
-
-upm_result_t upm_emg_get_value(const void* dev, float *value)
-{
-    return emg_get_volts((emg_context)dev, value);
-}
diff --git a/src/enc03r/CMakeLists.txt b/src/enc03r/CMakeLists.txt
deleted file mode 100644
index c7ed321..0000000
--- a/src/enc03r/CMakeLists.txt
+++ /dev/null
@@ -1,9 +0,0 @@
-upm_mixed_module_init (NAME enc03r
-    DESCRIPTION "Single-axis Analog Gyro Module"
-    C_HDR enc03r.h
-    C_SRC enc03r.c
-    CPP_HDR enc03r.hpp
-    CPP_SRC enc03r.cxx
-    FTI_SRC enc03r_fti.c
-    CPP_WRAPS_C
-    REQUIRES mraa utilities-c)
diff --git a/src/enc03r/enc03r.c b/src/enc03r/enc03r.c
deleted file mode 100644
index 5b73b90..0000000
--- a/src/enc03r/enc03r.c
+++ /dev/null
@@ -1,159 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2014-2017 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <stdio.h>
-#include <string.h>
-#include <assert.h>
-
-#include "enc03r.h"
-#include "upm_utilities.h"
-
-enc03r_context enc03r_init(int pin, float aref)
-{
-    // make sure MRAA is initialized
-    int mraa_rv;
-    if ((mraa_rv = mraa_init()) != MRAA_SUCCESS)
-    {
-        printf("%s: mraa_init() failed (%d).\n", __FUNCTION__, mraa_rv);
-        return NULL;
-    }
-
-    enc03r_context dev =
-        (enc03r_context)malloc(sizeof(struct _enc03r_context));
-
-    if (!dev)
-        return NULL;
-
-    // zero out context
-    memset((void *)dev, 0, sizeof(struct _enc03r_context));
-
-    dev->a_ref = aref;
-
-    if ( !(dev->aio = mraa_aio_init(pin)) )
-    {
-        printf("%s: mraa_aio_init() failed.\n", __FUNCTION__);
-        enc03r_close(dev);
-        return NULL;
-    }
-
-    dev->offset = 0.0;
-    dev->scale = 1.0;
-
-    dev->a_res = (float)(1 << mraa_aio_get_bit(dev->aio)) - 1.0;
-
-    dev->calibrationValue = 0.0;
-
-    return dev;
-}
-
-void enc03r_close(enc03r_context dev)
-{
-    assert(dev != NULL);
-
-    if (dev->aio)
-        mraa_aio_close(dev->aio);
-
-    free(dev);
-}
-
-upm_result_t enc03r_update(enc03r_context dev)
-{
-    assert(dev != NULL);
-
-    float val = (float)mraa_aio_read(dev->aio);
-    if (val < 0)
-    {
-        printf("%s: mraa_aio_read() failed\n", __FUNCTION__);
-        return UPM_ERROR_OPERATION_FAILED;
-    }
-
-    dev->normalized = val / dev->a_res;
-
-    // from seeed studio example
-    dev->angular_velocity =
-        ((val - dev->calibrationValue) * (dev->a_ref * 1000.0)
-         / dev->a_res / 0.67);
-
-    return UPM_SUCCESS;
-}
-
-upm_result_t enc03r_calibrate(const enc03r_context dev,
-                                   unsigned int samples)
-{
-    assert(dev != NULL);
-
-    float total = 0.0;
-
-    for (unsigned int i=0; i<samples; i++)
-    {
-        int val = mraa_aio_read(dev->aio);
-        if (val < 0)
-        {
-            printf("%s: mraa_aio_read() failed\n", __FUNCTION__);
-            return UPM_ERROR_OPERATION_FAILED;
-        }
-
-        total += (float)val;
-        upm_delay_ms(2);
-    }
-
-    dev->calibrationValue = total / (float)samples;
-
-    return UPM_SUCCESS;
-}
-
-float enc03r_calibration_value(const enc03r_context dev)
-{
-    assert(dev != NULL);
-
-    return dev->calibrationValue;
-}
-
-float enc03r_angular_velocity(const enc03r_context dev)
-{
-    assert(dev != NULL);
-
-    return dev->angular_velocity * dev->scale + (dev->offset * dev->scale);
-}
-
-void enc03r_set_offset(const enc03r_context dev, float offset)
-{
-    assert(dev != NULL);
-
-    dev->offset = offset;
-}
-
-void enc03r_set_scale(const enc03r_context dev, float scale)
-{
-    assert(dev != NULL);
-
-    dev->scale = scale;
-}
-
-float enc03r_get_normalized(const enc03r_context dev)
-{
-    assert(dev != NULL);
-
-    return dev->normalized;
-}
diff --git a/src/enc03r/enc03r.cxx b/src/enc03r/enc03r.cxx
deleted file mode 100644
index 0fd62fb..0000000
--- a/src/enc03r/enc03r.cxx
+++ /dev/null
@@ -1,79 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2014-2017 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <iostream>
-#include <string>
-#include <stdexcept>
-
-#include "enc03r.hpp"
-
-using namespace upm;
-using namespace std;
-
-ENC03R::ENC03R(int pin, float aref) :
-    m_enc03r(enc03r_init(pin, aref))
-{
-    if (!m_enc03r)
-        throw std::runtime_error(string(__FUNCTION__)
-                                 + ": enc03r_init() failed");
-}
-
-ENC03R::~ENC03R()
-{
-    enc03r_close(m_enc03r);
-}
-
-void ENC03R::calibrate(unsigned int samples)
-{
-    if (enc03r_calibrate(m_enc03r, samples))
-        throw std::runtime_error(string(__FUNCTION__)
-                                 + ": enc03r_calibrate() failed");
-}
-
-void ENC03R::update()
-{
-    if (enc03r_update(m_enc03r))
-        throw std::runtime_error(string(__FUNCTION__)
-                                 + ": enc03r_update() failed");
-}
-
-float ENC03R::angularVelocity()
-{
-    return enc03r_angular_velocity(m_enc03r);
-}
-
-void ENC03R::setOffset(float offset)
-{
-    enc03r_set_offset(m_enc03r, offset);
-}
-
-void ENC03R::setScale(float scale)
-{
-    enc03r_set_scale(m_enc03r, scale);
-}
-
-float ENC03R::getNormalized()
-{
-    return enc03r_get_normalized(m_enc03r);
-}
diff --git a/src/enc03r/enc03r.h b/src/enc03r/enc03r.h
deleted file mode 100644
index 095d899..0000000
--- a/src/enc03r/enc03r.h
+++ /dev/null
@@ -1,159 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2014-2017 Intel Corporation.
-emacs . *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#pragma once
-
-#include <stdint.h>
-#include <stdlib.h>
-#include <unistd.h>
-
-#include <mraa/aio.h>
-#include <upm.h>
-
-#ifdef __cplusplus
-extern "C" {
-#endif
-
-    /**
-     * @file enc03r.h
-     * @library enc03r
-     * @brief Generic API for AT command based UART devices
-     *
-     */
-
-    /**
-     * Device context
-     */
-    typedef struct _enc03r_context {
-        mraa_aio_context aio;
-
-        // determined by calibrate();
-        float calibrationValue;
-
-        // our computed value
-        float angular_velocity;
-
-        // analog reference voltage
-        float a_ref;
-        // analog ADC resolution (max value)
-        float a_res;
-
-        // offset
-        float offset;
-
-        // scale
-        float scale;
-
-        // normalized ADC value
-        float normalized;
-
-    } *enc03r_context;
-
-    /**
-     * ENC03R sensor constructor
-     *
-     * @param pin Analog pin to use
-     * @param vref Reference voltage to use; default is 5.0 V
-     * @return Device context
-     */
-    enc03r_context enc03r_init(int pin, float aref);
-
-    /**
-     * ENC03R destructor
-     *
-     * @param dev Device context
-     */
-    void enc03r_close(enc03r_context dev);
-
-    /**
-     * Update the internal state with the current reading.  This
-     * function must be called prior to calling
-     * enc03r_angular_velocity().
-     *
-     * @param dev Device context
-     * @return UPM result
-     */
-    upm_result_t enc03r_update(enc03r_context dev);
-
-    /**
-     * Calibrates the sensor by determining an analog reading over many
-     * samples with no movement of the sensor. This must be done
-     * before attempting to use the sensor.
-     *
-     * @param dev Device context
-     * @param samples Number of samples to use for calibration
-     * @return UPM result
-     */
-    upm_result_t enc03r_calibrate(const enc03r_context dev,
-                                  unsigned int samples);
-
-    /**
-     * Returns the currently stored calibration value
-     *
-     * @param dev Device context
-     * @return Current calibration value
-     */
-    float enc03r_calibration_value(const enc03r_context dev);
-
-    /**
-     * Return the computed Angular Velocity in degrees per second.
-     * You must have called encr03r_update() prior to calling this
-     * function.
-     *
-     * @param dev Device context
-     * @return Computed angular velocity
-     */
-    float enc03r_angular_velocity(const enc03r_context dev);
-
-    /**
-     * Set sensor offset.  The offset is applied to the return value
-     * before scaling. Default is 0.
-     *
-     * @param dev Device context
-     * @param offset Offset to apply to value
-     */
-    void enc03r_set_offset(const enc03r_context dev, float offset);
-
-    /**
-     * Set sensor scale.  The return value is scaled by this value
-     * after the offset is applied.  Default is 1.0.
-     *
-     * @param dev Device context
-     * @param scale Scale to apply to value
-     */
-    void enc03r_set_scale(const enc03r_context dev, float scale);
-
-    /**
-     * Get a normalized ADC value from the sensor.  The return value
-     * will be between 0.0 (indicating no voltage) and 1.0 indicating
-     * max voltage (aref).  encr03r_update() must be called prior to
-     * calling this function.
-     *
-     * @param dev Device context
-     * @return The normalized reading from the ADC.
-     */
-    float enc03r_get_normalized(const enc03r_context dev);
-
-#ifdef __cplusplus
-}
-#endif
diff --git a/src/enc03r/enc03r.hpp b/src/enc03r/enc03r.hpp
deleted file mode 100644
index 50e438a..0000000
--- a/src/enc03r/enc03r.hpp
+++ /dev/null
@@ -1,140 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2014-2017 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#pragma once
-
-#include <string>
-#include "enc03r.h"
-
-namespace upm {
-/**
- * @brief ENC03R Single Axis Gyro
- * @defgroup enc03r libupm-enc03r
- * @ingroup seeed analog compass robok
- */
-
-/**
- * @library enc03r
- * @sensor enc03r
- * @comname Single-axis Analog Gyro Module
- * @altname Grove Single Axis Analog Gyro
- * @type compass
- * @man seeed
- * @con analog
- * @kit robok
- * @web http://www.murata.com/en-us/products/productdetail?partno=ENC-03RC-R
- *
- * @brief API for the ENC03R Single Axis Analog Gyro
- *
- * UPM module for the ENC03R single axis analog gyro.
- * This gyroscope measures x-axis angular velocity, that is
- * how fast the sensor is rotating around the x-axis.
- * Calibration of the sensor is necessary for accurate readings.
- *
- * @image html enc03r.jpg 
- * @snippet enc03r.cxx Interesting
- */
-class ENC03R {
-    public:
-        /**
-            * ENC03R sensor constructor
-            *
-            * @param pin Analog pin to use
-            * @param aref Reference voltage to use; default is 5.0 V
-            */
-        ENC03R(int pin, float aref=5.0);
-
-        /**
-            * ENC03R destructor
-            */
-        ~ENC03R();
-
-        /**
-            * Calibrates the sensor by determining an analog reading over many
-            * samples with no movement of the sensor. This must be done
-            * before attempting to use the sensor.
-            *
-            * @param samples Number of samples to use for calibration
-            */
-        void calibrate(unsigned int samples);
-
-        /**
-            * Update the internal state with the current reading.  This
-            * function must be called prior to calling
-            * angularVelocity().
-            *
-            * @param dev Device context
-            */
-        void update();
-
-        /**
-            * Returns the currently stored calibration value
-            *
-            * @return Current calibration value
-            */
-        float calibrationValue() { return enc03r_calibration_value(m_enc03r); };
-
-        /**
-            * Computes angular velocity based on the value and stored calibration
-            * reference.
-            *
-            * @param val Value to use to compute angular velocity
-            * @return Computed angular velocity
-            */
-        float angularVelocity();
-
-        /**
-            * Set sensor offset.  The offset is applied to the return value
-            * before scaling. Default is 0.
-            *
-            * @param offset Offset to apply to value
-            */
-        void setOffset(float offset);
-
-        /**
-            * Set sensor scale.  The return value is scaled by this value
-            * after the offset is applied.  Default is 1.0.
-            *
-            * @param scale Scale to apply to value
-            */
-        void setScale(float scale);
-
-        /**
-            * Get a normalized ADC value from the sensor.  The return
-            * value will be between 0.0 (indicating no voltage) and 1.0
-            * indicating max voltage (aref).  update() must be called
-            * prior to calling this function.
-            *
-            * @return The normalized reading from the ADC.
-            */
-        float getNormalized();
-
-    protected:
-        enc03r_context m_enc03r;
-
-    private:
-        /* Disable implicit copy and assignment operators */
-        ENC03R(const ENC03R&) = delete;
-        ENC03R &operator=(const ENC03R&) = delete;
-};
-}
diff --git a/src/enc03r/enc03r.json b/src/enc03r/enc03r.json
deleted file mode 100644
index 47adb34..0000000
--- a/src/enc03r/enc03r.json
+++ /dev/null
@@ -1,40 +0,0 @@
-{
-    "Library": "enc03r",
-    "Description": "ENC03R Single Axis Gyro Library",
-    "Sensor Class":
-    {
-        "ENC03R":
-        {
-            "Name": "Single-axis Analog Gyro Module",
-            "Description": "UPM module for the ENC03R single axis analog gyro. This gyroscope measures x-axis angular velocity, that is how fast the sensor is rotating around the x-axis. Calibration of the sensor is necessary for accurate readings.",
-            "Aliases": ["enc03r"],
-            "Categories": ["gyroscope", "IMU", "Discontinued"],
-            "Connections": ["analog"],
-            "Project Type": ["prototyping"],
-            "Manufacturers": ["murata", "seeed"],
-            "Kits": ["robok"],
-            "Image": "enc03r.jpg",
-            "Examples":
-            {
-                "Java": ["ENC03R_Example.java"],
-                "Python": ["enc03r.py"],
-                "Node.js": ["enc03r.js"],
-                "C++": ["enc03r.cxx"],
-                "C": ["enc03r.c"]
-            },
-            "Specifications":
-            {
-                "Operating Voltage": {"unit": "V", "low": 2.7, "high": 5.25},
-                "Response Time": {"unit": "Hz", "typ": 50},
-                "Operating Temperature": {"unit": "decC", "low": -5, "high": 75}
-
-            },
-            "Urls" :
-            {
-                "Product Pages": ["https://www.seeedstudio.com/Grove-Single-Axis-Analog-Gyro-p-1451.html"],
-                "Datasheets": ["http://www.seeedstudio.com/wiki/File:Analog_Gyro_datasheet.pdf", "http://wiki.seeedstudio.com/wiki/Grove_-_Single_Axis_Analog_Gyro"],
-                "Schematics": []
-            }
-        }
-    }
-}
diff --git a/src/enc03r/enc03r_fti.c b/src/enc03r/enc03r_fti.c
deleted file mode 100644
index 0a33022..0000000
--- a/src/enc03r/enc03r_fti.c
+++ /dev/null
@@ -1,102 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2017 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include "enc03r.h"
-#include "upm_fti.h"
-
-/**
- * This file implements the Function Table Interface (FTI) for this sensor
- */
-
-const char upm_enc03r_name[] = "ENC03R";
-const char upm_enc03r_description[] = "Analog Single Axis Gyroscope";
-const upm_protocol_t upm_enc03r_protocol[] = {UPM_ANALOG};
-const upm_sensor_t upm_enc03r_category[] = {UPM_GYROSCOPE};
-
-// forward declarations
-const void* upm_enc03r_get_ft(upm_sensor_t sensor_type);
-void* upm_enc03r_init_name();
-void upm_enc03r_close(void *dev);
-upm_result_t upm_enc03r_get_value(void *dev, float *value);
-
-const upm_sensor_descriptor_t upm_enc03r_get_descriptor()
-{
-    upm_sensor_descriptor_t usd;
-    usd.name = upm_enc03r_name;
-    usd.description = upm_enc03r_description;
-    usd.protocol_size = 1;
-    usd.protocol = upm_enc03r_protocol;
-    usd.category_size = 1;
-    usd.category = upm_enc03r_category;
-    return usd;
-}
-
-static const upm_sensor_ft ft =
-{
-    .upm_sensor_init_name = &upm_enc03r_init_name,
-    .upm_sensor_close = &upm_enc03r_close,
-};
-
-static const upm_gyroscope_ft gft =
-{
-    .upm_gyroscope_get_value = &upm_enc03r_get_value
-};
-
-const void* upm_enc03r_get_ft(upm_sensor_t sensor_type)
-{
-  switch(sensor_type)
-    {
-    case UPM_SENSOR:
-      return &ft;
-
-    case UPM_GYROSCOPE:
-      return &gft;
-
-    default:
-      return NULL;
-    }
-}
-
-void* upm_enc03r_init_name()
-{
-    return NULL;
-}
-
-
-void upm_enc03r_close(void *dev)
-{
-    enc03r_close((enc03r_context)dev);
-}
-
-upm_result_t upm_enc03r_get_value(void *dev, float *value)
-{
-    if (enc03r_update((enc03r_context)dev))
-        return UPM_ERROR_OPERATION_FAILED;
-
-    value[0] = enc03r_angular_velocity((enc03r_context)dev);
-    value[1] = 0.0;
-    value[2] = 0.0;
-
-    return UPM_SUCCESS;
-}
-- 
2.7.4

