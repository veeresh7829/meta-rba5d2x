From 3c3253c11830e4ec9f7e0396c404fdfb10bbee47 Mon Sep 17 00:00:00 2001
From: Ganesh K <ganesh.k@phytec.in>
Date: Mon, 24 Jun 2019 19:44:25 +0530
Subject: [PATCH] starting with w files

---
 src/water/CMakeLists.txt           |   9 -
 src/water/water.c                  |  79 -----
 src/water/water.cxx                |  50 ---
 src/water/water.h                  |  70 ----
 src/water/water.hpp                |  78 -----
 src/water/water.json               |  57 ----
 src/water/water_fti.c              |  82 -----
 src/waterlevel/CMakeLists.txt      |   5 -
 src/waterlevel/waterlevel.cxx      |  51 ---
 src/waterlevel/waterlevel.hpp      |  70 ----
 src/waterlevel/waterlevel.json     |  41 ---
 src/wfs/CMakeLists.txt             |   8 -
 src/wfs/wfs.c                      | 152 ---------
 src/wfs/wfs.cxx                    |  72 -----
 src/wfs/wfs.h                      | 134 --------
 src/wfs/wfs.hpp                    | 136 --------
 src/wfs/wfs.i                      |  16 -
 src/wfs/wfs.json                   |  75 -----
 src/wheelencoder/CMakeLists.txt    |   5 -
 src/wheelencoder/wheelencoder.cxx  | 106 -------
 src/wheelencoder/wheelencoder.hpp  | 132 --------
 src/wheelencoder/wheelencoder.json |  53 ----
 src/wt5001/CMakeLists.txt          |   5 -
 src/wt5001/wt5001.cxx              | 632 -------------------------------------
 src/wt5001/wt5001.hpp              | 383 ----------------------
 src/wt5001/wt5001.i                |  58 ----
 src/wt5001/wt5001.json             |  51 ---
 27 files changed, 2610 deletions(-)
 delete mode 100644 src/water/CMakeLists.txt
 delete mode 100644 src/water/water.c
 delete mode 100644 src/water/water.cxx
 delete mode 100644 src/water/water.h
 delete mode 100644 src/water/water.hpp
 delete mode 100644 src/water/water.json
 delete mode 100644 src/water/water_fti.c
 delete mode 100644 src/waterlevel/CMakeLists.txt
 delete mode 100644 src/waterlevel/waterlevel.cxx
 delete mode 100644 src/waterlevel/waterlevel.hpp
 delete mode 100644 src/waterlevel/waterlevel.json
 delete mode 100644 src/wfs/CMakeLists.txt
 delete mode 100644 src/wfs/wfs.c
 delete mode 100644 src/wfs/wfs.cxx
 delete mode 100644 src/wfs/wfs.h
 delete mode 100644 src/wfs/wfs.hpp
 delete mode 100644 src/wfs/wfs.i
 delete mode 100644 src/wfs/wfs.json
 delete mode 100644 src/wheelencoder/CMakeLists.txt
 delete mode 100644 src/wheelencoder/wheelencoder.cxx
 delete mode 100644 src/wheelencoder/wheelencoder.hpp
 delete mode 100644 src/wheelencoder/wheelencoder.json
 delete mode 100644 src/wt5001/CMakeLists.txt
 delete mode 100644 src/wt5001/wt5001.cxx
 delete mode 100644 src/wt5001/wt5001.hpp
 delete mode 100644 src/wt5001/wt5001.i
 delete mode 100644 src/wt5001/wt5001.json

diff --git a/src/water/CMakeLists.txt b/src/water/CMakeLists.txt
deleted file mode 100644
index dd661dc..0000000
--- a/src/water/CMakeLists.txt
+++ /dev/null
@@ -1,9 +0,0 @@
-upm_mixed_module_init (NAME water
-    DESCRIPTION "Water Detection Sensor"
-    C_HDR water.h
-    C_SRC water.c
-    CPP_HDR water.hpp
-    CPP_SRC water.cxx
-    FTI_SRC water_fti.c
-    CPP_WRAPS_C
-    REQUIRES mraa)
diff --git a/src/water/water.c b/src/water/water.c
deleted file mode 100644
index b16d8cf..0000000
--- a/src/water/water.c
+++ /dev/null
@@ -1,79 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2014-2016 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <assert.h>
-#include <stdio.h>
-#include <stdlib.h>
-#include "water.h"
-
-water_context water_init(unsigned int pin)
-{
-  water_context dev =
-    (water_context)malloc(sizeof(struct _water_context));
-
-  if (!dev)
-    return NULL;
-
-  dev->gpio = NULL;
-
-  // make sure MRAA is initialized
-  int mraa_rv;
-  if ((mraa_rv = mraa_init()) != MRAA_SUCCESS)
-  {
-      printf("mraa_init() failed (%d).\n", mraa_rv);
-      water_close(dev);
-      return NULL;
-  }
-
-  // initialize the MRAA context
-
-  if (!(dev->gpio = mraa_gpio_init(pin)))
-    {
-      printf("%s: mraa_gpio_init() failed.\n", __FUNCTION__);
-      water_close(dev);
-      return NULL;
-    }
-
-  mraa_gpio_dir(dev->gpio, MRAA_GPIO_IN);
-
-  return dev;
-}
-
-void water_close(const water_context dev)
-{
-  assert(dev != NULL);
-
-  if (dev->gpio)
-    mraa_gpio_close(dev->gpio);
-
-  free(dev);
-}
-
-bool water_is_wet(const water_context dev)
-{
-  assert(dev != NULL);
-
-  // gpio is low when wet
-  return (mraa_gpio_read(dev->gpio) ? false : true);
-}
diff --git a/src/water/water.cxx b/src/water/water.cxx
deleted file mode 100644
index cf7d8e9..0000000
--- a/src/water/water.cxx
+++ /dev/null
@@ -1,50 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2014 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <iostream>
-#include <string>
-#include <stdexcept>
-
-#include "water.hpp"
-
-using namespace upm;
-using namespace std;
-
-Water::Water(unsigned int pin) :
-  m_water(water_init(pin))
-{
-  if (!m_water )
-    throw std::runtime_error(std::string(__FUNCTION__) +
-                             ": water_init() failed");
-}
-
-Water::~Water()
-{
-  water_close(m_water);
-}
-
-bool Water::isWet()
-{
-  return water_is_wet(m_water);
-}
diff --git a/src/water/water.h b/src/water/water.h
deleted file mode 100644
index 7f9a40a..0000000
--- a/src/water/water.h
+++ /dev/null
@@ -1,70 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2014-2016 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#pragma once
-
-#include "upm.h"
-#include "mraa/gpio.h"
-
-#ifdef __cplusplus
-extern "C" {
-#endif
-
-  /**
-   * @file water.h
-   * @library water
-   * @brief C API for the Water Sensor
-   *
-   * @include water.c
-   */
-
-  /**
-   * Device context
-   */
-  typedef struct _water_context {
-    mraa_gpio_context        gpio;
-  } *water_context;
-
-  /**
-   * Water initializer
-   *
-   * @param pin Digital pin to use
-   * @return an initialized device context on success, NULL on error.
-   */
-  water_context water_init(unsigned int pin);
-
-  /**
-   * Water close function
-   */
-  void water_close(water_context dev);
-
-  /**
-   * Gets the water (wet/not wet) value from the sensor.
-   *
-   * @return true if the sensor is wet, false otherwise
-   */
-  bool water_is_wet(const water_context dev);
-
-#ifdef __cplusplus
-}
-#endif
diff --git a/src/water/water.hpp b/src/water/water.hpp
deleted file mode 100644
index 86849fe..0000000
--- a/src/water/water.hpp
+++ /dev/null
@@ -1,78 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2014-2016 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#pragma once
-
-#include <string>
-#include "water.h"
-
-namespace upm {
-  /**
-   * @brief Water Sensor
-   * @defgroup water libupm-water
-   * @ingroup seeed gpio liquid eak
-   */
-
-  /**
-   * @library water
-   * @sensor water
-   * @comname Water Detection Sensor
-   * @type liquid
-   * @man seeed
-   * @con gpio
-   * @kit eak
-   *
-   * @brief API for the Water Sensor
-   *
-   * UPM module for the Water sensor
-   *
-   * @image html water.jpg
-   * @snippet water.cxx Interesting
-   */
-  class Water {
-  public:
-    /**
-     * digital water sensor constructor
-     *
-     * @param pin Digital pin to use
-     */
-    Water(unsigned int pin);
-    /**
-     * Water destructor
-     */
-    ~Water();
-    /**
-     * Gets the water (wet/not wet) value from the sensor
-     *
-     * @return True if the sensor is wet, false otherwise
-     */
-    bool isWet();
-
-  private:
-    /* Disable implicit copy and assignment operators */
-    Water(const Water&) = delete;
-    Water &operator=(const Water&) = delete;
-
-    water_context m_water;
-  };
-}
diff --git a/src/water/water.json b/src/water/water.json
deleted file mode 100644
index 2827ce4..0000000
--- a/src/water/water.json
+++ /dev/null
@@ -1,57 +0,0 @@
-{
-    "Library": "water",
-    "Description": "Grove Water Sensor Library",
-    "Sensor Class": {
-        "Water": {
-            "Name": "API for the Grove Water Sensor",
-            "Description": "This is the UPM Module for the Grove Water Sensor. This sensor detects the presence of water using exposed PCB traces. The sensor is made up of interlaced traces of Ground and Sensor signals. The sensor traces are weakly pulled up using 1 MΩ resistor. The resistor will pull the sensor trace value high until a drop of water shorts the sensor trace to the ground trace. This circuit will work with digital I/O pins of Arduino or you can use it with the analog pins to detect the amount of water induced contact between the grounded and sensor traces.",
-            "Aliases": ["water", "Grove - Water Sensor"],
-            "Categories": ["liquid"],
-            "Connections": ["gpio"],
-            "Project Type": ["prototyping"],
-            "Manufacturers": ["Seeed"],
-            "Kits": ["eak"],
-            "Image": "water.jpg",
-            "Examples": {
-                "Java": ["Water_Example.java"],
-                "Python": ["water.py"],
-                "Node.js": ["water.js"],
-                "C++": ["water.cxx"],
-                "C": ["water.c"]
-            },
-            "Specifications": {
-                "Vsource": {
-                    "unit": "V",
-                    "min": 4.75,
-                    "max": 5.25
-                },
-                "Supply Current": {
-                    "unit": "mA",
-                    "typ" : "<20"
-                },
-                "Operating Temperature": {
-                    "unit": "°C",
-                    "min": 10,
-                    "max": 30
-                },
-                "Operating Humidity": {
-                    "unit": "%RH",
-                    "min" : 10,
-                    "max" : 90
-                }
-            },
-            "Platforms": {
-                "Intel Edison": {
-                    "Notes": ["Might need Grove base shield"]
-                },
-                "Arduino 101": {
-                    "Notes": ["Might need Grove base shield"]
-                }
-            },
-            "Urls": {
-                "Product Pages": ["https://www.seeedstudio.com/Grove-Water-Sensor-p-748.html?gclid=Cj0KCQjwn6DMBRC0ARIsAHZtCeM6_FaKXMn5-4xpQYuyJgydq_exuH2PqkKAKnKsTha_iJzXneoWL7EaAohrEALw_wcB", "http://wiki.seeed.cc/Grove-Water_Sensor/"],
-                "Schematics": ["https://raw.githubusercontent.com/SeeedDocument/Grove-Water_Sensor/master/res/Water_sensor.zip"]
-            }
-        }
-    }
-}
diff --git a/src/water/water_fti.c b/src/water/water_fti.c
deleted file mode 100644
index 8eb26f9..0000000
--- a/src/water/water_fti.c
+++ /dev/null
@@ -1,82 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2016 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include "water.h"
-#include "upm_fti.h"
-
-/**
- * This file implements the Function Table Interface (FTI) for this sensor
- */
-
-const char upm_water_name[] = "water";
-const char upm_water_description[] = "Water presence sensor";
-const upm_protocol_t upm_water_protocol[] = {UPM_GPIO};
-const upm_sensor_t upm_water_category[] = {UPM_BINARY};
-
-// forward declarations
-const void* upm_water_get_ft(upm_sensor_t sensor_type);
-void* upm_water_init_name();
-void upm_water_close(void *dev);
-upm_result_t upm_water_is_wet(void *dev, bool *value);
-
-static const upm_sensor_ft ft =
-{
-  .upm_sensor_init_name = upm_water_init_name,
-  .upm_sensor_close = upm_water_close,
-};
-
-static const upm_binary_ft bft =
-{
-  .upm_binary_get_value = upm_water_is_wet,
-};
-
-const void* upm_water_get_ft(upm_sensor_t sensor_type)
-{
-  switch(sensor_type)
-    {
-    case UPM_SENSOR:
-      return &ft;
-    case UPM_BINARY:
-      return &bft;
-    default:
-      return NULL;
-    }
-}
-
-void *upm_water_init_name()
-{
-  return NULL;
-}
-
-void upm_water_close(void *dev)
-{
-  water_close((water_context)dev);
-}
-
-upm_result_t upm_water_is_wet(void *dev, bool *value)
-{
-  *value = water_is_wet((water_context)dev);
-
-  return UPM_SUCCESS;
-}
diff --git a/src/waterlevel/CMakeLists.txt b/src/waterlevel/CMakeLists.txt
deleted file mode 100644
index 06f63bd..0000000
--- a/src/waterlevel/CMakeLists.txt
+++ /dev/null
@@ -1,5 +0,0 @@
-set (libname "waterlevel")
-set (libdescription "Water Level Sensor")
-set (module_src ${libname}.cxx)
-set (module_hpp ${libname}.hpp)
-upm_module_init(mraa)
diff --git a/src/waterlevel/waterlevel.cxx b/src/waterlevel/waterlevel.cxx
deleted file mode 100644
index 02db04f..0000000
--- a/src/waterlevel/waterlevel.cxx
+++ /dev/null
@@ -1,51 +0,0 @@
-/*
- * Author: Zion Orent <sorent@ics.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <string>
-#include <stdexcept>
-#include "waterlevel.hpp"
-
-using namespace upm;
-
-WaterLevel::WaterLevel(int pin)
-{
-    if ( !(m_gpio = mraa_gpio_init(pin)) ) 
-      {
-        throw std::invalid_argument(std::string(__FUNCTION__) +
-                                    ": mraa_gpio_init() failed, invalid pin?");
-        return;
-      }
-    mraa_gpio_dir(m_gpio, MRAA_GPIO_IN);
-}
-
-WaterLevel::~WaterLevel()
-{
-    mraa_gpio_close(m_gpio);
-}
-
-bool WaterLevel::isSubmerged()
-{
-	// Submerged causes 0; being above water is 1
-	return (!(bool)mraa_gpio_read(m_gpio));
-}
diff --git a/src/waterlevel/waterlevel.hpp b/src/waterlevel/waterlevel.hpp
deleted file mode 100644
index 077398c..0000000
--- a/src/waterlevel/waterlevel.hpp
+++ /dev/null
@@ -1,70 +0,0 @@
-/*
- * Author: Zion Orent <sorent@ics.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#pragma once
-
-#include <mraa/gpio.h>
-
-namespace upm {
-  /**
-   * @brief Water Level Switch
-   * @defgroup waterlevel libupm-waterlevel
-   * @ingroup seeed gpio liquid
-   */
-  /**
-   * @library waterlevel
-   * @sensor waterlevel
-   * @comname Water Level Sensor
-   * @type liquid
-   * @man seeed
-   * @con gpio
-   * 
-   * @brief UPM module for the Grove Water Level Switch
-   *
-   * This switch is a device used to sense the level of liquid within a tank,
-   * it may actuate a pump, an indicator, an alarm, or other devices.
-   *
-   * @image html waterlevel.jpg 
-   * @snippet waterlevel.cxx Interesting
-   */
-  class WaterLevel {
-  public:
-    /**
-     * WaterLevel constructor
-     *
-     * @param pin Digital pin to use
-     */
-    WaterLevel(int pin);
-    /**
-     * WaterLevel destructor
-     */
-    ~WaterLevel();
-    /**
-     * @return bool Determines whether liquid has risen above the sensor
-     */
-     bool isSubmerged();
-
-  private:
-        mraa_gpio_context m_gpio;
-	};
-}
diff --git a/src/waterlevel/waterlevel.json b/src/waterlevel/waterlevel.json
deleted file mode 100644
index 6c84d33..0000000
--- a/src/waterlevel/waterlevel.json
+++ /dev/null
@@ -1,41 +0,0 @@
-{
-    "Library": "waterlevel",
-    "Description": "Grove Water Level Switch Library",
-    "Sensor Class": {
-        "waterlevel": {
-            "Name": "API for the Grove Water Level Switch",
-            "Description": "This is the UPM Module for the Grove Water Level Switch. This switch is a device used to sense the level of liquid within a tank, it may actuate a pump, an indicator, an alarm, or other devices. When the float ball rises or falls with the liquid to the level of the switch, The magnetic force of magnet which inside of the float ball will cause the reed switch to turn ON. When the float ball move away from the reed switch, the reed switch will turn OFF.",
-            "Aliases": ["waterlevel", "Water level switch"],
-            "Categories": ["liquid"],
-            "Connections": ["gpio"],
-            "Project Type": ["prototyping", "commercial"],
-            "Manufacturers": ["Seeed"],
-            "Image": "waterlevel.jpg",
-            "Examples": {
-                "Java": ["WaterLevelSensor_Example.java"],
-                "Python": ["waterlevel.py"],
-                "Node.js": ["waterlevel.js"],
-                "C++": ["waterlevel.cxx"]
-            },
-            "Specifications": {
-                "Switching Voltage": {
-                    "unit": "V",
-                    "min" : 3.3,
-                    "max" : 100
-                },
-                "Switching Current": {
-                    "unit": "A",
-                    "max": 0.5
-                },
-                "Operating Temperature": {
-                    "unit": "°C",
-                    "min": -10,
-                    "max": 80
-                }
-            },
-            "Urls": {
-                "Product Pages": ["https://www.seeedstudio.com/Water-level-switch-p-565.html"]
-            }
-        }
-    }
-}
\ No newline at end of file
diff --git a/src/wfs/CMakeLists.txt b/src/wfs/CMakeLists.txt
deleted file mode 100644
index 897e004..0000000
--- a/src/wfs/CMakeLists.txt
+++ /dev/null
@@ -1,8 +0,0 @@
-upm_mixed_module_init (NAME wfs
-    C_HDR wfs.h
-    C_SRC wfs.c
-    DESCRIPTION "WFS (Water Flow Sensor)"
-    CPP_HDR wfs.hpp
-    CPP_SRC wfs.cxx
-    CPP_WRAPS_C
-    REQUIRES mraa utilities-c)
diff --git a/src/wfs/wfs.c b/src/wfs/wfs.c
deleted file mode 100644
index fe51865..0000000
--- a/src/wfs/wfs.c
+++ /dev/null
@@ -1,152 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2017 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <stdio.h>
-#include <string.h>
-#include <assert.h>
-
-#include "wfs.h"
-
-// interrupt handler
-static void wfs_flow_isr(void *ctx)
-{
-    assert(ctx != NULL);
-
-    wfs_context dev = (wfs_context)ctx;
-
-    dev->flowCounter++;
-}
-
-wfs_context wfs_init(int pin)
-{
-    // make sure MRAA is initialized
-    int mraa_rv;
-    if ((mraa_rv = mraa_init()) != MRAA_SUCCESS)
-    {
-        printf("%s: mraa_init() failed (%d).\n", __FUNCTION__, mraa_rv);
-        return NULL;
-    }
-
-    wfs_context dev =
-        (wfs_context)malloc(sizeof(struct _wfs_context));
-
-    if (!dev)
-        return NULL;
-
-    // zero out context
-    memset((void *)dev, 0, sizeof(struct _wfs_context));
-
-    if ( !(dev->gpio = mraa_gpio_init(pin)) )
-    {
-        printf("%s: mraa_gpio_init() failed.\n", __FUNCTION__);
-        wfs_close(dev);
-        return NULL;
-    }
-
-    mraa_gpio_dir(dev->gpio, MRAA_GPIO_IN);
-
-    wfs_init_clock(dev);
-
-    return dev;
-}
-
-void wfs_close(wfs_context dev)
-{
-    assert(dev != NULL);
-
-    if (dev->isrInstalled)
-        wfs_stop_flow_counter(dev);
-
-    if (dev->gpio)
-        mraa_gpio_close(dev->gpio);
-
-    free(dev);
-}
-
-void wfs_init_clock(const wfs_context dev)
-{
-    assert(dev != NULL);
-
-    dev->clock = upm_clock_init();
-}
-
-uint32_t wfs_get_millis(const wfs_context dev)
-{
-    assert(dev != NULL);
-
-    return upm_elapsed_ms(&dev->clock);
-}
-
-void wfs_clear_flow_counter(const wfs_context dev)
-{
-    assert(dev != NULL);
-
-    dev->flowCounter = 0;
-}
-
-upm_result_t wfs_start_flow_counter(const wfs_context dev)
-{
-    assert(dev != NULL);
-
-    wfs_init_clock(dev);
-
-    // install our interrupt handler
-    if (mraa_gpio_isr(dev->gpio, MRAA_GPIO_EDGE_RISING,
-                      &wfs_flow_isr, dev))
-    {
-        printf("%s: mraa_gpio_isr() failed.\n", __FUNCTION__);
-        return UPM_ERROR_OPERATION_FAILED;
-    }
-
-    dev->isrInstalled = true;
-    return UPM_SUCCESS;
-}
-
-void wfs_stop_flow_counter(const wfs_context dev)
-{
-    assert(dev != NULL);
-
-    // remove the interrupt handler
-    mraa_gpio_isr_exit(dev->gpio);
-
-    dev->isrInstalled = false;
-}
-
-uint32_t wfs_flow_counter(const wfs_context dev)
-{
-    assert(dev != NULL);
-
-    return dev->flowCounter;
-}
-
-float wfs_flow_rate(const wfs_context dev)
-{
-    assert(dev != NULL);
-
-    uint32_t millis = wfs_get_millis(dev);
-    uint32_t flow = wfs_flow_counter(dev);
-
-    // 7.5 comes from the seeedstudio page, see the confusing datasheet :)
-    return ((float)flow * 7.5) / ( ((float)millis / 1000.0) * 60.0);
-}
diff --git a/src/wfs/wfs.cxx b/src/wfs/wfs.cxx
deleted file mode 100644
index ba59980..0000000
--- a/src/wfs/wfs.cxx
+++ /dev/null
@@ -1,72 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2015-2017 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <iostream>
-#include <string>
-#include <stdexcept>
-
-#include "wfs.hpp"
-
-using namespace upm;
-using namespace std;
-
-WFS::WFS(int pin) :
-    m_wfs(wfs_init(pin))
-{
-    if (!m_wfs)
-        throw std::runtime_error(std::string(__FUNCTION__) +
-                                 ": wfs_init() failed");
-}
-
-WFS::~WFS()
-{
-    wfs_close(m_wfs);
-}
-
-void WFS::initClock()
-{
-    wfs_init_clock(m_wfs);
-}
-
-uint32_t WFS::getMillis()
-{
-    return wfs_get_millis(m_wfs);
-}
-
-void WFS::startFlowCounter()
-{
-    if (wfs_start_flow_counter(m_wfs))
-        throw std::runtime_error(std::string(__FUNCTION__) +
-                                 ": wfs_start_flow_counter() failed");
-}
-
-void WFS::stopFlowCounter()
-{
-    wfs_stop_flow_counter(m_wfs);
-}
-
-float WFS::flowRate()
-{
-    return wfs_flow_rate(m_wfs);
-}
diff --git a/src/wfs/wfs.h b/src/wfs/wfs.h
deleted file mode 100644
index f1820e6..0000000
--- a/src/wfs/wfs.h
+++ /dev/null
@@ -1,134 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2017 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#pragma once
-
-
-#include <stdint.h>
-#include <stdlib.h>
-#include <unistd.h>
-
-#include <upm.h>
-#include <upm_utilities.h>
-#include <mraa/gpio.h>
-
-#ifdef __cplusplus
-extern "C" {
-#endif
-
-    /**
-     * @file wfs.h
-     * @library wfs
-     * @brief WFS (Water Flow Sensor)
-     *
-     */
-
-    /**
-     * Device context
-     */
-    typedef struct _wfs_context {
-        mraa_gpio_context gpio;
-
-        volatile uint32_t flowCounter;
-        upm_clock_t       clock;
-        bool              isrInstalled;
-    } *wfs_context;
-
-    /**
-     * Initialize a WFS device
-     *
-     * @param pin GPIO pin to use.  This must be an interrupt capable
-     * pin.
-     * @return Device context, or NULL on error
-     */
-    wfs_context wfs_init(int pin);
-
-    /**
-     * WFS close function
-     *
-     * @param dev Device context
-     */
-    void wfs_close(wfs_context dev);
-
-    /**
-     * Returns the number of milliseconds elapsed since wfs_init_clock()
-     * was last called.
-     *
-     * @param dev Device context
-     * @return Elapsed milliseconds
-     */
-    uint32_t wfs_get_millis(const wfs_context dev);
-
-    /**
-     * Resets the clock
-     *
-     * @param dev Device context
-     */
-    void wfs_init_clock(const wfs_context dev);
-
-    /**
-     * Resets the flow counter to 0. The flow counter should be
-     * stopped via stopFlowCounter() prior to calling this function.
-     *
-     * @param dev Device context
-     */
-    void wfs_clear_flow_counter(const wfs_context dev);
-
-    /**
-     * Starts the flow counter
-     *
-     * @param dev Device context
-     * @return UPM result
-     */
-    upm_result_t wfs_start_flow_counter(const wfs_context dev);
-
-    /**
-     * Stops the flow counter
-     *
-     * @param dev Device context
-     */
-    void wfs_stop_flow_counter(const wfs_context dev);
-
-    /**
-     * Gets the flow counter
-     *
-     * @param dev Device context
-     * @return Flow counter
-     */
-    uint32_t wfs_flow_counter(const wfs_context dev);
-
-    /**
-     * Computes the flow rate in liters per minute (LPM).  Note, this
-     * is for the Grove WFS.  If you are using some other WFS, you
-     * should compute the flow rate on your own based on the data for
-     * your sensor.
-     *
-     * @param dev Device context
-     * @return Computed flow rate in liters per minute
-     */
-    float wfs_flow_rate(const wfs_context dev);
-
-
-#ifdef __cplusplus
-}
-#endif
diff --git a/src/wfs/wfs.hpp b/src/wfs/wfs.hpp
deleted file mode 100644
index a95dcf6..0000000
--- a/src/wfs/wfs.hpp
+++ /dev/null
@@ -1,136 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2015-2017 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#pragma once
-
-#include "wfs.h"
-
-namespace upm {
-
-/**
- * @brief Water Flow Sensor
- * @defgroup wfs libupm-wfs
- * @ingroup seeed gpio liquid eak
- */
-
-/**
- * @library wfs
- * @sensor wfs
- * @comname Water Flow Sensor
- * @altname Grove Water Flow Sensor
- * @type liquid
- * @man seeed
- * @web http://wiki.seeedstudio.com/wiki/G1/2_Water_Flow_sensor
- * @con gpio
- * @kit eak
-
- * @brief API for the Water Flow Sensor
- *
- * This sensor is used to measure water flow in liters per
- * minute (LPM). It incorporates a Hall Effect sensor. The UPM module
- * defines an interrupt routine to be triggered on each low pulse,
- * keeping count. This device requires a 10K pull-up resistor for
- * the signal line (yellow wire). There is a schematic diagram on
- * the SeeedStudio site (3/2015):
- * http://www.seeedstudio.com/wiki/index.php?title=G1/2_Water_Flow_sensor
- *
- * However, be careful when wiring this up - the schematic appears to
- * have a bug in it: the lower left connection of the signal line
- * (yellow) to Vcc (red) should not be there. The sensor can work
- * with this connection, but probably not for very long.
- *
- * @image html wfs.jpg
- * @snippet wfs.cxx Interesting
- */
-class WFS {
-    public:
-        /**
-         * Water Flow Sensor constructor
-         *
-         * @param pin Digital pin to use
-         */
-        WFS(int pin);
-        /**
-         * WFS destructor
-         */
-        ~WFS();
-
-        /**
-         * Returns the number of milliseconds elapsed since initClock()
-         * was last called.
-         *
-         * @return Elapsed milliseconds
-         */
-        uint32_t getMillis();
-
-        /**
-         * Resets the clock
-         *
-         */
-        void initClock();
-
-        /**
-         * Resets the flow counter to 0. The flow counter should be
-         * stopped via stopFlowCounter() prior to calling this function.
-         *
-         */
-        void clearFlowCounter() { wfs_clear_flow_counter(m_wfs); };
-
-        /**
-         * Starts the flow counter
-         *
-         */
-        void startFlowCounter();
-
-        /**
-         * Stops the flow counter
-         *
-         */
-        void stopFlowCounter();
-
-        /**
-         * Gets the flow counter
-         *
-         * @return Flow counter
-         */
-        uint32_t flowCounter() { return wfs_flow_counter(m_wfs); };
-
-        /**
-         * Computes the flow rate in liters per minute (LPM).  Note, this
-         * is for the Grove WFS.  If you are using some other WFS, you
-         * should compute the flow rate on your own based on the data for
-         * your sensor.
-         *
-         * @return Computed flow rate
-         */
-        float flowRate();
-
-    protected:
-        wfs_context m_wfs;
-
-    private:
-        /* Disable implicit copy and assignment operators */
-        WFS(const WFS&) = delete;
-        WFS &operator=(const WFS&) = delete;
-};
-}
diff --git a/src/wfs/wfs.i b/src/wfs/wfs.i
deleted file mode 100644
index c9634cd..0000000
--- a/src/wfs/wfs.i
+++ /dev/null
@@ -1,16 +0,0 @@
-%include "../common_top.i"
-
-/* BEGIN Java syntax  ------------------------------------------------------- */
-#ifdef SWIGJAVA
-%ignore flowISR;
-
-JAVA_JNI_LOADLIBRARY(javaupm_wfs)
-#endif
-/* END Java syntax */
-
-/* BEGIN Common SWIG syntax ------------------------------------------------- */
-%{
-#include "wfs.hpp"
-%}
-%include "wfs.hpp"
-/* END Common SWIG syntax */
diff --git a/src/wfs/wfs.json b/src/wfs/wfs.json
deleted file mode 100644
index 8100696..0000000
--- a/src/wfs/wfs.json
+++ /dev/null
@@ -1,75 +0,0 @@
-{
-    "Library": "wfs",
-    "Description": "Grove Water Flow Sensor Library",
-    "Sensor Class": {
-        "WFS": {
-            "Name": "API for the Grove Water Flow Sensor",
-            "Description": "This is the UPM Module for the Grove Water Flow Sensor. This sensor is used to measure water flow in liters per minute (LPM). It incorporates a Hall Effect sensor. The UPM module defines an interrupt routine to be triggered on each low pulse, keeping count. This device requires a 10K pull-up resistor for the signal line (yellow wire). However, be careful when wiring this up - the schematic appears to have a bug in it: the lower left connection of the signal line (yellow) to Vcc (red) should not be there. The sensor can work with this connection, but probably not for very long.",
-            "Aliases": ["wfs", "G1/2 Water Flow sensor"],
-            "Categories": ["liquid"],
-            "Connections": ["gpio"],
-            "Project Type": ["mprototyping", "commercial"],
-            "Manufacturers": ["Seeed"],
-            "Kits": ["eak"],
-            "Image": "wfs.jpg",
-            "Examples": {
-                "Java": ["WFS_Example.java"],
-                "Python": ["wfs.py"],
-                "Node.js": ["wfs.js"],
-                "C++": ["wfs.cxx"],
-                "C": ["wfs.c"]
-            },
-            "Specifications": {
-                "Vsource": {
-                    "unit": "V",
-                    "min": 5,
-                    "max": 24
-                },
-                "Supply Current": {
-                    "unit": "mA",
-                    "max" : 15
-                },
-                "Operating Temperature": {
-                    "Air": {
-                        "unit": "°C",
-                        "min": -10,
-                        "max": 80
-                    },
-                    "Liquid": {
-                        "unit": "°C",
-                        "min" : 0,
-                        "max" : 120
-                    }
-                },
-                "Operating Humidity": {
-                    "unit": "%RH",
-                    "min" : 35,
-                    "max" : 90
-                },
-                "Flow Rate": {
-                    "unit": "L/min",
-                    "min" : 1,
-                    "max" : 30
-                },
-                "Water Pressyre": {
-                    "unit": "MPa",
-                    "max" : 2.0
-                }
-            },
-            "Platforms": {
-                "Intel Joule Module": {
-                    "Notes": ["Might need pull up resistors"]
-                },
-                "Intel Edison": {
-                    "Notes": ["Might need pull up resistors"]
-                },
-                "Arduino 101": {
-                    "Notes": ["Might need pull up resistors"]
-                }
-            },
-            "Urls": {
-                "Product Pages": ["http://wiki.seeedstudio.com/wiki/G1/2_Water_Flow_sensor"]
-            }
-        }
-    }
-}
diff --git a/src/wheelencoder/CMakeLists.txt b/src/wheelencoder/CMakeLists.txt
deleted file mode 100644
index ec4f02b..0000000
--- a/src/wheelencoder/CMakeLists.txt
+++ /dev/null
@@ -1,5 +0,0 @@
-set (libname "wheelencoder")
-set (libdescription "Wheel Encoder")
-set (module_src ${libname}.cxx)
-set (module_hpp ${libname}.hpp)
-upm_module_init(mraa)
diff --git a/src/wheelencoder/wheelencoder.cxx b/src/wheelencoder/wheelencoder.cxx
deleted file mode 100644
index 627ba1a..0000000
--- a/src/wheelencoder/wheelencoder.cxx
+++ /dev/null
@@ -1,106 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <iostream>
-
-#include "wheelencoder.hpp"
-
-using namespace upm;
-using namespace std;
-
-WheelEncoder::WheelEncoder(int pin) :
-  m_gpio(pin)
-{
-  m_gpio.dir(mraa::DIR_IN);
-
-  initClock();
-  m_counter = 0;
-  m_isrInstalled = false;
-}
-
-WheelEncoder::~WheelEncoder()
-{
-  stopCounter();
-}
-
-void WheelEncoder::initClock()
-{
-  gettimeofday(&m_startTime, NULL);
-}
-
-uint32_t WheelEncoder::getMillis()
-{
-  struct timeval elapsed, now;
-  uint32_t elapse;
-
-  // get current time
-  gettimeofday(&now, NULL);
-
-  // compute the delta since m_startTime
-  if( (elapsed.tv_usec = now.tv_usec - m_startTime.tv_usec) < 0 ) 
-    {
-      elapsed.tv_usec += 1000000;
-      elapsed.tv_sec = now.tv_sec - m_startTime.tv_sec - 1;
-    } 
-  else 
-    {
-      elapsed.tv_sec = now.tv_sec - m_startTime.tv_sec;
-    }
-
-  elapse = (uint32_t)((elapsed.tv_sec * 1000) + (elapsed.tv_usec / 1000));
-
-  // never return 0
-  if (elapse == 0)
-    elapse = 1;
-
-  return elapse;
-}
-
-void WheelEncoder::startCounter()
-{
-  initClock();
-  m_counter = 0;
-
-  // install our interrupt handler
-  if (!m_isrInstalled)
-    m_gpio.isr(mraa::EDGE_RISING, &wheelISR, this);
-
-  m_isrInstalled = true;
-}
-
-void WheelEncoder::stopCounter()
-{
-  // remove the interrupt handler
-  if (m_isrInstalled)
-    m_gpio.isrExit();
-
-  m_isrInstalled = false;
-}
-
-void WheelEncoder::wheelISR(void *ctx)
-{
-  upm::WheelEncoder *This = (upm::WheelEncoder *)ctx;
-  This->m_counter++;
-}
-
diff --git a/src/wheelencoder/wheelencoder.hpp b/src/wheelencoder/wheelencoder.hpp
deleted file mode 100644
index 608e890..0000000
--- a/src/wheelencoder/wheelencoder.hpp
+++ /dev/null
@@ -1,132 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2015 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#pragma once
-
-#include <string>
-#include <stdint.h>
-#include <sys/time.h>
-#include <mraa/gpio.hpp>
-
-namespace upm {
-
-  /**
-   * @brief Wheel Encoder
-   * @defgroup wheelencoder libupm-wheelencoder
-   * @ingroup dfrobot gpio other
-   */
-
-  /**
-   * @library wheelencoder
-   * @sensor wheelencoder
-   * @comname Wheel Encoder
-   * @type other
-   * @man dfrobot
-   * @web http://www.dfrobot.com/index.php?route=product/product&product_id=98
-   * @con gpio
-
-   * @brief API for the DFRobot Wheel Encoder
-   *
-   * This sensor was developed for the DFRobot Wheel Encoder, though
-   * it could be used for any counting time-based task.
-   * 
-   * When you instantiate a class of this type, the gpio pin specified
-   * is connected to an interrupt.  Whenever a low to high transition
-   * occurs on the gpio pin, the internal counter is incremented by
-   * one.
-   *
-   * This class also includes a millisecond counter, so that you can
-   * correlate the number of counts to a time period for calculating
-   * an RPM or other value as needed.
-   *
-   * @image html wheelencoder.jpg
-   * @snippet wheelencoder.cxx Interesting
-   */
-  class WheelEncoder {
-  public:
-
-    /**
-     * DFRobot Wheel Encoder sensor constructor
-     *
-     * @param pin Digital pin to use
-     */
-    WheelEncoder(int pin);
-
-    /**
-     * WheelEncoder destructor
-     */
-    ~WheelEncoder();
-
-    /**
-     * Returns the number of milliseconds elapsed since initClock()
-     * was last called.
-     *
-     * @return Elapsed milliseconds
-     */
-    uint32_t getMillis();
-
-    /**
-     * Resets the clock
-     *
-     */
-    void initClock();
-
-    /**
-     * Resets the counter to 0. The counter should be
-     * stopped via stopCounter() prior to calling this function.
-     *
-     */
-    void clearCounter() { m_counter = 0; };
-
-    /**
-     * Starts the counter.  This function will also clear the current
-     * count and reset the clock.
-     *
-     */
-    void startCounter();
-
-    /**
-     * Stops the counter
-     *
-     */
-    void stopCounter();
-
-    /**
-     * Gets the current counter value
-     *
-     * @return counter value
-     */
-    uint32_t counter() { return m_counter; };
-
-  protected:
-    mraa::Gpio m_gpio;
-    static void wheelISR(void *ctx);
-
-  private:
-    volatile uint32_t m_counter;
-    struct timeval m_startTime;
-    bool m_isrInstalled;
-  };
-}
-
-
diff --git a/src/wheelencoder/wheelencoder.json b/src/wheelencoder/wheelencoder.json
deleted file mode 100644
index 6a887f1..0000000
--- a/src/wheelencoder/wheelencoder.json
+++ /dev/null
@@ -1,53 +0,0 @@
-{
-    "Library": "wheelencoder",
-    "Description": "FRobot Wheel Encoder Library",
-    "Sensor Class": {
-        "WheelEncoder": {
-            "Name": "API for the DFRobot Wheel Encoder",
-            "Description": "This is the UPM Module for the DFRobot Wheel Encoder. This sensor was developed for the DFRobot Wheel Encoder, though it could be used for any counting time-based task.  When you instantiate a class of this type, the gpio pin specified is connected to an interrupt.  Whenever a low to high transition occurs on the gpio pin, the internal counter is incremented by one. This class also includes a millisecond counter, so that you can correlate the number of counts to a time period for calculating an RPM or other value as needed.",
-            "Aliases": ["wheelencoder", "Gravity:TT Motor Encoders Kit"],
-            "Categories": ["other"],
-            "Connections": ["gpio"],
-            "Project Type": ["prototyping", "robotics"],
-            "Manufacturers": ["DFRobot"],
-            "Image": "wheelencoder.jpg",
-            "Examples": {
-                "Python": ["wheelencoder.py"],
-                "Node.js": ["wheelencoder.js"],
-                "C++": ["wheelencoder.cxx"]
-            },
-            "Specifications": {
-                "Vsource": {
-                    "unit": "V",
-                    "max": 5.0
-                },
-                "Supply Current": {
-                    "unit": "mA",
-                    "max" : 20
-                },
-                "Operating Temperature": {
-                    "unit": "°C",
-                    "min": -40,
-                    "max": 85
-                },
-                "Resolution": {
-                    "unit": "PPR",
-                    "resolution": 20
-                }
-            },
-            "Platforms": {
-                "Intel Edison": {
-                    "Notes": ["Might need the Gravity: IO Expansion Shield"]
-                },
-                "Arduino 101": {
-                    "Notes": ["Might need the Gravity: IO Expansion Shield"]
-                }
-            },
-            "Urls": {
-                "Product Pages": ["https://www.dfrobot.com/product-98.html"],
-                "Datasheets": ["https://www.dfrobot.com/wiki/index.php/Wheel_Encoders_for_DFRobot_3PA_and_4WD_Rovers_(SKU:SEN0038)"],
-                "Schematics": ["http://www.dfrobot.com/wiki/images/b/b9/FIT0029_Encoder_Schematics.png"]
-            }
-        }
-    }
-}
diff --git a/src/wt5001/CMakeLists.txt b/src/wt5001/CMakeLists.txt
deleted file mode 100644
index f7f74f3..0000000
--- a/src/wt5001/CMakeLists.txt
+++ /dev/null
@@ -1,5 +0,0 @@
-set (libname "wt5001")
-set (libdescription "Serial MP3 Module")
-set (module_src ${libname}.cxx)
-set (module_hpp ${libname}.hpp)
-upm_module_init(mraa)
diff --git a/src/wt5001/wt5001.cxx b/src/wt5001/wt5001.cxx
deleted file mode 100644
index 4e50a23..0000000
--- a/src/wt5001/wt5001.cxx
+++ /dev/null
@@ -1,632 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2014 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-#include <iostream>
-#include <sstream>
-#include <string>
-#include <stdexcept>
-
-#include "wt5001.hpp"
-
-using namespace upm;
-using namespace std;
-
-static const int defaultDelay = 100;     // max wait time for read
-
-WT5001::WT5001(int uart)
-{
-  m_ttyFd = -1;
-
-  if ( !(m_uart = mraa_uart_init(uart)) )
-    {
-      throw std::invalid_argument(std::string(__FUNCTION__) +
-                                  ": mraa_uart_init() failed");
-      return;
-    }
-
-  // This requires a recent MRAA (1/2015)
-  const char *devPath = mraa_uart_get_dev_path(m_uart);
-
-  if (!devPath)
-    {
-      throw std::runtime_error(std::string(__FUNCTION__) +
-                               ": mraa_uart_get_dev_path() failed");
-      return;
-    }
-
-  // now open the tty
-  if ( (m_ttyFd = open(devPath, O_RDWR)) == -1)
-    {
-      throw std::runtime_error(std::string(__FUNCTION__) +
-                               ": open of " + 
-                               string(devPath) + " failed: " +
-                               string(strerror(errno)));
-      return;
-    }
-}
-
-WT5001::~WT5001()
-{
-  if (m_ttyFd != -1)
-    close(m_ttyFd);
-
-  mraa_deinit();
-}
-
-bool WT5001::dataAvailable(unsigned int millis)
-{
-  if (m_ttyFd == -1)
-    return false;
-
-  struct timeval timeout;
-
-  // no waiting
-  timeout.tv_sec = 0;
-  timeout.tv_usec = millis * 1000;
-
-  fd_set readfds;
-
-  FD_ZERO(&readfds);
-
-  FD_SET(m_ttyFd, &readfds);
-  
-  if (select(m_ttyFd + 1, &readfds, NULL, NULL, &timeout) > 0)
-    return true;                // data is ready
-  else
-    return false;
-}
-
-int WT5001::readData(char *buffer, int len)
-{
-  if (m_ttyFd == -1)
-    return(-1);
-
-  if (!dataAvailable(defaultDelay))
-    return 0;               // timed out
-
-  int rv = read(m_ttyFd, buffer, len);
-
-  if (rv < 0)
-    {
-      throw std::runtime_error(std::string(__FUNCTION__) +
-                               ": read() failed: " +
-                               string(strerror(errno)));
-      return rv;
-    }
-
-  return rv;
-}
-
-int WT5001::writeData(char *buffer, int len)
-{
-  if (m_ttyFd == -1)
-    return(-1);
-
-  // first, flush any pending but unread input
-  tcflush(m_ttyFd, TCIFLUSH);
-
-  int rv = write(m_ttyFd, buffer, len);
-
-  if (rv < 0)
-    {
-      throw std::runtime_error(std::string(__FUNCTION__) +
-                               ": write() failed: " +
-                               string(strerror(errno)));
-      return rv;
-    }
-
-  tcdrain(m_ttyFd);
-
-  return rv;
-}
-
-bool WT5001::setupTty(speed_t baud)
-{
-  if (m_ttyFd == -1)
-    return(false);
-  
-  struct termios termio;
-
-  // get current modes
-  tcgetattr(m_ttyFd, &termio);
-
-  // setup for a 'raw' mode.  81N, no echo or special character
-  // handling, such as flow control.
-  cfmakeraw(&termio);
-
-  // set our baud rates
-  cfsetispeed(&termio, baud);
-  cfsetospeed(&termio, baud);
-
-  // make it so
-  if (tcsetattr(m_ttyFd, TCSAFLUSH, &termio) < 0)
-    {
-      throw std::runtime_error(std::string(__FUNCTION__) +
-                               ": tcsetattr() failed: " +
-                               string(strerror(errno)));
-      return false;
-    }
-
-  return true;
-}
-
-bool WT5001::checkResponse(WT5001_OPCODE_T opcode)
-{
-  char resp;
-  char fopcode = (char)opcode;
-
-  int rv = readData(&resp, 1);
-
-  // check for wrong response byte, or timeout
-  if ((resp != fopcode) || rv == 0 )
-    return false;
-
-  return true;
-}
-
-bool WT5001::play(WT5001_PLAYSOURCE_T psrc, uint16_t index)
-{
-  char pkt[6];
-  WT5001_OPCODE_T opcode = PLAY_SD;
-
-  pkt[0] = WT5001_START;
-  pkt[1] = 0x04;                // length
-
-  switch (psrc)                 // src
-    {
-    case SD:
-      opcode = PLAY_SD;
-      break;
-
-    case SPI:
-      opcode = PLAY_SPI;
-      break;
-
-    case UDISK:
-      opcode = PLAY_UDISK;
-      break;
-    }      
-
-  pkt[2] = opcode;
-  pkt[3] = (index >> 8) & 0xff; // index hi
-  pkt[4] = index & 0xff;        // index lo
-  pkt[5] = WT5001_END;
-
-  writeData(pkt, 6);
-
-  return checkResponse(opcode);
-}
-
-bool WT5001::stop()
-{
-  char pkt[4];
-  WT5001_OPCODE_T opcode = STOP;
-
-  pkt[0] = WT5001_START;
-  pkt[1] = 0x02;                // length
-  pkt[2] = opcode;
-  pkt[3] = WT5001_END;
-
-  writeData(pkt, 4);
-
-  return checkResponse(opcode);
-}
-
-bool WT5001::next()
-{
-  char pkt[4];
-  WT5001_OPCODE_T opcode = NEXT;
-
-  pkt[0] = WT5001_START;
-  pkt[1] = 0x02;                // length
-  pkt[2] = opcode;
-  pkt[3] = WT5001_END;
-
-  writeData(pkt, 4);
-
-  return checkResponse(opcode);
-}
-
-bool WT5001::previous()
-{
-  char pkt[4];
-  WT5001_OPCODE_T opcode = PREVIOUS;
-
-  pkt[0] = WT5001_START;
-  pkt[1] = 0x02;                // length
-  pkt[2] = opcode;
-  pkt[3] = WT5001_END;
-
-  writeData(pkt, 4);
-
-  return checkResponse(opcode);
-}
-
-bool WT5001::pause()
-{
-  char pkt[4];
-  WT5001_OPCODE_T opcode = PAUSE;
-
-  pkt[0] = WT5001_START;
-  pkt[1] = 0x02;                // length
-  pkt[2] = opcode;
-  pkt[3] = WT5001_END;
-
-  writeData(pkt, 4);
-
-  return checkResponse(opcode);
-}
-
-bool WT5001::setVolume(uint8_t vol)
-{
-  if (vol > WT5001_MAX_VOLUME)
-    {
-      // C++11 std::to_string() would be nice, but...
-      std::ostringstream str;
-      str << WT5001_MAX_VOLUME;
-
-      throw std::out_of_range(std::string(__FUNCTION__) +
-                              ": angle must be between 0 and " +
-                              str.str());
-      return false;
-    }
-  
-  char pkt[5];
-  WT5001_OPCODE_T opcode = SET_VOLUME;
-
-  pkt[0] = WT5001_START;
-  pkt[1] = 0x03;                // length
-  pkt[2] = opcode;
-  pkt[3] = vol;
-  pkt[4] = WT5001_END;
-
-  writeData(pkt, 5);
-
-  return checkResponse(opcode);
-}
-
-bool WT5001::queue(uint16_t index)
-{
-  char pkt[6];
-  WT5001_OPCODE_T opcode = QUEUE;
-
-  pkt[0] = WT5001_START;
-  pkt[1] = 0x04;                // length
-  pkt[2] = opcode;
-  pkt[3] = (index >> 8) & 0xff; // index hi
-  pkt[4] = index & 0xff;        // index lo
-  pkt[5] = WT5001_END;
-
-  writeData(pkt, 6);
-
-  return checkResponse(opcode);
-}
-
-bool WT5001::setPlayMode(WT5001_PLAYMODE_T pm)
-{
-  char pkt[5];
-  WT5001_OPCODE_T opcode = PLAY_MODE;
-
-  pkt[0] = WT5001_START;
-  pkt[1] = 0x03;                // length
-  pkt[2] = opcode;
-  pkt[3] = pm;
-  pkt[4] = WT5001_END;
-
-  writeData(pkt, 5);
-
-  return checkResponse(opcode);
-}
-
-bool WT5001::insert(uint16_t index)
-{
-  char pkt[6];
-  WT5001_OPCODE_T opcode = INSERT_SONG;
-
-  pkt[0] = WT5001_START;
-  pkt[1] = 0x04;                // length
-  pkt[2] = opcode;
-  pkt[3] = (index >> 8) & 0xff; // index hi
-  pkt[4] = index & 0xff;        // index lo
-  pkt[5] = WT5001_END;
-
-  writeData(pkt, 6);
-
-  return checkResponse(opcode);
-}
-
-bool WT5001::setDate(uint16_t year, uint8_t month, uint8_t day)
-{
-  char pkt[8];
-  WT5001_OPCODE_T opcode = SET_DATE;
-
-  pkt[0] = WT5001_START;
-  pkt[1] = 0x06;                // length
-  pkt[2] = opcode;
-  pkt[3] = (year >> 8) & 0xff;  // year hi
-  pkt[4] = year & 0xff;         // year lo
-  pkt[5] = month;               // month
-  pkt[6] = day;                 // day
-  pkt[7] = WT5001_END;
-
-  writeData(pkt, 8);
-
-  return checkResponse(opcode);
-}
-
-bool WT5001::setTime(uint8_t hour, uint8_t minute, uint8_t second)
-{
-  char pkt[7];
-  WT5001_OPCODE_T opcode = SET_TIME;
-
-  pkt[0] = WT5001_START;
-  pkt[1] = 0x05;                // length
-  pkt[2] = opcode;
-  pkt[3] = hour;                // hour
-  pkt[4] = minute;              // minute
-  pkt[5] = second;              // second
-  pkt[6] = WT5001_END;
-
-  writeData(pkt, 7);
-
-  return checkResponse(opcode);
-}
-
-bool WT5001::setAlarm(uint8_t hour, uint8_t minute, uint8_t second)
-{
-  char pkt[7];
-  WT5001_OPCODE_T opcode = SET_ALARM;
-
-  pkt[0] = WT5001_START;
-  pkt[1] = 0x05;                // length
-  pkt[2] = opcode;
-  pkt[3] = hour;                // hour
-  pkt[4] = minute;              // minute
-  pkt[5] = second;              // second
-  pkt[6] = WT5001_END;
-
-  writeData(pkt, 7);
-
-  return checkResponse(opcode);
-}
-
-bool WT5001::clearAlarm()
-{
-  char pkt[4];
-  WT5001_OPCODE_T opcode = CLEAR_ALARM;
-
-  pkt[0] = WT5001_START;
-  pkt[1] = 0x02;                // length
-  pkt[2] = opcode;
-  pkt[3] = WT5001_END;
-
-  writeData(pkt, 4);
-
-  return checkResponse(opcode);
-}
-
-bool WT5001::getVolume(uint8_t *vol)
-{
-  char pkt[4];
-  WT5001_OPCODE_T opcode = READ_VOLUME;
-
-  pkt[0] = WT5001_START;
-  pkt[1] = 0x02;                // length
-  pkt[2] = opcode;
-  pkt[3] = WT5001_END;
-
-  writeData(pkt, 4);
-
-  if (!checkResponse(opcode))
-    return false;
-
-  // there should be a byte waiting for us, the volume
-  int rv = readData((char *)vol, 1);
-  if (rv != 1)
-    return false;
-
-  return true;
-}
-
-uint8_t WT5001::getVolume()
-{
-  uint8_t vol = 0;
-  if (!getVolume(&vol))
-    throw std::runtime_error(std::string(__PRETTY_FUNCTION__) +
-                                ": readData() failed");
-  return vol;
-}
-
-bool WT5001::getPlayState(uint8_t *ps)
-{
-  char pkt[4];
-  WT5001_OPCODE_T opcode = READ_PLAY_STATE;
-
-  pkt[0] = WT5001_START;
-  pkt[1] = 0x02;                // length
-  pkt[2] = opcode;
-  pkt[3] = WT5001_END;
-
-  writeData(pkt, 4);
-
-  if (!checkResponse(opcode))
-    return false;
-
-  // there should be a byte waiting for us, the play state
-  int rv = readData((char *)ps, 1);
-  if (rv != 1)
-    return false;
-
-  return true;
-}
-
-uint8_t WT5001::getPlayState()
-{
-  uint8_t ps = 0;
-  if (!getPlayState(&ps))
-    throw std::runtime_error(std::string(__PRETTY_FUNCTION__) +
-                                ": readData() failed");
-  return ps;
-}
-
-bool WT5001::getNumFiles(WT5001_PLAYSOURCE_T psrc, uint16_t *numf)
-{
-  char pkt[4];
-  WT5001_OPCODE_T opcode = NONE;
-
-  pkt[0] = WT5001_START;
-  pkt[1] = 0x02;                // length
-
-  switch (psrc)                 // src
-    {
-    case SD:
-      opcode = READ_SD_NUMF;
-      break;
-
-    case SPI:
-      opcode = READ_SPI_NUMF;
-      break;
-
-    case UDISK:
-      opcode = READ_UDISK_NUMF;
-      break;
-    }      
-
-  pkt[2] = opcode;
-  pkt[3] = WT5001_END;
-
-  writeData(pkt, 4);
-
-  if (!checkResponse(opcode))
-    return false;
-
-  // read the two byte response, and encode them
-  char buf[2];
-  int rv = readData(buf, 2);
-  if (rv != 2)
-    return false;
-
-  *numf = (buf[0] << 8) | buf[1];
-
-  return true;
-}
-
-uint16_t WT5001::getNumFiles(WT5001_PLAYSOURCE_T psrc)
-{
-  uint16_t numf = 0;
-  if (!getNumFiles(psrc, &numf))
-    throw std::runtime_error(std::string(__PRETTY_FUNCTION__) +
-                                ": readData() failed");
-  return numf;
-}
-
-bool WT5001::getCurrentFile(uint16_t *curf)
-{
-  char pkt[4];
-  WT5001_OPCODE_T opcode = READ_CUR_FNAME;
-
-  pkt[0] = WT5001_START;
-  pkt[1] = 0x02;                // length
-  pkt[2] = opcode;
-  pkt[3] = WT5001_END;
-
-  writeData(pkt, 4);
-
-  if (!checkResponse(opcode))
-    return false;
-
-  // read the two byte response, and encode them
-  char buf[2];
-  int rv = readData(buf, 2);
-  if (rv != 2)
-    return false;
-
-  *curf = (buf[0] << 8) | (buf[1] & 0xff);
-
-  return true;
-}
-
-uint16_t WT5001::getCurrentFile()
-{
-  uint16_t curf = 0;
-  if (!getCurrentFile(&curf))
-    throw std::runtime_error(std::string(__PRETTY_FUNCTION__) +
-                                ": readData() failed");
-  return curf;
-}
-
-bool WT5001::getDate(uint16_t *year, uint8_t *month, uint8_t *day)
-{
-  char pkt[4];
-  WT5001_OPCODE_T opcode = READ_DATE;
-
-  pkt[0] = WT5001_START;
-  pkt[1] = 0x02;                // length
-  pkt[2] = opcode;
-  pkt[3] = WT5001_END;
-
-  writeData(pkt, 4);
-
-  if (!checkResponse(opcode))
-    return false;
-
-  // read the 4 byte response
-  char buf[4];
-  int rv = readData(buf, 4);
-  if (rv != 4)
-    return false;
-
-  *year = (buf[0] << 8) | (buf[1] & 0xff);
-  *month = buf[2];
-  *day = buf[3];
-  return true;
-}
-
-bool WT5001::getTime(uint8_t *hour, uint8_t *minute, uint8_t *second)
-{
-  char pkt[4];
-  WT5001_OPCODE_T opcode = READ_TIME;
-
-  pkt[0] = WT5001_START;
-  pkt[1] = 0x02;                // length
-  pkt[2] = opcode;
-  pkt[3] = WT5001_END;
-
-  writeData(pkt, 4);
-
-  if (!checkResponse(opcode))
-    return false;
-
-  // read the 3 byte response
-  char buf[3];
-  int rv = readData(buf, 3);
-  if (rv != 3)
-    return false;
-
-  *hour = buf[0];
-  *minute = buf[1];
-  *second = buf[2];
-  return true;
-}
-
diff --git a/src/wt5001/wt5001.hpp b/src/wt5001/wt5001.hpp
deleted file mode 100644
index 57820a6..0000000
--- a/src/wt5001/wt5001.hpp
+++ /dev/null
@@ -1,383 +0,0 @@
-/*
- * Author: Jon Trulson <jtrulson@ics.com>
- * Copyright (c) 2014 Intel Corporation.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-#pragma once
-
-#include <string>
-#include <iostream>
-
-#include <stdint.h>
-#include <stdlib.h>
-#include <unistd.h>
-#include <string.h>
-#include <fcntl.h>
-#include <errno.h>
-#include <termios.h>
-#include <sys/time.h>
-#include <sys/select.h>
-#include <sys/types.h>
-#include <sys/stat.h>
-
-#include <mraa/uart.h>
-
-const int WT5001_DEFAULT_UART = 0;
-const int WT5001_MAX_VOLUME = 31;
-
-// protocol start and end codes
-const uint8_t WT5001_START = 0x7e;
-const uint8_t WT5001_END   = 0x7e;
-
-namespace upm {
-    /**
-     * @brief WT5001 Serial MP3 Module
-     * @defgroup wt5001 libupm-wt5001
-     * @ingroup seeed uart sound
-     */
-    /**
-     * @library wt5001
-     * @sensor wt5001
-     * @comname Serial MP3 Module
-     * @altname Grove Serial MP3 Player
-     * @type sound
-     * @man seeed
-     * @web http://www.seeedstudio.com/wiki/Grove_%E2%80%93_Serial_MP3_Player
-     * @con uart
-     *
-     * @brief API for the WT5001 Serial MP3 Module
-     *
-     *   UPM support for the WT5001 Serial MP3 module. This was tested
-     *   specifically with the Grove Serial MP3 module.
-     *
-     * @image html wt5001.jpg
-     * @snippet wt5001.cxx Interesting
-     */
-  class WT5001 {
-  public:
-
-    // WT5001 opcodes
-    typedef enum { NONE             = 0x00,
-                   PLAY_SD          = 0xa0,
-                   PLAY_SPI         = 0xa1,
-                   PLAY_UDISK       = 0xa2,
-                   PAUSE            = 0xa3,
-                   STOP             = 0xa4,
-                   NEXT             = 0xa5,
-                   PREVIOUS         = 0xa6,
-                   SET_VOLUME       = 0xa7,
-                   QUEUE            = 0xa8,
-                   PLAY_MODE        = 0xa9,
-                   COPY_SD2FLASH    = 0xaa, // not implemented
-                   COPY_UDISK2FLASH = 0xab, // not implemented
-                   INSERT_SONG      = 0xac,
-                   SET_DATE         = 0xb1,
-                   SET_TIME         = 0xb2,
-                   SET_ALARM        = 0xb3,
-                   SET_ALARM_DUR    = 0xb4, // not implemented
-                   CLEAR_ALARM      = 0xb5,
-                   CLEAR_ALARM_DUR  = 0xb6, // not implemented
-                   READ_VOLUME      = 0xc1,
-                   READ_PLAY_STATE  = 0xc2,
-                   READ_SPI_NUMF    = 0xc3,
-                   READ_SD_NUMF     = 0xc4,
-                   READ_UDISK_NUMF  = 0xc5,
-                   READ_CUR_FNAME   = 0xc6,
-                   READ_CF_CHAR     = 0xc7, // not implemented
-                   READ_DATE        = 0xd1,
-                   READ_TIME        = 0xd2
-    } WT5001_OPCODE_T;
-
-    // play modes
-    typedef enum { NORMAL           = 0x00,
-                   SINGLE_REPEAT    = 0x01,
-                   ALL_REPEAT       = 0x02,
-                   RANDOM           = 0x03
-    } WT5001_PLAYMODE_T;
-
-    // music source
-    typedef enum { SD,
-                   SPI,
-                   UDISK
-    } WT5001_PLAYSOURCE_T;
-
-    /**
-     * WT5001 constructor
-     *
-     * @param uart Default UART to use (0 or 1)
-     */
-    WT5001(int uart);
-
-    /**
-     * WT5001 destructor
-     */
-    ~WT5001();
-
-    /**
-     * Checks to see if there is data available for reading
-     *
-     * @param millis Number of milliseconds to wait; 0 means no waiting
-     * @return True if there is data available for reading
-     */
-    bool dataAvailable(unsigned int millis);
-
-    /**
-     * Reads any available data in a user-supplied buffer. Note: the
-     * call blocks until data is available to be read. Use
-     * dataAvailable() to determine whether there is data available
-     * beforehand, to avoid blocking.
-     *
-     * @param buffer Buffer to hold the data read
-     * @param len Length of the buffer
-     * @return Number of bytes read
-     */
-    int readData(char *buffer, int len);
-
-    /**
-     * Writes the data in the buffer to the device
-     *
-     * @param buffer Buffer to hold the data read
-     * @param len Length of the buffer
-     * @return Number of bytes written
-     */
-    int writeData(char *buffer, int len);
-
-    /**
-     * Sets up proper tty I/O modes and the baud rate. The default
-     * baud rate is 9,600 (B9600).
-     *
-     * @param baud Desired baud rate.
-     * @return True if successful
-     */
-    bool setupTty(speed_t baud=B9600);
-
-    /**
-     * Gets a command response and returns its validity
-     *
-     * @param opcode Opcode to verify
-     * @return True if successful
-     */
-    bool checkResponse(WT5001_OPCODE_T opcode);
-
-    /**
-     * Plays a file from a source
-     *
-     * @param psrc Play source (SD, UDISK, SPI)
-     * @param index File number to play
-     * @return True if successful
-     */
-    bool play(WT5001_PLAYSOURCE_T psrc, uint16_t index);
-
-    /**
-     * Stops playing
-     *
-     * @return True if successful
-     */
-    bool stop();
-
-    /**
-     * Pauses the playback or resumes it if already paused
-     *
-     * @return True if successful
-     */
-    bool pause();
-
-    /**
-     * Moves to the next track
-     *
-     * @return True if successful
-     */
-    bool next();
-
-    /**
-     * Moves to the previous track
-     *
-     * @return True if successful
-     */
-    bool previous();
-
-    /**
-     * Sets the volume. Valid range is 0-31. 0 means mute.
-     *
-     * @return True if successful
-     */
-    bool setVolume(uint8_t vol);
-
-    /**
-     * Queues a track to play next, when the current song is finished
-     *
-     * @param index File number to queue
-     * @return True if successful
-     */
-    bool queue(uint16_t index);
-
-    /**
-     * Sets the playback mode
-     *
-     * @param pm Play mode to enable
-     * @return True if successful
-     */
-    bool setPlayMode(WT5001_PLAYMODE_T pm);
-
-    /**
-     * Inserts a track to play immediately, interrupting the current
-     * track. When the inserted track is finished, the
-     * interrupted track resumes where it was interrupted.
-     *
-     * @param index File number to insert
-     * @return True if successful
-     */
-    bool insert(uint16_t index);
-
-    /**
-     * Sets the date of the internal clock
-     *
-     * @param year 4-digit year
-     * @param month Month
-     * @param day Day
-     * @return True if successful
-     */
-    bool setDate(uint16_t year, uint8_t month, uint8_t day);
-
-    /**
-     * Sets the time of the internal clock
-     *
-     * @param hour Hour
-     * @param minute Minute
-     * @param second Second
-     * @return True if successful
-     */
-    bool setTime(uint8_t hour, uint8_t minute, uint8_t second);
-
-    /**
-     * Sets the alarm
-     *
-     * @param hour Hour
-     * @param minute Minute
-     * @param second Second
-     * @return True if successful
-     */
-    bool setAlarm(uint8_t hour, uint8_t minute, uint8_t second);
-
-    /**
-     * Clears any alarm that has been set
-     *
-     * @return True if successful
-     */
-    bool clearAlarm();
-
-    /**
-     * Gets the current volume
-     *
-     * @param vol Volume
-     * @return True if successful
-     */
-    bool getVolume(uint8_t *vol);
-
-    /**
-     * Gets the current volume
-     *
-     * @return Volume
-     * @throws std::runtime_error if reading from the sensor failed
-     */
-    uint8_t getVolume();
-
-    /**
-     * Gets the current play state: 1 = playing, 2 = stopped, 3 = paused
-     *
-     * @param ps Play state
-     * @return True if successful
-     */
-    bool getPlayState(uint8_t *ps);
-
-    /**
-     * Gets the current play state: 1 = playing, 2 = stopped, 3 = paused
-     *
-     * @return Play state
-     * @throws std::runtime_error if reading from the sensor failed
-     */
-    uint8_t getPlayState();
-
-    /**
-     * Gets the number of files present on the source device
-     *
-     * @param psrc Storage source
-     * @param numf Number of files
-     * @return True if successful
-     */
-    bool getNumFiles(WT5001_PLAYSOURCE_T psrc, uint16_t *numf);
-
-    /**
-     * Gets the number of files present on the source device
-     *
-     * @param psrc Storage source
-     * @return Number of files
-     * @throws std::runtime_error if reading from the sensor failed
-     */
-    uint16_t getNumFiles(WT5001_PLAYSOURCE_T psrc);
-
-    /**
-     * Gets the index of the current file
-     *
-     * @param curf Index of the current file
-     * @return True if successful
-     */
-    bool getCurrentFile(uint16_t *curf);
-
-    /**
-     * Gets the index of the current file
-     *
-     * @return Index of the curretn file
-     * @throws std::runtime_error if reading from the sensor failed
-     */
-    uint16_t getCurrentFile();
-
-    /**
-     * Gets the device date
-     *
-     * @param year 4-digit year
-     * @param month Month
-     * @param day Day
-     * @return True if successful
-     */
-    bool getDate(uint16_t *year, uint8_t *month, uint8_t *day);
-
-    /**
-     * Gets the device time
-     *
-     * @param hour Hour
-     * @param minute Minute
-     * @param second Second
-     * @return True if successful
-     */
-    bool getTime(uint8_t *hour, uint8_t *minute, uint8_t *second);
-
-
-  protected:
-    int ttyFd() { return m_ttyFd; };
-
-  private:
-    mraa_uart_context m_uart;
-    int m_ttyFd;
-  };
-}
-
-
diff --git a/src/wt5001/wt5001.i b/src/wt5001/wt5001.i
deleted file mode 100644
index 55e074c..0000000
--- a/src/wt5001/wt5001.i
+++ /dev/null
@@ -1,58 +0,0 @@
-%include "../common_top.i"
-
-/* BEGIN Java syntax  ------------------------------------------------------- */
-#ifdef SWIGJAVA
-%include "../java_buffer.i"
-%include "../java_exceptions.i"
-
-%apply uint8_t *OUTPUT { uint8_t *vol };
-%apply uint8_t *OUTPUT { uint8_t *ps };
-%apply uint16_t *OUTPUT { uint16_t *numf };
-%apply uint16_t *OUTPUT { uint16_t *curf };
-%apply uint16_t *OUTPUT { uint16_t *year };
-%apply uint8_t *OUTPUT { uint8_t *month, uint8_t *day };
-%apply uint8_t *OUTPUT { uint8_t *hour, uint8_t *minute, uint8_t *second };
-
-%ignore getVolume(uint8_t *vol);
-READDATA_EXCEPTION(getVolume())
-
-%ignore getPlayState(uint8_t *ps);
-READDATA_EXCEPTION(getPlayState())
-
-%ignore getNumFiles(WT5001_PLAYSOURCE_T psrc, uint16_t *numf);
-READDATA_EXCEPTION(getNumFiles(WT5001_PLAYSOURCE_T psrc))
-
-%ignore getCurrentFile(uint16_t *curf);
-READDATA_EXCEPTION(getCurrentFile())
-
-JAVA_JNI_LOADLIBRARY(javaupm_wt5001)
-#endif
-/* END Java syntax */
-
-/* BEGIN Javascript syntax  ------------------------------------------------- */
-#ifdef SWIGJAVASCRIPT
-%include "../carrays_uint8_t.i"
-%include "../carrays_uint16_t.i"
-#endif
-/* END Javascript syntax */
-
-/* BEGIN Python syntax  ----------------------------------------------------- */
-#ifdef SWIGPYTHON
-%rename("getVolumeNoParam")  getVolume();
-%rename("getPlayStateNoParam") getPlayState();
-%rename("getNumFilesOneParam")  getNumFiles(WT5001_PLAYSOURCE_T psrc);
-%rename("getCurrentFileNoParam") getCurrentFile();
-#endif
-/* END Python syntax */
-
-/* BEGIN Common SWIG syntax ------------------------------------------------- */
-%include "../carrays_uint8_t.i"
-%include "../carrays_uint16_t.i"
-
-%{
-#include "wt5001.hpp"
-speed_t int_B9600 = B9600;
-%}
-%include "wt5001.hpp"
-speed_t int_B9600 = B9600;
-/* END Common SWIG syntax */
diff --git a/src/wt5001/wt5001.json b/src/wt5001/wt5001.json
deleted file mode 100644
index 9e074d7..0000000
--- a/src/wt5001/wt5001.json
+++ /dev/null
@@ -1,51 +0,0 @@
-{
-    "Library": "wt5001",
-    "Description": "WT5001 Serial MP3 module Library",
-    "Sensor Class": {
-        "WT5001": {
-            "Name": "API for the WT5001 Serial MP3 Module",
-            "Description": "This is the UPM Module for the WT5001 Serial MP3 Module. Grove-Serial MP3 Player is a kind of simple MP3 player device whose design is based on a high-quality MP3 audio chip---WT5001. It can support 8KHZ~44.1KHZ sampling frequency MP3 and WAV file formats. This product has several peripheral ports: a standard UART Grove interface, a dual track headphone jack, an external interface and also a  micro SD card interface. You can control the MP3 playback state by sending commands to module via serial port tools, such as switch songs, change the volume and play mode and so on. It seems a simple module, but it owns such strong function. Want to know how the sound quality? Please come to experience it! NOTE: This product is retired, please consider the Grove - MP3 v2.0 as your alternative choice. This UPM module has not been tested with V2.0.",
-            "Aliases": ["wt5001", "Grove - Serial MP3 Player"],
-            "Categories": ["sound"],
-            "Connections": ["uart"],
-            "Project Type": ["prototyping"],
-            "Manufacturers": ["Seeed"],
-            "Image": "wt5001.jpg",
-            "Examples": {
-                "Java": ["WT5001_Example.java"],
-                "Python": ["wt5001.py"],
-                "Node.js": ["wt5001.js"],
-                "C++": ["wt5001.cxx"]
-            },
-            "Specifications": {
-                "Vsource": {
-                    "unit": "V",
-                    "min": 3.3,
-                    "max": 5.2
-                },
-                "Supply Current": {
-                    "unit": "mA",
-                    "min" : 37.6,
-                    "max" : 52.0
-                },
-                "Operating Temperature": {
-                    "unit": "°C",
-                    "min": -40,
-                    "max": 85
-                }
-            },
-            "Platforms": {
-                "Intel Edison": {
-                    "Notes": ["Might need Grove base shield"]
-                },
-                "Arduino 101": {
-                    "Notes": ["Might need Grove base shield"]
-                }
-            },
-            "Urls": {
-                "Product Pages": ["https://www.seeedstudio.com/grove-serial-mp3-player-p-1542.html", "http://wiki.seeedstudio.com/wiki/Grove_%E2%80%93_Serial_MP3_Player"],
-                "Datasheets": ["http://wiki.seeedstudio.com/images/2/26/WT5001_datasheet_V1.5.pdf"]
-            }
-        }
-    }
-}
-- 
2.7.4

